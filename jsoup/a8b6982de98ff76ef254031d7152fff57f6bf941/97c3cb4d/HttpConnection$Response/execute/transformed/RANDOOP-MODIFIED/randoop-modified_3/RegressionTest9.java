import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test04501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04501");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern9 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern12 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern13 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern13;
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer17 = byteBuffer16.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream18 = pattern13.splitAsStream((java.lang.CharSequence) charBuffer17);
        java.util.regex.Matcher matcher19 = pattern12.matcher((java.lang.CharSequence) charBuffer17);
        java.util.regex.Matcher matcher20 = null; // flaky: pattern9.matcher((java.lang.CharSequence) charBuffer17);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer23 = byteBuffer22.asCharBuffer();
        java.util.regex.Matcher matcher24 = null; // flaky: pattern9.matcher((java.lang.CharSequence) charBuffer23);
        int int25 = charBuffer23.limit();
        java.util.regex.Matcher matcher26 = pattern2.matcher((java.lang.CharSequence) charBuffer23);
        java.lang.String str27 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray5);
// flaky:         org.junit.Assert.assertNotNull(pattern9);
// flaky:         org.junit.Assert.assertEquals(pattern9.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern12);
        org.junit.Assert.assertEquals(pattern12.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern13);
        org.junit.Assert.assertEquals(pattern13.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(matcher19);
        org.junit.Assert.assertEquals(matcher19.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher20);
// flaky:         org.junit.Assert.assertEquals(matcher20.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(charBuffer23);
// flaky:         org.junit.Assert.assertNotNull(matcher24);
// flaky:         org.junit.Assert.assertEquals(matcher24.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNotNull(matcher26);
        org.junit.Assert.assertEquals(matcher26.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,50 lastmatch=]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\\Qhi!\\E" + "'", str27, "\\Qhi!\\E");
    }

    @Test
    public void test04502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04502");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern5 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern8 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern9 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern9;
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer13 = byteBuffer12.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream14 = pattern9.splitAsStream((java.lang.CharSequence) charBuffer13);
        java.util.regex.Matcher matcher15 = pattern8.matcher((java.lang.CharSequence) charBuffer13);
        java.util.regex.Matcher matcher16 = null; // flaky: pattern5.matcher((java.lang.CharSequence) charBuffer13);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer19 = byteBuffer18.asCharBuffer();
        java.util.regex.Matcher matcher20 = null; // flaky: pattern5.matcher((java.lang.CharSequence) charBuffer19);
        java.lang.String[] strArray22 = pattern2.split((java.lang.CharSequence) charBuffer19, 8);
        java.util.regex.Pattern pattern25 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern26 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern26;
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer30 = byteBuffer29.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream31 = pattern26.splitAsStream((java.lang.CharSequence) charBuffer30);
        java.util.regex.Matcher matcher32 = pattern25.matcher((java.lang.CharSequence) charBuffer30);
        java.lang.String[] strArray34 = pattern2.split((java.lang.CharSequence) charBuffer30, (-6));
        java.util.regex.Pattern pattern37 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.FloatBuffer floatBuffer49 = byteBuffer44.asFloatBuffer();
        java.nio.CharBuffer charBuffer50 = byteBuffer44.asCharBuffer();
        boolean boolean51 = java.util.regex.Pattern.matches("", (java.lang.CharSequence) charBuffer50);
        java.lang.String[] strArray52 = null; // flaky: pattern37.split((java.lang.CharSequence) charBuffer50);
        java.util.stream.Stream<java.lang.String> strStream53 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer50);
        java.util.stream.Stream<java.lang.String> strStream55 = pattern2.splitAsStream((java.lang.CharSequence) "\\Q\\E");
        java.util.function.Predicate<java.lang.String> strPredicate56 = pattern2.asPredicate();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern5);
// flaky:         org.junit.Assert.assertEquals(pattern5.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern8);
        org.junit.Assert.assertEquals(pattern8.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern9);
        org.junit.Assert.assertEquals(pattern9.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(matcher15);
        org.junit.Assert.assertEquals(matcher15.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher16);
// flaky:         org.junit.Assert.assertEquals(matcher16.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(charBuffer19);
// flaky:         org.junit.Assert.assertNotNull(matcher20);
// flaky:         org.junit.Assert.assertEquals(matcher20.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(pattern25);
        org.junit.Assert.assertEquals(pattern25.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern26);
        org.junit.Assert.assertEquals(pattern26.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(matcher32);
        org.junit.Assert.assertEquals(matcher32.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray34);
// flaky:         org.junit.Assert.assertNotNull(pattern37);
// flaky:         org.junit.Assert.assertEquals(pattern37.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(floatBuffer49);
        org.junit.Assert.assertNotNull(charBuffer50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertNotNull(strPredicate56);
    }

    @Test
    public void test04503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04503");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.IntBuffer intBuffer7 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer9.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response20 = null;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.lang.String str23 = response21.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = response21.cookies();
        org.jsoup.Connection.Response response26 = response21.removeCookie("hi!");
        java.lang.String str27 = response21.statusMessage();
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        boolean boolean38 = byteBuffer33.hasArray();
        response21.byteData = byteBuffer33;
        int int40 = byteBuffer19.compareTo(byteBuffer33);
        int int41 = byteBuffer5.compareTo(byteBuffer33);
        java.nio.Buffer buffer42 = byteBuffer33.rewind();
        boolean boolean43 = byteBuffer33.isDirect();
        java.nio.DoubleBuffer doubleBuffer44 = byteBuffer33.asDoubleBuffer();
        boolean boolean45 = byteBuffer33.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(response26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-10) + "'", int40 == (-10));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(buffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test04504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04504");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.slice();
        java.nio.Buffer buffer14 = byteBuffer13.flip();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = byteBuffer13.getDouble();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer14);
    }

    @Test
    public void test04505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04505");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ShortBuffer shortBuffer30 = byteBuffer3.asShortBuffer();
        boolean boolean31 = byteBuffer3.isDirect();
        java.nio.LongBuffer longBuffer32 = byteBuffer3.asLongBuffer();
        java.lang.String str33 = byteBuffer3.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(shortBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(longBuffer32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
    }

    @Test
    public void test04506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04506");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        double double16 = byteBuffer9.getDouble(0);
        boolean boolean17 = byteBuffer9.isDirect();
        java.nio.Buffer buffer18 = byteBuffer9.flip();
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer24.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer24.putChar(' ');
        java.nio.CharBuffer charBuffer30 = byteBuffer29.asCharBuffer();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.compact();
        int int32 = byteBuffer9.compareTo(byteBuffer31);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer9.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.57E-322d + "'", double16 == 2.57E-322d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(byteBuffer33);
    }

    @Test
    public void test04507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04507");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.asReadOnlyBuffer();
        java.nio.Buffer buffer48 = byteBuffer47.flip();
        boolean boolean49 = byteBuffer47.hasArray();
        java.nio.ByteBuffer byteBuffer50 = byteBuffer47.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer52 = byteBuffer47.putLong((long) 25);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(buffer48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteBuffer50);
    }

    @Test
    public void test04508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04508");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket6 = socketFactory0.createSocket(inetAddress4, 63);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04509");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer1.compact();
        boolean boolean13 = byteBuffer12.isReadOnly();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.slice();
        byte byte15 = byteBuffer12.get();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer12.putShort(28, (short) (byte) 1);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer18.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer20 = byteBuffer18.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 0 + "'", byte15 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(doubleBuffer20);
    }

    @Test
    public void test04510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04510");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.statusCode = 64;
        boolean boolean14 = response1.executed;
        boolean boolean17 = response1.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=84 lim=100 cap=100]", "\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E");
        response1.contentType = "java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]";
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = response1.body();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04511");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        long long25 = byteBuffer24.getLong();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.duplicate();
        boolean boolean27 = byteBuffer26.hasArray();
        char char28 = byteBuffer26.getChar();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray29 = byteBuffer26.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
    }

    @Test
    public void test04512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04512");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer34 = byteBuffer11.compact();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.put((byte) 1);
        int int37 = byteBuffer34.remaining();
        int int38 = byteBuffer34.capacity();
        java.nio.ByteBuffer byteBuffer39 = byteBuffer34.duplicate();
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer41.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.putInt(0);
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.put(byteArray48);
        java.nio.ByteOrder byteOrder50 = byteBuffer49.order();
        java.nio.IntBuffer intBuffer51 = byteBuffer49.asIntBuffer();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putLong((long) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer61.compact();
        java.nio.ByteBuffer byteBuffer64 = byteBuffer61.put((byte) 10);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer61.putInt(22);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer61.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long71 = byteBuffer70.getLong();
        int int72 = byteBuffer70.position();
        float float74 = byteBuffer70.getFloat((int) (short) 10);
        boolean boolean75 = byteBuffer70.hasArray();
        java.nio.DoubleBuffer doubleBuffer76 = byteBuffer70.asDoubleBuffer();
        java.nio.Buffer buffer77 = byteBuffer70.clear();
        java.nio.ByteOrder byteOrder78 = byteBuffer70.order();
        java.nio.ByteBuffer byteBuffer79 = byteBuffer61.order(byteOrder78);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer53.order(byteOrder78);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer80.putDouble(27, 5.43230922487E-312d);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer80.putChar(84, ' ');
        int int87 = byteBuffer39.compareTo(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteOrder50);
        org.junit.Assert.assertNotNull(intBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 8 + "'", int72 == 8);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleBuffer76);
        org.junit.Assert.assertNotNull(buffer77);
        org.junit.Assert.assertNotNull(byteOrder78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test04513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04513");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]", 84);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        int int4 = pattern2.flags();
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern7;
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.CharBuffer charBuffer20 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream21 = null; // flaky: pattern7.splitAsStream((java.lang.CharSequence) charBuffer20);
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.put(byteArray30);
        java.nio.FloatBuffer floatBuffer32 = byteBuffer27.asFloatBuffer();
        java.nio.CharBuffer charBuffer33 = byteBuffer27.asCharBuffer();
        java.lang.String[] strArray35 = null; // flaky: pattern7.split((java.lang.CharSequence) charBuffer33, (-65536));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern7;
        int int37 = 0; // flaky: pattern7.flags();
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.ByteOrder byteOrder48 = byteBuffer47.order();
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.duplicate();
        java.nio.ByteBuffer byteBuffer52 = byteBuffer49.putDouble(8, (double) 256);
        java.nio.CharBuffer charBuffer53 = byteBuffer49.asCharBuffer();
        boolean boolean54 = byteBuffer49.isReadOnly();
        java.nio.ByteBuffer byteBuffer55 = byteBuffer49.compact();
        java.nio.CharBuffer charBuffer56 = byteBuffer55.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream57 = null; // flaky: pattern7.splitAsStream((java.lang.CharSequence) charBuffer56);
        java.util.regex.Matcher matcher58 = pattern2.matcher((java.lang.CharSequence) charBuffer56);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 84 + "'", int4 == 84);
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(charBuffer20);
// flaky:         org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(floatBuffer32);
        org.junit.Assert.assertNotNull(charBuffer33);
// flaky:         org.junit.Assert.assertNotNull(strArray35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-24) + "'", int37 == (-24));
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteOrder48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(charBuffer53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(charBuffer56);
// flaky:         org.junit.Assert.assertNotNull(strStream57);
        org.junit.Assert.assertNotNull(matcher58);
        org.junit.Assert.assertEquals(matcher58.toString(), "java.util.regex.Matcher[pattern=java.nio.HeapByteBuffer[pos=0 lim=52 cap=52] region=0,7 lastmatch=]");
    }

    @Test
    public void test04514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04514");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        int int3 = 0; // flaky: pattern0.flags();
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern10 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = null; // flaky: pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher17 = pattern10.matcher((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher18 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer15);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer21 = byteBuffer20.asCharBuffer();
        java.util.regex.Matcher matcher22 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer21);
        boolean boolean23 = java.util.regex.Pattern.matches("\\QLocation\\E", (java.lang.CharSequence) charBuffer21);
        java.lang.String[] strArray25 = null; // flaky: pattern0.split((java.lang.CharSequence) "\\QLocation\\E", 0);
        java.util.regex.Pattern pattern28 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern29 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern29;
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer33 = byteBuffer32.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream34 = null; // flaky: pattern29.splitAsStream((java.lang.CharSequence) charBuffer33);
        java.util.regex.Matcher matcher35 = pattern28.matcher((java.lang.CharSequence) charBuffer33);
        int int36 = pattern28.flags();
        java.util.regex.Pattern pattern39 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern42 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern45 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern46 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern46;
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer50 = byteBuffer49.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream51 = null; // flaky: pattern46.splitAsStream((java.lang.CharSequence) charBuffer50);
        java.util.regex.Matcher matcher52 = pattern45.matcher((java.lang.CharSequence) charBuffer50);
        java.util.regex.Matcher matcher53 = null; // flaky: pattern42.matcher((java.lang.CharSequence) charBuffer50);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer56 = byteBuffer55.asCharBuffer();
        java.util.regex.Matcher matcher57 = null; // flaky: pattern42.matcher((java.lang.CharSequence) charBuffer56);
        java.lang.String[] strArray59 = pattern39.split((java.lang.CharSequence) charBuffer56, 8);
        java.util.regex.Pattern pattern62 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern63 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern63;
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer67 = byteBuffer66.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream68 = null; // flaky: pattern63.splitAsStream((java.lang.CharSequence) charBuffer67);
        java.util.regex.Matcher matcher69 = pattern62.matcher((java.lang.CharSequence) charBuffer67);
        java.lang.String[] strArray71 = pattern39.split((java.lang.CharSequence) charBuffer67, (-6));
        java.util.stream.Stream<java.lang.String> strStream72 = pattern28.splitAsStream((java.lang.CharSequence) charBuffer67);
        java.util.regex.Matcher matcher74 = pattern28.matcher((java.lang.CharSequence) "\\Q\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E\\\\E\\Q\\E");
        java.util.regex.Pattern pattern77 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern77;
        java.util.regex.Pattern pattern81 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer83 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer83.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer87 = byteBuffer83.putInt(0);
        byte[] byteArray90 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer91 = byteBuffer87.put(byteArray90);
        java.nio.FloatBuffer floatBuffer92 = byteBuffer87.asFloatBuffer();
        java.nio.CharBuffer charBuffer93 = byteBuffer87.asCharBuffer();
        java.lang.String[] strArray95 = pattern81.split((java.lang.CharSequence) charBuffer93, (-10));
        java.util.stream.Stream<java.lang.String> strStream96 = pattern77.splitAsStream((java.lang.CharSequence) charBuffer93);
        java.lang.String[] strArray98 = pattern28.split((java.lang.CharSequence) charBuffer93, 86);
        java.util.regex.Matcher matcher99 = null; // flaky: pattern0.matcher((java.lang.CharSequence) charBuffer93);
// flaky:         org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-24) + "'", int3 == (-24));
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern10);
        org.junit.Assert.assertEquals(pattern10.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern11);
// flaky:         org.junit.Assert.assertEquals(pattern11.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
// flaky:         org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(matcher17);
        org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher18);
// flaky:         org.junit.Assert.assertEquals(matcher18.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
// flaky:         org.junit.Assert.assertNotNull(matcher22);
// flaky:         org.junit.Assert.assertEquals(matcher22.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(pattern28);
        org.junit.Assert.assertEquals(pattern28.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern29);
// flaky:         org.junit.Assert.assertEquals(pattern29.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(charBuffer33);
// flaky:         org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertNotNull(matcher35);
        org.junit.Assert.assertEquals(matcher35.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(pattern39);
        org.junit.Assert.assertEquals(pattern39.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern42);
// flaky:         org.junit.Assert.assertEquals(pattern42.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern45);
        org.junit.Assert.assertEquals(pattern45.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern46);
// flaky:         org.junit.Assert.assertEquals(pattern46.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(charBuffer50);
// flaky:         org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertNotNull(matcher52);
        org.junit.Assert.assertEquals(matcher52.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher53);
// flaky:         org.junit.Assert.assertEquals(matcher53.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(charBuffer56);
// flaky:         org.junit.Assert.assertNotNull(matcher57);
// flaky:         org.junit.Assert.assertEquals(matcher57.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(pattern62);
        org.junit.Assert.assertEquals(pattern62.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern63);
// flaky:         org.junit.Assert.assertEquals(pattern63.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(charBuffer67);
// flaky:         org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertNotNull(matcher69);
        org.junit.Assert.assertEquals(matcher69.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strStream72);
        org.junit.Assert.assertNotNull(matcher74);
        org.junit.Assert.assertEquals(matcher74.toString(), "java.util.regex.Matcher[pattern=hi! region=0,62 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern77);
        org.junit.Assert.assertEquals(pattern77.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(pattern81);
        org.junit.Assert.assertEquals(pattern81.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(floatBuffer92);
        org.junit.Assert.assertNotNull(charBuffer93);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(strStream96);
        org.junit.Assert.assertNotNull(strArray98);
// flaky:         org.junit.Assert.assertNotNull(matcher99);
// flaky:         org.junit.Assert.assertEquals(matcher99.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,43 lastmatch=]");
    }

    @Test
    public void test04515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04515");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(64);
        boolean boolean2 = byteBuffer1.isReadOnly();
        java.nio.Buffer buffer3 = byteBuffer1.mark();
        java.nio.ByteOrder byteOrder4 = byteBuffer1.order();
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer6.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer6.putInt(0);
        byte[] byteArray13 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.put(byteArray13);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer10.get(byteArray23, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer33.get(byteArray46, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer27.put(byteArray46);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer1.put(byteArray46);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer52.putChar(50, '\u4120');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer58 = byteBuffer52.putFloat((int) '\u3ff0', (float) 10995116277760L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
    }

    @Test
    public void test04516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04516");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        java.lang.String str81 = response1.contentType();
        response1.charset = "hi!";
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry85 = response1.scanHeaders("\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E");
        java.lang.String str86 = response1.statusMessage();
        java.lang.String str87 = response1.statusMessage();
        java.net.URL uRL88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response89 = response1.url(uRL88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(strEntry85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test04517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04517");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        float float11 = byteBuffer10.getFloat();
        java.nio.DoubleBuffer doubleBuffer12 = byteBuffer10.asDoubleBuffer();
        boolean boolean13 = byteBuffer10.hasArray();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer10.putLong((int) ' ', (long) 19);
        java.nio.LongBuffer longBuffer17 = byteBuffer16.asLongBuffer();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer16.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = java.nio.ByteBuffer.wrap(byteArray70);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(doubleBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(longBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
    }

    @Test
    public void test04518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04518");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.Buffer buffer47 = byteBuffer22.flip();
        java.nio.ByteBuffer byteBuffer50 = byteBuffer22.putFloat(4, (float) (short) 1);
        java.nio.Buffer buffer51 = byteBuffer50.rewind();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer50.putDouble((double) 20);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer56 = byteBuffer53.putShort(26, (short) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(buffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(buffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
    }

    @Test
    public void test04519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04519");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer6.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer6.putInt(0);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer12.compact();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer12.put((byte) 10);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer12.putInt(22);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer12.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long22 = byteBuffer21.getLong();
        int int23 = byteBuffer21.position();
        float float25 = byteBuffer21.getFloat((int) (short) 10);
        boolean boolean26 = byteBuffer21.hasArray();
        java.nio.DoubleBuffer doubleBuffer27 = byteBuffer21.asDoubleBuffer();
        java.nio.Buffer buffer28 = byteBuffer21.clear();
        java.nio.ByteOrder byteOrder29 = byteBuffer21.order();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer12.order(byteOrder29);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer4.order(byteOrder29);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = byteBuffer31.getDouble(58);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleBuffer27);
        org.junit.Assert.assertNotNull(buffer28);
        org.junit.Assert.assertNotNull(byteOrder29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer31);
    }

    @Test
    public void test04520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04520");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.FloatBuffer floatBuffer2 = byteBuffer1.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.put((byte) 66);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer4.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
    }

    @Test
    public void test04521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04521");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=84 lim=100 cap=100]\\E", (int) (byte) 64);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qjava.nio.DirectByteBuffer[pos=84 lim=100 cap=100]\\E");
    }

    @Test
    public void test04522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04522");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        int int13 = byteBuffer1.capacity();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer19.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer19.putChar('a');
        double double26 = byteBuffer24.getDouble(12);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer38.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.putInt(0);
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.put(byteArray45);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer32.get(byteArray45, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer24.put(byteArray45);
        java.nio.ByteBuffer byteBuffer51 = java.nio.ByteBuffer.wrap(byteArray45);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer1.get(byteArray45);
        int int53 = byteBuffer52.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 7.565251118924485E-307d + "'", double26 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
    }

    @Test
    public void test04523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04523");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        int int33 = byteBuffer25.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 14 + "'", int33 == 14);
    }

    @Test
    public void test04524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04524");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.Buffer buffer47 = byteBuffer22.flip();
        java.nio.ByteBuffer byteBuffer50 = byteBuffer22.putFloat(4, (float) (short) 1);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer50.duplicate();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer51.putLong((long) 3);
        char char54 = byteBuffer53.getChar();
        // The following exception was thrown during execution in test generation
        try {
            double double55 = byteBuffer53.getDouble();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(buffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + char54 + "' != '" + '\000' + "'", char54 == '\000');
    }

    @Test
    public void test04525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04525");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer10.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.asReadOnlyBuffer();
        byte byte13 = byteBuffer12.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
    }

    @Test
    public void test04526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04526");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putChar('4');
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = null; // flaky: pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        boolean boolean17 = byteBuffer10.equals((java.lang.Object) strStream16);
        java.nio.Buffer buffer18 = byteBuffer10.mark();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer10.compact();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
// flaky:         org.junit.Assert.assertNotNull(pattern11);
// flaky:         org.junit.Assert.assertEquals(pattern11.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
// flaky:         org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertNotNull(byteBuffer19);
    }

    @Test
    public void test04527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04527");
        boolean boolean2 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]", (java.lang.CharSequence) "\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04528");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        byte byte9 = byteBuffer8.get();
        char char10 = byteBuffer8.getChar();
        int int11 = byteBuffer8.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\000' + "'", char10 == '\000');
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 89 + "'", int11 == 89);
    }

    @Test
    public void test04529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04529");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer11.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long39 = byteBuffer38.getLong();
        int int40 = byteBuffer38.position();
        float float42 = byteBuffer38.getFloat((int) (short) 10);
        boolean boolean43 = byteBuffer38.hasArray();
        double double44 = byteBuffer38.getDouble();
        short short46 = byteBuffer38.getShort(0);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer38.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response49 = null;
        org.jsoup.helper.HttpConnection.Response response50 = new org.jsoup.helper.HttpConnection.Response(response49);
        java.lang.String str52 = response50.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = response50.cookies();
        org.jsoup.Connection.Response response55 = response50.removeCookie("hi!");
        java.lang.String str56 = response50.statusMessage();
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        boolean boolean67 = byteBuffer62.hasArray();
        response50.byteData = byteBuffer62;
        int int69 = byteBuffer48.compareTo(byteBuffer62);
        java.lang.String str70 = byteBuffer48.toString();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer48.put((byte) 10);
        int int73 = byteBuffer72.limit();
        java.nio.ByteBuffer byteBuffer75 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer75.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer79 = byteBuffer75.putInt(0);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer79.putInt((int) '#');
        byte byte83 = byteBuffer79.get(1);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer79.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder87 = byteBuffer86.order();
        java.nio.ByteBuffer byteBuffer88 = byteBuffer72.order(byteOrder87);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer11.order(byteOrder87);
        boolean boolean90 = byteBuffer89.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) 0 + "'", short46 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(response55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-10) + "'", int69 == (-10));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str70, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertTrue("'" + byte83 + "' != '" + (byte) 0 + "'", byte83 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteOrder87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test04530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04530");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar(6, '\n');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putFloat((float) 18);
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        byte byte17 = byteBuffer15.get();
        boolean boolean18 = byteBuffer15.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04531");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer7.putFloat(88, 100.0f);
        java.nio.Buffer buffer13 = byteBuffer7.rewind();
        java.nio.Buffer buffer14 = byteBuffer7.rewind();
        long long15 = byteBuffer7.getLong();
        java.lang.String str16 = byteBuffer7.toString();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer7.putInt((int) 'a');
        int int20 = byteBuffer7.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str16, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
    }

    @Test
    public void test04532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04532");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int7 = byteBuffer1.getInt((int) '4');
        long long8 = byteBuffer1.getLong();
        java.nio.FloatBuffer floatBuffer9 = byteBuffer1.asFloatBuffer();
        char char10 = byteBuffer1.getChar();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        short short16 = byteBuffer12.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer12.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer12.putChar('4');
        boolean boolean22 = byteBuffer12.isReadOnly();
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long25 = byteBuffer24.getLong();
        int int26 = byteBuffer24.position();
        float float28 = byteBuffer24.getFloat((int) (short) 10);
        boolean boolean29 = byteBuffer24.hasArray();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer24.putFloat((float) (-24));
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        int int37 = byteBuffer35.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putInt(0);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.put(byteArray56);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer43.get(byteArray56, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer35.get(byteArray56);
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.wrap(byteArray56);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer24.put(byteArray56);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer12.get(byteArray56);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer1.get(byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.wrap(byteArray56, 47, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\000' + "'", char10 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 0 + "'", short16 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer65);
    }

    @Test
    public void test04533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04533");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        boolean boolean11 = response1.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", "\\Q\\E");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test04534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04534");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        double double16 = byteBuffer9.getDouble(0);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        short short22 = byteBuffer18.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer18.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer31.get(byteArray44, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer31.putDouble(100.0d);
        int int51 = byteBuffer25.compareTo(byteBuffer31);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteOrder byteOrder62 = byteBuffer61.order();
        java.nio.ByteBuffer byteBuffer63 = byteBuffer31.order(byteOrder62);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer31.asReadOnlyBuffer();
        boolean boolean65 = byteBuffer9.equals((java.lang.Object) byteBuffer31);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer31.putDouble((double) 73426760892416L);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer67.put((int) '?', (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer73 = byteBuffer70.putInt((-53), 64);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.57E-322d + "'", double16 == 2.57E-322d);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteOrder62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer70);
    }

    @Test
    public void test04535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04535");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket(inetAddress9, 12);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04536");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E", (int) (byte) 0, inetAddress7, 52);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04537");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Q\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E\\\\E\\Q\\E", 8);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E\\\\E\\Q\\E");
    }

    @Test
    public void test04538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04538");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putChar('\u2000');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer15 = byteBuffer12.putFloat((-52), (float) 43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
    }

    @Test
    public void test04539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04539");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer22.putDouble(0, (double) 13376L);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer27.slice();
        boolean boolean29 = byteBuffer28.isReadOnly();
        java.nio.ByteOrder byteOrder30 = byteBuffer28.order();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer28.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteOrder30);
        org.junit.Assert.assertNotNull(byteBuffer31);
    }

    @Test
    public void test04540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04540");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putChar('4');
        java.nio.Buffer buffer12 = byteBuffer10.limit(2);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.compact();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = byteBuffer13.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
    }

    @Test
    public void test04541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04541");
        org.jsoup.Connection.Request request0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response.writePost(request0, outputStream1, "\\Qjava.nio.DirectByteBuffer[pos=84 lim=100 cap=100]\\E");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04542");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putDouble(8, (double) 256);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = byteBuffer14.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
    }

    @Test
    public void test04543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04543");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.FloatBuffer floatBuffer16 = byteBuffer9.asFloatBuffer();
        byte byte18 = byteBuffer9.get((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer21 = byteBuffer9.putDouble((int) (byte) -1, 3.23791E-318d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
    }

    @Test
    public void test04544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04544");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (int) (byte) 100);
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putInt(0);
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.put(byteArray12);
        java.nio.FloatBuffer floatBuffer14 = byteBuffer9.asFloatBuffer();
        java.nio.CharBuffer charBuffer15 = byteBuffer9.asCharBuffer();
        boolean boolean16 = java.util.regex.Pattern.matches("", (java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher17 = pattern2.matcher((java.lang.CharSequence) "");
        java.lang.String str18 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(matcher17);
        org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=24 lim=100 cap=100] region=0,0 lastmatch=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str18, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
    }

    @Test
    public void test04545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04545");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer8.put((byte) 0);
        short short12 = byteBuffer10.getShort(24);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer14 = byteBuffer10.limit((-18));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
    }

    @Test
    public void test04546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04546");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.Buffer buffer7 = byteBuffer1.limit(32);
        java.nio.CharBuffer charBuffer8 = byteBuffer1.asCharBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putShort((short) 0);
        java.nio.FloatBuffer floatBuffer11 = byteBuffer1.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        int int17 = byteBuffer15.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer15.putChar((int) ' ', '#');
        java.lang.String str21 = byteBuffer20.toString();
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.put(byteArray30);
        java.nio.ByteOrder byteOrder32 = byteBuffer31.order();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer20.order(byteOrder32);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer1.order(byteOrder32);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(floatBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str21, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteOrder32);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer34);
    }

    @Test
    public void test04547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04547");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer5.duplicate();
        java.nio.ByteBuffer byteBuffer40 = byteBuffer5.putChar((int) (byte) 10, '\000');
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer48.compact();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer48.put((byte) 10);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer48.putInt(22);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer48.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer57 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long58 = byteBuffer57.getLong();
        int int59 = byteBuffer57.position();
        float float61 = byteBuffer57.getFloat((int) (short) 10);
        boolean boolean62 = byteBuffer57.hasArray();
        java.nio.DoubleBuffer doubleBuffer63 = byteBuffer57.asDoubleBuffer();
        java.nio.Buffer buffer64 = byteBuffer57.clear();
        java.nio.ByteOrder byteOrder65 = byteBuffer57.order();
        java.nio.ByteBuffer byteBuffer66 = byteBuffer48.order(byteOrder65);
        java.nio.Buffer buffer68 = byteBuffer48.limit(58);
        int int69 = byteBuffer5.compareTo(byteBuffer48);
        int int70 = byteBuffer48.capacity();
        java.nio.Buffer buffer71 = byteBuffer48.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer74 = byteBuffer48.putShort((int) '\u2000', (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 0.0f + "'", float61 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleBuffer63);
        org.junit.Assert.assertNotNull(buffer64);
        org.junit.Assert.assertNotNull(byteOrder65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(buffer68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertNotNull(buffer71);
    }

    @Test
    public void test04548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04548");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        boolean boolean13 = byteBuffer5.isDirect();
        java.nio.LongBuffer longBuffer14 = byteBuffer5.asLongBuffer();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        byte byte19 = byteBuffer16.get((int) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer16.putInt((int) (short) 0);
        int int22 = byteBuffer5.compareTo(byteBuffer21);
        java.nio.Buffer buffer23 = byteBuffer21.clear();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer21.putShort((int) 'a', (short) 0);
        java.nio.CharBuffer charBuffer27 = byteBuffer21.asCharBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer30 = byteBuffer21.putInt((-65536), 1493172140);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-2) + "'", int22 == (-2));
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
    }

    @Test
    public void test04549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04549");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.slice();
        boolean boolean48 = byteBuffer47.hasRemaining();
        java.nio.ByteOrder byteOrder49 = byteBuffer47.order();
        float float51 = byteBuffer47.getFloat(66);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer47.putInt(19, 0);
        java.lang.String str55 = byteBuffer54.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteOrder49);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.nio.DirectByteBuffer[pos=0 lim=84 cap=84]" + "'", str55, "java.nio.DirectByteBuffer[pos=0 lim=84 cap=84]");
    }

    @Test
    public void test04550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04550");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer5.putDouble(10.0d);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar('\n');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.put(byteArray22);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer19.get(byteArray32, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer19.putDouble(100.0d);
        boolean boolean39 = byteBuffer5.equals((java.lang.Object) byteBuffer19);
        java.nio.CharBuffer charBuffer40 = byteBuffer19.asCharBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charBuffer40);
    }

    @Test
    public void test04551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04551");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer14.putFloat((float) 73426760892416L);
        java.nio.ByteBuffer byteBuffer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer25 = byteBuffer23.put(byteBuffer24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
    }

    @Test
    public void test04552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04552");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer78.compact();
        boolean boolean80 = byteBuffer78.isDirect();
        java.nio.ByteBuffer byteBuffer82 = byteBuffer78.put((byte) 10);
        java.nio.Buffer buffer84 = byteBuffer82.position(0);
        java.nio.ByteBuffer byteBuffer86 = java.nio.ByteBuffer.allocate(58);
        java.nio.ShortBuffer shortBuffer87 = byteBuffer86.asShortBuffer();
        java.nio.ByteBuffer byteBuffer89 = byteBuffer86.putChar('\u4120');
        java.nio.ByteBuffer byteBuffer91 = byteBuffer89.putDouble((double) (short) 1);
        byte[] byteArray92 = byteBuffer89.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer95 = byteBuffer82.get(byteArray92, (-90), (-66));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(buffer84);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(shortBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[65, 32, 63, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04553");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer10.putInt((-24));
        boolean boolean16 = byteBuffer15.isDirect();
        java.nio.Buffer buffer17 = byteBuffer15.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(buffer17);
    }

    @Test
    public void test04554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04554");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.ByteOrder byteOrder19 = byteBuffer14.order();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putShort((short) (byte) 0);
        java.nio.CharBuffer charBuffer23 = byteBuffer22.asCharBuffer();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray24 = byteBuffer22.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(byteOrder19);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(charBuffer23);
    }

    @Test
    public void test04555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04555");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int7 = byteBuffer1.getInt((int) '4');
        long long8 = byteBuffer1.getLong();
        java.nio.FloatBuffer floatBuffer9 = byteBuffer1.asFloatBuffer();
        char char10 = byteBuffer1.getChar();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long13 = byteBuffer12.getLong();
        int int14 = byteBuffer12.position();
        float float16 = byteBuffer12.getFloat((int) (short) 10);
        boolean boolean17 = byteBuffer12.hasArray();
        double double18 = byteBuffer12.getDouble();
        short short20 = byteBuffer12.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        boolean boolean31 = byteBuffer26.hasArray();
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.putInt(0);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.put(byteArray50);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer37.get(byteArray50, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.putInt(0);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.put(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer66.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.putInt(0);
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.put(byteArray73);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer60.get(byteArray73, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer54.put(byteArray73);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer26.put(byteArray73);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer12.get(byteArray73);
        java.nio.ByteBuffer byteBuffer81 = java.nio.ByteBuffer.wrap(byteArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer84 = byteBuffer1.put(byteArray73, 0, (-17));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\000' + "'", char10 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 0 + "'", short20 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
    }

    @Test
    public void test04556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04556");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer25 = byteBuffer24.mark();
        java.util.regex.Pattern pattern28 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern31 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate32 = pattern31.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate33 = pattern31.asPredicate();
        java.util.regex.Pattern pattern36 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate37 = pattern36.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate38 = pattern36.asPredicate();
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        java.nio.Buffer buffer46 = byteBuffer40.limit(32);
        java.nio.CharBuffer charBuffer47 = byteBuffer40.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream48 = pattern36.splitAsStream((java.lang.CharSequence) charBuffer47);
        java.util.stream.Stream<java.lang.String> strStream49 = pattern31.splitAsStream((java.lang.CharSequence) charBuffer47);
        java.util.stream.Stream<java.lang.String> strStream50 = null; // flaky: pattern28.splitAsStream((java.lang.CharSequence) charBuffer47);
        boolean boolean51 = byteBuffer24.equals((java.lang.Object) pattern28);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = byteBuffer24.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
// flaky:         org.junit.Assert.assertNotNull(pattern28);
// flaky:         org.junit.Assert.assertEquals(pattern28.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern31);
        org.junit.Assert.assertEquals(pattern31.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(strPredicate33);
        org.junit.Assert.assertNotNull(pattern36);
        org.junit.Assert.assertEquals(pattern36.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate37);
        org.junit.Assert.assertNotNull(strPredicate38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(buffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
        org.junit.Assert.assertNotNull(strStream48);
        org.junit.Assert.assertNotNull(strStream49);
// flaky:         org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test04557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04557");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.charset = "\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E";
        org.jsoup.Connection.Request request4 = response1.req;
        org.junit.Assert.assertNull(request4);
    }

    @Test
    public void test04558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04558");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern1;
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern1.asPredicate();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern1;
        java.util.regex.Pattern pattern7 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern10 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern10;
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.FloatBuffer floatBuffer22 = byteBuffer17.asFloatBuffer();
        java.nio.CharBuffer charBuffer23 = byteBuffer17.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream24 = null; // flaky: pattern10.splitAsStream((java.lang.CharSequence) charBuffer23);
        java.util.regex.Matcher matcher25 = pattern7.matcher((java.lang.CharSequence) charBuffer23);
        java.util.stream.Stream<java.lang.String> strStream26 = pattern1.splitAsStream((java.lang.CharSequence) charBuffer23);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern1;
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(pattern7);
        org.junit.Assert.assertEquals(pattern7.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern10);
// flaky:         org.junit.Assert.assertEquals(pattern10.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(floatBuffer22);
        org.junit.Assert.assertNotNull(charBuffer23);
// flaky:         org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(matcher25);
        org.junit.Assert.assertEquals(matcher25.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream26);
    }

    @Test
    public void test04559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04559");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putDouble(0.0d);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        short short32 = byteBuffer28.getShort(0);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer28.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer28.putChar('4');
        java.lang.String str38 = byteBuffer37.toString();
        int int39 = byteBuffer22.compareTo(byteBuffer37);
        java.nio.Buffer buffer40 = byteBuffer22.flip();
        short short41 = byteBuffer22.getShort();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 0 + "'", short32 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str38, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-12) + "'", int39 == (-12));
        org.junit.Assert.assertNotNull(buffer40);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
    }

    @Test
    public void test04560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04560");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt((int) (short) 1, (-24));
        java.nio.FloatBuffer floatBuffer31 = byteBuffer26.asFloatBuffer();
        byte byte32 = byteBuffer26.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(floatBuffer31);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 0 + "'", byte32 == (byte) 0);
    }

    @Test
    public void test04561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04561");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E");
        int int2 = pattern1.flags();
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern1.asPredicate();
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strPredicate3);
    }

    @Test
    public void test04562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04562");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.FloatBuffer floatBuffer25 = byteBuffer24.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putChar((int) (short) 10, '\n');
        short short30 = byteBuffer24.getShort(33);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer33 = byteBuffer24.putDouble(100, (double) 1.4E-44f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
    }

    @Test
    public void test04563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04563");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        short short23 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer15.putDouble(100.0d);
        boolean boolean26 = byteBuffer15.isDirect();
        int int27 = byteBuffer13.compareTo(byteBuffer15);
        java.nio.FloatBuffer floatBuffer28 = byteBuffer15.asFloatBuffer();
        java.nio.DoubleBuffer doubleBuffer29 = byteBuffer15.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(floatBuffer28);
        org.junit.Assert.assertNotNull(doubleBuffer29);
    }

    @Test
    public void test04564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04564");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        response2.executed = false;
        java.lang.String str11 = response2.header("");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response12 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04565");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        boolean boolean7 = byteBuffer1.equals((java.lang.Object) (byte) 0);
        boolean boolean8 = byteBuffer1.isDirect();
        long long9 = byteBuffer1.getLong();
        java.nio.DoubleBuffer doubleBuffer10 = byteBuffer1.asDoubleBuffer();
        java.nio.LongBuffer longBuffer11 = byteBuffer1.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleBuffer10);
        org.junit.Assert.assertNotNull(longBuffer11);
    }

    @Test
    public void test04566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04566");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket(inetAddress7, (-8));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-8");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04567");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket7 = socketFactory0.createSocket("", (int) (byte) 1, inetAddress5, 78);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04568");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        java.net.InetAddress inetAddress9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket(inetAddress7, 48, inetAddress9, 28);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04569");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer10.put(byteBuffer69);
        int int71 = byteBuffer10.limit();
        int int72 = byteBuffer10.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
    }

    @Test
    public void test04570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04570");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.numRedirects = (short) 0;
        java.nio.ByteBuffer byteBuffer14 = response1.byteData;
        response1.numRedirects = (-10);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.net.URL uRL18 = response1.url();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(byteBuffer14);
        org.junit.Assert.assertNull(uRL18);
    }

    @Test
    public void test04571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04571");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.asReadOnlyBuffer();
        byte byte48 = byteBuffer47.get();
        java.nio.Buffer buffer49 = byteBuffer47.mark();
        java.nio.ByteBuffer byteBuffer50 = byteBuffer47.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer52 = byteBuffer47.putInt(23);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 0 + "'", byte48 == (byte) 0);
        org.junit.Assert.assertNotNull(buffer49);
        org.junit.Assert.assertNotNull(byteBuffer50);
    }

    @Test
    public void test04572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04572");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.put((byte) 100);
        boolean boolean6 = byteBuffer1.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test04573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04573");
        boolean boolean2 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]", (java.lang.CharSequence) "\\Q\\Qjava.nio.DirectByteBuffer[pos=12 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04574");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        byte byte4 = byteBuffer1.get((int) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.LongBuffer longBuffer6 = byteBuffer5.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
    }

    @Test
    public void test04575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04575");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.lang.String str15 = byteBuffer14.toString();
        java.nio.Buffer buffer16 = byteBuffer14.clear();
        int int17 = byteBuffer14.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str15, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test04576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04576");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putInt((int) (short) 10);
        int int27 = byteBuffer26.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
    }

    @Test
    public void test04577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04577");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putChar('\n');
        java.nio.CharBuffer charBuffer18 = byteBuffer17.asCharBuffer();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.duplicate();
        int int20 = byteBuffer19.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 76 + "'", int20 == 76);
    }

    @Test
    public void test04578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04578");
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("\\QLocation\\E", (int) (short) 0);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.CharBuffer charBuffer16 = byteBuffer11.asCharBuffer();
        java.lang.String[] strArray18 = pattern5.split((java.lang.CharSequence) charBuffer16, (-24));
        boolean boolean19 = java.util.regex.Pattern.matches("\\QLocation\\E", (java.lang.CharSequence) charBuffer16);
        java.nio.Buffer buffer21 = charBuffer16.position(19);
        boolean boolean22 = java.util.regex.Pattern.matches("\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer16);
        boolean boolean23 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=12 lim=32 cap=100]", (java.lang.CharSequence) charBuffer16);
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "\\QLocation\\E");
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(buffer21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04579");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        boolean boolean13 = byteBuffer5.isDirect();
        java.nio.Buffer buffer14 = byteBuffer5.flip();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        int int18 = byteBuffer16.position();
        float float20 = byteBuffer16.getFloat((int) (short) 10);
        boolean boolean21 = byteBuffer16.hasArray();
        double double22 = byteBuffer16.getDouble();
        short short24 = byteBuffer16.getShort(0);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.put(byteArray33);
        boolean boolean35 = byteBuffer30.hasArray();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer41.get(byteArray54, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.putInt(0);
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.put(byteArray77);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer64.get(byteArray77, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer58.put(byteArray77);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer30.put(byteArray77);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer16.get(byteArray77);
        java.nio.ByteOrder byteOrder85 = byteBuffer84.order();
        java.nio.ByteBuffer byteBuffer86 = byteBuffer5.order(byteOrder85);
        short short87 = byteBuffer5.getShort();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 0 + "'", short24 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteOrder85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertTrue("'" + short87 + "' != '" + (short) 0 + "'", short87 == (short) 0);
    }

    @Test
    public void test04580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04580");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket8 = socketFactory0.createSocket("\\Q\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E\\\\E\\Q\\E", (-84));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-84");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40428]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04581");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.slice();
        java.nio.Buffer buffer16 = byteBuffer15.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer18 = buffer16.limit((-16));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(buffer16);
    }

    @Test
    public void test04582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04582");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        int int2 = 0; // flaky: pattern0.flags();
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern6 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern6;
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer10 = byteBuffer9.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream11 = pattern6.splitAsStream((java.lang.CharSequence) charBuffer10);
        java.util.regex.Matcher matcher12 = pattern5.matcher((java.lang.CharSequence) charBuffer10);
        java.util.regex.Matcher matcher14 = pattern5.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        java.util.regex.Pattern pattern17 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        java.nio.FloatBuffer floatBuffer28 = byteBuffer23.asFloatBuffer();
        java.nio.CharBuffer charBuffer29 = byteBuffer23.asCharBuffer();
        java.lang.String[] strArray31 = pattern17.split((java.lang.CharSequence) charBuffer29, (-10));
        java.util.regex.Matcher matcher32 = pattern5.matcher((java.lang.CharSequence) charBuffer29);
        java.util.stream.Stream<java.lang.String> strStream34 = pattern5.splitAsStream((java.lang.CharSequence) "\\Q\\E");
        java.lang.String str35 = pattern5.pattern();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long38 = byteBuffer37.getLong();
        int int39 = byteBuffer37.position();
        float float41 = byteBuffer37.getFloat((int) (short) 10);
        boolean boolean42 = byteBuffer37.hasArray();
        double double43 = byteBuffer37.getDouble();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer37.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer47 = byteBuffer37.asCharBuffer();
        java.lang.String[] strArray49 = pattern5.split((java.lang.CharSequence) charBuffer47, 14);
        java.util.regex.Matcher matcher50 = pattern0.matcher((java.lang.CharSequence) charBuffer47);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.lang.String str52 = pattern0.toString();
        org.junit.Assert.assertNotNull(pattern0);
        org.junit.Assert.assertEquals(pattern0.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern6);
        org.junit.Assert.assertEquals(pattern6.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(matcher12);
        org.junit.Assert.assertEquals(matcher12.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher14);
        org.junit.Assert.assertEquals(matcher14.toString(), "java.util.regex.Matcher[pattern=hi! region=0,7 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern17);
        org.junit.Assert.assertEquals(pattern17.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(floatBuffer28);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(matcher32);
        org.junit.Assert.assertEquals(matcher32.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 0.0f + "'", float41 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(matcher50);
        org.junit.Assert.assertEquals(matcher50.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,42 lastmatch=]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\\Qhi!\\E" + "'", str52, "\\Qhi!\\E");
    }

    @Test
    public void test04583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04583");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.InetAddress inetAddress3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket5 = socketFactory0.createSocket("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000", 0, inetAddress3, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: ????????????????????????????????????????????????????????????????????????????????????");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
    }

    @Test
    public void test04584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04584");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket("\\QLocation\\E", 19, inetAddress7, 1405091840);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:1405091840");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04585");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.Buffer buffer47 = byteBuffer22.flip();
        java.nio.ByteBuffer byteBuffer50 = byteBuffer22.putFloat(4, (float) (short) 1);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer50.duplicate();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer51.putLong((long) 3);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer56 = byteBuffer53.putLong(89, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(buffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
    }

    @Test
    public void test04586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04586");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        java.nio.CharBuffer charBuffer58 = byteBuffer57.asCharBuffer();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer57.compact();
        int int60 = byteBuffer59.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(charBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 18 + "'", int60 == 18);
    }

    @Test
    public void test04587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04587");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer7.compact();
        boolean boolean9 = byteBuffer7.isReadOnly();
        java.nio.ByteOrder byteOrder10 = byteBuffer7.order();
        boolean boolean11 = byteBuffer7.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test04588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04588");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.IntBuffer intBuffer8 = byteBuffer1.asIntBuffer();
        float float9 = byteBuffer1.getFloat();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer12 = byteBuffer11.asShortBuffer();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long15 = byteBuffer14.getLong();
        int int16 = byteBuffer14.position();
        float float18 = byteBuffer14.getFloat((int) (short) 10);
        boolean boolean19 = byteBuffer14.hasArray();
        double double20 = byteBuffer14.getDouble();
        short short22 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer14.putDouble(100.0d);
        byte byte26 = byteBuffer24.get((int) (short) 0);
        java.nio.IntBuffer intBuffer27 = byteBuffer24.asIntBuffer();
        int int28 = byteBuffer11.compareTo(byteBuffer24);
        java.nio.ByteOrder byteOrder29 = byteBuffer24.order();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer24.slice();
        byte byte32 = byteBuffer24.get(0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer1.put(byteBuffer24);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long36 = byteBuffer35.getLong();
        int int37 = byteBuffer35.position();
        float float39 = byteBuffer35.getFloat((int) (short) 10);
        boolean boolean40 = byteBuffer35.hasArray();
        double double41 = byteBuffer35.getDouble();
        short short43 = byteBuffer35.getShort(0);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer35.putDouble(100.0d);
        java.nio.CharBuffer charBuffer46 = byteBuffer35.asCharBuffer();
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long49 = byteBuffer48.getLong();
        int int50 = byteBuffer48.position();
        float float52 = byteBuffer48.getFloat((int) (short) 10);
        boolean boolean53 = byteBuffer48.hasArray();
        double double54 = byteBuffer48.getDouble();
        short short56 = byteBuffer48.getShort(0);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer48.putDouble(100.0d);
        float float59 = byteBuffer48.getFloat();
        char char61 = byteBuffer48.getChar(1);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer71.putDouble(7.565251118924485E-307d);
        int int74 = byteBuffer48.compareTo(byteBuffer73);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer48.putShort((short) (byte) -1);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 0 };
        java.nio.ByteBuffer byteBuffer80 = byteBuffer48.put(byteArray79);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer35.put(byteArray79);
        java.nio.ByteBuffer byteBuffer82 = java.nio.ByteBuffer.wrap(byteArray79);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer33.put(byteArray79);
        java.nio.ByteBuffer byteBuffer84 = java.nio.ByteBuffer.wrap(byteArray79);
        java.nio.ByteBuffer byteBuffer85 = java.nio.ByteBuffer.wrap(byteArray79);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) 0 + "'", byte26 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-24) + "'", int28 == (-24));
        org.junit.Assert.assertNotNull(byteOrder29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 0 + "'", byte32 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) 0 + "'", short43 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(charBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + short56 + "' != '" + (short) 0 + "'", short56 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 0.0f + "'", float59 == 0.0f);
        org.junit.Assert.assertTrue("'" + char61 + "' != '" + '\000' + "'", char61 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-6) + "'", int74 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 0]");
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
    }

    @Test
    public void test04589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04589");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.CharBuffer charBuffer10 = byteBuffer5.asCharBuffer();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putInt((int) '#');
        float float20 = byteBuffer18.getFloat(4);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer18.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer5.get(byteArray62);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.wrap(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer73 = byteBuffer70.putChar(373288960, '\u3ff0');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 7.3E-44f + "'", float20 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
    }

    @Test
    public void test04590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04590");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate4 = pattern2.asPredicate();
        java.util.regex.Pattern pattern7 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate8 = pattern7.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate9 = pattern7.asPredicate();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        java.nio.Buffer buffer17 = byteBuffer11.limit(32);
        java.nio.CharBuffer charBuffer18 = byteBuffer11.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream19 = pattern7.splitAsStream((java.lang.CharSequence) charBuffer18);
        java.util.stream.Stream<java.lang.String> strStream20 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer18);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(pattern7);
        org.junit.Assert.assertEquals(pattern7.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(buffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(strStream20);
    }

    @Test
    public void test04591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04591");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer1.putShort((short) (byte) -1);
        byte byte30 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer1.putShort((int) '#', (short) -1);
        boolean boolean34 = byteBuffer1.hasArray();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer1.compact();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = byteBuffer35.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 0 + "'", byte30 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteBuffer35);
    }

    @Test
    public void test04592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04592");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.Buffer buffer11 = byteBuffer10.flip();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putChar('#');
        double double14 = byteBuffer10.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(buffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test04593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04593");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.Connection.Method method20 = response1.method();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.put((byte) 10);
        java.nio.Buffer buffer34 = byteBuffer30.position((int) ' ');
        java.nio.Buffer buffer35 = byteBuffer30.rewind();
        response1.byteData = byteBuffer30;
        java.nio.ByteBuffer byteBuffer38 = byteBuffer30.putFloat((float) 79);
        java.nio.DoubleBuffer doubleBuffer39 = byteBuffer30.asDoubleBuffer();
        java.nio.Buffer buffer40 = doubleBuffer39.rewind();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(buffer34);
        org.junit.Assert.assertNotNull(buffer35);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(doubleBuffer39);
        org.junit.Assert.assertNotNull(buffer40);
    }

    @Test
    public void test04594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04594");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer3.putDouble((double) ' ');
        java.nio.IntBuffer intBuffer32 = byteBuffer3.asIntBuffer();
        char char33 = byteBuffer3.getChar();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer3.putShort((short) (byte) 0);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer3.putChar(82, 'a');
        boolean boolean39 = byteBuffer3.hasArray();
        java.nio.Buffer buffer40 = byteBuffer3.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertTrue("'" + char33 + "' != '" + '\000' + "'", char33 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(buffer40);
    }

    @Test
    public void test04595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04595");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        int int7 = byteBuffer5.capacity();
        byte byte8 = byteBuffer5.get();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.duplicate();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putShort((short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putDouble((double) 52);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer20.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.duplicate();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putShort((short) 100);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        float float36 = byteBuffer34.getFloat(4);
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer38.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.putInt(0);
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.put(byteArray45);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer48.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.putInt(0);
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.put(byteArray55);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer42.get(byteArray55, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer61 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer61.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer65 = byteBuffer61.putInt(0);
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.put(byteArray68);
        java.nio.ByteBuffer byteBuffer71 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer71.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.putInt(0);
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer79 = byteBuffer75.put(byteArray78);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer65.get(byteArray78, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer59.put(byteArray78);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer34.put(byteArray78);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer26.put(byteArray78);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer18.put(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer89 = byteBuffer5.put(byteArray78, (-83), 64);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 7.3E-44f + "'", float36 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
    }

    @Test
    public void test04596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04596");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt((int) (short) 1, (-24));
        java.nio.ByteBuffer byteBuffer33 = byteBuffer30.putFloat(88, (float) 58);
        boolean boolean34 = byteBuffer33.isReadOnly();
        int int35 = byteBuffer33.remaining();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = byteBuffer33.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 78 + "'", int35 == 78);
    }

    @Test
    public void test04597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04597");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer10.putInt((-24));
        java.nio.Buffer buffer16 = byteBuffer15.flip();
        java.nio.Buffer buffer17 = byteBuffer15.mark();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer19.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.duplicate();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putShort((short) 100);
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putInt((int) '#');
        float float35 = byteBuffer33.getFloat(4);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer41.get(byteArray54, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.putInt(0);
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.put(byteArray77);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer64.get(byteArray77, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer58.put(byteArray77);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer33.put(byteArray77);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer25.put(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer87 = byteBuffer15.get(byteArray77, (-100), 320);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertNotNull(buffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 7.3E-44f + "'", float35 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
    }

    @Test
    public void test04598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04598");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = socketFactory0.createSocket(inetAddress9, (-31), inetAddress11, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-31");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04599");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar(0, '\u2000');
        java.nio.DoubleBuffer doubleBuffer7 = byteBuffer6.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(doubleBuffer7);
    }

    @Test
    public void test04600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04600");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.Buffer buffer35 = byteBuffer8.clear();
        java.nio.ByteBuffer byteBuffer37 = byteBuffer8.putFloat((float) 100L);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer37.asReadOnlyBuffer();
        int int39 = byteBuffer38.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(buffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 96 + "'", int39 == 96);
    }

    @Test
    public void test04601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04601");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        java.nio.Buffer buffer70 = byteBuffer69.mark();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer69.put((byte) 100);
        float float74 = byteBuffer72.getFloat(50);
        java.lang.Object obj75 = null;
        boolean boolean76 = byteBuffer72.equals(obj75);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(buffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test04602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04602");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        boolean boolean37 = byteBuffer32.isReadOnly();
        java.lang.String str38 = byteBuffer32.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.nio.DirectByteBuffer[pos=100 lim=100 cap=100]" + "'", str38, "java.nio.DirectByteBuffer[pos=100 lim=100 cap=100]");
    }

    @Test
    public void test04603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04603");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        char char48 = byteBuffer22.getChar(92);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer22.putShort((short) (byte) 10);
        java.nio.IntBuffer intBuffer51 = byteBuffer50.asIntBuffer();
        // The following exception was thrown during execution in test generation
        try {
            byte byte53 = byteBuffer50.get((-10));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + char48 + "' != '" + '\000' + "'", char48 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(intBuffer51);
    }

    @Test
    public void test04604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04604");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putChar('\000');
        java.nio.CharBuffer charBuffer32 = byteBuffer29.asCharBuffer();
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        short short39 = byteBuffer38.getShort();
        java.nio.IntBuffer intBuffer40 = byteBuffer38.asIntBuffer();
        boolean boolean41 = byteBuffer29.equals((java.lang.Object) byteBuffer38);
        java.nio.Buffer buffer43 = byteBuffer29.position(14);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer44 = buffer43.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(charBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) 0 + "'", short39 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(buffer43);
    }

    @Test
    public void test04605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04605");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.Buffer buffer12 = byteBuffer11.rewind();
        boolean boolean13 = buffer12.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test04606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04606");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("hi!");
        java.lang.String str9 = response1.charset;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document10 = response1.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04607");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer78.compact();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray80 = byteBuffer79.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
    }

    @Test
    public void test04608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04608");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket6 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E", (-83));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-83");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04609");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        java.nio.Buffer buffer79 = byteBuffer78.rewind();
        java.nio.Buffer buffer80 = buffer79.flip();
        java.nio.Buffer buffer81 = buffer79.clear();
        java.nio.Buffer buffer82 = buffer79.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(buffer79);
        org.junit.Assert.assertNotNull(buffer80);
        org.junit.Assert.assertNotNull(buffer81);
        org.junit.Assert.assertNotNull(buffer82);
    }

    @Test
    public void test04610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04610");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        double double16 = byteBuffer9.getDouble(0);
        boolean boolean17 = byteBuffer9.isDirect();
        java.nio.Buffer buffer18 = byteBuffer9.flip();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer9.putChar('4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer9.putLong((long) 12);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer25 = byteBuffer24.asShortBuffer();
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long28 = byteBuffer27.getLong();
        int int29 = byteBuffer27.position();
        float float31 = byteBuffer27.getFloat((int) (short) 10);
        boolean boolean32 = byteBuffer27.hasArray();
        double double33 = byteBuffer27.getDouble();
        short short35 = byteBuffer27.getShort(0);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer27.putDouble(100.0d);
        byte byte39 = byteBuffer37.get((int) (short) 0);
        java.nio.IntBuffer intBuffer40 = byteBuffer37.asIntBuffer();
        int int41 = byteBuffer24.compareTo(byteBuffer37);
        java.nio.FloatBuffer floatBuffer42 = byteBuffer37.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer44 = byteBuffer37.put((byte) -1);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer44.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer48 = byteBuffer47.mark();
        boolean boolean49 = byteBuffer47.isDirect();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putLong((long) (short) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        int int57 = byteBuffer55.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.putInt(0);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.put(byteArray66);
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.put(byteArray76);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer63.get(byteArray76, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer55.get(byteArray76);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer47.get(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer85 = byteBuffer22.put(byteArray76, (-18), 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.57E-322d + "'", double16 == 2.57E-322d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(shortBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 0 + "'", short35 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 0 + "'", byte39 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-24) + "'", int41 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(buffer48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
    }

    @Test
    public void test04611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04611");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long48 = byteBuffer47.getLong();
        int int49 = byteBuffer47.position();
        float float51 = byteBuffer47.getFloat((int) (short) 10);
        boolean boolean52 = byteBuffer47.hasArray();
        double double53 = byteBuffer47.getDouble();
        short short55 = byteBuffer47.getShort(0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer47.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response58 = null;
        org.jsoup.helper.HttpConnection.Response response59 = new org.jsoup.helper.HttpConnection.Response(response58);
        java.lang.String str61 = response59.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = response59.cookies();
        org.jsoup.Connection.Response response64 = response59.removeCookie("hi!");
        java.lang.String str65 = response59.statusMessage();
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.putInt(0);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.put(byteArray74);
        boolean boolean76 = byteBuffer71.hasArray();
        response59.byteData = byteBuffer71;
        int int78 = byteBuffer57.compareTo(byteBuffer71);
        java.lang.String str79 = byteBuffer57.toString();
        long long80 = byteBuffer57.getLong();
        java.nio.DoubleBuffer doubleBuffer81 = byteBuffer57.asDoubleBuffer();
        response37.byteData = byteBuffer57;
        java.nio.ByteBuffer byteBuffer85 = byteBuffer57.putLong(12, (long) 76);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer85.duplicate();
        java.nio.ByteOrder byteOrder87 = byteBuffer85.order();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) 0 + "'", short55 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(response64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-10) + "'", int78 == (-10));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str79, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(doubleBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteOrder87);
    }

    @Test
    public void test04612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04612");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        long long6 = byteBuffer5.getLong();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putDouble((-53), (double) 81);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test04613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04613");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) '4');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 16);
        double double5 = byteBuffer4.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test04614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04614");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        java.lang.String[] strArray8 = pattern2.split((java.lang.CharSequence) "hi!", (-84));
        int int9 = pattern2.flags();
        int int10 = pattern2.flags();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        float float16 = byteBuffer14.getFloat(32);
        boolean boolean17 = byteBuffer14.isDirect();
        java.util.regex.Pattern pattern20 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate21 = pattern20.asPredicate();
        boolean boolean22 = byteBuffer14.equals((java.lang.Object) pattern20);
        java.util.regex.Pattern pattern25 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern28 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.CharBuffer charBuffer39 = byteBuffer34.asCharBuffer();
        java.util.regex.Matcher matcher40 = pattern28.matcher((java.lang.CharSequence) charBuffer39);
        java.util.stream.Stream<java.lang.String> strStream41 = null; // flaky: pattern25.splitAsStream((java.lang.CharSequence) charBuffer39);
        java.lang.String[] strArray43 = pattern20.split((java.lang.CharSequence) charBuffer39, 32);
        java.util.regex.Pattern pattern46 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern47 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern47;
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer51 = byteBuffer50.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream52 = pattern47.splitAsStream((java.lang.CharSequence) charBuffer51);
        java.util.regex.Matcher matcher53 = pattern46.matcher((java.lang.CharSequence) charBuffer51);
        java.util.regex.Matcher matcher55 = pattern46.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        java.util.regex.Pattern pattern58 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.FloatBuffer floatBuffer69 = byteBuffer64.asFloatBuffer();
        java.nio.CharBuffer charBuffer70 = byteBuffer64.asCharBuffer();
        java.lang.String[] strArray72 = pattern58.split((java.lang.CharSequence) charBuffer70, (-10));
        java.util.regex.Matcher matcher73 = pattern46.matcher((java.lang.CharSequence) charBuffer70);
        java.util.stream.Stream<java.lang.String> strStream75 = pattern46.splitAsStream((java.lang.CharSequence) "\\Q\\E");
        java.lang.String str76 = pattern46.pattern();
        java.nio.ByteBuffer byteBuffer78 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long79 = byteBuffer78.getLong();
        int int80 = byteBuffer78.position();
        float float82 = byteBuffer78.getFloat((int) (short) 10);
        boolean boolean83 = byteBuffer78.hasArray();
        double double84 = byteBuffer78.getDouble();
        java.nio.ByteBuffer byteBuffer87 = byteBuffer78.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer88 = byteBuffer78.asCharBuffer();
        java.lang.String[] strArray90 = pattern46.split((java.lang.CharSequence) charBuffer88, 14);
        java.lang.String[] strArray91 = pattern20.split((java.lang.CharSequence) charBuffer88);
        java.lang.String[] strArray93 = pattern2.split((java.lang.CharSequence) charBuffer88, (-65536));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.lang.String[] strArray97 = pattern2.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        java.util.function.Predicate<java.lang.String> strPredicate98 = pattern2.asPredicate();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(pattern20);
        org.junit.Assert.assertEquals(pattern20.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertNotNull(pattern25);
// flaky:         org.junit.Assert.assertEquals(pattern25.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern28);
        org.junit.Assert.assertEquals(pattern28.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertNotNull(matcher40);
        org.junit.Assert.assertEquals(matcher40.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(pattern46);
        org.junit.Assert.assertEquals(pattern46.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern47);
        org.junit.Assert.assertEquals(pattern47.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(charBuffer51);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertNotNull(matcher53);
        org.junit.Assert.assertEquals(matcher53.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher55);
        org.junit.Assert.assertEquals(matcher55.toString(), "java.util.regex.Matcher[pattern=hi! region=0,7 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern58);
        org.junit.Assert.assertEquals(pattern58.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(floatBuffer69);
        org.junit.Assert.assertNotNull(charBuffer70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(matcher73);
        org.junit.Assert.assertEquals(matcher73.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 8 + "'", int80 == 8);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(charBuffer88);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray97);
        org.junit.Assert.assertNotNull(strPredicate98);
    }

    @Test
    public void test04615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04615");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte[] byteArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer11 = byteBuffer7.get(byteArray8, 70, 36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test04616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04616");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteOrder byteOrder6 = byteBuffer1.order();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer1.asReadOnlyBuffer();
        short short9 = byteBuffer1.getShort(40);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteOrder6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
    }

    @Test
    public void test04617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04617");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket(inetAddress6, 43, inetAddress8, (-65536));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-65536");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04618");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        short short22 = byteBuffer21.getShort();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putLong(8, (long) (short) 1);
        int int27 = byteBuffer25.getInt(85);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer33.get(byteArray46, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.put(byteArray59);
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer62.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.putInt(0);
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.put(byteArray69);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer56.get(byteArray69, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer50.put(byteArray69);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer25.put(byteArray69);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer15.put(byteArray69);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer76.putFloat((float) (byte) 100);
        java.nio.FloatBuffer floatBuffer79 = byteBuffer78.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer80 = byteBuffer78.compact();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(floatBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
    }

    @Test
    public void test04619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04619");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.Connection.Method method20 = response1.method();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.put((byte) 10);
        java.nio.Buffer buffer34 = byteBuffer30.position((int) ' ');
        java.nio.Buffer buffer35 = byteBuffer30.rewind();
        response1.byteData = byteBuffer30;
        response1.charset = "java.nio.DirectByteBuffer[pos=26 lim=100 cap=100]";
        java.lang.String str39 = response1.charset();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(buffer34);
        org.junit.Assert.assertNotNull(buffer35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.nio.DirectByteBuffer[pos=26 lim=100 cap=100]" + "'", str39, "java.nio.DirectByteBuffer[pos=26 lim=100 cap=100]");
    }

    @Test
    public void test04620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04620");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer4.duplicate();
        java.nio.DoubleBuffer doubleBuffer6 = byteBuffer5.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
    }

    @Test
    public void test04621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04621");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        double double12 = byteBuffer10.getDouble(12);
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.put(byteArray21);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer18.get(byteArray31, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer10.put(byteArray31);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer36.putInt(75, 0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putDouble((double) 76);
        long long42 = byteBuffer39.getLong();
        java.nio.ByteBuffer byteBuffer43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer44 = byteBuffer39.put(byteBuffer43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 7.565251118924485E-307d + "'", double12 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test04622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04622");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer25 = byteBuffer24.mark();
        java.nio.Buffer buffer26 = byteBuffer24.flip();
        char char28 = byteBuffer24.getChar((int) (byte) 0);
        char char29 = byteBuffer24.getChar();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer24.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + '\000' + "'", char29 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer30);
    }

    @Test
    public void test04623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04623");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]", 0);
        java.lang.String str3 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]" + "'", str3, "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
    }

    @Test
    public void test04624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04624");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        double double7 = byteBuffer3.getDouble((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer3.putFloat((float) (-84));
        java.nio.FloatBuffer floatBuffer10 = byteBuffer3.asFloatBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
    }

    @Test
    public void test04625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04625");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.CharBuffer charBuffer16 = byteBuffer9.asCharBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer9.putChar('a');
        java.nio.Buffer buffer19 = byteBuffer9.rewind();
        java.nio.LongBuffer longBuffer20 = byteBuffer9.asLongBuffer();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer9.putChar('\n');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(buffer19);
        org.junit.Assert.assertNotNull(longBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
    }

    @Test
    public void test04626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04626");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.FloatBuffer floatBuffer16 = byteBuffer9.asFloatBuffer();
        byte byte18 = byteBuffer9.get((int) (short) 1);
        int int19 = byteBuffer9.position();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer9.putShort((short) (byte) 66);
        java.nio.Buffer buffer22 = byteBuffer9.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(buffer22);
    }

    @Test
    public void test04627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04627");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putChar(' ');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = byteBuffer17.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
    }

    @Test
    public void test04628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04628");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.put((byte) 10);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer7.putInt(22);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer7.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        int int18 = byteBuffer16.position();
        float float20 = byteBuffer16.getFloat((int) (short) 10);
        boolean boolean21 = byteBuffer16.hasArray();
        java.nio.DoubleBuffer doubleBuffer22 = byteBuffer16.asDoubleBuffer();
        java.nio.Buffer buffer23 = byteBuffer16.clear();
        java.nio.ByteOrder byteOrder24 = byteBuffer16.order();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer7.order(byteOrder24);
        boolean boolean26 = byteBuffer25.isReadOnly();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer25.put((byte) 0);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer25.putShort((short) 100);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer30.putChar(10, 'a');
        java.nio.ByteBuffer byteBuffer35 = byteBuffer30.putShort((short) 1);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer41.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer41.putChar('a');
        double double48 = byteBuffer46.getDouble(12);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer54.get(byteArray67, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer46.put(byteArray67);
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.wrap(byteArray67);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer30.put(byteArray67);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(byteOrder24);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 7.565251118924485E-307d + "'", double48 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
    }

    @Test
    public void test04629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04629");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = 64;
    }

    @Test
    public void test04630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04630");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteOrder byteOrder6 = byteBuffer3.order();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer8.duplicate();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.putDouble(32, (double) 1.0f);
        int int14 = byteBuffer12.getInt(24);
        char char15 = byteBuffer12.getChar();
        boolean boolean16 = byteBuffer3.equals((java.lang.Object) char15);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteOrder6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04631");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.FloatBuffer floatBuffer16 = byteBuffer9.asFloatBuffer();
        int int17 = byteBuffer9.capacity();
        java.nio.DoubleBuffer doubleBuffer18 = byteBuffer9.asDoubleBuffer();
        boolean boolean19 = byteBuffer9.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(doubleBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test04632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04632");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        int int80 = response1.statusCode;
        org.jsoup.helper.HttpConnection.Response response81 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response82 = new org.jsoup.helper.HttpConnection.Response(response81);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test04633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04633");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket7 = socketFactory0.createSocket(inetAddress5, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04634");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        int int6 = byteBuffer1.getInt();
        java.lang.String str7 = byteBuffer1.toString();
        java.nio.DoubleBuffer doubleBuffer8 = byteBuffer1.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer16.compact();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer16.put((byte) 10);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer16.putInt(22);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer16.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long26 = byteBuffer25.getLong();
        int int27 = byteBuffer25.position();
        float float29 = byteBuffer25.getFloat((int) (short) 10);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.DoubleBuffer doubleBuffer31 = byteBuffer25.asDoubleBuffer();
        java.nio.Buffer buffer32 = byteBuffer25.clear();
        java.nio.ByteOrder byteOrder33 = byteBuffer25.order();
        java.nio.ByteBuffer byteBuffer34 = byteBuffer16.order(byteOrder33);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer1.order(byteOrder33);
        java.nio.ShortBuffer shortBuffer36 = byteBuffer35.asShortBuffer();
        int int37 = shortBuffer36.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]" + "'", str7, "java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(doubleBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleBuffer31);
        org.junit.Assert.assertNotNull(buffer32);
        org.junit.Assert.assertNotNull(byteOrder33);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(shortBuffer36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test04635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04635");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        boolean boolean21 = response1.hasCookie("\\Qhi!\\E");
        int int22 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean25 = response1.hasCookie("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry27 = response1.scanHeaders("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        response1.statusCode = (-1);
        boolean boolean30 = response1.executed;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry32 = response1.scanHeaders("\\Qjava.nio.DirectByteBuffer[pos=0 lim=16 cap=100]\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strEntry27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strEntry32);
    }

    @Test
    public void test04636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04636");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = response23.cookies();
        boolean boolean29 = response23.hasCookie("java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test04637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04637");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E", 18);
        java.lang.String str3 = pattern2.pattern();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E" + "'", str3, "\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
    }

    @Test
    public void test04638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04638");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress4 = null;
        java.net.InetAddress inetAddress6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket8 = socketFactory0.createSocket(inetAddress4, 0, inetAddress6, (-53));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-53");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04639");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.asReadOnlyBuffer();
        java.nio.Buffer buffer48 = byteBuffer14.flip();
        java.lang.String str49 = byteBuffer14.toString();
        java.nio.Buffer buffer50 = byteBuffer14.flip();
        java.lang.Class<?> wildcardClass51 = buffer50.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(buffer48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.nio.DirectByteBuffer[pos=0 lim=22 cap=100]" + "'", str49, "java.nio.DirectByteBuffer[pos=0 lim=22 cap=100]");
        org.junit.Assert.assertNotNull(buffer50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test04640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04640");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        byte byte12 = byteBuffer9.get((int) 'a');
        java.nio.DoubleBuffer doubleBuffer13 = byteBuffer9.asDoubleBuffer();
        double double15 = byteBuffer9.getDouble(8);
        java.nio.Buffer buffer16 = byteBuffer9.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.23791E-318d + "'", double15 == 3.23791E-318d);
        org.junit.Assert.assertNotNull(buffer16);
    }

    @Test
    public void test04641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04641");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        java.lang.String str6 = pattern2.pattern();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer8.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.putInt(0);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.put(byteArray15);
        java.nio.FloatBuffer floatBuffer17 = byteBuffer12.asFloatBuffer();
        boolean boolean18 = byteBuffer12.isDirect();
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        org.jsoup.helper.HttpConnection.Response response29 = null;
        org.jsoup.helper.HttpConnection.Response response30 = new org.jsoup.helper.HttpConnection.Response(response29);
        response30.contentType = "";
        boolean boolean33 = byteBuffer28.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putInt((int) '#');
        int int42 = byteBuffer28.compareTo(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer12.put(byteBuffer39);
        boolean boolean44 = byteBuffer39.isReadOnly();
        java.nio.CharBuffer charBuffer45 = byteBuffer39.asCharBuffer();
        java.lang.String[] strArray47 = pattern2.split((java.lang.CharSequence) charBuffer45, 84);
        int int48 = pattern2.flags();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\\Qhi!\\E" + "'", str6, "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(floatBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charBuffer45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
    }

    @Test
    public void test04642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04642");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response14);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = response14.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test04643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04643");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response7 = response2.header("hi!", "");
        org.jsoup.Connection.Request request8 = null;
        response2.req = request8;
        response2.executed = true;
        int int12 = response2.numRedirects;
        boolean boolean14 = response2.hasCookie("\\QLocation\\E");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long18 = byteBuffer17.getLong();
        int int19 = byteBuffer17.position();
        float float21 = byteBuffer17.getFloat((int) (short) 10);
        boolean boolean22 = byteBuffer17.hasArray();
        double double23 = byteBuffer17.getDouble();
        short short25 = byteBuffer17.getShort(0);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer17.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response28 = null;
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response28);
        java.lang.String str31 = response29.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = response29.cookies();
        org.jsoup.Connection.Response response34 = response29.removeCookie("hi!");
        java.lang.String str35 = response29.statusMessage();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        boolean boolean46 = byteBuffer41.hasArray();
        response29.byteData = byteBuffer41;
        int int48 = byteBuffer27.compareTo(byteBuffer41);
        java.lang.String str49 = byteBuffer27.toString();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer27.put((byte) 10);
        int int52 = byteBuffer51.limit();
        short short54 = byteBuffer51.getShort((int) 'a');
        response15.byteData = byteBuffer51;
        org.jsoup.helper.HttpConnection.Response response56 = new org.jsoup.helper.HttpConnection.Response(response15);
        org.jsoup.Connection.Response response59 = response15.header("java.nio.DirectByteBuffer[pos=19 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=84 lim=100 cap=100]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response60 = org.jsoup.helper.HttpConnection.Response.execute(request0, response15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 0 + "'", short25 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-10) + "'", int48 == (-10));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str49, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + short54 + "' != '" + (short) 0 + "'", short54 == (short) 0);
        org.junit.Assert.assertNotNull(response59);
    }

    @Test
    public void test04644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04644");
        boolean boolean2 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=24 lim=84 cap=84]", (java.lang.CharSequence) "\\Qjava.nio.DirectByteBuffer[pos=10 lim=22 cap=22]\\E");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04645");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.Buffer buffer11 = byteBuffer10.flip();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putChar('#');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer10.putLong((long) (-20));
        java.nio.ByteBuffer byteBuffer16 = byteBuffer10.compact();
        char char17 = byteBuffer10.getChar();
        java.nio.Buffer buffer18 = byteBuffer10.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(buffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\uffff' + "'", char17 == '\uffff');
        org.junit.Assert.assertNotNull(buffer18);
    }

    @Test
    public void test04646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04646");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.function.Predicate<java.lang.String> strPredicate4 = null; // flaky: pattern2.asPredicate();
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern10 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = null; // flaky: pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher17 = pattern10.matcher((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher18 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer15);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long21 = byteBuffer20.getLong();
        int int22 = byteBuffer20.position();
        float float24 = byteBuffer20.getFloat((int) (short) 10);
        boolean boolean25 = byteBuffer20.hasArray();
        double double26 = byteBuffer20.getDouble();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer20.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer30 = byteBuffer20.asCharBuffer();
        java.lang.String[] strArray32 = null; // flaky: pattern7.split((java.lang.CharSequence) charBuffer30, 12);
        java.lang.String[] strArray33 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer30);
        int int34 = charBuffer30.limit();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate4);
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern10);
        org.junit.Assert.assertEquals(pattern10.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern11);
// flaky:         org.junit.Assert.assertEquals(pattern11.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
// flaky:         org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(matcher17);
        org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher18);
// flaky:         org.junit.Assert.assertEquals(matcher18.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.0f + "'", float24 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
// flaky:         org.junit.Assert.assertNotNull(strArray32);
// flaky:         org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 42 + "'", int34 == 42);
    }

    @Test
    public void test04647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04647");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer7.putFloat(88, 100.0f);
        java.nio.Buffer buffer13 = byteBuffer12.clear();
        int int14 = byteBuffer12.limit();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer12.putInt(30, 2);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(byteBuffer17);
    }

    @Test
    public void test04648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04648");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.lang.String str4 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\\Qhi!\\E" + "'", str4, "\\Qhi!\\E");
    }

    @Test
    public void test04649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04649");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]", 0);
        int int3 = pattern2.flags();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test04650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04650");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.put((byte) 10);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer7.putInt(22);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer7.putDouble((double) 1);
        java.nio.CharBuffer charBuffer15 = byteBuffer7.asCharBuffer();
        float float17 = byteBuffer7.getFloat(14);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = byteBuffer7.getLong();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
    }

    @Test
    public void test04651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04651");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.net.URL uRL10 = response9.url();
        java.net.URL uRL11 = response9.url();
        response9.contentType = "";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(uRL10);
        org.junit.Assert.assertNull(uRL11);
    }

    @Test
    public void test04652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04652");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocateDirect((int) '4');
        java.nio.LongBuffer longBuffer9 = byteBuffer8.asLongBuffer();
        java.nio.DoubleBuffer doubleBuffer10 = byteBuffer8.asDoubleBuffer();
        response1.byteData = byteBuffer8;
        java.nio.FloatBuffer floatBuffer12 = byteBuffer8.asFloatBuffer();
        java.nio.Buffer buffer13 = floatBuffer12.rewind();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertNotNull(doubleBuffer10);
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertNotNull(buffer13);
    }

    @Test
    public void test04653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04653");
        org.jsoup.Connection.Request request0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response.writePost(request0, outputStream1, "\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04654");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.lang.String str27 = response23.statusMessage;
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response23);
        int int30 = response23.statusCode;
        java.lang.String str32 = response23.getHeaderCaseInsensitive("\\Q\\QLocation\\E\\\\E\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response33 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test04655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04655");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer3 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer3.putLong((long) '4');
        short short7 = byteBuffer3.getShort(0);
        int int9 = byteBuffer3.getInt((int) '4');
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer3);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer3.compact();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer11.compact();
        int int14 = byteBuffer12.getInt(0);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        short short20 = byteBuffer16.getShort(0);
        int int21 = byteBuffer16.position();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer16.putChar('\n');
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        short short30 = byteBuffer29.getShort();
        java.nio.IntBuffer intBuffer31 = byteBuffer29.asIntBuffer();
        int int32 = byteBuffer29.capacity();
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer38.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer38.putChar('a');
        double double45 = byteBuffer43.getDouble(12);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer57.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.putInt(0);
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer65 = byteBuffer61.put(byteArray64);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer51.get(byteArray64, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer43.put(byteArray64);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer29.get(byteArray64);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer16.get(byteArray64, (int) (short) 0, 2);
        int int74 = byteBuffer12.compareTo(byteBuffer73);
        byte byte75 = byteBuffer12.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 0 + "'", short7 == (short) 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 0 + "'", short20 == (short) 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 7.565251118924485E-307d + "'", double45 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + byte75 + "' != '" + (byte) 0 + "'", byte75 == (byte) 0);
    }

    @Test
    public void test04656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04656");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.function.Predicate<java.lang.String> strPredicate4 = null; // flaky: pattern2.asPredicate();
        java.lang.String str5 = null; // flaky: pattern2.pattern();
        java.util.regex.Pattern pattern9 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern12 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern13 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern13;
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer17 = byteBuffer16.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream18 = null; // flaky: pattern13.splitAsStream((java.lang.CharSequence) charBuffer17);
        java.util.regex.Matcher matcher19 = pattern12.matcher((java.lang.CharSequence) charBuffer17);
        java.util.regex.Matcher matcher20 = null; // flaky: pattern9.matcher((java.lang.CharSequence) charBuffer17);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer23 = byteBuffer22.asCharBuffer();
        java.util.regex.Matcher matcher24 = null; // flaky: pattern9.matcher((java.lang.CharSequence) charBuffer23);
        boolean boolean25 = java.util.regex.Pattern.matches("\\QLocation\\E", (java.lang.CharSequence) charBuffer23);
        java.lang.String[] strArray27 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer23, 1);
        int int28 = 0; // flaky: pattern2.flags();
        java.util.regex.Pattern pattern29 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern29;
        int int31 = 0; // flaky: pattern29.flags();
        java.util.regex.Pattern pattern34 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern34;
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.FloatBuffer floatBuffer46 = byteBuffer41.asFloatBuffer();
        java.nio.CharBuffer charBuffer47 = byteBuffer41.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream48 = null; // flaky: pattern34.splitAsStream((java.lang.CharSequence) charBuffer47);
        java.util.stream.Stream<java.lang.String> strStream49 = null; // flaky: pattern29.splitAsStream((java.lang.CharSequence) charBuffer47);
        java.util.stream.Stream<java.lang.String> strStream50 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) charBuffer47);
        java.lang.String[] strArray52 = null; // flaky: pattern2.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=24 lim=84 cap=84]");
        java.nio.ByteBuffer byteBuffer54 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long55 = byteBuffer54.getLong();
        int int56 = byteBuffer54.position();
        float float58 = byteBuffer54.getFloat((int) (short) 10);
        boolean boolean59 = byteBuffer54.hasArray();
        double double60 = byteBuffer54.getDouble();
        short short62 = byteBuffer54.getShort(0);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer54.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer54.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer67.duplicate();
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.slice();
        int int70 = byteBuffer69.remaining();
        java.nio.CharBuffer charBuffer71 = byteBuffer69.asCharBuffer();
        java.util.regex.Matcher matcher72 = null; // flaky: pattern2.matcher((java.lang.CharSequence) charBuffer71);
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str5, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(pattern9);
// flaky:         org.junit.Assert.assertEquals(pattern9.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern12);
        org.junit.Assert.assertEquals(pattern12.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern13);
// flaky:         org.junit.Assert.assertEquals(pattern13.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
// flaky:         org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(matcher19);
        org.junit.Assert.assertEquals(matcher19.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher20);
// flaky:         org.junit.Assert.assertEquals(matcher20.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(charBuffer23);
// flaky:         org.junit.Assert.assertNotNull(matcher24);
// flaky:         org.junit.Assert.assertEquals(matcher24.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-24) + "'", int28 == (-24));
// flaky:         org.junit.Assert.assertNotNull(pattern29);
// flaky:         org.junit.Assert.assertEquals(pattern29.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-24) + "'", int31 == (-24));
// flaky:         org.junit.Assert.assertNotNull(pattern34);
// flaky:         org.junit.Assert.assertEquals(pattern34.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(floatBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
// flaky:         org.junit.Assert.assertNotNull(strStream48);
// flaky:         org.junit.Assert.assertNotNull(strStream49);
// flaky:         org.junit.Assert.assertNotNull(strStream50);
// flaky:         org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) 0 + "'", short62 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 76 + "'", int70 == 76);
        org.junit.Assert.assertNotNull(charBuffer71);
// flaky:         org.junit.Assert.assertNotNull(matcher72);
// flaky:         org.junit.Assert.assertEquals(matcher72.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,38 lastmatch=]");
    }

    @Test
    public void test04657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04657");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.IntBuffer intBuffer7 = byteBuffer5.asIntBuffer();
        double double8 = byteBuffer5.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putFloat((float) (-1L));
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putLong(23, (long) 0);
        char char14 = byteBuffer13.getChar();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer13.put((byte) 100);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test04658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04658");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        response10.statusCode = 1;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.lang.String str16 = response14.cookie("hi!");
        java.net.URL uRL17 = response14.url();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(uRL17);
    }

    @Test
    public void test04659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04659");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        int int26 = byteBuffer22.getInt(0);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer22.putInt(48);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer22.putChar((int) ' ', 'a');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putShort((short) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer36 = byteBuffer31.put((int) '\uffff', (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 65535");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
    }

    @Test
    public void test04660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04660");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.statusMessage = "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]";
        int int9 = response1.statusCode();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = response1.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test04661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04661");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern6 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer8.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.putInt(0);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.put(byteArray15);
        java.nio.FloatBuffer floatBuffer17 = byteBuffer12.asFloatBuffer();
        java.nio.CharBuffer charBuffer18 = byteBuffer12.asCharBuffer();
        java.lang.String[] strArray20 = pattern6.split((java.lang.CharSequence) charBuffer18, (-10));
        java.util.stream.Stream<java.lang.String> strStream21 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer18);
        java.lang.CharSequence charSequence22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray23 = pattern2.split(charSequence22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(pattern6);
        org.junit.Assert.assertEquals(pattern6.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(floatBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strStream21);
    }

    @Test
    public void test04662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04662");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(46);
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.put(28, (byte) 10);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer4.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
    }

    @Test
    public void test04663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04663");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket("\\Q\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E\\\\E\\Q\\E", 92);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: \\Q\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E\\\\E\\Q\\E");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40432]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04664");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("Location", (int) (byte) 100);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern6 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern7 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern7;
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer11 = byteBuffer10.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream12 = pattern7.splitAsStream((java.lang.CharSequence) charBuffer11);
        java.util.regex.Matcher matcher13 = pattern6.matcher((java.lang.CharSequence) charBuffer11);
        java.util.regex.Matcher matcher15 = pattern6.matcher((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.util.function.Predicate<java.lang.String> strPredicate16 = pattern6.asPredicate();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern6;
        java.util.regex.Pattern pattern18 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern18;
        int int20 = pattern18.flags();
        java.util.stream.Stream<java.lang.String> strStream22 = pattern18.splitAsStream((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        java.util.regex.Pattern pattern26 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern29 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern32 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern33 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern33;
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer37 = byteBuffer36.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream38 = pattern33.splitAsStream((java.lang.CharSequence) charBuffer37);
        java.util.regex.Matcher matcher39 = pattern32.matcher((java.lang.CharSequence) charBuffer37);
        java.util.regex.Matcher matcher40 = null; // flaky: pattern29.matcher((java.lang.CharSequence) charBuffer37);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer43 = byteBuffer42.asCharBuffer();
        java.util.regex.Matcher matcher44 = null; // flaky: pattern29.matcher((java.lang.CharSequence) charBuffer43);
        java.lang.String[] strArray46 = pattern26.split((java.lang.CharSequence) charBuffer43, 8);
        java.util.regex.Pattern pattern49 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern50 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern50;
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer54 = byteBuffer53.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream55 = pattern50.splitAsStream((java.lang.CharSequence) charBuffer54);
        java.util.regex.Matcher matcher56 = pattern49.matcher((java.lang.CharSequence) charBuffer54);
        java.lang.String[] strArray58 = pattern26.split((java.lang.CharSequence) charBuffer54, (-6));
        boolean boolean59 = java.util.regex.Pattern.matches("\\Q\\Qhi!\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer54);
        java.lang.String[] strArray60 = pattern18.split((java.lang.CharSequence) charBuffer54);
        java.util.regex.Matcher matcher61 = pattern6.matcher((java.lang.CharSequence) charBuffer54);
        java.util.regex.Matcher matcher62 = pattern2.matcher((java.lang.CharSequence) charBuffer54);
        java.nio.Buffer buffer63 = charBuffer54.flip();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "Location");
        org.junit.Assert.assertNotNull(pattern6);
        org.junit.Assert.assertEquals(pattern6.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern7);
        org.junit.Assert.assertEquals(pattern7.toString(), "Location");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(matcher13);
        org.junit.Assert.assertEquals(matcher13.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher15);
        org.junit.Assert.assertEquals(matcher15.toString(), "java.util.regex.Matcher[pattern=hi! region=0,49 lastmatch=]");
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(pattern18);
        org.junit.Assert.assertEquals(pattern18.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(pattern26);
        org.junit.Assert.assertEquals(pattern26.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern29);
// flaky:         org.junit.Assert.assertEquals(pattern29.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern32);
        org.junit.Assert.assertEquals(pattern32.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern33);
        org.junit.Assert.assertEquals(pattern33.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(charBuffer37);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertNotNull(matcher39);
        org.junit.Assert.assertEquals(matcher39.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher40);
// flaky:         org.junit.Assert.assertEquals(matcher40.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(charBuffer43);
// flaky:         org.junit.Assert.assertNotNull(matcher44);
// flaky:         org.junit.Assert.assertEquals(matcher44.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern50);
        org.junit.Assert.assertEquals(pattern50.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(charBuffer54);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertNotNull(matcher56);
        org.junit.Assert.assertEquals(matcher56.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(matcher61);
        org.junit.Assert.assertEquals(matcher61.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher62);
        org.junit.Assert.assertEquals(matcher62.toString(), "java.util.regex.Matcher[pattern=Location region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(buffer63);
    }

    @Test
    public void test04665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04665");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int7 = response6.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response6.scanHeaders("Location");
        java.lang.String str10 = response6.charset;
        response6.numRedirects = 4;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04666");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response22 = response20.removeHeader("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E");
        org.jsoup.Connection.Response response24 = response20.removeCookie("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response20);
        response20.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E";
        java.util.Map<java.lang.String, java.lang.String> strMap28 = response20.headers();
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(response22);
        org.junit.Assert.assertNotNull(response24);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test04667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04667");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(10);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer7.putChar('a');
        java.nio.Buffer buffer15 = byteBuffer7.position(52);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer7.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test04668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04668");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        response26.executed = true;
        java.lang.String str30 = response26.cookie("hi!");
        java.lang.String str31 = response26.statusMessage();
        java.lang.String str32 = response26.charset;
        boolean boolean35 = response26.hasHeaderWithValue("\\Q\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E\\\\E\\Q\\E", "java.nio.DirectByteBuffer[pos=0 lim=76 cap=76]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test04669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04669");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response5.contentType();
        java.lang.String str12 = response5.getHeaderCaseInsensitive("\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response5);
        boolean boolean15 = response5.executed;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04670");
        boolean boolean2 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=31 lim=100 cap=100]", (java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=24 lim=84 cap=84]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04671");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.asReadOnlyBuffer();
        java.nio.IntBuffer intBuffer6 = byteBuffer5.asIntBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putLong(33, (long) 32);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(intBuffer6);
    }

    @Test
    public void test04672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04672");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response10.cookies();
        boolean boolean13 = response10.executed;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.lang.String str17 = response16.contentType;
        org.jsoup.Connection.Response response19 = response16.removeCookie("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(response19);
    }

    @Test
    public void test04673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04673");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.capacity();
        long long7 = byteBuffer1.getLong();
        java.nio.IntBuffer intBuffer8 = byteBuffer1.asIntBuffer();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long11 = byteBuffer10.getLong();
        int int12 = byteBuffer10.position();
        float float14 = byteBuffer10.getFloat((int) (short) 10);
        boolean boolean15 = byteBuffer10.hasArray();
        double double16 = byteBuffer10.getDouble();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer10.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer10.asReadOnlyBuffer();
        int int21 = byteBuffer1.compareTo(byteBuffer10);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        java.lang.String str26 = response23.contentType;
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response27);
        org.jsoup.Connection.Response response31 = response27.cookie("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]", "\\Qjava.nio.DirectByteBuffer[pos=0 lim=22 cap=100]\\E");
        org.jsoup.Connection.Request request32 = null;
        response27.req = request32;
        boolean boolean34 = byteBuffer10.equals((java.lang.Object) request32);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(response31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test04674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04674");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response9 = response1.header("Location", "");
        org.jsoup.Connection.Response response12 = response1.header("\\Q\\E", "\\QLocation\\E");
        response1.contentType = "\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E";
        java.lang.String str15 = response1.charset();
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str18 = response16.header("java.nio.DirectByteBuffer[pos=27 lim=100 cap=100]");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04675");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer15 = byteBuffer5.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putInt((int) '#');
        byte byte25 = byteBuffer21.get(1);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer21.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer21.slice();
        int int30 = byteBuffer29.remaining();
        int int31 = byteBuffer5.compareTo(byteBuffer29);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long34 = byteBuffer33.getLong();
        int int35 = byteBuffer33.position();
        float float37 = byteBuffer33.getFloat((int) (short) 10);
        boolean boolean38 = byteBuffer33.hasArray();
        double double39 = byteBuffer33.getDouble();
        short short41 = byteBuffer33.getShort(0);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer33.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer33.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.duplicate();
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.slice();
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer46.get(byteArray57);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer29.get(byteArray57);
        java.nio.ByteBuffer byteBuffer61 = java.nio.ByteBuffer.wrap(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.wrap(byteArray57, (int) '4', (int) (byte) 66);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 84 + "'", int30 == 84);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
    }

    @Test
    public void test04676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04676");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.Buffer buffer6 = byteBuffer1.rewind();
        boolean boolean7 = byteBuffer1.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04677");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer5.duplicate();
        int int38 = byteBuffer5.remaining();
        java.nio.ByteBuffer byteBuffer40 = byteBuffer5.putChar('\n');
        java.nio.LongBuffer longBuffer41 = byteBuffer5.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(longBuffer41);
    }

    @Test
    public void test04678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04678");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer1.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer1.put((byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = byteBuffer72.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
    }

    @Test
    public void test04679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04679");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put((byte) 66);
        boolean boolean15 = byteBuffer14.isDirect();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer14.put((byte) 1);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer14.putFloat((float) 19);
        int int20 = byteBuffer19.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test04680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04680");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.Connection.Response response7 = response2.removeCookie("hi!");
        java.lang.String str8 = response2.statusMessage();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        boolean boolean19 = byteBuffer14.hasArray();
        response2.byteData = byteBuffer14;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response2);
        boolean boolean22 = response21.executed;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response21);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response21);
        boolean boolean26 = response24.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response24);
        java.lang.String str28 = response24.statusMessage;
        java.nio.ByteBuffer byteBuffer29 = null;
        response24.byteData = byteBuffer29;
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response24);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response32 = org.jsoup.helper.HttpConnection.Response.execute(request0, response24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test04681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04681");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        response4.executed = false;
        int int8 = response4.numRedirects;
        response4.statusCode = 0;
        java.lang.String str11 = response4.contentType();
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response4);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response4.headers();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test04682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04682");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry6 = response1.scanHeaders("\\QLocation\\E");
        response1.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.statusMessage = "\\Q\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E\\\\E\\Q\\E";
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = response1.headers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry6);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test04683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04683");
        java.util.regex.Pattern pattern4 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Matcher matcher6 = pattern4.matcher((java.lang.CharSequence) "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        java.util.regex.Pattern pattern9 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern12 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern15 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern16 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern16;
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer20 = byteBuffer19.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream21 = pattern16.splitAsStream((java.lang.CharSequence) charBuffer20);
        java.util.regex.Matcher matcher22 = pattern15.matcher((java.lang.CharSequence) charBuffer20);
        java.util.regex.Matcher matcher23 = null; // flaky: pattern12.matcher((java.lang.CharSequence) charBuffer20);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer26 = byteBuffer25.asCharBuffer();
        java.util.regex.Matcher matcher27 = null; // flaky: pattern12.matcher((java.lang.CharSequence) charBuffer26);
        java.lang.String[] strArray29 = pattern9.split((java.lang.CharSequence) charBuffer26, 8);
        java.util.regex.Pattern pattern32 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern33 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern33;
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer37 = byteBuffer36.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream38 = pattern33.splitAsStream((java.lang.CharSequence) charBuffer37);
        java.util.regex.Matcher matcher39 = pattern32.matcher((java.lang.CharSequence) charBuffer37);
        java.lang.String[] strArray41 = pattern9.split((java.lang.CharSequence) charBuffer37, (-6));
        java.util.regex.Pattern pattern44 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern44;
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.FloatBuffer floatBuffer56 = byteBuffer51.asFloatBuffer();
        java.nio.CharBuffer charBuffer57 = byteBuffer51.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream58 = null; // flaky: pattern44.splitAsStream((java.lang.CharSequence) charBuffer57);
        java.lang.String[] strArray59 = pattern9.split((java.lang.CharSequence) charBuffer57);
        java.lang.String[] strArray60 = pattern4.split((java.lang.CharSequence) charBuffer57);
        boolean boolean61 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]", (java.lang.CharSequence) charBuffer57);
        boolean boolean62 = java.util.regex.Pattern.matches("\\QLocation\\E", (java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern4);
        org.junit.Assert.assertEquals(pattern4.toString(), "\\Q\\E");
        org.junit.Assert.assertNotNull(matcher6);
        org.junit.Assert.assertEquals(matcher6.toString(), "java.util.regex.Matcher[pattern=\\Q\\E region=0,44 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern9);
        org.junit.Assert.assertEquals(pattern9.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern12);
// flaky:         org.junit.Assert.assertEquals(pattern12.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern15);
        org.junit.Assert.assertEquals(pattern15.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern16);
        org.junit.Assert.assertEquals(pattern16.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(matcher22);
        org.junit.Assert.assertEquals(matcher22.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher23);
// flaky:         org.junit.Assert.assertEquals(matcher23.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(charBuffer26);
// flaky:         org.junit.Assert.assertNotNull(matcher27);
// flaky:         org.junit.Assert.assertEquals(matcher27.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(pattern32);
        org.junit.Assert.assertEquals(pattern32.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern33);
        org.junit.Assert.assertEquals(pattern33.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(charBuffer37);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertNotNull(matcher39);
        org.junit.Assert.assertEquals(matcher39.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray41);
// flaky:         org.junit.Assert.assertNotNull(pattern44);
// flaky:         org.junit.Assert.assertEquals(pattern44.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(floatBuffer56);
        org.junit.Assert.assertNotNull(charBuffer57);
// flaky:         org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test04684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04684");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response8 = response1.removeCookie("java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str11 = response9.contentType;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04685");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt((int) (short) 1, (-24));
        java.nio.ByteBuffer byteBuffer31 = byteBuffer26.compact();
        long long33 = byteBuffer26.getLong((int) (byte) 10);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test04686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04686");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        int int6 = response1.statusCode();
        response1.contentType = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Method method10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response11 = response1.method(method10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04687");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response10.cookies();
        java.lang.String str14 = response10.header("\\Q\\Qhi!\\E\\\\E\\Q\\E");
        response10.contentType = "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]";
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry18 = response10.scanHeaders("\\Q\\QLocation\\E\\\\E\\Q\\E");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document19 = response10.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strEntry18);
    }

    @Test
    public void test04688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04688");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        int int7 = response5.numRedirects;
        java.nio.ByteBuffer byteBuffer8 = response5.byteData;
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNull(byteBuffer8);
    }

    @Test
    public void test04689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04689");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.lang.String str26 = response25.statusMessage;
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response25);
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response27);
        response27.contentType = "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]";
        org.jsoup.Connection.Response response33 = response27.header("java.nio.DirectByteBuffer[pos=10 lim=22 cap=22]", "java.nio.DirectByteBuffer[pos=27 lim=100 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(response33);
    }

    @Test
    public void test04690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04690");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.util.function.Predicate<java.lang.String> strPredicate2 = null; // flaky: pattern0.asPredicate();
        int int3 = 0; // flaky: pattern0.flags();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.util.regex.Pattern pattern7 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E", 91);
        java.util.regex.Pattern pattern10 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = null; // flaky: pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher17 = pattern10.matcher((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher19 = pattern10.matcher((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.util.function.Predicate<java.lang.String> strPredicate20 = pattern10.asPredicate();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern10;
        java.util.regex.Pattern pattern22 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern22;
        int int24 = pattern22.flags();
        java.util.stream.Stream<java.lang.String> strStream26 = pattern22.splitAsStream((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        java.util.regex.Pattern pattern30 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern33 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern36 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern37 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern37;
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer41 = byteBuffer40.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream42 = pattern37.splitAsStream((java.lang.CharSequence) charBuffer41);
        java.util.regex.Matcher matcher43 = pattern36.matcher((java.lang.CharSequence) charBuffer41);
        java.util.regex.Matcher matcher44 = null; // flaky: pattern33.matcher((java.lang.CharSequence) charBuffer41);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer47 = byteBuffer46.asCharBuffer();
        java.util.regex.Matcher matcher48 = null; // flaky: pattern33.matcher((java.lang.CharSequence) charBuffer47);
        java.lang.String[] strArray50 = pattern30.split((java.lang.CharSequence) charBuffer47, 8);
        java.util.regex.Pattern pattern53 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern54 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern54;
        java.nio.ByteBuffer byteBuffer57 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer58 = byteBuffer57.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream59 = pattern54.splitAsStream((java.lang.CharSequence) charBuffer58);
        java.util.regex.Matcher matcher60 = pattern53.matcher((java.lang.CharSequence) charBuffer58);
        java.lang.String[] strArray62 = pattern30.split((java.lang.CharSequence) charBuffer58, (-6));
        boolean boolean63 = java.util.regex.Pattern.matches("\\Q\\Qhi!\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer58);
        java.lang.String[] strArray64 = pattern22.split((java.lang.CharSequence) charBuffer58);
        java.util.regex.Matcher matcher65 = pattern10.matcher((java.lang.CharSequence) charBuffer58);
        java.util.regex.Pattern pattern68 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern71 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern74 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern75 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern75;
        java.nio.ByteBuffer byteBuffer78 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer79 = byteBuffer78.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream80 = pattern75.splitAsStream((java.lang.CharSequence) charBuffer79);
        java.util.regex.Matcher matcher81 = pattern74.matcher((java.lang.CharSequence) charBuffer79);
        java.util.regex.Matcher matcher82 = null; // flaky: pattern71.matcher((java.lang.CharSequence) charBuffer79);
        java.nio.ByteBuffer byteBuffer84 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer85 = byteBuffer84.asCharBuffer();
        java.util.regex.Matcher matcher86 = null; // flaky: pattern71.matcher((java.lang.CharSequence) charBuffer85);
        java.lang.String[] strArray88 = pattern68.split((java.lang.CharSequence) charBuffer85, 8);
        java.util.stream.Stream<java.lang.String> strStream89 = pattern10.splitAsStream((java.lang.CharSequence) charBuffer85);
        java.lang.String[] strArray91 = pattern7.split((java.lang.CharSequence) charBuffer85, 90);
        java.util.regex.Matcher matcher92 = null; // flaky: pattern0.matcher((java.lang.CharSequence) charBuffer85);
// flaky:         org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-24) + "'", int3 == (-24));
        org.junit.Assert.assertNotNull(pattern7);
        org.junit.Assert.assertEquals(pattern7.toString(), "\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E");
        org.junit.Assert.assertNotNull(pattern10);
        org.junit.Assert.assertEquals(pattern10.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern11);
// flaky:         org.junit.Assert.assertEquals(pattern11.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
// flaky:         org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(matcher17);
        org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher19);
        org.junit.Assert.assertEquals(matcher19.toString(), "java.util.regex.Matcher[pattern=hi! region=0,49 lastmatch=]");
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertNotNull(pattern22);
        org.junit.Assert.assertEquals(pattern22.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertNotNull(pattern30);
        org.junit.Assert.assertEquals(pattern30.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern33);
// flaky:         org.junit.Assert.assertEquals(pattern33.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern36);
        org.junit.Assert.assertEquals(pattern36.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern37);
        org.junit.Assert.assertEquals(pattern37.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(strStream42);
        org.junit.Assert.assertNotNull(matcher43);
        org.junit.Assert.assertEquals(matcher43.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher44);
// flaky:         org.junit.Assert.assertEquals(matcher44.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
// flaky:         org.junit.Assert.assertNotNull(matcher48);
// flaky:         org.junit.Assert.assertEquals(matcher48.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(pattern53);
        org.junit.Assert.assertEquals(pattern53.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern54);
        org.junit.Assert.assertEquals(pattern54.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(charBuffer58);
        org.junit.Assert.assertNotNull(strStream59);
        org.junit.Assert.assertNotNull(matcher60);
        org.junit.Assert.assertEquals(matcher60.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(matcher65);
        org.junit.Assert.assertEquals(matcher65.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern68);
        org.junit.Assert.assertEquals(pattern68.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern71);
// flaky:         org.junit.Assert.assertEquals(pattern71.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern74);
        org.junit.Assert.assertEquals(pattern74.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern75);
        org.junit.Assert.assertEquals(pattern75.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(charBuffer79);
        org.junit.Assert.assertNotNull(strStream80);
        org.junit.Assert.assertNotNull(matcher81);
        org.junit.Assert.assertEquals(matcher81.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher82);
// flaky:         org.junit.Assert.assertEquals(matcher82.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(charBuffer85);
// flaky:         org.junit.Assert.assertNotNull(matcher86);
// flaky:         org.junit.Assert.assertEquals(matcher86.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strStream89);
        org.junit.Assert.assertNotNull(strArray91);
// flaky:         org.junit.Assert.assertNotNull(matcher92);
// flaky:         org.junit.Assert.assertEquals(matcher92.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
    }

    @Test
    public void test04691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04691");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        double double7 = byteBuffer3.getDouble((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer3.putFloat((float) (-84));
        long long10 = byteBuffer9.getLong();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test04692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04692");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        java.lang.String str81 = response1.contentType();
        response1.charset = "hi!";
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry85 = response1.scanHeaders("\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E");
        org.jsoup.Connection.Request request86 = null;
        response1.req = request86;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(strEntry85);
    }

    @Test
    public void test04693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04693");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        double double13 = byteBuffer1.getDouble(20);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer1.putLong((int) ' ', (long) 58);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putFloat((float) 97);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putInt((int) '#');
        float float28 = byteBuffer26.getFloat(4);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer26.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer16.put(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer80 = java.nio.ByteBuffer.wrap(byteArray70, (-52), 42);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 7.3E-44f + "'", float28 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
    }

    @Test
    public void test04694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04694");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E", 86, inetAddress11, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04695");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.putFloat((float) 47);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer15 = byteBuffer12.put((-75), (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
    }

    @Test
    public void test04696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04696");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response7.cookies();
        org.jsoup.Connection.Method method9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response10 = response7.method(method9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test04697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04697");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str13 = response1.statusMessage;
        boolean boolean16 = response1.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]", "");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = response1.headers();
        java.lang.String str18 = response1.charset;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04698");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        org.jsoup.Connection.Request request8 = response1.req;
        org.jsoup.Connection.Request request9 = response1.req;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(request8);
        org.junit.Assert.assertNull(request9);
    }

    @Test
    public void test04699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04699");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str14 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response18 = response16.removeHeader("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response16);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = response19.cookies();
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response19);
        java.lang.String str22 = response19.contentType;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response19);
        int int24 = response23.statusCode();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test04700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04700");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        short short23 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer15.putDouble(100.0d);
        boolean boolean26 = byteBuffer15.isDirect();
        int int27 = byteBuffer13.compareTo(byteBuffer15);
        java.nio.DoubleBuffer doubleBuffer28 = byteBuffer15.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer15.slice();
        short short31 = byteBuffer15.getShort(2);
        java.nio.Buffer buffer33 = byteBuffer15.position(1);
        java.nio.Buffer buffer35 = buffer33.limit((int) '\n');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 0 + "'", short31 == (short) 0);
        org.junit.Assert.assertNotNull(buffer33);
        org.junit.Assert.assertNotNull(buffer35);
    }

    @Test
    public void test04701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04701");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        response8.executed = true;
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response8);
        int int14 = response8.statusCode();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04702");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        boolean boolean21 = response1.hasCookie("\\Qhi!\\E");
        int int22 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str24 = response1.charset();
        org.jsoup.Connection.Request request25 = response1.req;
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int27 = response26.statusCode;
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response26);
        boolean boolean30 = response26.hasCookie("\\Q\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(request25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test04703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04703");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        boolean boolean37 = byteBuffer32.isReadOnly();
        java.nio.CharBuffer charBuffer38 = byteBuffer32.asCharBuffer();
        java.nio.ByteBuffer byteBuffer39 = byteBuffer32.asReadOnlyBuffer();
        java.nio.Buffer buffer40 = byteBuffer32.mark();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer42 = byteBuffer32.putLong((long) '4');
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(buffer40);
    }

    @Test
    public void test04704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04704");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        java.nio.DoubleBuffer doubleBuffer70 = byteBuffer69.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(doubleBuffer70);
    }

    @Test
    public void test04705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04705");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        boolean boolean6 = response1.hasHeader("hi!");
        boolean boolean8 = response1.hasHeader("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        boolean boolean10 = response1.hasHeader("java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response15 = response12.header("\\Qjava.nio.DirectByteBuffer[pos=19 lim=100 cap=100]\\E", "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(response15);
    }

    @Test
    public void test04706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04706");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.CharBuffer charBuffer6 = byteBuffer1.asCharBuffer();
        java.nio.Buffer buffer8 = byteBuffer1.position((int) (short) 1);
        java.nio.LongBuffer longBuffer9 = byteBuffer1.asLongBuffer();
        java.lang.Class<?> wildcardClass10 = byteBuffer1.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer8);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test04707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04707");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer10.put(byteBuffer69);
        java.nio.Buffer buffer71 = byteBuffer70.flip();
        java.nio.Buffer buffer72 = byteBuffer70.flip();
        boolean boolean73 = buffer72.hasRemaining();
        boolean boolean74 = buffer72.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(buffer71);
        org.junit.Assert.assertNotNull(buffer72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test04708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04708");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        org.jsoup.helper.HttpConnection.Response response81 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response82 = new org.jsoup.helper.HttpConnection.Response(response81);
        java.lang.String str83 = response82.statusMessage;
        org.jsoup.helper.HttpConnection.Response response84 = new org.jsoup.helper.HttpConnection.Response(response82);
        java.net.HttpURLConnection httpURLConnection85 = null;
        org.jsoup.helper.HttpConnection.Response response86 = null;
        org.jsoup.helper.HttpConnection.Response response87 = new org.jsoup.helper.HttpConnection.Response(response86);
        response87.contentType = "";
        java.lang.String str91 = response87.cookie("hi!");
        int int92 = response87.statusCode();
        java.lang.String str94 = response87.getHeaderCaseInsensitive("\\Qhi!\\E");
        response87.statusMessage = "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E";
        org.jsoup.helper.HttpConnection.Response response97 = new org.jsoup.helper.HttpConnection.Response(response87);
        // The following exception was thrown during execution in test generation
        try {
            response84.setupFromConnection(httpURLConnection85, (org.jsoup.Connection.Response) response97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test04709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04709");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer3.putDouble((double) ' ');
        boolean boolean32 = byteBuffer31.hasRemaining();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(23, (byte) 0);
        java.nio.Buffer buffer36 = byteBuffer35.flip();
        java.nio.ByteBuffer byteBuffer38 = byteBuffer35.putLong((long) 3407872);
        byte byte39 = byteBuffer35.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(buffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 0 + "'", byte39 == (byte) 0);
    }

    @Test
    public void test04710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04710");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        boolean boolean6 = response5.executed;
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response5);
        response7.charset = "\\Qjava.nio.DirectByteBuffer[pos=8 lim=100 cap=100]\\E";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response10 = org.jsoup.helper.HttpConnection.Response.execute(request0, response7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04711");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        double double12 = byteBuffer11.getDouble();
        int int14 = byteBuffer11.getInt(84);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer11.putInt(0);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer11.putFloat(90, (float) 'a');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.43230922487E-312d + "'", double12 == 5.43230922487E-312d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer19);
    }

    @Test
    public void test04712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04712");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        java.lang.String str9 = response1.statusMessage();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer12 = response11.byteData;
        boolean boolean14 = response11.hasHeader("\\Q\\Qhi!\\E\\\\E\\Q\\E");
        java.lang.String str16 = response11.cookie("\\Q\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response11);
        response18.statusCode = 42;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test04713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04713");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.Connection.Response response7 = response2.removeCookie("hi!");
        java.lang.String str8 = response2.statusMessage();
        org.jsoup.Connection.Request request9 = response2.req;
        java.lang.String str11 = response2.header("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response2);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response13 = org.jsoup.helper.HttpConnection.Response.execute(request0, response12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04714");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket(inetAddress7, (int) '\u6400');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40434]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04715");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        org.jsoup.Connection.Method method8 = response5.method();
        org.jsoup.Connection.Response response10 = response5.removeHeader("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        int int16 = byteBuffer14.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer14.putChar((int) ' ', '#');
        short short20 = byteBuffer19.getShort();
        response5.byteData = byteBuffer19;
        org.jsoup.Connection.Request request22 = null;
        response5.req = request22;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 0 + "'", short20 == (short) 0);
    }

    @Test
    public void test04716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04716");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        response9.executed = false;
        org.jsoup.Connection.Response response14 = response9.cookie("java.nio.DirectByteBuffer[pos=16 lim=32 cap=100]", "\\Q\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response14);
    }

    @Test
    public void test04717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04717");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str6 = response2.cookie("hi!");
        int int7 = response2.statusCode();
        org.jsoup.Connection.Request request8 = response2.req;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.Connection.Response response12 = response2.cookie("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", "Location");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        int int15 = response13.numRedirects;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response16 = org.jsoup.helper.HttpConnection.Response.execute(request0, response13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(request8);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test04718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04718");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putDouble(0.0d);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        short short32 = byteBuffer28.getShort(0);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer28.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer28.putChar('4');
        java.lang.String str38 = byteBuffer37.toString();
        int int39 = byteBuffer22.compareTo(byteBuffer37);
        char char41 = byteBuffer22.getChar(19);
        java.nio.LongBuffer longBuffer42 = byteBuffer22.asLongBuffer();
        int int43 = byteBuffer22.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 0 + "'", short32 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str38, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-12) + "'", int39 == (-12));
        org.junit.Assert.assertTrue("'" + char41 + "' != '" + '\000' + "'", char41 == '\000');
        org.junit.Assert.assertNotNull(longBuffer42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
    }

    @Test
    public void test04719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04719");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket6 = socketFactory0.createSocket("\\Q\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E\\\\E\\Q\\E", 85, inetAddress4, (-53));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-53");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04720");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        java.nio.Buffer buffer79 = byteBuffer78.rewind();
        java.lang.Class<?> wildcardClass80 = buffer79.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(buffer79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test04721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04721");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer16.get(byteArray29, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer39.get(byteArray52, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer33.put(byteArray52);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer5.put(byteArray52);
        char char60 = byteBuffer58.getChar(23);
        java.nio.Buffer buffer62 = byteBuffer58.position((int) '4');
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.allocate((int) '\n');
        java.nio.ByteBuffer byteBuffer66 = byteBuffer64.putLong(10L);
        int int67 = byteBuffer66.position();
        int int68 = byteBuffer58.compareTo(byteBuffer66);
        java.nio.CharBuffer charBuffer69 = byteBuffer66.asCharBuffer();
        java.nio.ByteBuffer byteBuffer71 = java.nio.ByteBuffer.allocate((int) '\n');
        byte[] byteArray72 = byteBuffer71.array();
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.wrap(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer76 = byteBuffer66.put(byteArray72, 78, 33);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + char60 + "' != '" + '\000' + "'", char60 == '\000');
        org.junit.Assert.assertNotNull(buffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 46 + "'", int68 == 46);
        org.junit.Assert.assertNotNull(charBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer73);
    }

    @Test
    public void test04722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04722");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = response23.cookies();
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.lang.String str29 = response28.contentType();
        org.jsoup.helper.HttpConnection.Response response30 = new org.jsoup.helper.HttpConnection.Response(response28);
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response28);
        response28.charset = "";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test04723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04723");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (int) 'a');
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.lang.String str4 = pattern2.pattern();
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern10 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate11 = pattern10.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate12 = pattern10.asPredicate();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        java.nio.Buffer buffer20 = byteBuffer14.limit(32);
        java.nio.CharBuffer charBuffer21 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream22 = pattern10.splitAsStream((java.lang.CharSequence) charBuffer21);
        java.lang.String[] strArray23 = null; // flaky: pattern7.split((java.lang.CharSequence) charBuffer21);
        java.lang.String str24 = null; // flaky: pattern7.pattern();
        java.util.regex.Matcher matcher26 = null; // flaky: pattern7.matcher((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern7;
        java.util.regex.Pattern pattern30 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern31 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern31;
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer35 = byteBuffer34.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream36 = null; // flaky: pattern31.splitAsStream((java.lang.CharSequence) charBuffer35);
        java.util.regex.Matcher matcher37 = pattern30.matcher((java.lang.CharSequence) charBuffer35);
        java.util.regex.Matcher matcher39 = pattern30.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        java.util.regex.Pattern pattern42 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.FloatBuffer floatBuffer53 = byteBuffer48.asFloatBuffer();
        java.nio.CharBuffer charBuffer54 = byteBuffer48.asCharBuffer();
        java.lang.String[] strArray56 = pattern42.split((java.lang.CharSequence) charBuffer54, (-10));
        java.util.regex.Matcher matcher57 = pattern30.matcher((java.lang.CharSequence) charBuffer54);
        java.util.regex.Matcher matcher58 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer54);
        java.util.regex.Matcher matcher59 = pattern2.matcher((java.lang.CharSequence) charBuffer54);
        java.lang.String str60 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str4, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern10);
        org.junit.Assert.assertEquals(pattern10.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(buffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(strStream22);
// flaky:         org.junit.Assert.assertNotNull(strArray23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str24, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(matcher26);
// flaky:         org.junit.Assert.assertEquals(matcher26.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,49 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern30);
        org.junit.Assert.assertEquals(pattern30.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern31);
// flaky:         org.junit.Assert.assertEquals(pattern31.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(charBuffer35);
// flaky:         org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertNotNull(matcher37);
        org.junit.Assert.assertEquals(matcher37.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher39);
        org.junit.Assert.assertEquals(matcher39.toString(), "java.util.regex.Matcher[pattern=hi! region=0,7 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern42);
        org.junit.Assert.assertEquals(pattern42.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(floatBuffer53);
        org.junit.Assert.assertNotNull(charBuffer54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(matcher57);
        org.junit.Assert.assertEquals(matcher57.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher58);
// flaky:         org.junit.Assert.assertEquals(matcher58.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher59);
        org.junit.Assert.assertEquals(matcher59.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=24 lim=100 cap=100] region=0,43 lastmatch=]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str60, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
    }

    @Test
    public void test04724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04724");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.put(byteArray22);
        java.nio.CharBuffer charBuffer24 = byteBuffer19.asCharBuffer();
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putInt((int) '#');
        float float34 = byteBuffer32.getFloat(4);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer40.get(byteArray53, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.putInt(0);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.put(byteArray66);
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.put(byteArray76);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer63.get(byteArray76, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer57.put(byteArray76);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer32.put(byteArray76);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer19.get(byteArray76);
        java.nio.ByteBuffer byteBuffer84 = java.nio.ByteBuffer.wrap(byteArray76);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer13.put(byteArray76);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer13.duplicate();
        long long88 = byteBuffer13.getLong((int) (byte) 10);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 7.3E-44f + "'", float34 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test04725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04725");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        java.lang.String str8 = response1.getHeaderCaseInsensitive("\\Qhi!\\E");
        response1.statusMessage = "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E";
        java.lang.String str12 = response1.header("\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        response1.executed = false;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04726");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.put(byteArray22);
        java.nio.CharBuffer charBuffer24 = byteBuffer19.asCharBuffer();
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putInt((int) '#');
        float float34 = byteBuffer32.getFloat(4);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer40.get(byteArray53, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.putInt(0);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.put(byteArray66);
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.put(byteArray76);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer63.get(byteArray76, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer57.put(byteArray76);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer32.put(byteArray76);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer19.get(byteArray76);
        java.nio.ByteBuffer byteBuffer84 = java.nio.ByteBuffer.wrap(byteArray76);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer13.put(byteArray76);
        java.nio.ByteBuffer byteBuffer86 = java.nio.ByteBuffer.wrap(byteArray76);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 7.3E-44f + "'", float34 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
    }

    @Test
    public void test04727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04727");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.put((byte) 10);
        java.nio.ByteOrder byteOrder23 = byteBuffer20.order();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer10.order(byteOrder23);
        java.nio.CharBuffer charBuffer25 = byteBuffer24.asCharBuffer();
        short short26 = byteBuffer24.getShort();
        boolean boolean27 = byteBuffer24.isDirect();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.duplicate();
        int int29 = byteBuffer28.position();
        double double31 = byteBuffer28.getDouble(85);
        double double33 = byteBuffer28.getDouble(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 18 + "'", int29 == 18);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 524288.0d + "'", double33 == 524288.0d);
    }

    @Test
    public void test04728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04728");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response7.headers();
        int int14 = response7.numRedirects;
        org.jsoup.Connection.Response response16 = response7.removeCookie("java.nio.DirectByteBuffer[pos=19 lim=100 cap=100]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(response16);
    }

    @Test
    public void test04729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04729");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = socketFactory0.createSocket("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]", 75, inetAddress11, 98);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04730");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response9 = response1.header("Location", "");
        org.jsoup.Connection.Response response12 = response1.header("\\Q\\E", "\\QLocation\\E");
        org.jsoup.Connection.Method method13 = response1.method();
        response1.statusCode = 85;
        org.jsoup.Connection.Response response18 = response1.cookie("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]", "hi!");
        java.lang.String str19 = response1.contentType;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test04731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04731");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.capacity();
        long long7 = byteBuffer1.getLong();
        java.nio.IntBuffer intBuffer8 = byteBuffer1.asIntBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putChar('\u3ff0');
        java.nio.FloatBuffer floatBuffer11 = byteBuffer10.asFloatBuffer();
        boolean boolean12 = byteBuffer10.hasRemaining();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = byteBuffer10.getLong((int) (short) 256);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(floatBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test04732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04732");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.capacity();
        long long7 = byteBuffer1.getLong();
        java.nio.Buffer buffer8 = byteBuffer1.rewind();
        java.nio.Buffer buffer9 = byteBuffer1.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(buffer8);
        org.junit.Assert.assertNotNull(buffer9);
    }

    @Test
    public void test04733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04733");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '\u4120');
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test04734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04734");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer7.putFloat((float) (byte) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) 12);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer59.compact();
        java.nio.ByteBuffer byteBuffer64 = byteBuffer59.putFloat((float) ' ');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer59.putInt(85, (int) (byte) 10);
        java.nio.Buffer buffer68 = byteBuffer67.flip();
        boolean boolean69 = byteBuffer67.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(buffer68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test04735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04735");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        java.nio.Buffer buffer79 = byteBuffer78.rewind();
        double double80 = byteBuffer78.getDouble();
        java.nio.ByteBuffer byteBuffer82 = byteBuffer78.put((byte) -1);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer78.putDouble((double) 15);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(buffer79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 2.57E-322d + "'", double80 == 2.57E-322d);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer84);
    }

    @Test
    public void test04736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04736");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putDouble(0.0d);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        short short32 = byteBuffer28.getShort(0);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer28.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer28.putChar('4');
        java.lang.String str38 = byteBuffer37.toString();
        int int39 = byteBuffer22.compareTo(byteBuffer37);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer22.putChar('\000');
        java.nio.ShortBuffer shortBuffer42 = byteBuffer41.asShortBuffer();
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.putDouble(19, (double) 128);
        boolean boolean46 = byteBuffer41.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 0 + "'", short32 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str38, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-12) + "'", int39 == (-12));
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(shortBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test04737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04737");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        java.lang.String str9 = response1.header("hi!");
        java.lang.String str10 = response1.statusMessage;
        java.lang.String str11 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer12 = response1.byteData;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(byteBuffer12);
    }

    @Test
    public void test04738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04738");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.statusMessage = "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]";
        org.jsoup.Connection.Response response11 = response1.cookie("\\Q\\Q\\E\\\\E\\Q\\E", "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str13 = response1.charset();
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response14);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response15);
        org.jsoup.Connection.Response response19 = response15.header("java.nio.DirectByteBuffer[pos=31 lim=100 cap=100]", "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(response19);
    }

    @Test
    public void test04739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04739");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.slice();
        boolean boolean14 = byteBuffer13.isReadOnly();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer17 = byteBuffer16.asShortBuffer();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long20 = byteBuffer19.getLong();
        int int21 = byteBuffer19.position();
        float float23 = byteBuffer19.getFloat((int) (short) 10);
        boolean boolean24 = byteBuffer19.hasArray();
        double double25 = byteBuffer19.getDouble();
        short short27 = byteBuffer19.getShort(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer19.putDouble(100.0d);
        byte byte31 = byteBuffer29.get((int) (short) 0);
        java.nio.IntBuffer intBuffer32 = byteBuffer29.asIntBuffer();
        int int33 = byteBuffer16.compareTo(byteBuffer29);
        java.nio.FloatBuffer floatBuffer34 = byteBuffer29.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer29.put((byte) -1);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer36.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer40 = byteBuffer39.mark();
        boolean boolean41 = byteBuffer39.isDirect();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putLong((long) (short) 0);
        long long44 = byteBuffer39.getLong();
        int int45 = byteBuffer13.compareTo(byteBuffer39);
        boolean boolean46 = byteBuffer13.hasRemaining();
        int int47 = byteBuffer13.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(shortBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 0 + "'", byte31 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-24) + "'", int33 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(buffer40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 25 + "'", int45 == 25);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 84 + "'", int47 == 84);
    }

    @Test
    public void test04740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04740");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        response1.numRedirects = (byte) 10;
        org.jsoup.Connection.Response response12 = response1.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer13 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str15 = response14.statusMessage();
        int int16 = response14.statusCode;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(byteBuffer13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04741");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putFloat((float) 256);
        java.nio.Buffer buffer6 = byteBuffer5.clear();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray7 = byteBuffer5.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
    }

    @Test
    public void test04742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04742");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        int int7 = response6.statusCode;
        boolean boolean9 = response6.hasCookie("\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04743");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer11 = byteBuffer1.asCharBuffer();
        boolean boolean12 = byteBuffer1.hasRemaining();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        short short18 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.put(byteArray30);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer27.get(byteArray40, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer27.putDouble(100.0d);
        int int47 = byteBuffer21.compareTo(byteBuffer27);
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putInt(0);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.put(byteArray56);
        java.nio.ByteOrder byteOrder58 = byteBuffer57.order();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer27.order(byteOrder58);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer27.slice();
        int int61 = byteBuffer1.compareTo(byteBuffer60);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer60.putDouble((double) 27);
        boolean boolean64 = byteBuffer63.isReadOnly();
        java.nio.ByteBuffer byteBuffer66 = byteBuffer63.put((byte) 10);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer63.putChar('\u0a00');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 0 + "'", short18 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 14 + "'", int47 == 14);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteOrder58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
    }

    @Test
    public void test04744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04744");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        float float11 = byteBuffer10.getFloat();
        java.nio.DoubleBuffer doubleBuffer12 = byteBuffer10.asDoubleBuffer();
        char char13 = byteBuffer10.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(doubleBuffer12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + '\000' + "'", char13 == '\000');
    }

    @Test
    public void test04745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04745");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        short short23 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer15.putDouble(100.0d);
        boolean boolean26 = byteBuffer15.isDirect();
        int int27 = byteBuffer13.compareTo(byteBuffer15);
        java.nio.DoubleBuffer doubleBuffer28 = byteBuffer15.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer15.slice();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer15.put((byte) 10);
        java.nio.Buffer buffer33 = byteBuffer15.limit(48);
        int int34 = byteBuffer15.position();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long37 = byteBuffer36.getLong();
        java.nio.ByteBuffer byteBuffer39 = byteBuffer36.putLong((long) 4);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer41 = byteBuffer36.duplicate();
        int int42 = byteBuffer15.compareTo(byteBuffer36);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer36.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(buffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 25 + "'", int34 == 25);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-61) + "'", int42 == (-61));
        org.junit.Assert.assertNotNull(byteBuffer43);
    }

    @Test
    public void test04746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04746");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.net.URL uRL11 = response7.url();
        java.lang.String str12 = response7.statusMessage();
        boolean boolean14 = response7.hasHeader("\\Q\\Qjava.nio.HeapByteBuffer[pos=0 lim=25 cap=52]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(uRL11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04747");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putLong(8, (long) (short) 1);
        java.nio.Buffer buffer10 = byteBuffer9.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putDouble((-65536), 7.565251118924485E-307d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
    }

    @Test
    public void test04748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04748");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer15 = byteBuffer5.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putInt((int) '#');
        byte byte25 = byteBuffer21.get(1);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer21.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer21.slice();
        int int30 = byteBuffer29.remaining();
        int int31 = byteBuffer5.compareTo(byteBuffer29);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long34 = byteBuffer33.getLong();
        int int35 = byteBuffer33.position();
        float float37 = byteBuffer33.getFloat((int) (short) 10);
        boolean boolean38 = byteBuffer33.hasArray();
        double double39 = byteBuffer33.getDouble();
        short short41 = byteBuffer33.getShort(0);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer33.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer33.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.duplicate();
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.slice();
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer46.get(byteArray57);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer29.get(byteArray57);
        short short62 = byteBuffer29.getShort((int) (byte) 1);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer29.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 84 + "'", int30 == 84);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) 0 + "'", short62 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer63);
    }

    @Test
    public void test04749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04749");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str6 = response2.cookie("hi!");
        int int7 = response2.statusCode();
        java.lang.String str9 = response2.getHeaderCaseInsensitive("\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.lang.String str14 = response11.getHeaderCaseInsensitive("\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response15 = org.jsoup.helper.HttpConnection.Response.execute(request0, response11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04750");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        response6.statusMessage = "hi!";
        java.lang.String str10 = response6.header("\\Qjava.nio.DirectByteBuffer[pos=0 lim=22 cap=100]\\E");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04751");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.Buffer buffer47 = byteBuffer22.flip();
        java.nio.ByteBuffer byteBuffer49 = byteBuffer22.putInt((int) ' ');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer49.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(buffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer50);
    }

    @Test
    public void test04752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04752");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.put((byte) 10);
        java.nio.ByteOrder byteOrder23 = byteBuffer20.order();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer10.order(byteOrder23);
        java.nio.CharBuffer charBuffer25 = byteBuffer24.asCharBuffer();
        short short26 = byteBuffer24.getShort();
        boolean boolean27 = byteBuffer24.isDirect();
        int int28 = byteBuffer24.getInt();
        boolean boolean29 = byteBuffer24.hasArray();
        java.nio.ShortBuffer shortBuffer30 = byteBuffer24.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(shortBuffer30);
    }

    @Test
    public void test04753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04753");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        byte byte12 = byteBuffer9.get((int) 'a');
        java.nio.DoubleBuffer doubleBuffer13 = byteBuffer9.asDoubleBuffer();
        java.nio.FloatBuffer floatBuffer14 = byteBuffer9.asFloatBuffer();
        java.nio.Buffer buffer15 = byteBuffer9.clear();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer9.putInt((-18));
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        int int23 = byteBuffer21.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer29.get(byteArray42, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer21.get(byteArray42);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.wrap(byteArray42);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer17.put(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = byteBuffer17.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
    }

    @Test
    public void test04754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04754");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer5.duplicate();
        java.nio.ByteBuffer byteBuffer40 = byteBuffer5.putChar((int) (byte) 10, '\000');
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer48.compact();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer48.put((byte) 10);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer48.putInt(22);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer48.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer57 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long58 = byteBuffer57.getLong();
        int int59 = byteBuffer57.position();
        float float61 = byteBuffer57.getFloat((int) (short) 10);
        boolean boolean62 = byteBuffer57.hasArray();
        java.nio.DoubleBuffer doubleBuffer63 = byteBuffer57.asDoubleBuffer();
        java.nio.Buffer buffer64 = byteBuffer57.clear();
        java.nio.ByteOrder byteOrder65 = byteBuffer57.order();
        java.nio.ByteBuffer byteBuffer66 = byteBuffer48.order(byteOrder65);
        java.nio.Buffer buffer68 = byteBuffer48.limit(58);
        int int69 = byteBuffer5.compareTo(byteBuffer48);
        java.nio.DoubleBuffer doubleBuffer70 = byteBuffer48.asDoubleBuffer();
        java.nio.Buffer buffer71 = byteBuffer48.flip();
        java.nio.Buffer buffer72 = byteBuffer48.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int73 = byteBuffer48.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 0.0f + "'", float61 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleBuffer63);
        org.junit.Assert.assertNotNull(buffer64);
        org.junit.Assert.assertNotNull(byteOrder65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(buffer68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(doubleBuffer70);
        org.junit.Assert.assertNotNull(buffer71);
        org.junit.Assert.assertNotNull(buffer72);
    }

    @Test
    public void test04755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04755");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E", (int) '4');
        java.util.stream.Stream<java.lang.String> strStream4 = pattern2.splitAsStream((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=24 lim=84 cap=84]");
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E");
        org.junit.Assert.assertNotNull(strStream4);
    }

    @Test
    public void test04756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04756");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Response response10 = response6.removeCookie("Location");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.net.URL uRL12 = response11.url();
        org.jsoup.Connection.Response response15 = response11.header("java.nio.DirectByteBuffer[pos=82 lim=100 cap=100]", "\\Qhi!\\E");
        int int16 = response11.statusCode();
        response11.contentType = "java.nio.DirectByteBuffer[pos=100 lim=100 cap=100]";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertNull(uRL12);
        org.junit.Assert.assertNotNull(response15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04757");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        java.lang.String str9 = response1.statusMessage();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer12 = response11.byteData;
        boolean boolean14 = response11.hasHeader("\\Qjava.nio.DirectByteBuffer[pos=16 lim=100 cap=100]\\E");
        response11.charset = "java.nio.DirectByteBuffer[pos=24 lim=84 cap=84]";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04758");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=84 cap=84]");
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "java.nio.DirectByteBuffer[pos=24 lim=84 cap=84]");
    }

    @Test
    public void test04759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04759");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.net.URL uRL7 = response1.url();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(uRL7);
    }

    @Test
    public void test04760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04760");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.Connection.Method method20 = response1.method();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.put((byte) 10);
        java.nio.Buffer buffer34 = byteBuffer30.position((int) ' ');
        java.nio.Buffer buffer35 = byteBuffer30.rewind();
        response1.byteData = byteBuffer30;
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer38.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.putInt(0);
        short short43 = byteBuffer42.getShort();
        java.nio.IntBuffer intBuffer44 = byteBuffer42.asIntBuffer();
        int int45 = byteBuffer42.capacity();
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer51.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer51.putChar('a');
        double double58 = byteBuffer56.getDouble(12);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.putInt(0);
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.put(byteArray77);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer64.get(byteArray77, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer56.put(byteArray77);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer42.get(byteArray77);
        java.nio.ByteBuffer byteBuffer84 = java.nio.ByteBuffer.wrap(byteArray77);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer30.get(byteArray77);
        int int86 = byteBuffer30.position();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(buffer34);
        org.junit.Assert.assertNotNull(buffer35);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) 0 + "'", short43 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 7.565251118924485E-307d + "'", double58 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test04761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04761");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(10);
        int int13 = byteBuffer7.getInt(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer7.asReadOnlyBuffer();
        byte byte15 = byteBuffer14.get();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putLong((long) 98);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 0 + "'", byte15 == (byte) 0);
    }

    @Test
    public void test04762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04762");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = response24.headers();
        java.lang.String str26 = response24.contentType;
        org.jsoup.Connection.Request request27 = response24.req;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(request27);
    }

    @Test
    public void test04763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04763");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.put((byte) 10);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putChar(46, 'a');
        boolean boolean15 = byteBuffer14.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04764");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.util.regex.Pattern pattern3 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.util.regex.Pattern pattern6 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate7 = pattern6.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate8 = pattern6.asPredicate();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        java.nio.Buffer buffer16 = byteBuffer10.limit(32);
        java.nio.CharBuffer charBuffer17 = byteBuffer10.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream18 = pattern6.splitAsStream((java.lang.CharSequence) charBuffer17);
        java.util.stream.Stream<java.lang.String> strStream19 = pattern3.splitAsStream((java.lang.CharSequence) charBuffer17);
        java.util.stream.Stream<java.lang.String> strStream20 = null; // flaky: pattern0.splitAsStream((java.lang.CharSequence) charBuffer17);
        java.lang.String str21 = null; // flaky: pattern0.toString();
// flaky:         org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern3);
        org.junit.Assert.assertEquals(pattern3.toString(), "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern6);
        org.junit.Assert.assertEquals(pattern6.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strStream19);
// flaky:         org.junit.Assert.assertNotNull(strStream20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str21, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
    }

    @Test
    public void test04765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04765");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean7 = response1.hasHeader("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str10 = response1.cookie("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E");
        org.jsoup.Connection.Response response12 = response1.removeCookie("\\Qjava.nio.DirectByteBuffer[pos=15 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(response12);
    }

    @Test
    public void test04766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04766");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.lang.String str27 = response23.statusMessage;
        java.nio.ByteBuffer byteBuffer28 = null;
        response23.byteData = byteBuffer28;
        org.jsoup.Connection.Response response32 = response23.cookie("java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]", "Location");
        java.lang.String str33 = response23.charset();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(response32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test04767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04767");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.CharBuffer charBuffer10 = byteBuffer5.asCharBuffer();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putInt((int) '#');
        float float20 = byteBuffer18.getFloat(4);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer18.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer5.get(byteArray62);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.wrap(byteArray62);
        java.nio.ShortBuffer shortBuffer71 = byteBuffer70.asShortBuffer();
        boolean boolean72 = byteBuffer70.isReadOnly();
        // The following exception was thrown during execution in test generation
        try {
            double double74 = byteBuffer70.getDouble(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 7.3E-44f + "'", float20 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(shortBuffer71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test04768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04768");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = socketFactory0.createSocket(inetAddress9, (int) (byte) -1, inetAddress11, 84);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04769");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response7);
        response13.numRedirects = 2;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry17 = response13.scanHeaders("java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strEntry17);
    }

    @Test
    public void test04770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04770");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Q\\Qhi!\\E\\\\E\\Q\\E", 97);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern7 = java.util.regex.Pattern.compile("\\QLocation\\E", (int) (short) 0);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        java.nio.CharBuffer charBuffer18 = byteBuffer13.asCharBuffer();
        java.lang.String[] strArray20 = pattern7.split((java.lang.CharSequence) charBuffer18, (-24));
        boolean boolean21 = java.util.regex.Pattern.matches("\\QLocation\\E", (java.lang.CharSequence) charBuffer18);
        java.nio.Buffer buffer23 = charBuffer18.position(19);
        java.util.stream.Stream<java.lang.String> strStream24 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer18);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer25 = charBuffer18.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\Qhi!\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(pattern7);
        org.junit.Assert.assertEquals(pattern7.toString(), "\\QLocation\\E");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(strStream24);
    }

    @Test
    public void test04771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04771");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer5.putDouble(10.0d);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar('\n');
        java.lang.String str14 = byteBuffer13.toString();
        int int15 = byteBuffer13.remaining();
        java.nio.Buffer buffer16 = byteBuffer13.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str14, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 76 + "'", int15 == 76);
        org.junit.Assert.assertNotNull(buffer16);
    }

    @Test
    public void test04772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04772");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer11 = byteBuffer1.asCharBuffer();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.put((byte) 10);
        java.nio.ByteOrder byteOrder24 = byteBuffer21.order();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer1.order(byteOrder24);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteOrder24);
        org.junit.Assert.assertNotNull(byteBuffer25);
    }

    @Test
    public void test04773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04773");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket(inetAddress8, 86);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40438]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04774");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        double double7 = byteBuffer5.getDouble(12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('\u3ff0');
        double double11 = byteBuffer5.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test04775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04775");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.Connection.Method method7 = response4.method();
        java.nio.ByteBuffer byteBuffer8 = response4.byteData;
        boolean boolean9 = response4.executed;
        response4.executed = false;
        boolean boolean14 = response4.hasHeaderWithValue("\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E", "java.nio.DirectByteBuffer[pos=26 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response4);
        int int16 = response15.statusCode;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04776");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        short short12 = byteBuffer9.getShort();
        java.nio.Buffer buffer13 = byteBuffer9.rewind();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.put(byteArray22);
        java.nio.FloatBuffer floatBuffer24 = byteBuffer19.asFloatBuffer();
        boolean boolean25 = byteBuffer19.isDirect();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer19.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer29 = byteBuffer19.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.putInt(0);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putInt((int) '#');
        byte byte39 = byteBuffer35.get(1);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer35.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer35.slice();
        int int44 = byteBuffer43.remaining();
        int int45 = byteBuffer19.compareTo(byteBuffer43);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long48 = byteBuffer47.getLong();
        int int49 = byteBuffer47.position();
        float float51 = byteBuffer47.getFloat((int) (short) 10);
        boolean boolean52 = byteBuffer47.hasArray();
        double double53 = byteBuffer47.getDouble();
        short short55 = byteBuffer47.getShort(0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer47.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer47.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer60.duplicate();
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.slice();
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer64.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.putInt(0);
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.put(byteArray71);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer60.get(byteArray71);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer43.get(byteArray71);
        java.nio.ByteBuffer byteBuffer75 = java.nio.ByteBuffer.wrap(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer78 = byteBuffer9.put(byteArray71, (-64), 75);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(floatBuffer24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(doubleBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 0 + "'", byte39 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 84 + "'", int44 == 84);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) 0 + "'", short55 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
    }

    @Test
    public void test04777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04777");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(10);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer7.putChar('a');
        java.nio.Buffer buffer15 = byteBuffer7.position(52);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer7.putShort((int) (byte) 0, (short) 100);
        boolean boolean19 = byteBuffer7.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test04778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04778");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.IntBuffer intBuffer7 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer9.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response20 = null;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.lang.String str23 = response21.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = response21.cookies();
        org.jsoup.Connection.Response response26 = response21.removeCookie("hi!");
        java.lang.String str27 = response21.statusMessage();
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        boolean boolean38 = byteBuffer33.hasArray();
        response21.byteData = byteBuffer33;
        int int40 = byteBuffer19.compareTo(byteBuffer33);
        int int41 = byteBuffer5.compareTo(byteBuffer33);
        java.nio.Buffer buffer42 = byteBuffer33.rewind();
        boolean boolean43 = byteBuffer33.isDirect();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer33.putShort((int) (byte) 0, (short) (byte) 66);
        short short47 = byteBuffer46.getShort();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(response26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-10) + "'", int40 == (-10));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(buffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) 66 + "'", short47 == (short) 66);
    }

    @Test
    public void test04779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04779");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.asReadOnlyBuffer();
        long long12 = byteBuffer1.getLong();
        short short13 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.duplicate();
        float float17 = byteBuffer15.getFloat(16);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
    }

    @Test
    public void test04780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04780");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Request request7 = response1.req;
        java.lang.String str8 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str10 = response9.charset;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str12 = response9.statusMessage;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(request7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04781");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.Connection.Response response7 = response2.removeCookie("hi!");
        java.lang.String str8 = response2.statusMessage();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        boolean boolean19 = byteBuffer14.hasArray();
        response2.byteData = byteBuffer14;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response2);
        boolean boolean22 = response21.executed;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response21);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response21);
        boolean boolean26 = response24.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response24);
        org.jsoup.Connection.Method method28 = response27.method();
        response27.numRedirects = 24;
        response27.statusCode = 76;
        org.jsoup.helper.HttpConnection.Response response33 = new org.jsoup.helper.HttpConnection.Response(response27);
        org.jsoup.helper.HttpConnection.Response response34 = new org.jsoup.helper.HttpConnection.Response(response33);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response35 = org.jsoup.helper.HttpConnection.Response.execute(request0, response33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(method28);
    }

    @Test
    public void test04782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04782");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) 'a');
        int int3 = byteBuffer1.getInt(20);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putFloat((float) (-6));
        double double7 = byteBuffer5.getDouble(81);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test04783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04783");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.put((byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putShort((-10), (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
    }

    @Test
    public void test04784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04784");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        boolean boolean80 = byteBuffer25.hasArray();
        java.lang.String str81 = byteBuffer25.toString();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]" + "'", str81, "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
    }

    @Test
    public void test04785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04785");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer5 = byteBuffer4.asShortBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        int int9 = byteBuffer7.position();
        float float11 = byteBuffer7.getFloat((int) (short) 10);
        boolean boolean12 = byteBuffer7.hasArray();
        double double13 = byteBuffer7.getDouble();
        short short15 = byteBuffer7.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putDouble(100.0d);
        byte byte19 = byteBuffer17.get((int) (short) 0);
        java.nio.IntBuffer intBuffer20 = byteBuffer17.asIntBuffer();
        int int21 = byteBuffer4.compareTo(byteBuffer17);
        java.nio.ByteOrder byteOrder22 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer1.put(byteBuffer17);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer17.slice();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer17.asReadOnlyBuffer();
        char char27 = byteBuffer25.getChar(58);
        // The following exception was thrown during execution in test generation
        try {
            float float29 = byteBuffer25.getFloat((int) '\u0a00');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-24) + "'", int21 == (-24));
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
    }

    @Test
    public void test04786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04786");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        boolean boolean12 = byteBuffer1.isDirect();
        float float14 = byteBuffer1.getFloat(6);
        char char15 = byteBuffer1.getChar();
        java.nio.Buffer buffer16 = byteBuffer1.mark();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer1.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertNotNull(byteBuffer17);
    }

    @Test
    public void test04787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04787");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.IntBuffer intBuffer8 = byteBuffer1.asIntBuffer();
        float float9 = byteBuffer1.getFloat();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer12 = byteBuffer11.asShortBuffer();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long15 = byteBuffer14.getLong();
        int int16 = byteBuffer14.position();
        float float18 = byteBuffer14.getFloat((int) (short) 10);
        boolean boolean19 = byteBuffer14.hasArray();
        double double20 = byteBuffer14.getDouble();
        short short22 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer14.putDouble(100.0d);
        byte byte26 = byteBuffer24.get((int) (short) 0);
        java.nio.IntBuffer intBuffer27 = byteBuffer24.asIntBuffer();
        int int28 = byteBuffer11.compareTo(byteBuffer24);
        java.nio.ByteOrder byteOrder29 = byteBuffer24.order();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer24.slice();
        byte byte32 = byteBuffer24.get(0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer1.put(byteBuffer24);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer1.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer37 = byteBuffer1.put((-8), (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -8");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) 0 + "'", byte26 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-24) + "'", int28 == (-24));
        org.junit.Assert.assertNotNull(byteOrder29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 0 + "'", byte32 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer34);
    }

    @Test
    public void test04788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04788");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.compact();
        java.nio.Buffer buffer4 = byteBuffer1.rewind();
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer6.putLong((long) '4');
        short short10 = byteBuffer6.getShort(0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer6.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.put(byteArray22);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer19.get(byteArray32, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer19.putDouble(100.0d);
        int int39 = byteBuffer13.compareTo(byteBuffer19);
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer41.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.putInt(0);
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.put(byteArray48);
        java.nio.ByteOrder byteOrder50 = byteBuffer49.order();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer19.order(byteOrder50);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer19.slice();
        java.nio.ByteBuffer byteBuffer54 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer54.putLong((long) '4');
        int int58 = byteBuffer56.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.putInt(0);
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.put(byteArray77);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer64.get(byteArray77, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer56.get(byteArray77);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer19.get(byteArray77);
        java.nio.ByteBuffer byteBuffer84 = java.nio.ByteBuffer.wrap(byteArray77);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer1.put(byteArray77);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer1.putChar(41, 'a');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14 + "'", int39 == 14);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteOrder50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer88);
    }

    @Test
    public void test04789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04789");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 100);
        byte byte37 = byteBuffer11.get((int) (short) 0);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer11.putFloat(22, (float) 32);
        boolean boolean41 = byteBuffer40.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 0 + "'", byte37 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test04790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04790");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer10.put(byteBuffer69);
        int int71 = byteBuffer10.limit();
        char char73 = byteBuffer10.getChar((int) ' ');
        java.nio.ByteBuffer byteBuffer75 = byteBuffer10.put((byte) 66);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer75.putInt(94, 128);
        int int79 = byteBuffer78.limit();
        java.nio.ByteBuffer byteBuffer81 = byteBuffer78.put((byte) 0);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer81.putShort((int) '4', (short) -1);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertTrue("'" + char73 + "' != '" + '\000' + "'", char73 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 100 + "'", int79 == 100);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer84);
    }

    @Test
    public void test04791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04791");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]", (-8));
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
    }

    @Test
    public void test04792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04792");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer61 = byteBuffer58.putChar((int) '#', '4');
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteOrder byteOrder72 = byteBuffer71.order();
        byte byte74 = byteBuffer71.get((int) 'a');
        java.nio.DoubleBuffer doubleBuffer75 = byteBuffer71.asDoubleBuffer();
        short short76 = byteBuffer71.getShort();
        java.lang.String str77 = byteBuffer71.toString();
        int int78 = byteBuffer58.compareTo(byteBuffer71);
        java.nio.ByteOrder byteOrder79 = byteBuffer58.order();
        java.lang.Class<?> wildcardClass80 = byteOrder79.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteOrder72);
        org.junit.Assert.assertTrue("'" + byte74 + "' != '" + (byte) 0 + "'", byte74 == (byte) 0);
        org.junit.Assert.assertNotNull(doubleBuffer75);
        org.junit.Assert.assertTrue("'" + short76 + "' != '" + (short) 0 + "'", short76 == (short) 0);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]" + "'", str77, "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-66) + "'", int78 == (-66));
        org.junit.Assert.assertNotNull(byteOrder79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test04793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04793");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        boolean boolean13 = byteBuffer5.isDirect();
        int int14 = byteBuffer5.remaining();
        java.nio.LongBuffer longBuffer15 = byteBuffer5.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86 + "'", int14 == 86);
        org.junit.Assert.assertNotNull(longBuffer15);
    }

    @Test
    public void test04794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04794");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        response6.charset = "java.nio.DirectByteBuffer[pos=25 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test04795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04795");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        java.nio.ByteBuffer byteBuffer9 = response1.byteData;
        org.jsoup.Connection.Method method10 = response1.method();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        response11.numRedirects = 0;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response16 = response14.url(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNull(method10);
    }

    @Test
    public void test04796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04796");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = response9.headers();
        java.lang.String str11 = response9.charset();
        org.jsoup.Connection.Response response14 = response9.header("java.nio.DirectByteBuffer[pos=25 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=0 lim=76 cap=76]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(response14);
    }

    @Test
    public void test04797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04797");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putFloat((int) (short) 0, (float) '#');
        boolean boolean15 = byteBuffer5.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer17 = byteBuffer5.position((-6));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newPosition < 0: (-6 < 0)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04798");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.nio.ByteBuffer byteBuffer9 = response5.byteData;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        response10.contentType = "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response10);
        response13.statusCode = (-24);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response13);
        java.lang.String str18 = response16.cookie("java.nio.DirectByteBuffer[pos=25 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04799");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E", 18);
        java.lang.String str3 = pattern2.pattern();
        java.util.regex.Pattern pattern6 = java.util.regex.Pattern.compile("\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E", 128);
        java.lang.String str7 = pattern6.pattern();
        java.util.function.Predicate<java.lang.String> strPredicate8 = pattern6.asPredicate();
        java.lang.String str9 = pattern6.pattern();
        java.util.regex.Pattern pattern12 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", (int) (short) 10);
        java.lang.String str13 = pattern12.pattern();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer16 = byteBuffer15.asCharBuffer();
        java.util.regex.Matcher matcher17 = pattern12.matcher((java.lang.CharSequence) charBuffer16);
        java.util.stream.Stream<java.lang.String> strStream18 = pattern6.splitAsStream((java.lang.CharSequence) charBuffer16);
        java.lang.String[] strArray19 = pattern2.split((java.lang.CharSequence) charBuffer16);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E" + "'", str3, "\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        org.junit.Assert.assertNotNull(pattern6);
        org.junit.Assert.assertEquals(pattern6.toString(), "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E" + "'", str7, "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E" + "'", str9, "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(pattern12);
        org.junit.Assert.assertEquals(pattern12.toString(), "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str13, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(matcher17);
        org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=8 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strArray19);
    }

    @Test
    public void test04800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04800");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.lang.String str27 = response23.statusMessage;
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response23);
        boolean boolean29 = response23.executed;
        response23.statusCode = 98;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test04801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04801");
        boolean boolean2 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E", (java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04802");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar('\n');
        java.nio.Buffer buffer9 = byteBuffer8.mark();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocate(24);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) 1405091840);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer11.putDouble((int) (byte) 1, (double) 42949672960L);
        int int17 = byteBuffer16.remaining();
        byte[] byteArray18 = byteBuffer16.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer21 = byteBuffer8.get(byteArray18, (-52), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(buffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 66, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04803");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.put((byte) 10);
        java.nio.ByteOrder byteOrder23 = byteBuffer20.order();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer10.order(byteOrder23);
        java.nio.CharBuffer charBuffer25 = byteBuffer24.asCharBuffer();
        short short26 = byteBuffer24.getShort();
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer32.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer32.putChar('a');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer37.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer40 = byteBuffer37.putDouble(0.0d);
        int int41 = byteBuffer24.compareTo(byteBuffer40);
        char char42 = byteBuffer24.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '\000' + "'", char42 == '\000');
    }

    @Test
    public void test04804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04804");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float8 = byteBuffer7.getFloat();
        org.jsoup.helper.HttpConnection.Response response9 = null;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str12 = response10.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response10.cookies();
        org.jsoup.Connection.Response response15 = response10.removeCookie("hi!");
        java.lang.String str16 = response10.statusMessage();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        boolean boolean27 = byteBuffer22.hasArray();
        response10.byteData = byteBuffer22;
        boolean boolean30 = response10.hasCookie("\\Qhi!\\E");
        int int31 = response10.numRedirects;
        org.jsoup.helper.HttpConnection.Response response32 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.lang.String str33 = response10.charset();
        org.jsoup.Connection.Request request34 = response10.req;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response10);
        int int36 = response35.statusCode;
        boolean boolean37 = byteBuffer7.equals((java.lang.Object) int36);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(response15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(request34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test04805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04805");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.duplicate();
        java.nio.LongBuffer longBuffer7 = byteBuffer1.asLongBuffer();
        java.lang.String str8 = byteBuffer1.toString();
        boolean boolean9 = byteBuffer1.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]" + "'", str8, "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test04806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04806");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putChar('4');
        java.nio.Buffer buffer12 = byteBuffer10.limit(2);
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long15 = byteBuffer14.getLong();
        int int16 = byteBuffer14.position();
        float float18 = byteBuffer14.getFloat((int) (short) 10);
        boolean boolean19 = byteBuffer14.hasArray();
        java.nio.DoubleBuffer doubleBuffer20 = byteBuffer14.asDoubleBuffer();
        java.nio.Buffer buffer21 = byteBuffer14.clear();
        java.nio.ByteOrder byteOrder22 = byteBuffer14.order();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer10.order(byteOrder22);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = byteBuffer10.getDouble();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleBuffer20);
        org.junit.Assert.assertNotNull(buffer21);
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
    }

    @Test
    public void test04807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04807");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response10 = org.jsoup.helper.HttpConnection.Response.execute(request0, response8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test04808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04808");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Response response10 = response6.removeCookie("Location");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        boolean boolean12 = response11.executed;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = response11.cookies();
        org.jsoup.Connection.Method method15 = response11.method();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(method15);
    }

    @Test
    public void test04809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04809");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        int int8 = byteBuffer7.remaining();
        float float10 = byteBuffer7.getFloat(85);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer11 = byteBuffer7.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 80 + "'", int8 == 80);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
    }

    @Test
    public void test04810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04810");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        org.jsoup.Connection.Method method6 = response1.method();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer8.putLong((long) '4');
        short short12 = byteBuffer8.getShort(0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer8.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer21.putChar('a');
        double double28 = byteBuffer26.getDouble(12);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer26.put(byteArray47);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.wrap(byteArray47);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer15.get(byteArray47);
        java.nio.Buffer buffer56 = byteBuffer15.position(0);
        response1.byteData = byteBuffer15;
        java.lang.String str59 = response1.cookie("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 7.565251118924485E-307d + "'", double28 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(buffer56);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test04811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04811");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        java.nio.ByteBuffer byteBuffer9 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str11 = response1.charset();
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response12.header("\\Q\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test04812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04812");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt((int) (short) 1, (-24));
        java.nio.ByteBuffer byteBuffer33 = byteBuffer30.putFloat(88, (float) 58);
        int int34 = byteBuffer33.limit();
        char char36 = byteBuffer33.getChar(43);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer33.put(47, (byte) 10);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + char36 + "' != '" + '\000' + "'", char36 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer39);
    }

    @Test
    public void test04813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04813");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response12 = org.jsoup.helper.HttpConnection.Response.execute(request0, response7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test04814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04814");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ShortBuffer shortBuffer30 = byteBuffer3.asShortBuffer();
        java.nio.Buffer buffer32 = byteBuffer3.limit((int) 'a');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer3.putInt((-20));
        boolean boolean35 = byteBuffer34.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(shortBuffer30);
        org.junit.Assert.assertNotNull(buffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test04815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04815");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        response1.executed = true;
        int int11 = response1.numRedirects;
        boolean boolean13 = response1.hasCookie("\\QLocation\\E");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int15 = response14.statusCode();
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response14);
        java.lang.String str18 = response14.header("java.nio.DirectByteBuffer[pos=16 lim=32 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04816");
        java.util.regex.Pattern pattern3 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", (int) (short) 10);
        java.lang.String str4 = pattern3.pattern();
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer8 = byteBuffer6.putInt(0);
        java.nio.CharBuffer charBuffer9 = byteBuffer8.asCharBuffer();
        java.util.regex.Matcher matcher10 = pattern3.matcher((java.lang.CharSequence) charBuffer9);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putInt((int) '#');
        byte byte20 = byteBuffer16.get(1);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer16.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer23.duplicate();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putLong((int) (byte) 1, 13376L);
        java.nio.CharBuffer charBuffer28 = byteBuffer23.asCharBuffer();
        java.util.regex.Matcher matcher29 = pattern3.matcher((java.lang.CharSequence) charBuffer28);
        boolean boolean30 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (java.lang.CharSequence) charBuffer28);
        org.junit.Assert.assertNotNull(pattern3);
        org.junit.Assert.assertEquals(pattern3.toString(), "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str4, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(matcher10);
        org.junit.Assert.assertEquals(matcher10.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=8 lim=100 cap=100] region=0,24 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 0 + "'", byte20 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(matcher29);
        org.junit.Assert.assertEquals(matcher29.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=8 lim=100 cap=100] region=0,42 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test04817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04817");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket3 = socketFactory0.createSocket("\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E", 85);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: \\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
    }

    @Test
    public void test04818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04818");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate4 = pattern2.asPredicate();
        java.lang.String str5 = pattern2.pattern();
        java.util.regex.Pattern pattern9 = null; // flaky: java.util.regex.Pattern.compile("\\Q\\Q\\E\\\\E\\Q\\E", (-6));
        java.lang.String str10 = null; // flaky: pattern9.pattern();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        float float16 = byteBuffer14.getFloat(32);
        boolean boolean17 = byteBuffer14.isDirect();
        java.util.regex.Pattern pattern20 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate21 = pattern20.asPredicate();
        boolean boolean22 = byteBuffer14.equals((java.lang.Object) pattern20);
        java.util.regex.Pattern pattern26 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern26;
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.FloatBuffer floatBuffer38 = byteBuffer33.asFloatBuffer();
        java.nio.CharBuffer charBuffer39 = byteBuffer33.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream40 = null; // flaky: pattern26.splitAsStream((java.lang.CharSequence) charBuffer39);
        boolean boolean41 = java.util.regex.Pattern.matches("\\Q\\E", (java.lang.CharSequence) charBuffer39);
        java.lang.String[] strArray42 = pattern20.split((java.lang.CharSequence) "\\Q\\E");
        java.util.regex.Pattern pattern43 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern43;
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer47 = byteBuffer46.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream48 = null; // flaky: pattern43.splitAsStream((java.lang.CharSequence) charBuffer47);
        java.util.stream.Stream<java.lang.String> strStream49 = pattern20.splitAsStream((java.lang.CharSequence) charBuffer47);
        java.util.regex.Matcher matcher50 = null; // flaky: pattern9.matcher((java.lang.CharSequence) charBuffer47);
        boolean boolean51 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]", (java.lang.CharSequence) charBuffer47);
        java.util.regex.Matcher matcher52 = pattern2.matcher((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
        java.lang.String str53 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern9);
// flaky:         org.junit.Assert.assertEquals(pattern9.toString(), "\\Q\\Q\\E\\\\E\\Q\\E");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\\Q\\Q\\E\\\\E\\Q\\E" + "'", str10, "\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(pattern20);
        org.junit.Assert.assertEquals(pattern20.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertNotNull(pattern26);
// flaky:         org.junit.Assert.assertEquals(pattern26.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(floatBuffer38);
        org.junit.Assert.assertNotNull(charBuffer39);
// flaky:         org.junit.Assert.assertNotNull(strStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray42);
// flaky:         org.junit.Assert.assertNotNull(pattern43);
// flaky:         org.junit.Assert.assertEquals(pattern43.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
// flaky:         org.junit.Assert.assertNotNull(strStream48);
        org.junit.Assert.assertNotNull(strStream49);
// flaky:         org.junit.Assert.assertNotNull(matcher50);
// flaky:         org.junit.Assert.assertEquals(matcher50.toString(), "java.util.regex.Matcher[pattern=\\Q\\Q\\E\\\\E\\Q\\E region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matcher52);
        org.junit.Assert.assertEquals(matcher52.toString(), "java.util.regex.Matcher[pattern=hi! region=0,49 lastmatch=]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
    }

    @Test
    public void test04819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04819");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str14 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response18 = response16.removeHeader("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response16);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = response19.cookies();
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response19);
        boolean boolean24 = response19.hasHeaderWithValue("java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]", "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        java.lang.String str25 = response19.charset();
        response19.charset = "Location";
        java.net.URL uRL28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response29 = response19.url(uRL28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test04820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04820");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.FloatBuffer floatBuffer16 = byteBuffer9.asFloatBuffer();
        int int17 = byteBuffer9.capacity();
        java.nio.ShortBuffer shortBuffer18 = byteBuffer9.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(shortBuffer18);
    }

    @Test
    public void test04821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04821");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.statusMessage = "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]";
        org.jsoup.Connection.Response response11 = response1.cookie("\\Q\\Q\\E\\\\E\\Q\\E", "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str13 = response1.charset();
        org.jsoup.Connection.Request request14 = response1.req;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(request14);
    }

    @Test
    public void test04822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04822");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        int int2 = byteBuffer1.arrayOffset();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer4.putShort(16, (short) 1);
        char char8 = byteBuffer7.getChar();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer9.slice();
        boolean boolean11 = byteBuffer9.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\000' + "'", char8 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test04823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04823");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response0);
        response2.statusMessage = "";
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.Connection.Request request7 = null;
        response2.req = request7;
    }

    @Test
    public void test04824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04824");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int7 = response6.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response6.scanHeaders("Location");
        java.lang.String str10 = response6.charset;
        int int11 = response6.statusCode();
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.Connection.Response response17 = response13.header("\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E", "java.nio.DirectByteBuffer[pos=0 lim=84 cap=84]");
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(response17);
    }

    @Test
    public void test04825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04825");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        byte byte7 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        short short13 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer9.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(byteArray35);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer22.get(byteArray35, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer22.putDouble(100.0d);
        int int42 = byteBuffer16.compareTo(byteBuffer22);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteOrder byteOrder53 = byteBuffer52.order();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer22.order(byteOrder53);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer1.order(byteOrder53);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer1.putLong(4, (long) 8);
        int int59 = byteBuffer58.limit();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.duplicate();
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long63 = byteBuffer62.getLong();
        int int64 = byteBuffer62.position();
        float float66 = byteBuffer62.getFloat((int) (short) 10);
        boolean boolean67 = byteBuffer62.hasArray();
        double double68 = byteBuffer62.getDouble();
        short short70 = byteBuffer62.getShort(0);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer62.putDouble(100.0d);
        float float73 = byteBuffer62.getFloat();
        char char75 = byteBuffer62.getChar(1);
        java.nio.ByteBuffer byteBuffer77 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer77.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer81 = byteBuffer77.putInt(0);
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer85 = byteBuffer81.put(byteArray84);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer85.putDouble(7.565251118924485E-307d);
        int int88 = byteBuffer62.compareTo(byteBuffer87);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer87.duplicate();
        java.nio.ByteBuffer byteBuffer90 = byteBuffer60.put(byteBuffer89);
        java.nio.Buffer buffer92 = byteBuffer90.limit(92);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteOrder53);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 0.0f + "'", float66 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) 0 + "'", short70 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 0.0f + "'", float73 == 0.0f);
        org.junit.Assert.assertTrue("'" + char75 + "' != '" + '\000' + "'", char75 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-6) + "'", int88 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(buffer92);
    }

    @Test
    public void test04826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04826");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        double double11 = byteBuffer5.getDouble();
        java.nio.IntBuffer intBuffer12 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putShort(0, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer15.compact();
        double double18 = byteBuffer15.getDouble(91);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test04827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04827");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.IntBuffer intBuffer8 = byteBuffer1.asIntBuffer();
        boolean boolean9 = byteBuffer1.isReadOnly();
        java.lang.String str10 = byteBuffer1.toString();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer1.putShort(26, (short) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = byteBuffer13.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]" + "'", str10, "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer13);
    }

    @Test
    public void test04828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04828");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        double double16 = byteBuffer9.getDouble(0);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        short short22 = byteBuffer18.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer18.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer31.get(byteArray44, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer31.putDouble(100.0d);
        int int51 = byteBuffer25.compareTo(byteBuffer31);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteOrder byteOrder62 = byteBuffer61.order();
        java.nio.ByteBuffer byteBuffer63 = byteBuffer31.order(byteOrder62);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer31.asReadOnlyBuffer();
        boolean boolean65 = byteBuffer9.equals((java.lang.Object) byteBuffer31);
        java.nio.FloatBuffer floatBuffer66 = byteBuffer9.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.allocate((int) (short) 10);
        byte[] byteArray69 = byteBuffer68.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer72 = byteBuffer9.put(byteArray69, 18, 3407872);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.57E-322d + "'", double16 == 2.57E-322d);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteOrder62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04829");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.Connection.Method method20 = response1.method();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.put((byte) 10);
        java.nio.Buffer buffer34 = byteBuffer30.position((int) ' ');
        java.nio.Buffer buffer35 = byteBuffer30.rewind();
        response1.byteData = byteBuffer30;
        boolean boolean39 = response1.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", "\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        java.lang.String str40 = response1.contentType();
        int int41 = response1.numRedirects;
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer44 = byteBuffer43.asShortBuffer();
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long47 = byteBuffer46.getLong();
        int int48 = byteBuffer46.position();
        float float50 = byteBuffer46.getFloat((int) (short) 10);
        boolean boolean51 = byteBuffer46.hasArray();
        double double52 = byteBuffer46.getDouble();
        short short54 = byteBuffer46.getShort(0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer46.putDouble(100.0d);
        byte byte58 = byteBuffer56.get((int) (short) 0);
        java.nio.IntBuffer intBuffer59 = byteBuffer56.asIntBuffer();
        int int60 = byteBuffer43.compareTo(byteBuffer56);
        java.nio.FloatBuffer floatBuffer61 = byteBuffer56.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer63 = byteBuffer56.put((byte) -1);
        java.nio.Buffer buffer64 = byteBuffer56.flip();
        response1.byteData = byteBuffer56;
        java.nio.IntBuffer intBuffer66 = byteBuffer56.asIntBuffer();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(buffer34);
        org.junit.Assert.assertNotNull(buffer35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(shortBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 0.0f + "'", float50 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + short54 + "' != '" + (short) 0 + "'", short54 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) 0 + "'", byte58 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-24) + "'", int60 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(buffer64);
        org.junit.Assert.assertNotNull(intBuffer66);
    }

    @Test
    public void test04830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04830");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.Connection.Response response14 = response11.cookie("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]", "\\Q\\Qjava.nio.HeapByteBuffer[pos=0 lim=25 cap=52]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(response14);
    }

    @Test
    public void test04831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04831");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.statusMessage = "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]";
        org.jsoup.Connection.Response response11 = response1.cookie("\\Q\\Q\\E\\\\E\\Q\\E", "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        java.lang.String str12 = response1.contentType;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04832");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        org.jsoup.Connection.Request request8 = response1.req;
        java.net.URL uRL9 = response1.url();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response13 = response10.cookie
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(request8);
        org.junit.Assert.assertNull(uRL9);
        org.junit.Assert.assertNotNull(response13);
    }

    @Test
    public void test04833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04833");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]";
    }

    @Test
    public void test04834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04834");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request11 = response10.req;
        int int12 = response10.statusCode;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNull(request11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test04835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04835");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((-100));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative capacity: -100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04836");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        java.lang.String str9 = response1.statusMessage();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.net.URL uRL12 = response11.url();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(uRL12);
    }

    @Test
    public void test04837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04837");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        boolean boolean21 = response1.hasCookie("\\Qhi!\\E");
        int int22 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int24 = response23.statusCode();
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response23);
        int int26 = response23.statusCode();
        response23.executed = true;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test04838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04838");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar('\n');
        char char9 = byteBuffer1.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\000' + "'", char9 == '\000');
    }

    @Test
    public void test04839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04839");
        org.jsoup.Connection.Request request0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response.writePost(request0, outputStream1, "\\Qjava.nio.DirectByteBuffer[pos=0 lim=82 cap=82]\\E");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04840");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response15);
        response15.statusMessage = "\\Qhi!\\E";
        java.nio.ByteBuffer byteBuffer19 = response15.byteData;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertNull(byteBuffer19);
    }

    @Test
    public void test04841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04841");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.numRedirects = 83;
        java.net.URL uRL12 = response1.url();
        org.jsoup.Connection.Response response15 = response1.cookie("\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E", "\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response16 = null;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response16);
        response17.contentType = "";
        java.lang.String str20 = response17.contentType;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response17);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry23 = response21.scanHeaders("hi!");
        org.jsoup.Connection.Method method24 = response21.method();
        org.jsoup.Connection.Response response26 = response21.removeHeader("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        int int32 = byteBuffer30.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer30.putChar((int) ' ', '#');
        short short36 = byteBuffer35.getShort();
        response21.byteData = byteBuffer35;
        java.nio.ByteBuffer byteBuffer40 = byteBuffer35.putShort((int) '\n', (short) 0);
        response1.byteData = byteBuffer40;
        org.jsoup.Connection.Request request42 = null;
        response1.req = request42;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(uRL12);
        org.junit.Assert.assertNotNull(response15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(strEntry23);
        org.junit.Assert.assertNull(method24);
        org.junit.Assert.assertNotNull(response26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) 0 + "'", short36 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer40);
    }

    @Test
    public void test04842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04842");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        int int6 = response1.statusCode();
        response1.contentType = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        response1.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E";
        boolean boolean13 = response1.hasHeaderWithValue("\\Q\\E", "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = response1.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04843");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response9 = response1.header("Location", "");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean13 = response10.hasHeaderWithValue("\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E", "\\Qjava.nio.DirectByteBuffer[pos=12 lim=100 cap=100]\\E");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04844");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response2.headers();
        java.lang.String str10 = response2.header("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = response2.headers();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response12 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test04845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04845");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response14);
        java.lang.String str17 = response14.cookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.Connection.Response response19 = response14.removeHeader("\\Q\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(response19);
    }

    @Test
    public void test04846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04846");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        int int36 = byteBuffer35.limit();
        short short38 = byteBuffer35.getShort((int) 'a');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.slice();
        java.nio.ByteBuffer byteBuffer42 = byteBuffer35.putInt(28, (-65536));
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putChar('\000');
        java.lang.Class<?> wildcardClass45 = byteBuffer44.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 0 + "'", short38 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test04847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04847");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        boolean boolean9 = response6.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.lang.String str10 = response6.statusMessage;
        org.jsoup.Connection.Request request11 = null;
        response6.req = request11;
        org.jsoup.Connection.Request request13 = null;
        response6.req = request13;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04848");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer16.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.duplicate();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putShort((short) 100);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putInt((int) '#');
        float float32 = byteBuffer30.getFloat(4);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer57 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer57.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.putInt(0);
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer65 = byteBuffer61.put(byteArray64);
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.putInt(0);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.put(byteArray74);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer61.get(byteArray74, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer55.put(byteArray74);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer30.put(byteArray74);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer22.put(byteArray74);
        java.nio.ByteBuffer byteBuffer82 = java.nio.ByteBuffer.wrap(byteArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer85 = byteBuffer14.get(byteArray74, (-64), 3407872);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 7.3E-44f + "'", float32 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
    }

    @Test
    public void test04849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04849");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "java.nio.HeapByteBuffer[pos=0 lim=25 cap=52]";
    }

    @Test
    public void test04850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04850");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str8 = response1.header("");
        org.jsoup.Connection.Response response11 = response1.cookie("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.lang.String str13 = response1.getHeaderCaseInsensitive("hi!");
        java.lang.String str14 = response1.contentType();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document15 = response1.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test04851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04851");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        org.jsoup.Connection.Response response8 = response1.removeCookie("Location");
        response1.statusCode = (short) 10;
        response1.statusMessage = "hi!";
        java.lang.String str13 = response1.charset();
        response1.numRedirects = 50;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = response1.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04852");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        int int26 = byteBuffer22.getInt(0);
        int int27 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer22.putInt(83, (int) (byte) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putFloat((float) 256);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer32.putChar(23, 'a');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer32.putChar(' ');
        java.nio.Buffer buffer38 = byteBuffer37.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(buffer38);
    }

    @Test
    public void test04853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04853");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        boolean boolean25 = byteBuffer22.equals((java.lang.Object) '\n');
        char char26 = byteBuffer22.getChar();
        char char27 = byteBuffer22.getChar();
        char char28 = byteBuffer22.getChar();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer22.put(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer42 = byteBuffer22.putDouble((-84), (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + '\000' + "'", char26 == '\000');
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer39);
    }

    @Test
    public void test04854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04854");
        java.lang.String str1 = java.util.regex.Pattern.quote("\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\\Q\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E" + "'", str1, "\\Q\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
    }

    @Test
    public void test04855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04855");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int7 = byteBuffer1.getInt((int) '4');
        long long8 = byteBuffer1.getLong();
        java.nio.FloatBuffer floatBuffer9 = byteBuffer1.asFloatBuffer();
        char char10 = byteBuffer1.getChar();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        short short16 = byteBuffer12.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer12.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer12.putChar('4');
        boolean boolean22 = byteBuffer12.isReadOnly();
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long25 = byteBuffer24.getLong();
        int int26 = byteBuffer24.position();
        float float28 = byteBuffer24.getFloat((int) (short) 10);
        boolean boolean29 = byteBuffer24.hasArray();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer24.putFloat((float) (-24));
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        int int37 = byteBuffer35.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putInt(0);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.put(byteArray56);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer43.get(byteArray56, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer35.get(byteArray56);
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.wrap(byteArray56);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer24.put(byteArray56);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer12.get(byteArray56);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer1.get(byteArray56);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer65.putDouble(0, (double) (-1L));
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\000' + "'", char10 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 0 + "'", short16 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer68);
    }

    @Test
    public void test04856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04856");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response5.contentType();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        response5.executed = true;
        boolean boolean16 = response5.hasHeaderWithValue("\\Q\\Qjava.nio.DirectByteBuffer[pos=12 lim=100 cap=100]\\E\\\\E\\Q\\E", "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04857");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.nio.ByteBuffer byteBuffer9 = response5.byteData;
        java.lang.String str10 = response5.contentType;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04858");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        org.jsoup.Connection.Method method8 = response5.method();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long11 = byteBuffer10.getLong();
        int int12 = byteBuffer10.position();
        response5.byteData = byteBuffer10;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str15 = response5.statusMessage();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response5.cookies();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = response5.cookies();
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test04859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04859");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        java.net.InetAddress inetAddress9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket(inetAddress7, 0, inetAddress9, 16);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04860");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer22.putShort((short) (byte) 100);
        java.nio.ShortBuffer shortBuffer49 = byteBuffer48.asShortBuffer();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer48.putInt(10);
        java.nio.FloatBuffer floatBuffer52 = byteBuffer51.asFloatBuffer();
        boolean boolean53 = byteBuffer51.isReadOnly();
        java.nio.Buffer buffer54 = byteBuffer51.mark();
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long57 = byteBuffer56.getLong();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer56.putLong((long) 4);
        java.nio.IntBuffer intBuffer60 = byteBuffer59.asIntBuffer();
        boolean boolean61 = byteBuffer51.equals((java.lang.Object) intBuffer60);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer51.putShort(1, (short) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray65 = byteBuffer51.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(shortBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(floatBuffer52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(buffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(intBuffer60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteBuffer64);
    }

    @Test
    public void test04861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04861");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar(6, '\n');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putFloat((float) 18);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer5.duplicate();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        short short23 = byteBuffer22.getShort();
        java.nio.IntBuffer intBuffer24 = byteBuffer22.asIntBuffer();
        java.nio.FloatBuffer floatBuffer25 = byteBuffer22.asFloatBuffer();
        boolean boolean26 = byteBuffer5.equals((java.lang.Object) byteBuffer22);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer22.putShort(0, (short) 100);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer24);
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer29);
    }

    @Test
    public void test04862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04862");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        boolean boolean6 = response1.executed;
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int8 = response1.statusCode;
        java.lang.String str10 = response1.header("\\Q\\Q\\E\\\\E\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        response12.contentType = "\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=22 cap=22]\\E\\\\E\\Q\\E";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04863");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.util.regex.Pattern pattern6 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern9 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern12 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern13 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern13;
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer17 = byteBuffer16.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream18 = null; // flaky: pattern13.splitAsStream((java.lang.CharSequence) charBuffer17);
        java.util.regex.Matcher matcher19 = pattern12.matcher((java.lang.CharSequence) charBuffer17);
        java.util.regex.Matcher matcher20 = null; // flaky: pattern9.matcher((java.lang.CharSequence) charBuffer17);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer23 = byteBuffer22.asCharBuffer();
        java.util.regex.Matcher matcher24 = null; // flaky: pattern9.matcher((java.lang.CharSequence) charBuffer23);
        java.lang.String[] strArray26 = pattern6.split((java.lang.CharSequence) charBuffer23, 8);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern6;
        java.util.regex.Pattern pattern30 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern30;
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.FloatBuffer floatBuffer42 = byteBuffer37.asFloatBuffer();
        java.nio.CharBuffer charBuffer43 = byteBuffer37.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream44 = null; // flaky: pattern30.splitAsStream((java.lang.CharSequence) charBuffer43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.FloatBuffer floatBuffer55 = byteBuffer50.asFloatBuffer();
        java.nio.CharBuffer charBuffer56 = byteBuffer50.asCharBuffer();
        java.lang.String[] strArray58 = null; // flaky: pattern30.split((java.lang.CharSequence) charBuffer56, (-65536));
        java.lang.String[] strArray59 = pattern6.split((java.lang.CharSequence) charBuffer56);
        java.util.stream.Stream<java.lang.String> strStream60 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer56);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Matcher matcher63 = pattern2.matcher((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=16 lim=32 cap=100]");
        java.lang.CharSequence charSequence64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.regex.Matcher matcher65 = pattern2.matcher(charSequence64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(pattern6);
        org.junit.Assert.assertEquals(pattern6.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern9);
// flaky:         org.junit.Assert.assertEquals(pattern9.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern12);
        org.junit.Assert.assertEquals(pattern12.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern13);
// flaky:         org.junit.Assert.assertEquals(pattern13.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
// flaky:         org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(matcher19);
        org.junit.Assert.assertEquals(matcher19.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher20);
// flaky:         org.junit.Assert.assertEquals(matcher20.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(charBuffer23);
// flaky:         org.junit.Assert.assertNotNull(matcher24);
// flaky:         org.junit.Assert.assertEquals(matcher24.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray26);
// flaky:         org.junit.Assert.assertNotNull(pattern30);
// flaky:         org.junit.Assert.assertEquals(pattern30.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(floatBuffer42);
        org.junit.Assert.assertNotNull(charBuffer43);
// flaky:         org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(floatBuffer55);
        org.junit.Assert.assertNotNull(charBuffer56);
// flaky:         org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strStream60);
        org.junit.Assert.assertNotNull(matcher63);
        org.junit.Assert.assertEquals(matcher63.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,48 lastmatch=]");
    }

    @Test
    public void test04864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04864");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E", 18);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
    }

    @Test
    public void test04865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04865");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response5);
        boolean boolean15 = response5.hasHeaderWithValue("\\Qjava.nio.DirectByteBuffer[pos=84 lim=100 cap=100]\\E", "\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=22 cap=22]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04866");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        boolean boolean7 = response1.hasCookie("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str9 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = response1.headers();
        java.lang.String str13 = response1.header("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E");
        java.nio.ByteBuffer byteBuffer14 = response1.byteData;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(byteBuffer14);
    }

    @Test
    public void test04867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04867");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.Buffer buffer7 = byteBuffer1.limit(32);
        java.nio.CharBuffer charBuffer8 = byteBuffer1.asCharBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putShort((short) 0);
        double double11 = byteBuffer10.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test04868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04868");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.Connection.Method method27 = response26.method();
        java.lang.String str28 = response26.statusMessage();
        response26.statusCode = 0;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document31 = response26.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test04869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04869");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        float float11 = byteBuffer1.getFloat(1);
        java.nio.FloatBuffer floatBuffer12 = byteBuffer1.asFloatBuffer();
        java.nio.Buffer buffer13 = byteBuffer1.clear();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.put(byteArray22);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer19.get(byteArray32, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer1.get(byteArray32);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer1.asReadOnlyBuffer();
        double double40 = byteBuffer1.getDouble(3);
        java.nio.Buffer buffer42 = byteBuffer1.limit(3);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer44 = byteBuffer1.putInt((-11));
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(buffer42);
    }

    @Test
    public void test04870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04870");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocate((int) '\u0a00');
        boolean boolean11 = byteBuffer5.equals((java.lang.Object) byteBuffer10);
        int int12 = byteBuffer10.arrayOffset();
        short short14 = byteBuffer10.getShort((int) (short) 256);
        short short16 = byteBuffer10.getShort(58);
        java.nio.ShortBuffer shortBuffer17 = byteBuffer10.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 0 + "'", short14 == (short) 0);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 0 + "'", short16 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer17);
    }

    @Test
    public void test04871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04871");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putDouble(0.0d);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer22.putChar('\u3ff0');
        // The following exception was thrown during execution in test generation
        try {
            int int30 = byteBuffer28.getInt((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
    }

    @Test
    public void test04872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04872");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long27 = byteBuffer26.getLong();
        int int28 = byteBuffer26.position();
        float float30 = byteBuffer26.getFloat((int) (short) 10);
        boolean boolean31 = byteBuffer26.hasArray();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer26.putFloat((float) (-24));
        response24.byteData = byteBuffer26;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response24);
        org.jsoup.helper.HttpConnection.Response response36 = new org.jsoup.helper.HttpConnection.Response(response35);
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        java.lang.String str38 = response37.statusMessage;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 0.0f + "'", float30 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test04873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04873");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        boolean boolean6 = response5.executed;
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response7);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response9 = org.jsoup.helper.HttpConnection.Response.execute(request0, response7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04874");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate4 = pattern2.asPredicate();
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer6.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer6.putInt(0);
        java.nio.Buffer buffer12 = byteBuffer6.limit(32);
        java.nio.CharBuffer charBuffer13 = byteBuffer6.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream14 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer13);
        java.lang.String[] strArray16 = pattern2.split((java.lang.CharSequence) "\\Qjava.nio.DirectByteBuffer[pos=19 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test04875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04875");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", (int) (short) 10);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern6 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern9 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate10 = pattern9.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate11 = pattern9.asPredicate();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        java.nio.Buffer buffer19 = byteBuffer13.limit(32);
        java.nio.CharBuffer charBuffer20 = byteBuffer13.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream21 = pattern9.splitAsStream((java.lang.CharSequence) charBuffer20);
        java.lang.String[] strArray22 = null; // flaky: pattern6.split((java.lang.CharSequence) charBuffer20);
        java.lang.String str23 = null; // flaky: pattern6.pattern();
        java.util.function.Predicate<java.lang.String> strPredicate24 = null; // flaky: pattern6.asPredicate();
        java.util.regex.Pattern pattern26 = java.util.regex.Pattern.compile("\\Q\\Qhi!\\E\\\\E\\Q\\E");
        java.util.regex.Pattern pattern27 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern27;
        java.util.regex.Pattern pattern30 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.util.regex.Pattern pattern33 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate34 = pattern33.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate35 = pattern33.asPredicate();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        java.nio.Buffer buffer43 = byteBuffer37.limit(32);
        java.nio.CharBuffer charBuffer44 = byteBuffer37.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream45 = pattern33.splitAsStream((java.lang.CharSequence) charBuffer44);
        java.util.stream.Stream<java.lang.String> strStream46 = pattern30.splitAsStream((java.lang.CharSequence) charBuffer44);
        java.util.stream.Stream<java.lang.String> strStream47 = pattern27.splitAsStream((java.lang.CharSequence) charBuffer44);
        java.util.regex.Matcher matcher48 = pattern26.matcher((java.lang.CharSequence) charBuffer44);
        java.lang.String[] strArray50 = null; // flaky: pattern6.split((java.lang.CharSequence) charBuffer44, 6);
        java.util.stream.Stream<java.lang.String> strStream51 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer44);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(pattern6);
// flaky:         org.junit.Assert.assertEquals(pattern6.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern9);
        org.junit.Assert.assertEquals(pattern9.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(buffer19);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(strStream21);
// flaky:         org.junit.Assert.assertNotNull(strArray22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str23, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertNotNull(pattern26);
        org.junit.Assert.assertEquals(pattern26.toString(), "\\Q\\Qhi!\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(pattern27);
        org.junit.Assert.assertEquals(pattern27.toString(), "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern30);
        org.junit.Assert.assertEquals(pattern30.toString(), "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern33);
        org.junit.Assert.assertEquals(pattern33.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(strPredicate35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(buffer43);
        org.junit.Assert.assertNotNull(charBuffer44);
        org.junit.Assert.assertNotNull(strStream45);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertNotNull(strStream47);
        org.junit.Assert.assertNotNull(matcher48);
        org.junit.Assert.assertEquals(matcher48.toString(), "java.util.regex.Matcher[pattern=\\Q\\Qhi!\\E\\\\E\\Q\\E region=0,10 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strStream51);
    }

    @Test
    public void test04876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04876");
        boolean boolean2 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]", (java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04877");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        int int46 = response37.statusCode();
        java.lang.String str47 = response37.contentType();
        response37.contentType = "\\Qhi!\\E";
        org.jsoup.helper.HttpConnection.Response response50 = new org.jsoup.helper.HttpConnection.Response(response37);
        boolean boolean52 = response37.hasCookie("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response53 = new org.jsoup.helper.HttpConnection.Response(response37);
        response53.charset = "\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E";
        response53.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E";
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = response53.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test04878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04878");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.statusMessage = "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]";
        int int9 = response1.statusCode();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer12 = response1.byteData;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(byteBuffer12);
    }

    @Test
    public void test04879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04879");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        int int53 = byteBuffer51.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer51.get(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer14.get(byteArray72);
        java.nio.Buffer buffer79 = byteBuffer78.flip();
        int int81 = byteBuffer78.getInt(16);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(buffer79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test04880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04880");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        int int9 = byteBuffer7.position();
        float float11 = byteBuffer7.getFloat((int) (short) 10);
        boolean boolean12 = byteBuffer7.hasArray();
        double double13 = byteBuffer7.getDouble();
        short short15 = byteBuffer7.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putDouble(100.0d);
        double double19 = byteBuffer7.getDouble(20);
        java.nio.CharBuffer charBuffer20 = byteBuffer7.asCharBuffer();
        boolean boolean21 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E", (java.lang.CharSequence) charBuffer20);
        java.lang.String[] strArray22 = pattern2.split((java.lang.CharSequence) "\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E");
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test04881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04881");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar('\n');
        java.nio.Buffer buffer9 = byteBuffer8.mark();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putInt((int) '#');
        byte byte19 = byteBuffer15.get(1);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.put(14, (byte) -1);
        java.nio.FloatBuffer floatBuffer23 = byteBuffer22.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putInt((int) '#');
        float float33 = byteBuffer31.getFloat(4);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer39.get(byteArray52, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer68.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.putInt(0);
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer76 = byteBuffer72.put(byteArray75);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer62.get(byteArray75, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer56.put(byteArray75);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer31.put(byteArray75);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer22.get(byteArray75);
        java.nio.ByteBuffer byteBuffer83 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ByteBuffer byteBuffer84 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ByteBuffer byteBuffer85 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ByteBuffer byteBuffer86 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ByteBuffer byteBuffer87 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer8.get(byteArray75);
        java.nio.ByteBuffer byteBuffer89 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ShortBuffer shortBuffer90 = byteBuffer89.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(buffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(floatBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 7.3E-44f + "'", float33 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(shortBuffer90);
    }

    @Test
    public void test04882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04882");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(89);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test04883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04883");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("Location", (int) (byte) 100);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.function.Predicate<java.lang.String> strPredicate4 = pattern2.asPredicate();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "Location");
        org.junit.Assert.assertNotNull(strPredicate4);
    }

    @Test
    public void test04884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04884");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer3 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer3.putLong((long) '4');
        short short7 = byteBuffer3.getShort(0);
        int int9 = byteBuffer3.getInt((int) '4');
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer3);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer3.compact();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer11.compact();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) 59);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer12.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 0 + "'", short7 == (short) 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test04885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04885");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer3 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer3.putLong((long) '4');
        short short7 = byteBuffer3.getShort(0);
        int int9 = byteBuffer3.getInt((int) '4');
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer3);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer1.putFloat((-1.0f));
        int int14 = byteBuffer1.getInt(19);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 0 + "'", short7 == (short) 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04886");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer17.putDouble(10.0d);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer17.putChar('\n');
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer31.get(byteArray44, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer31.putDouble(100.0d);
        boolean boolean51 = byteBuffer17.equals((java.lang.Object) byteBuffer31);
        boolean boolean52 = byteBuffer11.equals((java.lang.Object) byteBuffer17);
        short short54 = byteBuffer11.getShort((int) '#');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + short54 + "' != '" + (short) 0 + "'", short54 == (short) 0);
    }

    @Test
    public void test04887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04887");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response5);
    }

    @Test
    public void test04888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04888");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        java.lang.String str9 = response1.charset();
        boolean boolean12 = response1.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", "Location");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str16 = response14.getHeaderCaseInsensitive("\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response14);
        java.lang.String str19 = response14.header("\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E");
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response14);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test04889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04889");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer25 = byteBuffer24.mark();
        java.nio.Buffer buffer26 = byteBuffer24.flip();
        double double27 = byteBuffer24.getDouble();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer24.putFloat((float) 4);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer29);
    }

    @Test
    public void test04890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04890");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        int int7 = response6.statusCode;
        boolean boolean10 = response6.hasHeaderWithValue("\\Qjava.nio.DirectByteBuffer[pos=15 lim=100 cap=100]\\E", "java.nio.DirectByteBufferR[pos=77 lim=100 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04891");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putDouble(7.565251118924485E-307d);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer17.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer17.putChar(' ');
        float float23 = byteBuffer22.getFloat();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.FloatBuffer floatBuffer34 = byteBuffer29.asFloatBuffer();
        boolean boolean35 = byteBuffer29.isDirect();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        org.jsoup.helper.HttpConnection.Response response46 = null;
        org.jsoup.helper.HttpConnection.Response response47 = new org.jsoup.helper.HttpConnection.Response(response46);
        response47.contentType = "";
        boolean boolean50 = byteBuffer45.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putInt((int) '#');
        int int59 = byteBuffer45.compareTo(byteBuffer56);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer29.put(byteBuffer56);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer22.put(byteBuffer29);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer22.compact();
        int int63 = byteBuffer9.compareTo(byteBuffer62);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer62.asReadOnlyBuffer();
        boolean boolean65 = byteBuffer64.hasRemaining();
        java.nio.LongBuffer longBuffer66 = byteBuffer64.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 58 + "'", int63 == 58);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(longBuffer66);
    }

    @Test
    public void test04892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04892");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer61 = byteBuffer58.putShort(8, (short) (byte) 1);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.duplicate();
        java.nio.ByteOrder byteOrder63 = byteBuffer58.order();
        java.nio.Buffer buffer65 = byteBuffer58.position(52);
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long68 = byteBuffer67.getLong();
        int int69 = byteBuffer67.position();
        float float71 = byteBuffer67.getFloat((int) (short) 10);
        boolean boolean72 = byteBuffer67.hasArray();
        double double73 = byteBuffer67.getDouble();
        short short75 = byteBuffer67.getShort(0);
        java.nio.ShortBuffer shortBuffer76 = byteBuffer67.asShortBuffer();
        java.nio.Buffer buffer78 = byteBuffer67.position((int) '#');
        java.nio.ByteBuffer byteBuffer81 = byteBuffer67.putDouble(3, 1.1034378113E-312d);
        int int82 = byteBuffer58.compareTo(byteBuffer67);
        int int83 = byteBuffer58.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteOrder63);
        org.junit.Assert.assertNotNull(buffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8 + "'", int69 == 8);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + 0.0f + "'", float71 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) 0 + "'", short75 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer76);
        org.junit.Assert.assertNotNull(buffer78);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-17) + "'", int82 == (-17));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
    }

    @Test
    public void test04893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04893");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        java.nio.LongBuffer longBuffer9 = byteBuffer8.asLongBuffer();
        byte[] byteArray10 = byteBuffer8.array();
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer8.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(doubleBuffer11);
    }

    @Test
    public void test04894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04894");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = 16;
    }

    @Test
    public void test04895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04895");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        long long34 = byteBuffer11.getLong();
        java.nio.DoubleBuffer doubleBuffer35 = byteBuffer11.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long38 = byteBuffer37.getLong();
        int int39 = byteBuffer37.position();
        float float41 = byteBuffer37.getFloat((int) (short) 10);
        boolean boolean42 = byteBuffer37.hasArray();
        double double43 = byteBuffer37.getDouble();
        short short45 = byteBuffer37.getShort(0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer37.putDouble(100.0d);
        float float48 = byteBuffer37.getFloat();
        char char50 = byteBuffer37.getChar(1);
        float float51 = byteBuffer37.getFloat();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer37.put(32, (byte) 1);
        float float55 = byteBuffer37.getFloat();
        int int56 = byteBuffer11.compareTo(byteBuffer37);
        java.nio.LongBuffer longBuffer57 = byteBuffer37.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 0.0f + "'", float41 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 0 + "'", short45 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertTrue("'" + char50 + "' != '" + '\000' + "'", char50 == '\000');
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 2.3509887E-38f + "'", float55 == 2.3509887E-38f);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(longBuffer57);
    }

    @Test
    public void test04896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04896");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        org.jsoup.Connection.Response response47 = response37.removeHeader("Location");
        java.nio.ByteBuffer byteBuffer48 = response37.byteData;
        boolean boolean50 = response37.hasCookie("java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray51 = response37.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(response47);
        org.junit.Assert.assertNull(byteBuffer48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test04897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04897");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.stream.Stream<java.lang.String> strStream5 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.util.function.Predicate<java.lang.String> strPredicate6 = null; // flaky: pattern2.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate7 = null; // flaky: pattern2.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate8 = null; // flaky: pattern2.asPredicate();
        java.lang.String[] strArray11 = null; // flaky: pattern2.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=0 lim=76 cap=76]", (int) (short) 0);
        java.util.regex.Pattern pattern15 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate16 = pattern15.asPredicate();
        int int17 = pattern15.flags();
        java.util.regex.Pattern pattern20 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.CharBuffer charBuffer31 = byteBuffer26.asCharBuffer();
        java.util.regex.Matcher matcher32 = pattern20.matcher((java.lang.CharSequence) charBuffer31);
        java.lang.String[] strArray33 = pattern15.split((java.lang.CharSequence) charBuffer31);
        boolean boolean34 = java.util.regex.Pattern.matches("\\Q\\Qhi!\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer31);
        java.util.regex.Matcher matcher35 = null; // flaky: pattern2.matcher((java.lang.CharSequence) "\\Q\\Qhi!\\E\\\\E\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strStream5);
// flaky:         org.junit.Assert.assertNotNull(strPredicate6);
// flaky:         org.junit.Assert.assertNotNull(strPredicate7);
// flaky:         org.junit.Assert.assertNotNull(strPredicate8);
// flaky:         org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(pattern15);
        org.junit.Assert.assertEquals(pattern15.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(pattern20);
        org.junit.Assert.assertEquals(pattern20.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(charBuffer31);
        org.junit.Assert.assertNotNull(matcher32);
        org.junit.Assert.assertEquals(matcher32.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertNotNull(matcher35);
// flaky:         org.junit.Assert.assertEquals(matcher35.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,16 lastmatch=]");
    }

    @Test
    public void test04898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04898");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer25 = byteBuffer24.mark();
        boolean boolean26 = byteBuffer24.isDirect();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putLong((long) (short) 0);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        int int34 = byteBuffer32.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer40.get(byteArray53, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer32.get(byteArray53);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer24.get(byteArray53);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer24.putFloat(80, (float) 0);
        java.nio.IntBuffer intBuffer63 = byteBuffer62.asIntBuffer();
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.putChar(8, '4');
        int int67 = byteBuffer66.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(intBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
    }

    @Test
    public void test04899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04899");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        double double11 = byteBuffer5.getDouble();
        java.nio.IntBuffer intBuffer12 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putShort(0, (short) (byte) 0);
        boolean boolean16 = byteBuffer15.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test04900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04900");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.putShort(24, (short) (byte) -1);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer1.putInt(8);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer17.duplicate();
        java.nio.LongBuffer longBuffer19 = byteBuffer17.asLongBuffer();
        java.nio.DoubleBuffer doubleBuffer20 = byteBuffer17.asDoubleBuffer();
        int int21 = byteBuffer17.getInt();
        int int22 = byteBuffer17.getInt();
        int int23 = byteBuffer17.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(longBuffer19);
        org.junit.Assert.assertNotNull(doubleBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test04901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04901");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.duplicate();
        int int30 = byteBuffer28.getInt(86);
        int int31 = byteBuffer28.position();
        java.nio.ByteBuffer byteBuffer34 = byteBuffer28.putInt(94, 50);
        char char35 = byteBuffer28.getChar();
        boolean boolean36 = byteBuffer28.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + char35 + "' != '" + '\000' + "'", char35 == '\000');
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test04902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04902");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response0);
        response2.statusMessage = "";
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.headers();
        org.jsoup.Connection.Response response8 = response2.header("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        java.lang.String str10 = response2.header("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        boolean boolean12 = response2.hasCookie("\\Q\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04903");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer5.duplicate();
        java.nio.ByteOrder byteOrder38 = byteBuffer37.order();
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.slice();
        boolean boolean40 = byteBuffer37.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteOrder38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04904");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]", 59);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40442]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04905");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer21.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = byteBuffer22.getDouble((int) '\uffff');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
    }

    @Test
    public void test04906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04906");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(10);
        java.lang.String str12 = byteBuffer7.toString();
        java.nio.ByteOrder byteOrder13 = byteBuffer7.order();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.nio.DirectByteBuffer[pos=20 lim=100 cap=100]" + "'", str12, "java.nio.DirectByteBuffer[pos=20 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteOrder13);
    }

    @Test
    public void test04907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04907");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.slice();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer13.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = byteBuffer14.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
    }

    @Test
    public void test04908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04908");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        long long47 = byteBuffer22.getLong();
        java.nio.ByteBuffer byteBuffer49 = byteBuffer22.putChar('\n');
        java.nio.ByteOrder byteOrder50 = byteBuffer22.order();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer22.putLong(0, (long) 1);
        byte byte54 = byteBuffer22.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteOrder50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + byte54 + "' != '" + (byte) 0 + "'", byte54 == (byte) 0);
    }

    @Test
    public void test04909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04909");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str7 = response6.contentType;
        boolean boolean10 = response6.hasHeaderWithValue("\\Qjava.nio.DirectByteBuffer[pos=16 lim=32 cap=100]\\E", "\\Qjava.nio.DirectByteBuffer[pos=15 lim=100 cap=100]\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04910");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer8.put((byte) 0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer10.compact();
        byte byte12 = byteBuffer10.get();
        java.nio.CharBuffer charBuffer13 = byteBuffer10.asCharBuffer();
        java.nio.ShortBuffer shortBuffer14 = byteBuffer10.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(shortBuffer14);
    }

    @Test
    public void test04911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04911");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        boolean boolean6 = response1.hasHeader("hi!");
        boolean boolean8 = response1.hasHeader("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        boolean boolean10 = response1.hasHeader("java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean12 = response1.executed;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = response13.cookies();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test04912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04912");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("", (int) (byte) 66);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.lang.String str4 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test04913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04913");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer14.putDouble(27, (double) '\000');
        int int50 = byteBuffer49.getInt();
        // The following exception was thrown during execution in test generation
        try {
            char char52 = byteBuffer49.getChar((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test04914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04914");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str14 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response18 = response16.removeHeader("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response16);
        org.jsoup.Connection.Response response21 = response16.removeCookie("\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        response16.charset = "java.nio.HeapByteBuffer[pos=0 lim=25 cap=52]";
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response16);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNotNull(response21);
    }

    @Test
    public void test04915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04915");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E", (-2), inetAddress7, 24);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40444]");
    }

    @Test
    public void test04916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04916");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response6.scanHeaders("hi!");
        java.lang.String str9 = response6.statusMessage;
        org.jsoup.Connection.Request request10 = response6.req;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response6);
        response13.statusCode = '\u4120';
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response16 = org.jsoup.helper.HttpConnection.Response.execute(request0, response13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(request10);
    }

    @Test
    public void test04917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04917");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer61 = byteBuffer58.putShort(8, (short) (byte) 1);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.duplicate();
        boolean boolean63 = byteBuffer58.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test04918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04918");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer3.putDouble((double) ' ');
        java.nio.IntBuffer intBuffer32 = byteBuffer3.asIntBuffer();
        boolean boolean33 = byteBuffer3.hasRemaining();
        java.nio.ShortBuffer shortBuffer34 = byteBuffer3.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(shortBuffer34);
    }

    @Test
    public void test04919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04919");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer1.putInt(88);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer1.putChar('\000');
        byte byte11 = byteBuffer9.get(64);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putFloat((float) '\u4120');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer13.slice();
        long long15 = byteBuffer14.getLong();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test04920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04920");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        java.lang.String str81 = response1.statusMessage;
        org.jsoup.Connection.Response response83 = response1.removeHeader("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        response1.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response86 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean88 = response1.hasHeader("java.nio.DirectByteBufferR[pos=77 lim=100 cap=100]");
        int int89 = response1.statusCode;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(response83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test04921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04921");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        byte byte12 = byteBuffer9.get((int) 'a');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer9.putDouble((double) (short) 1);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) (byte) 0);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putDouble((double) 1.8654E-41f);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
    }

    @Test
    public void test04922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04922");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer22.putDouble(0, (double) 13376L);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer27.slice();
        float float29 = byteBuffer28.getFloat();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray30 = byteBuffer28.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
    }

    @Test
    public void test04923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04923");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer1.putShort((short) (byte) -1);
        java.nio.Buffer buffer30 = byteBuffer29.clear();
        int int31 = byteBuffer29.remaining();
        java.nio.Buffer buffer32 = byteBuffer29.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(buffer30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(buffer32);
    }

    @Test
    public void test04924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04924");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.CharBuffer charBuffer25 = byteBuffer20.asCharBuffer();
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putInt((int) '#');
        float float35 = byteBuffer33.getFloat(4);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer41.get(byteArray54, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.putInt(0);
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.put(byteArray77);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer64.get(byteArray77, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer58.put(byteArray77);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer33.put(byteArray77);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer20.get(byteArray77);
        java.nio.ByteBuffer byteBuffer85 = java.nio.ByteBuffer.wrap(byteArray77);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer14.get(byteArray77);
        double double88 = byteBuffer86.getDouble(6);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 7.3E-44f + "'", float35 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.1125369305487661E-307d + "'", double88 == 1.1125369305487661E-307d);
    }

    @Test
    public void test04925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04925");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        int int53 = byteBuffer51.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer51.get(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer14.get(byteArray72);
        java.nio.FloatBuffer floatBuffer79 = byteBuffer78.asFloatBuffer();
        long long80 = byteBuffer78.getLong();
        long long81 = byteBuffer78.getLong();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(floatBuffer79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test04926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04926");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response5);
        boolean boolean9 = response8.executed;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04927");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        java.lang.String str81 = response1.statusMessage;
        org.jsoup.Connection.Response response83 = response1.removeHeader("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response84 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str85 = response1.statusMessage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = response1.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(response83);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test04928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04928");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        java.nio.CharBuffer charBuffer13 = byteBuffer1.asCharBuffer();
        java.nio.ShortBuffer shortBuffer14 = byteBuffer1.asShortBuffer();
        byte byte16 = byteBuffer1.get((int) '\n');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(shortBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
    }

    @Test
    public void test04929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04929");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        double double11 = byteBuffer5.getDouble();
        java.nio.IntBuffer intBuffer12 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.duplicate();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer13.put(8, (byte) 0);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer16.putFloat((int) (short) 10, (float) 84);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.put((byte) 1);
        int int22 = byteBuffer19.getInt();
        byte byte23 = byteBuffer19.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 0 + "'", byte23 == (byte) 0);
    }

    @Test
    public void test04930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04930");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        double double11 = byteBuffer5.getDouble();
        java.nio.IntBuffer intBuffer12 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putShort(0, (short) (byte) 0);
        java.lang.String str16 = byteBuffer15.toString();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.compact();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer15.putChar(18, '4');
        long long23 = byteBuffer15.getLong((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int24 = byteBuffer15.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]" + "'", str16, "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test04931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04931");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.capacity();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.put((byte) 0);
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer8.put(byteArray27);
        java.nio.Buffer buffer33 = byteBuffer8.flip();
        int int34 = byteBuffer8.getInt();
        int int35 = byteBuffer8.remaining();
        java.nio.IntBuffer intBuffer36 = byteBuffer8.asIntBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(buffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
        org.junit.Assert.assertNotNull(intBuffer36);
    }

    @Test
    public void test04932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04932");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry6 = response1.scanHeaders("\\QLocation\\E");
        response1.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.Connection.Request request11 = null;
        response9.req = request11;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry6);
    }

    @Test
    public void test04933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04933");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response2.scanHeaders("");
        java.lang.String str11 = response2.getHeaderCaseInsensitive("Location");
        java.lang.String str12 = response2.charset();
        response2.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        response2.statusCode = 12;
        java.lang.String str17 = response2.charset;
        java.lang.String str18 = response2.charset();
        org.jsoup.Connection.Request request19 = response2.req;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response20 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str17, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str18, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNull(request19);
    }

    @Test
    public void test04934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04934");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response15);
        response15.statusMessage = "\\Qhi!\\E";
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response15);
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
    }

    @Test
    public void test04935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04935");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        response20.charset = "hi!";
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry24 = response20.scanHeaders("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response26);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strEntry24);
    }

    @Test
    public void test04936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04936");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        char char12 = byteBuffer11.getChar();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.slice();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        short short23 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        boolean boolean34 = byteBuffer29.hasArray();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer40.get(byteArray53, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.putInt(0);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.put(byteArray66);
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.put(byteArray76);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer63.get(byteArray76, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer57.put(byteArray76);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer29.put(byteArray76);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer15.get(byteArray76);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer13.put(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            float float86 = byteBuffer13.getFloat(256);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
    }

    @Test
    public void test04937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04937");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putInt(0);
        java.nio.CharBuffer charBuffer4 = byteBuffer3.asCharBuffer();
        // The following exception was thrown during execution in test generation
        try {
            byte byte6 = byteBuffer3.get(79);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(charBuffer4);
    }

    @Test
    public void test04938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04938");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.put((byte) 10);
        java.nio.ByteOrder byteOrder23 = byteBuffer20.order();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer10.order(byteOrder23);
        java.nio.CharBuffer charBuffer25 = byteBuffer24.asCharBuffer();
        short short26 = byteBuffer24.getShort();
        boolean boolean27 = byteBuffer24.isDirect();
        boolean boolean28 = byteBuffer24.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test04939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04939");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((-35));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04940");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern3 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer7 = byteBuffer6.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream8 = null; // flaky: pattern3.splitAsStream((java.lang.CharSequence) charBuffer7);
        java.util.regex.Matcher matcher9 = pattern2.matcher((java.lang.CharSequence) charBuffer7);
        java.util.regex.Matcher matcher11 = pattern2.matcher((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.util.function.Predicate<java.lang.String> strPredicate12 = pattern2.asPredicate();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern14 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern14;
        int int16 = pattern14.flags();
        java.util.stream.Stream<java.lang.String> strStream18 = pattern14.splitAsStream((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        java.util.regex.Pattern pattern22 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern25 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern28 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern29 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern29;
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer33 = byteBuffer32.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream34 = pattern29.splitAsStream((java.lang.CharSequence) charBuffer33);
        java.util.regex.Matcher matcher35 = pattern28.matcher((java.lang.CharSequence) charBuffer33);
        java.util.regex.Matcher matcher36 = null; // flaky: pattern25.matcher((java.lang.CharSequence) charBuffer33);
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer39 = byteBuffer38.asCharBuffer();
        java.util.regex.Matcher matcher40 = null; // flaky: pattern25.matcher((java.lang.CharSequence) charBuffer39);
        java.lang.String[] strArray42 = pattern22.split((java.lang.CharSequence) charBuffer39, 8);
        java.util.regex.Pattern pattern45 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern46 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern46;
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer50 = byteBuffer49.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream51 = pattern46.splitAsStream((java.lang.CharSequence) charBuffer50);
        java.util.regex.Matcher matcher52 = pattern45.matcher((java.lang.CharSequence) charBuffer50);
        java.lang.String[] strArray54 = pattern22.split((java.lang.CharSequence) charBuffer50, (-6));
        boolean boolean55 = java.util.regex.Pattern.matches("\\Q\\Qhi!\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer50);
        java.lang.String[] strArray56 = pattern14.split((java.lang.CharSequence) charBuffer50);
        java.util.regex.Matcher matcher57 = pattern2.matcher((java.lang.CharSequence) charBuffer50);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern3);
// flaky:         org.junit.Assert.assertEquals(pattern3.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
// flaky:         org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(matcher9);
        org.junit.Assert.assertEquals(matcher9.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher11);
        org.junit.Assert.assertEquals(matcher11.toString(), "java.util.regex.Matcher[pattern=hi! region=0,49 lastmatch=]");
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(pattern14);
        org.junit.Assert.assertEquals(pattern14.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(pattern22);
        org.junit.Assert.assertEquals(pattern22.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern25);
// flaky:         org.junit.Assert.assertEquals(pattern25.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern28);
        org.junit.Assert.assertEquals(pattern28.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern29);
        org.junit.Assert.assertEquals(pattern29.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(charBuffer33);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertNotNull(matcher35);
        org.junit.Assert.assertEquals(matcher35.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher36);
// flaky:         org.junit.Assert.assertEquals(matcher36.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(charBuffer39);
// flaky:         org.junit.Assert.assertNotNull(matcher40);
// flaky:         org.junit.Assert.assertEquals(matcher40.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(pattern45);
        org.junit.Assert.assertEquals(pattern45.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern46);
        org.junit.Assert.assertEquals(pattern46.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(charBuffer50);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertNotNull(matcher52);
        org.junit.Assert.assertEquals(matcher52.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(matcher57);
        org.junit.Assert.assertEquals(matcher57.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
    }

    @Test
    public void test04941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04941");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response7);
        response13.statusCode = 7;
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test04942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04942");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        byte[] byteArray70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray70, 0, 30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
    }

    @Test
    public void test04943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04943");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        int int2 = byteBuffer1.arrayOffset();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) (short) 1);
        java.nio.CharBuffer charBuffer5 = byteBuffer1.asCharBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putFloat((int) (byte) 66, (float) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(charBuffer5);
    }

    @Test
    public void test04944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04944");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer10.put(byteBuffer69);
        int int71 = byteBuffer10.getInt();
        float float73 = byteBuffer10.getFloat(24);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 0.0f + "'", float73 == 0.0f);
    }

    @Test
    public void test04945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04945");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        double double13 = byteBuffer1.getDouble(20);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.slice();
        char char15 = byteBuffer1.getChar();
        char char16 = byteBuffer1.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + '\000' + "'", char16 == '\000');
    }

    @Test
    public void test04946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04946");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer5 = byteBuffer4.asShortBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        int int9 = byteBuffer7.position();
        float float11 = byteBuffer7.getFloat((int) (short) 10);
        boolean boolean12 = byteBuffer7.hasArray();
        double double13 = byteBuffer7.getDouble();
        short short15 = byteBuffer7.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putDouble(100.0d);
        byte byte19 = byteBuffer17.get((int) (short) 0);
        java.nio.IntBuffer intBuffer20 = byteBuffer17.asIntBuffer();
        int int21 = byteBuffer4.compareTo(byteBuffer17);
        java.nio.ByteOrder byteOrder22 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer1.put(byteBuffer17);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer17.slice();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer17.asReadOnlyBuffer();
        char char27 = byteBuffer25.getChar(58);
        boolean boolean28 = byteBuffer25.hasRemaining();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer29 = byteBuffer25.compact();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-24) + "'", int21 == (-24));
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test04947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04947");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.ByteOrder byteOrder19 = byteBuffer14.order();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putShort((short) (byte) 0);
        byte byte24 = byteBuffer20.get(58);
        short short25 = byteBuffer20.getShort();
        byte byte27 = byteBuffer20.get(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(byteOrder19);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0);
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 0 + "'", short25 == (short) 0);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
    }

    @Test
    public void test04948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04948");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        long long47 = byteBuffer22.getLong();
        java.nio.ByteBuffer byteBuffer49 = byteBuffer22.putChar('\n');
        java.nio.ByteOrder byteOrder50 = byteBuffer22.order();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer22.asReadOnlyBuffer();
        java.nio.Buffer buffer52 = byteBuffer51.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteOrder50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(buffer52);
    }

    @Test
    public void test04949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04949");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.lang.String str9 = byteBuffer8.toString();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteOrder byteOrder20 = byteBuffer19.order();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer8.order(byteOrder20);
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putInt((int) '#');
        float float31 = byteBuffer29.getFloat(4);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.putInt(0);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.put(byteArray50);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer37.get(byteArray50, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.putInt(0);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.put(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer66.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.putInt(0);
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.put(byteArray73);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer60.get(byteArray73, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer54.put(byteArray73);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer29.put(byteArray73);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer29.compact();
        java.nio.ByteBuffer byteBuffer83 = byteBuffer80.putShort(8, (short) (byte) 1);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer80.duplicate();
        java.nio.ByteOrder byteOrder85 = byteBuffer80.order();
        java.nio.ByteBuffer byteBuffer86 = byteBuffer21.order(byteOrder85);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer21.putDouble(0, (double) (byte) 0);
        short short90 = byteBuffer89.getShort();
        java.nio.ByteBuffer byteBuffer93 = byteBuffer89.putInt(25, 98);
        java.nio.Buffer buffer95 = byteBuffer89.position((int) (short) 0);
        int int96 = byteBuffer89.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str9, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 7.3E-44f + "'", float31 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteOrder85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + short90 + "' != '" + (short) 0 + "'", short90 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(buffer95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test04950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04950");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        double double5 = byteBuffer1.getDouble(64);
        java.nio.FloatBuffer floatBuffer6 = byteBuffer1.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer1.putShort(80, (short) (byte) 1);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer9.duplicate();
        long long11 = byteBuffer9.getLong();
        char char12 = byteBuffer9.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(floatBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
    }

    @Test
    public void test04951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04951");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.put((byte) 100);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.put(0, (byte) 10);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer1.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer9);
    }

    @Test
    public void test04952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04952");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Response response9 = response1.header("\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E", "\\Qhi!\\E");
        int int10 = response1.numRedirects;
        boolean boolean12 = response1.hasHeader("java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04953");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = 91;
    }

    @Test
    public void test04954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04954");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.numRedirects = (short) 0;
        java.lang.String str14 = response1.statusMessage;
        java.lang.String str15 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request18 = response1.req;
        java.lang.String str19 = response1.statusMessage;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(request18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test04955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04955");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        short short12 = byteBuffer9.getShort();
        java.nio.Buffer buffer13 = byteBuffer9.rewind();
        java.nio.Buffer buffer14 = byteBuffer9.rewind();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer9.asReadOnlyBuffer();
        char char17 = byteBuffer9.getChar(82);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
    }

    @Test
    public void test04956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04956");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.numRedirects = 83;
        int int12 = response1.statusCode;
        response1.charset = "\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test04957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04957");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        java.lang.String str7 = response1.statusMessage();
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str9 = response8.charset();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04958");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket("\\Qjava.nio.HeapByteBuffer[pos=0 lim=52 cap=52]\\E", 0, inetAddress9, 59);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40446]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04959");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        int int20 = byteBuffer18.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer18.putChar((int) ' ', '#');
        java.lang.String str24 = byteBuffer23.toString();
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.put(byteArray33);
        java.nio.ByteOrder byteOrder35 = byteBuffer34.order();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer23.order(byteOrder35);
        java.nio.Buffer buffer38 = byteBuffer23.position(22);
        java.nio.DoubleBuffer doubleBuffer39 = byteBuffer23.asDoubleBuffer();
        float float41 = byteBuffer23.getFloat((int) (short) 0);
        response1.byteData = byteBuffer23;
        int int43 = response1.statusCode;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str24, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteOrder35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(buffer38);
        org.junit.Assert.assertNotNull(doubleBuffer39);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 0.0f + "'", float41 == 0.0f);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test04960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04960");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer5.duplicate();
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer43.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer43.putChar('a');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer48.asReadOnlyBuffer();
        int int50 = byteBuffer5.compareTo(byteBuffer48);
        short short52 = byteBuffer48.getShort(16);
        double double54 = byteBuffer48.getDouble(14);
        java.nio.FloatBuffer floatBuffer55 = byteBuffer48.asFloatBuffer();
        int int56 = byteBuffer48.remaining();
        java.nio.ByteBuffer byteBuffer58 = byteBuffer48.putFloat((float) (-24));
        boolean boolean59 = byteBuffer58.isReadOnly();
        char char60 = byteBuffer58.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-84) + "'", int50 == (-84));
        org.junit.Assert.assertTrue("'" + short52 + "' != '" + (short) 0 + "'", short52 == (short) 0);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(floatBuffer55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 86 + "'", int56 == 86);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + char60 + "' != '" + '\000' + "'", char60 == '\000');
    }

    @Test
    public void test04961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04961");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        int int7 = response5.numRedirects;
        boolean boolean9 = response5.hasCookie("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = response5.headers();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test04962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04962");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        java.lang.String str13 = response10.getHeaderCaseInsensitive("");
        java.net.URL uRL14 = response10.url();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = uRL14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(uRL14);
    }

    @Test
    public void test04963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04963");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        java.lang.String str7 = response1.statusMessage();
        java.lang.String str8 = response1.statusMessage;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test04964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04964");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        int int12 = byteBuffer11.getInt();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putChar((-65536), 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 256 + "'", int12 == 256);
    }

    @Test
    public void test04965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04965");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.util.regex.Pattern pattern3 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        int int5 = 0; // flaky: pattern3.flags();
        java.util.regex.Pattern pattern8 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern8;
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.FloatBuffer floatBuffer20 = byteBuffer15.asFloatBuffer();
        java.nio.CharBuffer charBuffer21 = byteBuffer15.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream22 = null; // flaky: pattern8.splitAsStream((java.lang.CharSequence) charBuffer21);
        java.util.stream.Stream<java.lang.String> strStream23 = pattern3.splitAsStream((java.lang.CharSequence) charBuffer21);
        java.lang.String[] strArray24 = pattern2.split((java.lang.CharSequence) charBuffer21);
        java.util.function.Predicate<java.lang.String> strPredicate25 = pattern2.asPredicate();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(pattern3);
        org.junit.Assert.assertEquals(pattern3.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
// flaky:         org.junit.Assert.assertNotNull(pattern8);
// flaky:         org.junit.Assert.assertEquals(pattern8.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(floatBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
// flaky:         org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strPredicate25);
    }

    @Test
    public void test04966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04966");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        boolean boolean6 = response1.hasHeader("hi!");
        boolean boolean8 = response1.hasHeader("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        boolean boolean10 = response1.hasHeader("java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str14 = response1.cookie("java.nio.DirectByteBuffer[pos=0 lim=22 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04967");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.Connection.Response response7 = response2.removeCookie("hi!");
        java.lang.String str8 = response2.statusMessage();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        boolean boolean19 = byteBuffer14.hasArray();
        response2.byteData = byteBuffer14;
        org.jsoup.Connection.Method method21 = response2.method();
        java.lang.String str22 = response2.statusMessage();
        boolean boolean23 = response2.executed;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = response2.headers();
        java.lang.String str26 = response2.getHeaderCaseInsensitive("\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response27 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test04968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04968");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.function.Predicate<java.lang.String> strPredicate4 = null; // flaky: pattern2.asPredicate();
        java.util.regex.Pattern pattern8 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern11 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.CharBuffer charBuffer22 = byteBuffer17.asCharBuffer();
        java.util.regex.Matcher matcher23 = pattern11.matcher((java.lang.CharSequence) charBuffer22);
        java.util.stream.Stream<java.lang.String> strStream24 = null; // flaky: pattern8.splitAsStream((java.lang.CharSequence) charBuffer22);
        java.util.regex.Pattern pattern27 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern28 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern28;
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer32 = byteBuffer31.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream33 = null; // flaky: pattern28.splitAsStream((java.lang.CharSequence) charBuffer32);
        java.util.regex.Matcher matcher34 = pattern27.matcher((java.lang.CharSequence) charBuffer32);
        java.util.regex.Matcher matcher36 = pattern27.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        java.util.regex.Pattern pattern39 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer41.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.putInt(0);
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.put(byteArray48);
        java.nio.FloatBuffer floatBuffer50 = byteBuffer45.asFloatBuffer();
        java.nio.CharBuffer charBuffer51 = byteBuffer45.asCharBuffer();
        java.lang.String[] strArray53 = pattern39.split((java.lang.CharSequence) charBuffer51, (-10));
        java.util.regex.Matcher matcher54 = pattern27.matcher((java.lang.CharSequence) charBuffer51);
        java.util.regex.Matcher matcher55 = null; // flaky: pattern8.matcher((java.lang.CharSequence) charBuffer51);
        boolean boolean56 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E", (java.lang.CharSequence) charBuffer51);
        java.lang.String[] strArray57 = null; // flaky: pattern2.split((java.lang.CharSequence) "\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate4);
// flaky:         org.junit.Assert.assertNotNull(pattern8);
// flaky:         org.junit.Assert.assertEquals(pattern8.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern11);
        org.junit.Assert.assertEquals(pattern11.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(matcher23);
        org.junit.Assert.assertEquals(matcher23.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(pattern27);
        org.junit.Assert.assertEquals(pattern27.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern28);
// flaky:         org.junit.Assert.assertEquals(pattern28.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(charBuffer32);
// flaky:         org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(matcher34);
        org.junit.Assert.assertEquals(matcher34.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher36);
        org.junit.Assert.assertEquals(matcher36.toString(), "java.util.regex.Matcher[pattern=hi! region=0,7 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern39);
        org.junit.Assert.assertEquals(pattern39.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(floatBuffer50);
        org.junit.Assert.assertNotNull(charBuffer51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(matcher54);
        org.junit.Assert.assertEquals(matcher54.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher55);
// flaky:         org.junit.Assert.assertEquals(matcher55.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=24 lim=100 cap=100] region=0,43 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test04969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04969");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        double double12 = byteBuffer1.getDouble(2);
        org.jsoup.helper.HttpConnection.Response response13 = null;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        response14.contentType = "";
        java.lang.String str18 = response14.cookie("hi!");
        int int19 = response14.statusCode();
        org.jsoup.Connection.Request request20 = response14.req;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response14);
        boolean boolean24 = response21.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", "hi!");
        boolean boolean25 = byteBuffer1.equals((java.lang.Object) response21);
        int int26 = response21.numRedirects;
        org.jsoup.Connection.Response response28 = response21.removeCookie("\\Q\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(request20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(response28);
    }

    @Test
    public void test04970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04970");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket("\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E", (-100));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04971");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.wrap(byteArray24);
        int int31 = byteBuffer30.position();
        java.nio.Buffer buffer32 = byteBuffer30.rewind();
        short short33 = byteBuffer30.getShort();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(buffer32);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 0 + "'", short33 == (short) 0);
    }

    @Test
    public void test04972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04972");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        boolean boolean7 = response1.hasCookie("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.net.HttpURLConnection httpURLConnection11 = null;
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response18);
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        response20.executed = true;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = response20.cookies();
        java.lang.String str25 = response20.charset();
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response20);
        // The following exception was thrown during execution in test generation
        try {
            response10.setupFromConnection(httpURLConnection11, (org.jsoup.Connection.Response) response20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test04973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04973");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Request request7 = response1.req;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response11 = response1.cookie("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", "Location");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.statusMessage = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str16 = response15.charset;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(request7);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test04974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04974");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long27 = byteBuffer26.getLong();
        int int28 = byteBuffer26.position();
        float float30 = byteBuffer26.getFloat((int) (short) 10);
        boolean boolean31 = byteBuffer26.hasArray();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer26.putFloat((float) (-24));
        response24.byteData = byteBuffer26;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response24);
        int int36 = response35.statusCode;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response35);
        org.jsoup.helper.HttpConnection.Response response38 = new org.jsoup.helper.HttpConnection.Response(response37);
        org.jsoup.helper.HttpConnection.Response response39 = new org.jsoup.helper.HttpConnection.Response(response37);
        boolean boolean41 = response37.hasCookie("\\Qjava.nio.DirectByteBuffer[pos=19 lim=100 cap=100]\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 0.0f + "'", float30 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test04975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04975");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer7.putFloat((float) (byte) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) 12);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer59.compact();
        int int63 = byteBuffer59.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
    }

    @Test
    public void test04976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04976");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        response1.numRedirects = (byte) 10;
        org.jsoup.Connection.Response response12 = response1.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer13 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request15 = null;
        response1.req = request15;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = response1.body();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(byteBuffer13);
    }

    @Test
    public void test04977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04977");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean10 = response1.hasHeader("\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str13 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04978");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        int int16 = response11.numRedirects;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response17);
        java.lang.String str19 = response17.contentType();
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response17);
        java.net.URL uRL21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response22 = response17.url(uRL21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test04979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04979");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.Socket socket9 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket12 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E", 6);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: \\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40448]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket9);
        org.junit.Assert.assertEquals(socket9.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04980");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        response6.statusCode = 4;
        java.lang.String str10 = response6.header("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        response6.contentType = "java.nio.DirectByteBuffer[pos=26 lim=100 cap=100]";
        response6.charset = "java.nio.DirectByteBuffer[pos=20 lim=100 cap=100]";
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04981");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer5 = byteBuffer4.asShortBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        int int9 = byteBuffer7.position();
        float float11 = byteBuffer7.getFloat((int) (short) 10);
        boolean boolean12 = byteBuffer7.hasArray();
        double double13 = byteBuffer7.getDouble();
        short short15 = byteBuffer7.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putDouble(100.0d);
        byte byte19 = byteBuffer17.get((int) (short) 0);
        java.nio.IntBuffer intBuffer20 = byteBuffer17.asIntBuffer();
        int int21 = byteBuffer4.compareTo(byteBuffer17);
        java.nio.ByteOrder byteOrder22 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer1.put(byteBuffer17);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer17.slice();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray25 = byteBuffer24.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-24) + "'", int21 == (-24));
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
    }

    @Test
    public void test04982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04982");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        int int2 = 0; // flaky: pattern0.flags();
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern6 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern6;
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer10 = byteBuffer9.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream11 = null; // flaky: pattern6.splitAsStream((java.lang.CharSequence) charBuffer10);
        java.util.regex.Matcher matcher12 = pattern5.matcher((java.lang.CharSequence) charBuffer10);
        java.util.regex.Matcher matcher14 = pattern5.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        java.util.regex.Pattern pattern17 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        java.nio.FloatBuffer floatBuffer28 = byteBuffer23.asFloatBuffer();
        java.nio.CharBuffer charBuffer29 = byteBuffer23.asCharBuffer();
        java.lang.String[] strArray31 = pattern17.split((java.lang.CharSequence) charBuffer29, (-10));
        java.util.regex.Matcher matcher32 = pattern5.matcher((java.lang.CharSequence) charBuffer29);
        java.util.stream.Stream<java.lang.String> strStream34 = pattern5.splitAsStream((java.lang.CharSequence) "\\Q\\E");
        java.lang.String str35 = pattern5.pattern();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long38 = byteBuffer37.getLong();
        int int39 = byteBuffer37.position();
        float float41 = byteBuffer37.getFloat((int) (short) 10);
        boolean boolean42 = byteBuffer37.hasArray();
        double double43 = byteBuffer37.getDouble();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer37.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer47 = byteBuffer37.asCharBuffer();
        java.lang.String[] strArray49 = pattern5.split((java.lang.CharSequence) charBuffer47, 14);
        java.util.regex.Matcher matcher50 = null; // flaky: pattern0.matcher((java.lang.CharSequence) charBuffer47);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.util.regex.Matcher matcher53 = null; // flaky: pattern0.matcher((java.lang.CharSequence) "\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E");
        java.lang.String str54 = null; // flaky: pattern0.toString();
// flaky:         org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-24) + "'", int2 == (-24));
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern6);
// flaky:         org.junit.Assert.assertEquals(pattern6.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
// flaky:         org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(matcher12);
        org.junit.Assert.assertEquals(matcher12.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher14);
        org.junit.Assert.assertEquals(matcher14.toString(), "java.util.regex.Matcher[pattern=hi! region=0,7 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern17);
        org.junit.Assert.assertEquals(pattern17.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(floatBuffer28);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(matcher32);
        org.junit.Assert.assertEquals(matcher32.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 0.0f + "'", float41 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
        org.junit.Assert.assertNotNull(strArray49);
// flaky:         org.junit.Assert.assertNotNull(matcher50);
// flaky:         org.junit.Assert.assertEquals(matcher50.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,42 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher53);
// flaky:         org.junit.Assert.assertEquals(matcher53.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,53 lastmatch=]");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str54, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
    }

    @Test
    public void test04983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04983");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=84 lim=100 cap=100]\\E", 35, inetAddress11, (-8));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-8");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test04984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04984");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        boolean boolean7 = response1.hasCookie("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = response1.hasHeaderWithValue("", "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Header name must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04985");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar(0, '\u2000');
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putShort((short) 10);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
    }

    @Test
    public void test04986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04986");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putChar('\000');
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        int int37 = byteBuffer35.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putInt(0);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.put(byteArray56);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer43.get(byteArray56, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer35.get(byteArray56);
        java.nio.ShortBuffer shortBuffer62 = byteBuffer35.asShortBuffer();
        java.nio.Buffer buffer64 = byteBuffer35.limit((int) 'a');
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long67 = byteBuffer66.getLong();
        int int68 = byteBuffer66.position();
        float float70 = byteBuffer66.getFloat((int) (short) 10);
        boolean boolean71 = byteBuffer66.hasArray();
        double double72 = byteBuffer66.getDouble();
        short short74 = byteBuffer66.getShort(0);
        java.nio.ShortBuffer shortBuffer75 = byteBuffer66.asShortBuffer();
        java.nio.Buffer buffer77 = byteBuffer66.position((int) '#');
        java.lang.String str78 = byteBuffer66.toString();
        byte byte79 = byteBuffer66.get();
        java.nio.ByteBuffer byteBuffer81 = byteBuffer66.putFloat((float) (short) 100);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer66.putInt(1, 0);
        int int85 = byteBuffer35.compareTo(byteBuffer84);
        int int86 = byteBuffer29.compareTo(byteBuffer84);
        char char88 = byteBuffer84.getChar(32);
        int int89 = byteBuffer84.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(shortBuffer62);
        org.junit.Assert.assertNotNull(buffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) 0 + "'", short74 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer75);
        org.junit.Assert.assertNotNull(buffer77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]" + "'", str78, "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + byte79 + "' != '" + (byte) 0 + "'", byte79 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 27 + "'", int85 == 27);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 28 + "'", int86 == 28);
        org.junit.Assert.assertTrue("'" + char88 + "' != '" + '\000' + "'", char88 == '\000');
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 40 + "'", int89 == 40);
    }

    @Test
    public void test04987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04987");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.position();
        java.nio.ByteOrder byteOrder7 = byteBuffer1.order();
        boolean boolean8 = byteBuffer1.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(byteOrder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04988");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        int int6 = response1.statusCode();
        response1.contentType = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        response1.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E";
        boolean boolean13 = response1.hasHeaderWithValue("\\Q\\E", "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        java.net.URL uRL14 = response1.url();
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(uRL14);
    }

    @Test
    public void test04989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04989");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        boolean boolean7 = response1.hasCookie("hi!");
        response1.statusMessage = "";
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean12 = response10.hasCookie("Location");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04990");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate4 = pattern2.asPredicate();
        java.util.regex.Pattern pattern6 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern6;
        java.util.function.Predicate<java.lang.String> strPredicate8 = null; // flaky: pattern6.asPredicate();
        int int9 = 0; // flaky: pattern6.flags();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern6;
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long14 = byteBuffer13.getLong();
        int int15 = byteBuffer13.position();
        float float17 = byteBuffer13.getFloat((int) (short) 10);
        boolean boolean18 = byteBuffer13.hasArray();
        double double19 = byteBuffer13.getDouble();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer13.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer23 = byteBuffer13.asCharBuffer();
        boolean boolean24 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]", (java.lang.CharSequence) charBuffer23);
        java.util.stream.Stream<java.lang.String> strStream25 = null; // flaky: pattern6.splitAsStream((java.lang.CharSequence) charBuffer23);
        boolean boolean26 = java.util.regex.Pattern.matches("\\Q\\Q\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer23);
        java.util.regex.Matcher matcher27 = pattern2.matcher((java.lang.CharSequence) charBuffer23);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
// flaky:         org.junit.Assert.assertNotNull(pattern6);
// flaky:         org.junit.Assert.assertEquals(pattern6.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-24) + "'", int9 == (-24));
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matcher27);
        org.junit.Assert.assertEquals(matcher27.toString(), "java.util.regex.Matcher[pattern=hi! region=0,42 lastmatch=]");
    }

    @Test
    public void test04991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04991");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer5.compact();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort(0, (short) (byte) 10);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
    }

    @Test
    public void test04992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04992");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.lang.String str9 = byteBuffer8.toString();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteOrder byteOrder20 = byteBuffer19.order();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer8.order(byteOrder20);
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putInt((int) '#');
        float float31 = byteBuffer29.getFloat(4);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.putInt(0);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.put(byteArray50);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer37.get(byteArray50, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.putInt(0);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.put(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer66.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.putInt(0);
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.put(byteArray73);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer60.get(byteArray73, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer54.put(byteArray73);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer29.put(byteArray73);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer29.compact();
        java.nio.ByteBuffer byteBuffer83 = byteBuffer80.putShort(8, (short) (byte) 1);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer80.duplicate();
        java.nio.ByteOrder byteOrder85 = byteBuffer80.order();
        java.nio.ByteBuffer byteBuffer86 = byteBuffer21.order(byteOrder85);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer21.putDouble(0, (double) (byte) 0);
        short short90 = byteBuffer89.getShort();
        java.nio.ByteBuffer byteBuffer93 = byteBuffer89.putInt(25, 98);
        java.nio.DoubleBuffer doubleBuffer94 = byteBuffer89.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer95 = byteBuffer89.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str9, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 7.3E-44f + "'", float31 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteOrder85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + short90 + "' != '" + (short) 0 + "'", short90 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(doubleBuffer94);
        org.junit.Assert.assertNotNull(byteBuffer95);
    }

    @Test
    public void test04993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04993");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long48 = byteBuffer47.getLong();
        int int49 = byteBuffer47.position();
        float float51 = byteBuffer47.getFloat((int) (short) 10);
        boolean boolean52 = byteBuffer47.hasArray();
        double double53 = byteBuffer47.getDouble();
        short short55 = byteBuffer47.getShort(0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer47.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response58 = null;
        org.jsoup.helper.HttpConnection.Response response59 = new org.jsoup.helper.HttpConnection.Response(response58);
        java.lang.String str61 = response59.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = response59.cookies();
        org.jsoup.Connection.Response response64 = response59.removeCookie("hi!");
        java.lang.String str65 = response59.statusMessage();
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.putInt(0);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.put(byteArray74);
        boolean boolean76 = byteBuffer71.hasArray();
        response59.byteData = byteBuffer71;
        int int78 = byteBuffer57.compareTo(byteBuffer71);
        java.lang.String str79 = byteBuffer57.toString();
        long long80 = byteBuffer57.getLong();
        java.nio.DoubleBuffer doubleBuffer81 = byteBuffer57.asDoubleBuffer();
        response37.byteData = byteBuffer57;
        java.nio.ByteBuffer byteBuffer85 = byteBuffer57.putLong(12, (long) 76);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer85.duplicate();
        java.nio.ByteOrder byteOrder87 = byteBuffer86.order();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) 0 + "'", short55 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(response64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-10) + "'", int78 == (-10));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str79, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(doubleBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteOrder87);
    }

    @Test
    public void test04994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04994");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        short short22 = byteBuffer21.getShort();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putLong(8, (long) (short) 1);
        int int27 = byteBuffer25.getInt(85);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer33.get(byteArray46, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.put(byteArray59);
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer62.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.putInt(0);
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.put(byteArray69);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer56.get(byteArray69, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer50.put(byteArray69);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer25.put(byteArray69);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer15.put(byteArray69);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer76.putFloat((float) (byte) 100);
        java.nio.FloatBuffer floatBuffer79 = byteBuffer78.asFloatBuffer();
        java.nio.Buffer buffer80 = byteBuffer78.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(floatBuffer79);
        org.junit.Assert.assertNotNull(buffer80);
    }

    @Test
    public void test04995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04995");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "\\Q\\Q\\E\\\\E\\Q\\E");
    }

    @Test
    public void test04996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04996");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", (int) (short) 10);
        java.lang.String str3 = pattern2.pattern();
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer6 = byteBuffer5.asCharBuffer();
        java.util.regex.Matcher matcher7 = pattern2.matcher((java.lang.CharSequence) charBuffer6);
        java.util.regex.Pattern pattern10 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern13 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern14 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern14;
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer18 = byteBuffer17.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream19 = null; // flaky: pattern14.splitAsStream((java.lang.CharSequence) charBuffer18);
        java.util.regex.Matcher matcher20 = pattern13.matcher((java.lang.CharSequence) charBuffer18);
        java.util.regex.Matcher matcher21 = null; // flaky: pattern10.matcher((java.lang.CharSequence) charBuffer18);
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long24 = byteBuffer23.getLong();
        int int25 = byteBuffer23.position();
        float float27 = byteBuffer23.getFloat((int) (short) 10);
        boolean boolean28 = byteBuffer23.hasArray();
        double double29 = byteBuffer23.getDouble();
        java.nio.ByteBuffer byteBuffer32 = byteBuffer23.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer33 = byteBuffer23.asCharBuffer();
        java.lang.String[] strArray35 = null; // flaky: pattern10.split((java.lang.CharSequence) charBuffer33, 12);
        java.util.regex.Pattern pattern38 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", 14);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.CharBuffer charBuffer49 = byteBuffer44.asCharBuffer();
        java.util.regex.Matcher matcher50 = pattern38.matcher((java.lang.CharSequence) charBuffer49);
        java.util.regex.Matcher matcher51 = null; // flaky: pattern10.matcher((java.lang.CharSequence) charBuffer49);
        java.util.stream.Stream<java.lang.String> strStream52 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer49);
        int int53 = charBuffer49.position();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str3, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(matcher7);
        org.junit.Assert.assertEquals(matcher7.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=8 lim=100 cap=100] region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(pattern10);
// flaky:         org.junit.Assert.assertEquals(pattern10.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern13);
        org.junit.Assert.assertEquals(pattern13.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern14);
        org.junit.Assert.assertEquals(pattern14.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
// flaky:         org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(matcher20);
        org.junit.Assert.assertEquals(matcher20.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher21);
// flaky:         org.junit.Assert.assertEquals(matcher21.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.0f + "'", float27 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(charBuffer33);
// flaky:         org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(pattern38);
        org.junit.Assert.assertEquals(pattern38.toString(), "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(charBuffer49);
        org.junit.Assert.assertNotNull(matcher50);
        org.junit.Assert.assertEquals(matcher50.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=8 lim=100 cap=100] region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher51);
// flaky:         org.junit.Assert.assertEquals(matcher51.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test04997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04997");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        java.lang.String str9 = response7.header("Location");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.Connection.Request request12 = null;
        response10.req = request12;
        boolean boolean16 = response10.hasHeaderWithValue("java.nio.HeapByteBuffer[pos=2 lim=2 cap=2]", "\\Q\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04998");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E");
        int int2 = pattern1.flags();
        int int3 = pattern1.flags();
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test04999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04999");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response9 = response1.header("Location", "");
        org.jsoup.Connection.Response response12 = response1.header("\\Q\\E", "\\QLocation\\E");
        org.jsoup.Connection.Method method13 = response1.method();
        boolean boolean14 = response1.executed;
        response1.executed = false;
        org.jsoup.Connection.Response response19 = response1.header("\\Qjava.nio.DirectByteBuffer[pos=10 lim=22 cap=22]\\E", "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(response19);
    }

    @Test
    public void test05000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test05000");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = response9.cookies();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap10);
    }
}
