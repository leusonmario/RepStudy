import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test03501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03501");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "\\Qjava.nio.DirectByteBuffer[pos=0 lim=76 cap=76]\\E";
    }

    @Test
    public void test03502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03502");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer10.putInt((-24));
        java.nio.Buffer buffer16 = byteBuffer15.flip();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer24.compact();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer24.put((byte) 10);
        char char28 = byteBuffer27.getChar();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer27.putChar('#');
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.FloatBuffer floatBuffer41 = byteBuffer36.asFloatBuffer();
        boolean boolean42 = byteBuffer36.isDirect();
        java.nio.ByteBuffer byteBuffer45 = byteBuffer36.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer46 = byteBuffer36.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer48.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.putInt(0);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putInt((int) '#');
        byte byte56 = byteBuffer52.get(1);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer52.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer52.slice();
        int int61 = byteBuffer60.remaining();
        int int62 = byteBuffer36.compareTo(byteBuffer60);
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long65 = byteBuffer64.getLong();
        int int66 = byteBuffer64.position();
        float float68 = byteBuffer64.getFloat((int) (short) 10);
        boolean boolean69 = byteBuffer64.hasArray();
        double double70 = byteBuffer64.getDouble();
        short short72 = byteBuffer64.getShort(0);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer64.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer64.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer77.duplicate();
        java.nio.ByteBuffer byteBuffer79 = byteBuffer77.slice();
        java.nio.ByteBuffer byteBuffer81 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer81.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer85 = byteBuffer81.putInt(0);
        byte[] byteArray88 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer89 = byteBuffer85.put(byteArray88);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer77.get(byteArray88);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer60.get(byteArray88);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer30.get(byteArray88);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer15.get(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            short short95 = byteBuffer15.getShort(1493172140);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(floatBuffer41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(doubleBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 0 + "'", byte56 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 84 + "'", int61 == 84);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + short72 + "' != '" + (short) 0 + "'", short72 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 63]");
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
    }

    @Test
    public void test03503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03503");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.put((byte) 10);
        java.nio.ByteOrder byteOrder12 = byteBuffer9.order();
        int int13 = byteBuffer9.remaining();
        boolean boolean15 = byteBuffer9.equals((java.lang.Object) 14);
        short short16 = byteBuffer9.getShort();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer9.putShort((int) ' ', (short) 0);
        java.nio.Buffer buffer20 = byteBuffer19.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteOrder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85 + "'", int13 == 85);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 0 + "'", short16 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(buffer20);
    }

    @Test
    public void test03504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03504");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]";
    }

    @Test
    public void test03505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03505");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.asReadOnlyBuffer();
        long long12 = byteBuffer1.getLong();
        byte byte13 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.putShort((short) 0);
        int int16 = byteBuffer1.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27 + "'", int16 == 27);
    }

    @Test
    public void test03506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03506");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer4.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer8 = byteBuffer4.putInt(0);
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.put(byteArray11);
        java.nio.FloatBuffer floatBuffer13 = byteBuffer8.asFloatBuffer();
        java.nio.CharBuffer charBuffer14 = byteBuffer8.asCharBuffer();
        java.lang.String[] strArray16 = pattern2.split((java.lang.CharSequence) charBuffer14, (-10));
        java.util.regex.Pattern pattern19 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern22 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern23 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern23;
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer27 = byteBuffer26.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream28 = pattern23.splitAsStream((java.lang.CharSequence) charBuffer27);
        java.util.regex.Matcher matcher29 = pattern22.matcher((java.lang.CharSequence) charBuffer27);
        java.util.regex.Matcher matcher30 = null; // flaky: pattern19.matcher((java.lang.CharSequence) charBuffer27);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer33 = byteBuffer32.asCharBuffer();
        java.util.regex.Matcher matcher34 = null; // flaky: pattern19.matcher((java.lang.CharSequence) charBuffer33);
        java.util.stream.Stream<java.lang.String> strStream35 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer33);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(floatBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(strArray16);
// flaky:         org.junit.Assert.assertNotNull(pattern19);
// flaky:         org.junit.Assert.assertEquals(pattern19.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern22);
        org.junit.Assert.assertEquals(pattern22.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern23);
// flaky:         org.junit.Assert.assertEquals(pattern23.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(matcher29);
        org.junit.Assert.assertEquals(matcher29.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher30);
// flaky:         org.junit.Assert.assertEquals(matcher30.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(charBuffer33);
// flaky:         org.junit.Assert.assertNotNull(matcher34);
// flaky:         org.junit.Assert.assertEquals(matcher34.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream35);
    }

    @Test
    public void test03507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03507");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.duplicate();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.slice();
        int int17 = byteBuffer16.remaining();
        java.nio.LongBuffer longBuffer18 = byteBuffer16.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 76 + "'", int17 == 76);
        org.junit.Assert.assertNotNull(longBuffer18);
    }

    @Test
    public void test03508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03508");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer15 = byteBuffer5.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putInt((int) '#');
        byte byte25 = byteBuffer21.get(1);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer21.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer21.slice();
        int int30 = byteBuffer29.remaining();
        int int31 = byteBuffer5.compareTo(byteBuffer29);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long34 = byteBuffer33.getLong();
        int int35 = byteBuffer33.position();
        float float37 = byteBuffer33.getFloat((int) (short) 10);
        boolean boolean38 = byteBuffer33.hasArray();
        double double39 = byteBuffer33.getDouble();
        short short41 = byteBuffer33.getShort(0);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer33.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer33.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.duplicate();
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.slice();
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer46.get(byteArray57);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer29.get(byteArray57);
        java.nio.ByteBuffer byteBuffer61 = java.nio.ByteBuffer.wrap(byteArray57);
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.wrap(byteArray57);
        java.nio.Buffer buffer63 = byteBuffer62.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 84 + "'", int30 == 84);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(buffer63);
    }

    @Test
    public void test03509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03509");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.IntBuffer intBuffer4 = byteBuffer1.asIntBuffer();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer1.putFloat(15, (float) ' ');
        int int8 = byteBuffer1.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(intBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 92 + "'", int8 == 92);
    }

    @Test
    public void test03510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03510");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.util.function.Predicate<java.lang.String> strPredicate2 = pattern0.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern0.asPredicate();
        java.lang.String[] strArray5 = pattern0.split((java.lang.CharSequence) "\\QLocation\\E");
        java.util.stream.Stream<java.lang.String> strStream7 = pattern0.splitAsStream((java.lang.CharSequence) "Location");
        int int8 = pattern0.flags();
        org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strPredicate2);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strStream7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test03511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03511");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.put((byte) 10);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer7.putInt(22);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer12.putShort((int) '\000', (short) 0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            float float18 = byteBuffer16.getFloat(128);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test03512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03512");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(37);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test03513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03513");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]", 256);
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern8 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern11 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern12 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern12;
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer16 = byteBuffer15.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream17 = pattern12.splitAsStream((java.lang.CharSequence) charBuffer16);
        java.util.regex.Matcher matcher18 = pattern11.matcher((java.lang.CharSequence) charBuffer16);
        java.util.regex.Matcher matcher19 = null; // flaky: pattern8.matcher((java.lang.CharSequence) charBuffer16);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer22 = byteBuffer21.asCharBuffer();
        java.util.regex.Matcher matcher23 = null; // flaky: pattern8.matcher((java.lang.CharSequence) charBuffer22);
        java.lang.String[] strArray25 = pattern5.split((java.lang.CharSequence) charBuffer22, 8);
        java.util.regex.Pattern pattern28 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern29 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern29;
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer33 = byteBuffer32.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream34 = pattern29.splitAsStream((java.lang.CharSequence) charBuffer33);
        java.util.regex.Matcher matcher35 = pattern28.matcher((java.lang.CharSequence) charBuffer33);
        java.lang.String[] strArray37 = pattern5.split((java.lang.CharSequence) charBuffer33, (-6));
        java.util.regex.Pattern pattern40 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.putInt(0);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.put(byteArray50);
        java.nio.FloatBuffer floatBuffer52 = byteBuffer47.asFloatBuffer();
        java.nio.CharBuffer charBuffer53 = byteBuffer47.asCharBuffer();
        boolean boolean54 = java.util.regex.Pattern.matches("", (java.lang.CharSequence) charBuffer53);
        java.lang.String[] strArray55 = null; // flaky: pattern40.split((java.lang.CharSequence) charBuffer53);
        java.util.stream.Stream<java.lang.String> strStream56 = pattern5.splitAsStream((java.lang.CharSequence) charBuffer53);
        boolean boolean57 = charBuffer53.hasRemaining();
        java.lang.String[] strArray58 = pattern2.split((java.lang.CharSequence) charBuffer53);
        java.lang.String str59 = pattern2.pattern();
        java.util.function.Predicate<java.lang.String> strPredicate60 = pattern2.asPredicate();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern8);
// flaky:         org.junit.Assert.assertEquals(pattern8.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern11);
        org.junit.Assert.assertEquals(pattern11.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern12);
        org.junit.Assert.assertEquals(pattern12.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertNotNull(matcher18);
        org.junit.Assert.assertEquals(matcher18.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher19);
// flaky:         org.junit.Assert.assertEquals(matcher19.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
// flaky:         org.junit.Assert.assertNotNull(matcher23);
// flaky:         org.junit.Assert.assertEquals(matcher23.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(pattern28);
        org.junit.Assert.assertEquals(pattern28.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern29);
        org.junit.Assert.assertEquals(pattern29.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(charBuffer33);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertNotNull(matcher35);
        org.junit.Assert.assertEquals(matcher35.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray37);
// flaky:         org.junit.Assert.assertNotNull(pattern40);
// flaky:         org.junit.Assert.assertEquals(pattern40.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(floatBuffer52);
        org.junit.Assert.assertNotNull(charBuffer53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strStream56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]" + "'", str59, "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(strPredicate60);
    }

    @Test
    public void test03514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03514");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        int int6 = pattern2.flags();
        int int7 = pattern2.flags();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.lang.String str10 = pattern2.pattern();
        java.lang.CharSequence charSequence11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray13 = pattern2.split(charSequence11, (-84));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\\Qhi!\\E" + "'", str10, "\\Qhi!\\E");
    }

    @Test
    public void test03515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03515");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.slice();
        java.nio.Buffer buffer16 = byteBuffer15.clear();
        java.nio.Buffer buffer17 = buffer16.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertNotNull(buffer17);
    }

    @Test
    public void test03516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03516");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        double double13 = byteBuffer1.getDouble(20);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.slice();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putInt(24);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putShort((short) 256);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
    }

    @Test
    public void test03517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03517");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.IntBuffer intBuffer11 = byteBuffer9.asIntBuffer();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putLong((long) (short) 100);
        java.nio.Buffer buffer14 = byteBuffer9.rewind();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        int int20 = byteBuffer18.getInt((int) (short) 1);
        double double22 = byteBuffer18.getDouble((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer18.putFloat((float) (-84));
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        short short30 = byteBuffer26.getShort(0);
        int int32 = byteBuffer26.getInt((int) '4');
        long long33 = byteBuffer26.getLong();
        java.nio.FloatBuffer floatBuffer34 = byteBuffer26.asFloatBuffer();
        char char35 = byteBuffer26.getChar();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        short short41 = byteBuffer37.getShort(0);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer37.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer37.putChar('4');
        boolean boolean47 = byteBuffer37.isReadOnly();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long50 = byteBuffer49.getLong();
        int int51 = byteBuffer49.position();
        float float53 = byteBuffer49.getFloat((int) (short) 10);
        boolean boolean54 = byteBuffer49.hasArray();
        java.nio.ByteBuffer byteBuffer56 = byteBuffer49.putFloat((float) (-24));
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        int int62 = byteBuffer60.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer64.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.putInt(0);
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.put(byteArray71);
        java.nio.ByteBuffer byteBuffer74 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer74.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.putInt(0);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer82 = byteBuffer78.put(byteArray81);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer68.get(byteArray81, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer60.get(byteArray81);
        java.nio.ByteBuffer byteBuffer87 = java.nio.ByteBuffer.wrap(byteArray81);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer49.put(byteArray81);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer37.get(byteArray81);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer26.get(byteArray81);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer18.put(byteArray81);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer9.put(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = byteBuffer9.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertTrue("'" + char35 + "' != '" + '\000' + "'", char35 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
    }

    @Test
    public void test03518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03518");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress8 = null;
        java.net.InetAddress inetAddress10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket12 = socketFactory0.createSocket(inetAddress8, (-52), inetAddress10, 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03519");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(84);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test03520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03520");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.Buffer buffer47 = byteBuffer22.flip();
        java.nio.ByteBuffer byteBuffer50 = byteBuffer22.putFloat(4, (float) (short) 1);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer22.putInt(24);
        boolean boolean53 = byteBuffer22.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(buffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test03521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03521");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.asReadOnlyBuffer();
        long long12 = byteBuffer1.getLong();
        byte byte13 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.putShort((short) 0);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer21.putChar('a');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer26.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer26.putDouble(0.0d);
        boolean boolean30 = byteBuffer26.isReadOnly();
        java.nio.ByteOrder byteOrder31 = byteBuffer26.order();
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.order(byteOrder31);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer35 = byteBuffer32.putDouble((-100), 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteOrder31);
        org.junit.Assert.assertNotNull(byteBuffer32);
    }

    @Test
    public void test03522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03522");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.CharBuffer charBuffer10 = byteBuffer5.asCharBuffer();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putInt((int) '#');
        float float20 = byteBuffer18.getFloat(4);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer18.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer5.get(byteArray62);
        java.nio.Buffer buffer70 = byteBuffer69.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 7.3E-44f + "'", float20 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(buffer70);
    }

    @Test
    public void test03523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03523");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket(inetAddress8, 52);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03524");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer5.compact();
        int int8 = byteBuffer5.getInt(92);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test03525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03525");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E");
        java.lang.String str2 = pattern1.pattern();
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E" + "'", str2, "\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E");
    }

    @Test
    public void test03526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03526");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        boolean boolean6 = byteBuffer3.hasArray();
        java.lang.String str7 = byteBuffer3.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = byteBuffer3.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str7, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
    }

    @Test
    public void test03527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03527");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        java.nio.Buffer buffer12 = byteBuffer5.position((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putDouble(12, (double) 0);
        // The following exception was thrown during execution in test generation
        try {
            float float17 = byteBuffer15.getFloat((int) (short) 256);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test03528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03528");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer10.putInt((-24));
        java.nio.ByteBuffer byteBuffer17 = byteBuffer10.putInt(1117126656);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        short short23 = byteBuffer19.getShort(0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer19.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer19.putFloat((int) ' ', (float) 4);
        int int30 = byteBuffer17.compareTo(byteBuffer29);
        double double31 = byteBuffer29.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-64) + "'", int30 == (-64));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test03529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03529");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        int int12 = byteBuffer11.getInt();
        short short13 = byteBuffer11.getShort();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put((byte) 66);
        byte byte17 = byteBuffer11.get(32);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer11.putShort(90, (short) (byte) 64);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 256 + "'", int12 == 256);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer20);
    }

    @Test
    public void test03530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03530");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern3 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer7 = byteBuffer6.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream8 = pattern3.splitAsStream((java.lang.CharSequence) charBuffer7);
        java.util.regex.Matcher matcher9 = pattern2.matcher((java.lang.CharSequence) charBuffer7);
        java.lang.String str10 = pattern2.pattern();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long13 = byteBuffer12.getLong();
        int int14 = byteBuffer12.position();
        float float16 = byteBuffer12.getFloat((int) (short) 10);
        boolean boolean17 = byteBuffer12.hasArray();
        double double18 = byteBuffer12.getDouble();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer12.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer22 = byteBuffer12.asCharBuffer();
        java.lang.String[] strArray24 = pattern2.split((java.lang.CharSequence) charBuffer22, (int) '#');
        java.util.regex.Pattern pattern27 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate28 = pattern27.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate29 = pattern27.asPredicate();
        java.util.regex.Pattern pattern32 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate33 = pattern32.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate34 = pattern32.asPredicate();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        java.nio.Buffer buffer42 = byteBuffer36.limit(32);
        java.nio.CharBuffer charBuffer43 = byteBuffer36.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream44 = pattern32.splitAsStream((java.lang.CharSequence) charBuffer43);
        java.util.stream.Stream<java.lang.String> strStream45 = pattern27.splitAsStream((java.lang.CharSequence) charBuffer43);
        java.util.regex.Pattern pattern46 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern46;
        java.util.function.Predicate<java.lang.String> strPredicate48 = pattern46.asPredicate();
        int int49 = pattern46.flags();
        java.util.regex.Pattern pattern50 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern50;
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer54 = byteBuffer53.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream55 = pattern50.splitAsStream((java.lang.CharSequence) charBuffer54);
        java.lang.String[] strArray57 = pattern46.split((java.lang.CharSequence) charBuffer54, (int) (byte) 0);
        java.lang.String[] strArray59 = pattern27.split((java.lang.CharSequence) charBuffer54, (int) (short) 0);
        java.util.regex.Matcher matcher60 = pattern2.matcher((java.lang.CharSequence) charBuffer54);
        int int61 = pattern2.flags();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern3);
// flaky:         org.junit.Assert.assertEquals(pattern3.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(matcher9);
        org.junit.Assert.assertEquals(matcher9.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(pattern27);
        org.junit.Assert.assertEquals(pattern27.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate28);
        org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertNotNull(pattern32);
        org.junit.Assert.assertEquals(pattern32.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate33);
        org.junit.Assert.assertNotNull(strPredicate34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(buffer42);
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertNotNull(strStream45);
        org.junit.Assert.assertNotNull(pattern46);
// flaky:         org.junit.Assert.assertEquals(pattern46.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(strPredicate48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-24) + "'", int49 == (-24));
        org.junit.Assert.assertNotNull(pattern50);
// flaky:         org.junit.Assert.assertEquals(pattern50.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(charBuffer54);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(matcher60);
        org.junit.Assert.assertEquals(matcher60.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
    }

    @Test
    public void test03531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03531");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket(inetAddress7, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40366]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03532");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "java.nio.DirectByteBuffer[pos=84 lim=100 cap=100]";
    }

    @Test
    public void test03533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03533");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder13 = byteBuffer12.order();
        char char15 = byteBuffer12.getChar((int) (byte) 1);
        int int17 = byteBuffer12.getInt(83);
        int int18 = byteBuffer12.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test03534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03534");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(100);
        java.nio.Buffer buffer2 = byteBuffer1.rewind();
        int int3 = buffer2.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test03535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03535");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        char char12 = byteBuffer11.getChar();
        long long14 = byteBuffer11.getLong((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer11.putDouble(50, (double) 16);
        java.nio.DoubleBuffer doubleBuffer18 = byteBuffer17.asDoubleBuffer();
        // The following exception was thrown during execution in test generation
        try {
            short short20 = byteBuffer17.getShort((-35));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 42949672960L + "'", long14 == 42949672960L);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(doubleBuffer18);
    }

    @Test
    public void test03536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03536");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        boolean boolean13 = byteBuffer5.isDirect();
        java.nio.Buffer buffer14 = byteBuffer5.flip();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer17 = byteBuffer16.asShortBuffer();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long20 = byteBuffer19.getLong();
        int int21 = byteBuffer19.position();
        float float23 = byteBuffer19.getFloat((int) (short) 10);
        boolean boolean24 = byteBuffer19.hasArray();
        double double25 = byteBuffer19.getDouble();
        short short27 = byteBuffer19.getShort(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer19.putDouble(100.0d);
        byte byte31 = byteBuffer29.get((int) (short) 0);
        java.nio.IntBuffer intBuffer32 = byteBuffer29.asIntBuffer();
        int int33 = byteBuffer16.compareTo(byteBuffer29);
        java.nio.FloatBuffer floatBuffer34 = byteBuffer29.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer29.put((byte) -1);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer36.putShort(2, (short) (byte) 0);
        java.nio.FloatBuffer floatBuffer40 = byteBuffer39.asFloatBuffer();
        java.nio.Buffer buffer41 = byteBuffer39.flip();
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer43.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer48.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.putInt(0);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer54.compact();
        java.nio.ByteBuffer byteBuffer57 = byteBuffer54.put((byte) 10);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer54.putInt(22);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer54.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long64 = byteBuffer63.getLong();
        int int65 = byteBuffer63.position();
        float float67 = byteBuffer63.getFloat((int) (short) 10);
        boolean boolean68 = byteBuffer63.hasArray();
        java.nio.DoubleBuffer doubleBuffer69 = byteBuffer63.asDoubleBuffer();
        java.nio.Buffer buffer70 = byteBuffer63.clear();
        java.nio.ByteOrder byteOrder71 = byteBuffer63.order();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer54.order(byteOrder71);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer46.order(byteOrder71);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer39.order(byteOrder71);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer5.order(byteOrder71);
        int int76 = byteBuffer75.limit();
        java.nio.ByteBuffer byteBuffer79 = byteBuffer75.putShort(11, (short) 1);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(shortBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 0 + "'", byte31 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-24) + "'", int33 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(floatBuffer40);
        org.junit.Assert.assertNotNull(buffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 0.0f + "'", float67 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleBuffer69);
        org.junit.Assert.assertNotNull(buffer70);
        org.junit.Assert.assertNotNull(byteOrder71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 14 + "'", int76 == 14);
        org.junit.Assert.assertNotNull(byteBuffer79);
    }

    @Test
    public void test03537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03537");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket5 = socketFactory0.createSocket(inetAddress3, (-11));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-11");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03538");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        int int4 = response1.statusCode();
        java.net.HttpURLConnection httpURLConnection5 = null;
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        int int9 = byteBuffer7.position();
        float float11 = byteBuffer7.getFloat((int) (short) 10);
        boolean boolean12 = byteBuffer7.hasArray();
        double double13 = byteBuffer7.getDouble();
        short short15 = byteBuffer7.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response18 = null;
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        java.lang.String str21 = response19.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = response19.cookies();
        org.jsoup.Connection.Response response24 = response19.removeCookie("hi!");
        java.lang.String str25 = response19.statusMessage();
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(byteArray34);
        boolean boolean36 = byteBuffer31.hasArray();
        response19.byteData = byteBuffer31;
        int int38 = byteBuffer17.compareTo(byteBuffer31);
        java.lang.String str39 = byteBuffer17.toString();
        java.nio.ByteBuffer byteBuffer41 = byteBuffer17.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response42 = null;
        org.jsoup.helper.HttpConnection.Response response43 = new org.jsoup.helper.HttpConnection.Response(response42);
        response43.contentType = "";
        java.lang.String str46 = response43.contentType;
        response43.executed = true;
        java.lang.String str49 = response43.statusMessage;
        java.nio.ByteBuffer byteBuffer50 = response43.byteData;
        boolean boolean51 = byteBuffer41.equals((java.lang.Object) response43);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long54 = byteBuffer53.getLong();
        int int55 = byteBuffer53.position();
        float float57 = byteBuffer53.getFloat((int) (short) 10);
        boolean boolean58 = byteBuffer53.hasArray();
        double double59 = byteBuffer53.getDouble();
        short short61 = byteBuffer53.getShort(0);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer53.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response64 = null;
        org.jsoup.helper.HttpConnection.Response response65 = new org.jsoup.helper.HttpConnection.Response(response64);
        java.lang.String str67 = response65.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = response65.cookies();
        org.jsoup.Connection.Response response70 = response65.removeCookie("hi!");
        java.lang.String str71 = response65.statusMessage();
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer73.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.putInt(0);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer81 = byteBuffer77.put(byteArray80);
        boolean boolean82 = byteBuffer77.hasArray();
        response65.byteData = byteBuffer77;
        int int84 = byteBuffer63.compareTo(byteBuffer77);
        java.lang.String str85 = byteBuffer63.toString();
        long long86 = byteBuffer63.getLong();
        java.nio.DoubleBuffer doubleBuffer87 = byteBuffer63.asDoubleBuffer();
        response43.byteData = byteBuffer63;
        response43.statusCode = '\000';
        // The following exception was thrown during execution in test generation
        try {
            response1.setupFromConnection(httpURLConnection5, (org.jsoup.Connection.Response) response43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(response24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-10) + "'", int38 == (-10));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str39, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + short61 + "' != '" + (short) 0 + "'", short61 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(response70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-10) + "'", int84 == (-10));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str85, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(doubleBuffer87);
    }

    @Test
    public void test03539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03539");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer5 = byteBuffer4.asShortBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        int int9 = byteBuffer7.position();
        float float11 = byteBuffer7.getFloat((int) (short) 10);
        boolean boolean12 = byteBuffer7.hasArray();
        double double13 = byteBuffer7.getDouble();
        short short15 = byteBuffer7.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putDouble(100.0d);
        byte byte19 = byteBuffer17.get((int) (short) 0);
        java.nio.IntBuffer intBuffer20 = byteBuffer17.asIntBuffer();
        int int21 = byteBuffer4.compareTo(byteBuffer17);
        java.nio.ByteOrder byteOrder22 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer1.put(byteBuffer17);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer17.slice();
        int int25 = byteBuffer24.capacity();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.duplicate();
        java.nio.CharBuffer charBuffer27 = byteBuffer24.asCharBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-24) + "'", int21 == (-24));
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
    }

    @Test
    public void test03540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03540");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern3 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer7 = byteBuffer6.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream8 = pattern3.splitAsStream((java.lang.CharSequence) charBuffer7);
        java.util.regex.Matcher matcher9 = pattern2.matcher((java.lang.CharSequence) charBuffer7);
        java.util.regex.Matcher matcher11 = pattern2.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        java.util.regex.Pattern pattern14 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.FloatBuffer floatBuffer25 = byteBuffer20.asFloatBuffer();
        java.nio.CharBuffer charBuffer26 = byteBuffer20.asCharBuffer();
        java.lang.String[] strArray28 = pattern14.split((java.lang.CharSequence) charBuffer26, (-10));
        java.util.regex.Matcher matcher29 = pattern2.matcher((java.lang.CharSequence) charBuffer26);
        java.util.stream.Stream<java.lang.String> strStream31 = pattern2.splitAsStream((java.lang.CharSequence) "\\Q\\E");
        java.lang.String str32 = pattern2.pattern();
        java.lang.String str33 = pattern2.pattern();
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        float float39 = byteBuffer37.getFloat(32);
        boolean boolean40 = byteBuffer37.isDirect();
        java.util.regex.Pattern pattern43 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate44 = pattern43.asPredicate();
        boolean boolean45 = byteBuffer37.equals((java.lang.Object) pattern43);
        java.util.regex.Pattern pattern48 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern51 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.CharBuffer charBuffer62 = byteBuffer57.asCharBuffer();
        java.util.regex.Matcher matcher63 = pattern51.matcher((java.lang.CharSequence) charBuffer62);
        java.util.stream.Stream<java.lang.String> strStream64 = null; // flaky: pattern48.splitAsStream((java.lang.CharSequence) charBuffer62);
        java.lang.String[] strArray66 = pattern43.split((java.lang.CharSequence) charBuffer62, 32);
        java.lang.String[] strArray68 = pattern2.split((java.lang.CharSequence) charBuffer62, 16);
        java.lang.String str69 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern3);
// flaky:         org.junit.Assert.assertEquals(pattern3.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(matcher9);
        org.junit.Assert.assertEquals(matcher9.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher11);
        org.junit.Assert.assertEquals(matcher11.toString(), "java.util.regex.Matcher[pattern=hi! region=0,7 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern14);
        org.junit.Assert.assertEquals(pattern14.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(matcher29);
        org.junit.Assert.assertEquals(matcher29.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(pattern43);
        org.junit.Assert.assertEquals(pattern43.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertNotNull(pattern48);
// flaky:         org.junit.Assert.assertEquals(pattern48.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern51);
        org.junit.Assert.assertEquals(pattern51.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(charBuffer62);
        org.junit.Assert.assertNotNull(matcher63);
        org.junit.Assert.assertEquals(matcher63.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
    }

    @Test
    public void test03541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03541");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putChar('4');
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        boolean boolean17 = byteBuffer10.equals((java.lang.Object) strStream16);
        java.nio.Buffer buffer18 = byteBuffer10.mark();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer10.putShort((short) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer22 = byteBuffer10.limit(128);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(pattern11);
// flaky:         org.junit.Assert.assertEquals(pattern11.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
    }

    @Test
    public void test03542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03542");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer22.putDouble(0, (double) 13376L);
        int int28 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer22.putLong((long) 20);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer30.compact();
        java.nio.Buffer buffer32 = byteBuffer31.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 14 + "'", int28 == 14);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(buffer32);
    }

    @Test
    public void test03543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03543");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.IntBuffer intBuffer8 = byteBuffer1.asIntBuffer();
        short short10 = byteBuffer1.getShort((int) (byte) 66);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.slice();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putInt(0, (int) (short) 10);
        java.nio.ByteOrder byteOrder15 = byteBuffer14.order();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put((-18), (byte) 64);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -18");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteOrder15);
    }

    @Test
    public void test03544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03544");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("\\Q\\Q\\E\\\\E\\Q\\E", (-6));
        java.lang.Class<?> wildcardClass3 = null; // flaky: pattern2.getClass();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\Q\\E\\\\E\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test03545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03545");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putFloat(0.0f);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer5.put((byte) 0);
        java.nio.Buffer buffer18 = byteBuffer5.limit(4);
        java.nio.LongBuffer longBuffer19 = byteBuffer5.asLongBuffer();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long22 = byteBuffer21.getLong();
        int int23 = byteBuffer21.position();
        float float25 = byteBuffer21.getFloat((int) (short) 10);
        boolean boolean26 = byteBuffer21.hasArray();
        double double27 = byteBuffer21.getDouble();
        short short29 = byteBuffer21.getShort(0);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer21.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer21.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer34.duplicate();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.slice();
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer38.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.putInt(0);
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.put(byteArray45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer34.get(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer48 = byteBuffer5.get(byteArray45);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertNotNull(longBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 0 + "'", short29 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
    }

    @Test
    public void test03546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03546");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.Buffer buffer15 = byteBuffer10.position(10);
        byte byte17 = byteBuffer10.get(15);
        boolean boolean18 = byteBuffer10.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test03547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03547");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.put((byte) 10);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.FloatBuffer floatBuffer22 = byteBuffer17.asFloatBuffer();
        boolean boolean23 = byteBuffer17.isDirect();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        org.jsoup.helper.HttpConnection.Response response34 = null;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response34);
        response35.contentType = "";
        boolean boolean38 = byteBuffer33.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putInt((int) '#');
        int int47 = byteBuffer33.compareTo(byteBuffer44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer17.put(byteBuffer44);
        int int49 = byteBuffer9.compareTo(byteBuffer48);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer9.slice();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer9.putShort(80, (short) 0);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer9.put((byte) 0);
        long long56 = byteBuffer9.getLong();
        int int58 = byteBuffer9.getInt(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(floatBuffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 83 + "'", int49 == 83);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test03548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03548");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put((byte) 66);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putLong(78, (long) (short) 256);
        int int18 = byteBuffer17.remaining();
        boolean boolean19 = byteBuffer17.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 23 + "'", int18 == 23);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test03549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03549");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocate((int) '\n');
        byte[] byteArray12 = byteBuffer11.array();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer1.get(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.wrap(byteArray12, 46, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer13);
    }

    @Test
    public void test03550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03550");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket3 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]", 35);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
    }

    @Test
    public void test03551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03551");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.Buffer buffer24 = byteBuffer5.position(35);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer5.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(buffer24);
        org.junit.Assert.assertNotNull(byteBuffer25);
    }

    @Test
    public void test03552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03552");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        java.net.URL uRL14 = response1.url();
        java.net.URL uRL15 = response1.url();
        org.jsoup.Connection.Response response18 = response1.cookie("java.nio.DirectByteBuffer[pos=10 lim=22 cap=22]", "java.nio.DirectByteBuffer[pos=0 lim=76 cap=76]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Too many redirects occurred trying to load URL null");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(uRL14);
        org.junit.Assert.assertNull(uRL15);
        org.junit.Assert.assertNotNull(response18);
    }

    @Test
    public void test03553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03553");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(96);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test03554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03554");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.asReadOnlyBuffer();
        java.nio.Buffer buffer12 = byteBuffer11.rewind();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putInt((-84));
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(buffer12);
    }

    @Test
    public void test03555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03555");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer22.putDouble((int) (byte) 66, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            byte byte29 = byteBuffer27.get((-84));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer27);
    }

    @Test
    public void test03556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03556");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.asReadOnlyBuffer();
        java.nio.Buffer buffer48 = byteBuffer14.flip();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray49 = byteBuffer14.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(buffer48);
    }

    @Test
    public void test03557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03557");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        org.jsoup.Connection.Request request8 = response1.req;
        java.lang.String str9 = response1.contentType;
        response1.charset = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(request8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test03558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03558");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        float float13 = byteBuffer5.getFloat(83);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putChar('\n');
        int int16 = byteBuffer5.position();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer5.slice();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = byteBuffer5.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(byteBuffer17);
    }

    @Test
    public void test03559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03559");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        long long19 = byteBuffer14.getLong();
        long long20 = byteBuffer14.getLong();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer14.putShort((short) 10);
        java.nio.Buffer buffer23 = byteBuffer14.mark();
        java.nio.Buffer buffer24 = buffer23.reset();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(buffer24);
    }

    @Test
    public void test03560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03560");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket8 = socketFactory0.createSocket(inetAddress6, (-83));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-83");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03561");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=0 lim=76 cap=76]\\E", (-8), inetAddress9, (-52));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40374]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03562");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer5.putLong((long) '\u0a00');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putDouble((double) (byte) 66);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putChar('\u2000');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test03563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03563");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.duplicate();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.duplicate();
        double double17 = byteBuffer16.getDouble();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer18 = byteBuffer16.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test03564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03564");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putDouble(0.0d);
        java.lang.String str27 = byteBuffer26.toString();
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer33.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer33.putChar(' ');
        float float39 = byteBuffer38.getFloat();
        java.nio.DoubleBuffer doubleBuffer40 = byteBuffer38.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long43 = byteBuffer42.getLong();
        int int44 = byteBuffer42.position();
        float float46 = byteBuffer42.getFloat((int) (short) 10);
        boolean boolean47 = byteBuffer42.hasArray();
        double double48 = byteBuffer42.getDouble();
        short short50 = byteBuffer42.getShort(0);
        java.nio.ShortBuffer shortBuffer51 = byteBuffer42.asShortBuffer();
        java.nio.Buffer buffer53 = byteBuffer42.position((int) '#');
        int int54 = byteBuffer42.capacity();
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.putInt(0);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer60.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer60.putChar('a');
        double double67 = byteBuffer65.getDouble(12);
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.put(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer79.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer83 = byteBuffer79.putInt(0);
        byte[] byteArray86 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer87 = byteBuffer83.put(byteArray86);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer73.get(byteArray86, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer65.put(byteArray86);
        java.nio.ByteBuffer byteBuffer92 = java.nio.ByteBuffer.wrap(byteArray86);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer42.get(byteArray86);
        java.nio.ByteBuffer byteBuffer94 = byteBuffer38.get(byteArray86);
        java.nio.ByteBuffer byteBuffer95 = byteBuffer26.get(byteArray86);
        boolean boolean96 = byteBuffer95.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]" + "'", str27, "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertNotNull(doubleBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + short50 + "' != '" + (short) 0 + "'", short50 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer51);
        org.junit.Assert.assertNotNull(buffer53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 7.565251118924485E-307d + "'", double67 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(byteBuffer95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test03565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03565");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.asReadOnlyBuffer();
        long long12 = byteBuffer1.getLong();
        byte byte13 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.putShort((short) 0);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer21.putChar('a');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer26.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer26.putDouble(0.0d);
        boolean boolean30 = byteBuffer26.isReadOnly();
        java.nio.ByteOrder byteOrder31 = byteBuffer26.order();
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.order(byteOrder31);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = byteBuffer32.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteOrder31);
        org.junit.Assert.assertNotNull(byteBuffer32);
    }

    @Test
    public void test03566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03566");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer11 = byteBuffer1.asCharBuffer();
        boolean boolean12 = byteBuffer1.hasRemaining();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        short short18 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.put(byteArray30);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer27.get(byteArray40, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer27.putDouble(100.0d);
        int int47 = byteBuffer21.compareTo(byteBuffer27);
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putInt(0);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.put(byteArray56);
        java.nio.ByteOrder byteOrder58 = byteBuffer57.order();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer27.order(byteOrder58);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer27.slice();
        int int61 = byteBuffer1.compareTo(byteBuffer60);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer60.putDouble((double) 27);
        boolean boolean64 = byteBuffer63.isReadOnly();
        java.nio.ByteBuffer byteBuffer66 = byteBuffer63.put((byte) 10);
        java.nio.ByteOrder byteOrder67 = byteBuffer66.order();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 0 + "'", short18 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 14 + "'", int47 == 14);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteOrder58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteOrder67);
    }

    @Test
    public void test03567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03567");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '#');
        int int2 = byteBuffer1.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
    }

    @Test
    public void test03568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03568");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E";
    }

    @Test
    public void test03569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03569");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        byte byte12 = byteBuffer9.get((int) 'a');
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.put(byteArray21);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer18.get(byteArray31, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putShort((short) -1);
        int int39 = byteBuffer35.getInt(0);
        int int40 = byteBuffer35.position();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer35.putInt(83, (int) (byte) 100);
        java.lang.String str44 = byteBuffer43.toString();
        int int45 = byteBuffer9.compareTo(byteBuffer43);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer9.putLong(10L);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer50 = byteBuffer47.putInt((int) 'a', 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]" + "'", str44, "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-100) + "'", int45 == (-100));
        org.junit.Assert.assertNotNull(byteBuffer47);
    }

    @Test
    public void test03570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03570");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putDouble(0.0d);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        short short32 = byteBuffer28.getShort(0);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer28.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer28.putChar('4');
        java.lang.String str38 = byteBuffer37.toString();
        int int39 = byteBuffer22.compareTo(byteBuffer37);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer22.putChar('\000');
        java.nio.ShortBuffer shortBuffer42 = byteBuffer22.asShortBuffer();
        java.lang.String str43 = byteBuffer22.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 0 + "'", short32 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str38, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-12) + "'", int39 == (-12));
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(shortBuffer42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str43, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
    }

    @Test
    public void test03571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03571");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        float float5 = byteBuffer3.getFloat(32);
        boolean boolean6 = byteBuffer3.isDirect();
        java.util.regex.Pattern pattern9 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate10 = pattern9.asPredicate();
        boolean boolean11 = byteBuffer3.equals((java.lang.Object) pattern9);
        java.util.regex.Pattern pattern15 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern15;
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.FloatBuffer floatBuffer27 = byteBuffer22.asFloatBuffer();
        java.nio.CharBuffer charBuffer28 = byteBuffer22.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream29 = null; // flaky: pattern15.splitAsStream((java.lang.CharSequence) charBuffer28);
        boolean boolean30 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E", (java.lang.CharSequence) charBuffer28);
        java.lang.String[] strArray31 = pattern9.split((java.lang.CharSequence) "\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern9;
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(pattern9);
        org.junit.Assert.assertEquals(pattern9.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(pattern15);
// flaky:         org.junit.Assert.assertEquals(pattern15.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(floatBuffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
// flaky:         org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test03572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03572");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.FloatBuffer floatBuffer2 = byteBuffer1.asFloatBuffer();
        boolean boolean3 = byteBuffer1.isDirect();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putFloat(0.0f);
        java.nio.CharBuffer charBuffer6 = byteBuffer1.asCharBuffer();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate((int) 'a');
        int int10 = byteBuffer8.getInt(20);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.putFloat((float) (-6));
        java.nio.ByteBuffer byteBuffer13 = byteBuffer1.put(byteBuffer8);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer14 = byteBuffer13.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
    }

    @Test
    public void test03573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03573");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBufferR[pos=16 lim=100 cap=100]\\E", 20, inetAddress9, 46);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03574");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer16.get(byteArray29, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer39.get(byteArray52, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer33.put(byteArray52);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer5.put(byteArray52);
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.wrap(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.wrap(byteArray52, 4325376, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
    }

    @Test
    public void test03575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03575");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer3.putDouble((double) ' ');
        java.nio.IntBuffer intBuffer32 = byteBuffer3.asIntBuffer();
        boolean boolean33 = byteBuffer3.isReadOnly();
        java.nio.Buffer buffer34 = byteBuffer3.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(buffer34);
    }

    @Test
    public void test03576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03576");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer1.putFloat((float) 'a');
        java.lang.String str8 = byteBuffer1.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]" + "'", str8, "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
    }

    @Test
    public void test03577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03577");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        java.nio.ByteOrder byteOrder70 = byteBuffer69.order();
        java.nio.Buffer buffer72 = byteBuffer69.limit(80);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer69.putLong((long) (-35));
        java.nio.ByteBuffer byteBuffer75 = byteBuffer74.asReadOnlyBuffer();
        java.nio.Buffer buffer76 = byteBuffer75.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteOrder70);
        org.junit.Assert.assertNotNull(buffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(buffer76);
    }

    @Test
    public void test03578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03578");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer16.get(byteArray29, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer39.get(byteArray52, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer33.put(byteArray52);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer5.put(byteArray52);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer58.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
    }

    @Test
    public void test03579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03579");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.lang.String str5 = null; // flaky: pattern2.pattern();
        int int6 = 0; // flaky: pattern2.flags();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str5, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-24) + "'", int6 == (-24));
    }

    @Test
    public void test03580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03580");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.lang.String[] strArray5 = null; // flaky: pattern2.split((java.lang.CharSequence) "Location", (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.CharBuffer charBuffer16 = byteBuffer11.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream17 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) charBuffer16);
        java.util.function.Predicate<java.lang.String> strPredicate18 = null; // flaky: pattern2.asPredicate();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(charBuffer16);
// flaky:         org.junit.Assert.assertNotNull(strStream17);
// flaky:         org.junit.Assert.assertNotNull(strPredicate18);
    }

    @Test
    public void test03581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03581");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        int int12 = byteBuffer11.getInt();
        short short13 = byteBuffer11.getShort();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put((byte) 66);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putShort((int) (byte) 100, (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 256 + "'", int12 == 256);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test03582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03582");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((-64));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03583");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        response1.executed = false;
        org.jsoup.Connection.Response response12 = response1.removeHeader("\\QLocation\\E");
        response1.contentType = "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E";
        boolean boolean16 = response1.hasHeader("\\Qjava.nio.DirectByteBuffer[pos=16 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03584");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        float float11 = byteBuffer10.getFloat();
        java.nio.DoubleBuffer doubleBuffer12 = byteBuffer10.asDoubleBuffer();
        boolean boolean13 = byteBuffer10.hasArray();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer10.put((byte) 0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer10.putChar('\u4120');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(doubleBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
    }

    @Test
    public void test03585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03585");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putDouble(0.0d);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        short short32 = byteBuffer28.getShort(0);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer28.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer28.putChar('4');
        java.lang.String str38 = byteBuffer37.toString();
        int int39 = byteBuffer22.compareTo(byteBuffer37);
        java.nio.ByteOrder byteOrder40 = byteBuffer22.order();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = byteBuffer22.getInt((-24));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 0 + "'", short32 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str38, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-12) + "'", int39 == (-12));
        org.junit.Assert.assertNotNull(byteOrder40);
    }

    @Test
    public void test03586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03586");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.slice();
        boolean boolean48 = byteBuffer47.hasRemaining();
        boolean boolean49 = byteBuffer47.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test03587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03587");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        double double12 = byteBuffer10.getDouble(12);
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.put(byteArray21);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer18.get(byteArray31, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer10.put(byteArray31);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer36.putInt(75, 0);
        short short40 = byteBuffer39.getShort();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putDouble(3, (double) '4');
        short short45 = byteBuffer43.getShort(78);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 7.565251118924485E-307d + "'", double12 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 0 + "'", short45 == (short) 0);
    }

    @Test
    public void test03588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03588");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.lang.String str9 = byteBuffer8.toString();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteOrder byteOrder20 = byteBuffer19.order();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer8.order(byteOrder20);
        java.nio.Buffer buffer23 = byteBuffer8.position(22);
        boolean boolean24 = byteBuffer8.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str9, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03589");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer5.putInt((int) (short) 63, 75);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
    }

    @Test
    public void test03590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03590");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        boolean boolean80 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer83 = byteBuffer25.putInt(14, 12);
        java.nio.CharBuffer charBuffer84 = byteBuffer83.asCharBuffer();
        char char85 = byteBuffer83.getChar();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(charBuffer84);
        org.junit.Assert.assertTrue("'" + char85 + "' != '" + '\f' + "'", char85 == '\f');
    }

    @Test
    public void test03591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03591");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.ByteOrder byteOrder19 = byteBuffer14.order();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putShort((short) (byte) 0);
        java.nio.CharBuffer charBuffer23 = byteBuffer22.asCharBuffer();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer22.put((byte) -1);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(byteOrder19);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
    }

    @Test
    public void test03592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03592");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        long long6 = byteBuffer5.getLong();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putLong(48, (long) (byte) 66);
        java.nio.DoubleBuffer doubleBuffer10 = byteBuffer9.asDoubleBuffer();
        byte[] byteArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer12 = byteBuffer9.put(byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(doubleBuffer10);
    }

    @Test
    public void test03593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03593");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        double double13 = byteBuffer1.getDouble(20);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.slice();
        java.nio.IntBuffer intBuffer15 = byteBuffer14.asIntBuffer();
        byte byte17 = byteBuffer14.get(46);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long20 = byteBuffer19.getLong();
        int int21 = byteBuffer19.position();
        float float23 = byteBuffer19.getFloat((int) (short) 10);
        boolean boolean24 = byteBuffer19.hasArray();
        double double25 = byteBuffer19.getDouble();
        short short27 = byteBuffer19.getShort(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer19.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer19.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer32.duplicate();
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.duplicate();
        java.nio.ByteOrder byteOrder35 = byteBuffer34.order();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer14.order(byteOrder35);
        boolean boolean37 = byteBuffer36.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(intBuffer15);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteOrder35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test03594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03594");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer25 = byteBuffer24.mark();
        boolean boolean26 = byteBuffer24.isDirect();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putLong((long) (short) 0);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        int int34 = byteBuffer32.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer40.get(byteArray53, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer32.get(byteArray53);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer24.get(byteArray53);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.wrap(byteArray53);
        char char61 = byteBuffer60.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + char61 + "' != '" + '\000' + "'", char61 == '\000');
    }

    @Test
    public void test03595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03595");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar(6, '\n');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putFloat((float) 18);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer5.duplicate();
        char char17 = byteBuffer16.getChar();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putLong((int) (short) 0, (long) (short) 63);
        java.nio.Buffer buffer21 = byteBuffer16.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(buffer21);
    }

    @Test
    public void test03596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03596");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        java.lang.String str8 = response1.getHeaderCaseInsensitive("\\Qhi!\\E");
        response1.statusMessage = "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E";
        java.lang.String str12 = response1.cookie("\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E");
        java.lang.String str14 = response1.getHeaderCaseInsensitive("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test03597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03597");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        long long47 = byteBuffer22.getLong();
        java.nio.ByteBuffer byteBuffer49 = byteBuffer22.putChar('\n');
        java.nio.ByteOrder byteOrder50 = byteBuffer22.order();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer22.putLong(0, (long) 1);
        char char55 = byteBuffer53.getChar((int) '\f');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteOrder50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + char55 + "' != '" + '\n' + "'", char55 == '\n');
    }

    @Test
    public void test03598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03598");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        int int36 = byteBuffer35.limit();
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer38.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.putInt(0);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putInt((int) '#');
        byte byte46 = byteBuffer42.get(1);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer42.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder50 = byteBuffer49.order();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer35.order(byteOrder50);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer51.putLong((long) 20);
        java.lang.Class<?> wildcardClass54 = byteBuffer51.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + byte46 + "' != '" + (byte) 0 + "'", byte46 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteOrder50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test03599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03599");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.slice();
        double double49 = byteBuffer46.getDouble(6);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.1125369292536027E-307d + "'", double49 == 1.1125369292536027E-307d);
    }

    @Test
    public void test03600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03600");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern6 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern6;
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer10 = byteBuffer9.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream11 = null; // flaky: pattern6.splitAsStream((java.lang.CharSequence) charBuffer10);
        java.util.regex.Matcher matcher12 = pattern5.matcher((java.lang.CharSequence) charBuffer10);
        java.util.regex.Matcher matcher13 = null; // flaky: pattern2.matcher((java.lang.CharSequence) charBuffer10);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer15.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer25 = byteBuffer15.asCharBuffer();
        java.lang.String[] strArray27 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer25, 12);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.FloatBuffer floatBuffer38 = byteBuffer33.asFloatBuffer();
        boolean boolean39 = byteBuffer33.isDirect();
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer41.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.putInt(0);
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.put(byteArray48);
        org.jsoup.helper.HttpConnection.Response response50 = null;
        org.jsoup.helper.HttpConnection.Response response51 = new org.jsoup.helper.HttpConnection.Response(response50);
        response51.contentType = "";
        boolean boolean54 = byteBuffer49.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.putInt(0);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putInt((int) '#');
        int int63 = byteBuffer49.compareTo(byteBuffer60);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer33.put(byteBuffer60);
        boolean boolean65 = byteBuffer60.isReadOnly();
        java.nio.CharBuffer charBuffer66 = byteBuffer60.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream67 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) charBuffer66);
        java.lang.String[] strArray69 = null; // flaky: pattern2.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=84 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern6);
// flaky:         org.junit.Assert.assertEquals(pattern6.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
// flaky:         org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(matcher12);
        org.junit.Assert.assertEquals(matcher12.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher13);
// flaky:         org.junit.Assert.assertEquals(matcher13.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
// flaky:         org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(floatBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(charBuffer66);
// flaky:         org.junit.Assert.assertNotNull(strStream67);
// flaky:         org.junit.Assert.assertNotNull(strArray69);
    }

    @Test
    public void test03601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03601");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.Connection.Method method20 = response1.method();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.put((byte) 10);
        java.nio.Buffer buffer34 = byteBuffer30.position((int) ' ');
        java.nio.Buffer buffer35 = byteBuffer30.rewind();
        response1.byteData = byteBuffer30;
        boolean boolean39 = response1.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", "\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        java.lang.String str40 = response1.contentType();
        int int41 = response1.numRedirects;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response42 = new org.jsoup.helper.HttpConnection.Response(response1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Too many redirects occurred trying to load URL null");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(buffer34);
        org.junit.Assert.assertNotNull(buffer35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test03602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03602");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", (int) (short) 10);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        float float11 = byteBuffer9.getFloat(32);
        boolean boolean12 = byteBuffer9.isDirect();
        java.util.regex.Pattern pattern15 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate16 = pattern15.asPredicate();
        boolean boolean17 = byteBuffer9.equals((java.lang.Object) pattern15);
        java.util.regex.Pattern pattern20 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern23 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.CharBuffer charBuffer34 = byteBuffer29.asCharBuffer();
        java.util.regex.Matcher matcher35 = pattern23.matcher((java.lang.CharSequence) charBuffer34);
        java.util.stream.Stream<java.lang.String> strStream36 = null; // flaky: pattern20.splitAsStream((java.lang.CharSequence) charBuffer34);
        java.lang.String[] strArray38 = pattern15.split((java.lang.CharSequence) charBuffer34, 32);
        boolean boolean39 = java.util.regex.Pattern.matches("", (java.lang.CharSequence) charBuffer34);
        java.lang.String[] strArray41 = pattern2.split((java.lang.CharSequence) charBuffer34, 97);
        java.lang.String str42 = pattern2.pattern();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(pattern15);
        org.junit.Assert.assertEquals(pattern15.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertNotNull(pattern20);
// flaky:         org.junit.Assert.assertEquals(pattern20.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern23);
        org.junit.Assert.assertEquals(pattern23.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(charBuffer34);
        org.junit.Assert.assertNotNull(matcher35);
        org.junit.Assert.assertEquals(matcher35.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str42, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
    }

    @Test
    public void test03603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03603");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(10);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test03604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03604");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        java.nio.Buffer buffer12 = byteBuffer5.position((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putDouble(12, (double) 0);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.FloatBuffer floatBuffer18 = byteBuffer17.asFloatBuffer();
        java.nio.Buffer buffer20 = byteBuffer17.limit((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.asReadOnlyBuffer();
        int int22 = byteBuffer5.compareTo(byteBuffer17);
        long long24 = byteBuffer5.getLong((int) (byte) 64);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer5.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(floatBuffer18);
        org.junit.Assert.assertNotNull(buffer20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 90 + "'", int22 == 90);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer25);
    }

    @Test
    public void test03605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03605");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.DoubleBuffer doubleBuffer28 = byteBuffer1.asDoubleBuffer();
        boolean boolean29 = byteBuffer1.hasRemaining();
        java.nio.Buffer buffer31 = byteBuffer1.position(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(buffer31);
    }

    @Test
    public void test03606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03606");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = (-90);
    }

    @Test
    public void test03607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03607");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        short short23 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer15.putDouble(100.0d);
        boolean boolean26 = byteBuffer15.isDirect();
        int int27 = byteBuffer13.compareTo(byteBuffer15);
        java.nio.DoubleBuffer doubleBuffer28 = byteBuffer15.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer15.slice();
        java.nio.ByteBuffer byteBuffer32 = byteBuffer29.putChar((int) (short) 10, '4');
        org.jsoup.helper.HttpConnection.Response response33 = null;
        org.jsoup.helper.HttpConnection.Response response34 = new org.jsoup.helper.HttpConnection.Response(response33);
        response34.contentType = "";
        java.lang.String str37 = response34.contentType;
        java.lang.String str38 = response34.charset;
        java.nio.ByteBuffer byteBuffer39 = response34.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap40 = response34.headers();
        org.jsoup.Connection.Response response42 = response34.removeHeader("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.lang.String str44 = response34.cookie("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        boolean boolean45 = byteBuffer32.equals((java.lang.Object) str44);
        java.nio.LongBuffer longBuffer46 = byteBuffer32.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(byteBuffer39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(response42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(longBuffer46);
    }

    @Test
    public void test03608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03608");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putFloat((int) (short) 0, (float) '#');
        java.nio.Buffer buffer15 = byteBuffer5.mark();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer18 = byteBuffer5.putChar((-18), '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(buffer15);
    }

    @Test
    public void test03609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03609");
        java.nio.ByteBuffer byteBuffer2 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long3 = byteBuffer2.getLong();
        int int4 = byteBuffer2.position();
        float float6 = byteBuffer2.getFloat((int) (short) 10);
        boolean boolean7 = byteBuffer2.hasArray();
        double double8 = byteBuffer2.getDouble();
        short short10 = byteBuffer2.getShort(0);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer2.putDouble(100.0d);
        java.nio.CharBuffer charBuffer13 = byteBuffer2.asCharBuffer();
        boolean boolean14 = java.util.regex.Pattern.matches("java.nio.HeapByteBuffer[pos=0 lim=25 cap=52]", (java.lang.CharSequence) charBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 0.0f + "'", float6 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test03610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03610");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        double double16 = byteBuffer9.getDouble(0);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        short short22 = byteBuffer18.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer18.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer31.get(byteArray44, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer31.putDouble(100.0d);
        int int51 = byteBuffer25.compareTo(byteBuffer31);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteOrder byteOrder62 = byteBuffer61.order();
        java.nio.ByteBuffer byteBuffer63 = byteBuffer31.order(byteOrder62);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer31.asReadOnlyBuffer();
        boolean boolean65 = byteBuffer9.equals((java.lang.Object) byteBuffer31);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer31.putDouble((double) 73426760892416L);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer70 = byteBuffer31.put((-66), (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -66");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.57E-322d + "'", double16 == 2.57E-322d);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteOrder62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteBuffer67);
    }

    @Test
    public void test03611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03611");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.putShort(24, (short) (byte) -1);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer1.putInt(8);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer17.duplicate();
        java.nio.LongBuffer longBuffer19 = byteBuffer17.asLongBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(12);
        float float23 = byteBuffer21.getFloat(33);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(longBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 4.305E-42f + "'", float23 == 4.305E-42f);
    }

    @Test
    public void test03612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03612");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern10 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher17 = pattern10.matcher((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher18 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer15);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer21 = byteBuffer20.asCharBuffer();
        java.util.regex.Matcher matcher22 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer21);
        java.util.regex.Pattern pattern25 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern28 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern31 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern32 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern32;
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer36 = byteBuffer35.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream37 = pattern32.splitAsStream((java.lang.CharSequence) charBuffer36);
        java.util.regex.Matcher matcher38 = pattern31.matcher((java.lang.CharSequence) charBuffer36);
        java.util.regex.Matcher matcher39 = null; // flaky: pattern28.matcher((java.lang.CharSequence) charBuffer36);
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer42 = byteBuffer41.asCharBuffer();
        java.util.regex.Matcher matcher43 = null; // flaky: pattern28.matcher((java.lang.CharSequence) charBuffer42);
        java.lang.String[] strArray45 = pattern25.split((java.lang.CharSequence) charBuffer42, 8);
        java.util.regex.Pattern pattern48 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern49 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern49;
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer53 = byteBuffer52.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream54 = pattern49.splitAsStream((java.lang.CharSequence) charBuffer53);
        java.util.regex.Matcher matcher55 = pattern48.matcher((java.lang.CharSequence) charBuffer53);
        java.lang.String[] strArray57 = pattern25.split((java.lang.CharSequence) charBuffer53, (-6));
        java.lang.String[] strArray59 = null; // flaky: pattern7.split((java.lang.CharSequence) charBuffer53, (int) (byte) 10);
        boolean boolean60 = byteBuffer4.equals((java.lang.Object) pattern7);
        java.lang.String str61 = null; // flaky: pattern7.pattern();
        int int62 = 0; // flaky: pattern7.flags();
        int int63 = 0; // flaky: pattern7.flags();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern10);
        org.junit.Assert.assertEquals(pattern10.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern11);
        org.junit.Assert.assertEquals(pattern11.toString(), "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(matcher17);
        org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher18);
// flaky:         org.junit.Assert.assertEquals(matcher18.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
// flaky:         org.junit.Assert.assertNotNull(matcher22);
// flaky:         org.junit.Assert.assertEquals(matcher22.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern25);
        org.junit.Assert.assertEquals(pattern25.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern28);
// flaky:         org.junit.Assert.assertEquals(pattern28.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern31);
        org.junit.Assert.assertEquals(pattern31.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern32);
        org.junit.Assert.assertEquals(pattern32.toString(), "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(charBuffer36);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(matcher38);
        org.junit.Assert.assertEquals(matcher38.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher39);
// flaky:         org.junit.Assert.assertEquals(matcher39.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
// flaky:         org.junit.Assert.assertNotNull(matcher43);
// flaky:         org.junit.Assert.assertEquals(matcher43.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(pattern48);
        org.junit.Assert.assertEquals(pattern48.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(charBuffer53);
        org.junit.Assert.assertNotNull(strStream54);
        org.junit.Assert.assertNotNull(matcher55);
        org.junit.Assert.assertEquals(matcher55.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray57);
// flaky:         org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str61, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-24) + "'", int62 == (-24));
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-24) + "'", int63 == (-24));
    }

    @Test
    public void test03613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03613");
        java.util.regex.Pattern pattern3 = java.util.regex.Pattern.compile("\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        java.util.function.Predicate<java.lang.String> strPredicate5 = pattern3.asPredicate();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        java.util.regex.Pattern pattern9 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern9;
        java.util.stream.Stream<java.lang.String> strStream12 = null; // flaky: pattern9.splitAsStream((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.lang.String str13 = null; // flaky: pattern9.pattern();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern9;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern9;
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.FloatBuffer floatBuffer27 = byteBuffer22.asFloatBuffer();
        java.nio.CharBuffer charBuffer28 = byteBuffer22.asCharBuffer();
        boolean boolean29 = java.util.regex.Pattern.matches("", (java.lang.CharSequence) charBuffer28);
        java.lang.String[] strArray30 = null; // flaky: pattern9.split((java.lang.CharSequence) charBuffer28);
        java.util.regex.Matcher matcher31 = pattern3.matcher((java.lang.CharSequence) charBuffer28);
        boolean boolean32 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E", (java.lang.CharSequence) charBuffer28);
        boolean boolean33 = java.util.regex.Pattern.matches("\\Qhi!\\E", (java.lang.CharSequence) charBuffer28);
        org.junit.Assert.assertNotNull(pattern3);
        org.junit.Assert.assertEquals(pattern3.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strPredicate5);
// flaky:         org.junit.Assert.assertNotNull(pattern9);
// flaky:         org.junit.Assert.assertEquals(pattern9.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strStream12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str13, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(floatBuffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(matcher31);
        org.junit.Assert.assertEquals(matcher31.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test03614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03614");
        org.jsoup.Connection.Request request0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response.writePost(request0, outputStream1, "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03615");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.numRedirects = (short) 0;
        int int14 = response1.statusCode();
        response1.contentType = "\\Q\\Q\\E\\\\E\\Q\\E";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03616");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer11.putLong((long) (byte) 10);
        boolean boolean35 = byteBuffer34.isDirect();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.slice();
        java.lang.Class<?> wildcardClass37 = byteBuffer36.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test03617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03617");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(100);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
    }

    @Test
    public void test03618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03618");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket4 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBufferR[pos=16 lim=100 cap=100]\\E", 52);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: \\Qjava.nio.DirectByteBufferR[pos=16 lim=100 cap=100]\\E");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03619");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.Buffer buffer35 = byteBuffer8.clear();
        java.nio.ByteBuffer byteBuffer37 = byteBuffer8.putFloat((float) 100L);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer8.putInt(78);
        java.nio.Buffer buffer41 = byteBuffer8.limit(92);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer8.putFloat((float) '\n');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(buffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(buffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
    }

    @Test
    public void test03620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03620");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E", 23);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
    }

    @Test
    public void test03621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03621");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.put((byte) 10);
        java.nio.ByteOrder byteOrder23 = byteBuffer20.order();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer10.order(byteOrder23);
        java.nio.CharBuffer charBuffer25 = byteBuffer24.asCharBuffer();
        short short26 = byteBuffer24.getShort();
        boolean boolean27 = byteBuffer24.isDirect();
        byte byte29 = byteBuffer24.get(86);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer30 = byteBuffer24.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 0 + "'", byte29 == (byte) 0);
    }

    @Test
    public void test03622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03622");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) '4');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.duplicate();
        short short4 = byteBuffer3.getShort();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 0 + "'", short4 == (short) 0);
    }

    @Test
    public void test03623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03623");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.put((byte) 10);
        java.nio.ByteOrder byteOrder23 = byteBuffer20.order();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer10.order(byteOrder23);
        java.nio.CharBuffer charBuffer25 = byteBuffer24.asCharBuffer();
        short short26 = byteBuffer24.getShort();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer24.putInt(88, 83);
        double double30 = byteBuffer24.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test03624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03624");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putChar('\n');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putDouble((double) 63);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer22 = byteBuffer19.put(1405091840, (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1405091840");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
    }

    @Test
    public void test03625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03625");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        java.nio.DoubleBuffer doubleBuffer7 = byteBuffer1.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.put((int) (byte) 0, (byte) 10);
        short short11 = byteBuffer1.getShort();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 0 + "'", short11 == (short) 0);
    }

    @Test
    public void test03626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03626");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        java.nio.DoubleBuffer doubleBuffer7 = byteBuffer1.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer1.putDouble((double) 10);
        float float10 = byteBuffer1.getFloat();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
    }

    @Test
    public void test03627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03627");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        int int2 = byteBuffer1.arrayOffset();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.put(0, (byte) 0);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer8 = byteBuffer7.asShortBuffer();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long11 = byteBuffer10.getLong();
        int int12 = byteBuffer10.position();
        float float14 = byteBuffer10.getFloat((int) (short) 10);
        boolean boolean15 = byteBuffer10.hasArray();
        double double16 = byteBuffer10.getDouble();
        short short18 = byteBuffer10.getShort(0);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer10.putDouble(100.0d);
        byte byte22 = byteBuffer20.get((int) (short) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer20.asIntBuffer();
        int int24 = byteBuffer7.compareTo(byteBuffer20);
        java.nio.FloatBuffer floatBuffer25 = byteBuffer20.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer20.put((byte) -1);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer27.putShort(2, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer30.compact();
        int int32 = byteBuffer1.compareTo(byteBuffer31);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = byteBuffer1.getLong((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 0 + "'", short18 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-24) + "'", int24 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 27 + "'", int32 == 27);
    }

    @Test
    public void test03628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03628");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(24);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) 1405091840);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putDouble((int) (byte) 1, (double) 42949672960L);
        int int7 = byteBuffer6.remaining();
        byte[] byteArray8 = byteBuffer6.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.wrap(byteArray8, 88, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 66, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test03629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03629");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        double double7 = byteBuffer3.getDouble((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer3.putFloat((float) (-84));
        double double11 = byteBuffer3.getDouble(24);
        double double13 = byteBuffer3.getDouble(80);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test03630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03630");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer5 = byteBuffer4.asShortBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        int int9 = byteBuffer7.position();
        float float11 = byteBuffer7.getFloat((int) (short) 10);
        boolean boolean12 = byteBuffer7.hasArray();
        double double13 = byteBuffer7.getDouble();
        short short15 = byteBuffer7.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putDouble(100.0d);
        byte byte19 = byteBuffer17.get((int) (short) 0);
        java.nio.IntBuffer intBuffer20 = byteBuffer17.asIntBuffer();
        int int21 = byteBuffer4.compareTo(byteBuffer17);
        java.nio.ByteOrder byteOrder22 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer1.put(byteBuffer17);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer17.slice();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer17.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray26 = byteBuffer25.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-24) + "'", int21 == (-24));
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer25);
    }

    @Test
    public void test03631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03631");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putLong(8, (long) (short) 1);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer5.putShort((short) (byte) -1);
        java.nio.LongBuffer longBuffer12 = byteBuffer5.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(longBuffer12);
    }

    @Test
    public void test03632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03632");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        double double11 = byteBuffer5.getDouble();
        java.nio.IntBuffer intBuffer12 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putShort(0, (short) (byte) 0);
        java.lang.String str16 = byteBuffer15.toString();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.compact();
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long21 = byteBuffer20.getLong();
        int int22 = byteBuffer20.position();
        float float24 = byteBuffer20.getFloat((int) (short) 10);
        boolean boolean25 = byteBuffer20.hasArray();
        double double26 = byteBuffer20.getDouble();
        short short28 = byteBuffer20.getShort(0);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer20.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response31 = null;
        org.jsoup.helper.HttpConnection.Response response32 = new org.jsoup.helper.HttpConnection.Response(response31);
        java.lang.String str34 = response32.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = response32.cookies();
        org.jsoup.Connection.Response response37 = response32.removeCookie("hi!");
        java.lang.String str38 = response32.statusMessage();
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        boolean boolean49 = byteBuffer44.hasArray();
        response32.byteData = byteBuffer44;
        int int51 = byteBuffer30.compareTo(byteBuffer44);
        java.lang.String str52 = byteBuffer30.toString();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer30.put((byte) 10);
        int int55 = byteBuffer54.limit();
        short short57 = byteBuffer54.getShort((int) 'a');
        boolean boolean58 = byteBuffer54.isDirect();
        int int59 = byteBuffer54.position();
        int int60 = byteBuffer18.compareTo(byteBuffer54);
        boolean boolean61 = byteBuffer54.hasRemaining();
        java.lang.Class<?> wildcardClass62 = byteBuffer54.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]" + "'", str16, "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.0f + "'", float24 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 0 + "'", short28 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(response37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-10) + "'", int51 == (-10));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str52, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertTrue("'" + short57 + "' != '" + (short) 0 + "'", short57 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 25 + "'", int59 == 25);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-53) + "'", int60 == (-53));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test03633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03633");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.CharBuffer charBuffer6 = byteBuffer1.asCharBuffer();
        java.nio.ShortBuffer shortBuffer7 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer1.putChar('a');
        short short11 = byteBuffer9.getShort(43);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 0 + "'", short11 == (short) 0);
    }

    @Test
    public void test03634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03634");
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("\\QLocation\\E", (int) (short) 0);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.CharBuffer charBuffer16 = byteBuffer11.asCharBuffer();
        java.lang.String[] strArray18 = pattern5.split((java.lang.CharSequence) charBuffer16, (-24));
        boolean boolean19 = java.util.regex.Pattern.matches("\\QLocation\\E", (java.lang.CharSequence) charBuffer16);
        java.nio.Buffer buffer21 = charBuffer16.position(19);
        boolean boolean22 = java.util.regex.Pattern.matches("\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer16);
        boolean boolean23 = java.util.regex.Pattern.matches("\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer16);
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "\\QLocation\\E");
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(buffer21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test03635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03635");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        char char12 = byteBuffer11.getChar();
        byte byte14 = byteBuffer11.get(64);
        java.util.regex.Pattern pattern15 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern15;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern15;
        int int18 = pattern15.flags();
        java.lang.String str19 = pattern15.pattern();
        java.util.function.Predicate<java.lang.String> strPredicate20 = pattern15.asPredicate();
        boolean boolean21 = byteBuffer11.equals((java.lang.Object) pattern15);
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocate((int) '\n');
        byte[] byteArray24 = byteBuffer23.array();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer11.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.putFloat(88, (float) 83);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer11.put((byte) 66);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
        org.junit.Assert.assertNotNull(pattern15);
// flaky:         org.junit.Assert.assertEquals(pattern15.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str19, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
    }

    @Test
    public void test03636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03636");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.asReadOnlyBuffer();
        byte byte48 = byteBuffer47.get();
        java.nio.Buffer buffer49 = byteBuffer47.mark();
        java.nio.Buffer buffer50 = byteBuffer47.mark();
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.put(byteArray59);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.put((byte) 10);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer62.putChar(46, 'a');
        java.nio.ByteBuffer byteBuffer66 = byteBuffer65.slice();
        java.nio.ByteOrder byteOrder67 = byteBuffer65.order();
        java.nio.ByteBuffer byteBuffer68 = byteBuffer47.order(byteOrder67);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 0 + "'", byte48 == (byte) 0);
        org.junit.Assert.assertNotNull(buffer49);
        org.junit.Assert.assertNotNull(buffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteOrder67);
        org.junit.Assert.assertNotNull(byteBuffer68);
    }

    @Test
    public void test03637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03637");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = 76;
    }

    @Test
    public void test03638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03638");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Response response10 = response6.removeCookie("Location");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.lang.String str12 = response6.contentType;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response6.cookies();
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.lang.String str16 = response6.header("java.nio.DirectByteBuffer[pos=84 lim=100 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test03639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03639");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        int int10 = response6.statusCode();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.net.HttpURLConnection httpURLConnection13 = null;
        org.jsoup.helper.HttpConnection.Response response14 = null;
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response14);
        java.lang.String str17 = response15.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = response15.cookies();
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response15);
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response15);
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response22.executed = true;
        java.util.Map<java.lang.String, java.lang.String> strMap26 = response22.cookies();
        java.lang.String str27 = response22.charset();
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response22);
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response22);
        org.jsoup.Connection.Response response32 = response29.cookie("java.nio.HeapByteBuffer[pos=0 lim=25 cap=52]", "\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        // The following exception was thrown during execution in test generation
        try {
            response11.setupFromConnection(httpURLConnection13, (org.jsoup.Connection.Response) response29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(response32);
    }

    @Test
    public void test03640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03640");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long15 = byteBuffer14.getLong();
        int int16 = byteBuffer14.position();
        float float18 = byteBuffer14.getFloat((int) (short) 10);
        boolean boolean19 = byteBuffer14.hasArray();
        double double20 = byteBuffer14.getDouble();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer14.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.put((byte) 10);
        java.nio.ByteOrder byteOrder36 = byteBuffer33.order();
        java.nio.ByteBuffer byteBuffer37 = byteBuffer23.order(byteOrder36);
        java.nio.CharBuffer charBuffer38 = byteBuffer37.asCharBuffer();
        short short39 = byteBuffer37.getShort();
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer41.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.putInt(0);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer45.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer45.putChar('a');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer50.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer50.putDouble(0.0d);
        int int54 = byteBuffer37.compareTo(byteBuffer53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.put(18, (byte) -1);
        boolean boolean58 = byteBuffer1.equals((java.lang.Object) byteBuffer57);
        java.nio.Buffer buffer60 = byteBuffer57.position(59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.duplicate();
        java.nio.Buffer buffer62 = byteBuffer61.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteOrder36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(charBuffer38);
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) 0 + "'", short39 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(buffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(buffer62);
    }

    @Test
    public void test03641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03641");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.slice();
        boolean boolean48 = byteBuffer47.hasRemaining();
        java.nio.ByteOrder byteOrder49 = byteBuffer47.order();
        // The following exception was thrown during execution in test generation
        try {
            double double51 = byteBuffer47.getDouble((-67));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteOrder49);
    }

    @Test
    public void test03642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03642");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.duplicate();
        java.nio.FloatBuffer floatBuffer16 = byteBuffer15.asFloatBuffer();
        byte byte17 = byteBuffer15.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
    }

    @Test
    public void test03643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03643");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        java.nio.ByteBuffer byteBuffer9 = response1.byteData;
        org.jsoup.Connection.Method method10 = response1.method();
        java.lang.String str11 = response1.statusMessage;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document12 = response1.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test03644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03644");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        java.nio.ByteBuffer byteBuffer79 = java.nio.ByteBuffer.wrap(byteArray70);
        java.nio.ByteBuffer byteBuffer80 = java.nio.ByteBuffer.wrap(byteArray70);
        java.nio.ByteBuffer byteBuffer81 = java.nio.ByteBuffer.wrap(byteArray70);
        byte[] byteArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer83 = byteBuffer81.get(byteArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
    }

    @Test
    public void test03645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03645");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putDouble(8, (double) 256);
        java.nio.CharBuffer charBuffer15 = byteBuffer11.asCharBuffer();
        java.lang.Object obj16 = null;
        boolean boolean17 = byteBuffer11.equals(obj16);
        java.lang.Class<?> wildcardClass18 = byteBuffer11.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test03646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03646");
        org.jsoup.Connection.Request request0 = null;
        java.nio.ByteBuffer byteBuffer2 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer4 = byteBuffer2.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer6 = byteBuffer2.putInt(0);
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer10 = byteBuffer6.put(byteArray9);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer6.get(byteArray19, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer24 = byteBuffer23.asIntBuffer();
        int int25 = byteBuffer23.position();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer23.putDouble(0, (double) 13376L);
        org.jsoup.helper.HttpConnection.Response response29 = null;
        org.jsoup.helper.HttpConnection.Response response30 = new org.jsoup.helper.HttpConnection.Response(response29);
        response30.contentType = "";
        java.lang.String str33 = response30.contentType;
        java.lang.String str34 = response30.charset;
        java.nio.ByteBuffer byteBuffer35 = response30.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = response30.headers();
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response30);
        boolean boolean39 = response30.hasHeader("\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response40 = new org.jsoup.helper.HttpConnection.Response(response30);
        org.jsoup.helper.HttpConnection.Response response41 = new org.jsoup.helper.HttpConnection.Response(response30);
        boolean boolean42 = byteBuffer28.equals((java.lang.Object) response30);
        java.lang.String str43 = response30.contentType;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response44 = org.jsoup.helper.HttpConnection.Response.execute(request0, response30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(intBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 14 + "'", int25 == 14);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(byteBuffer35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test03647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03647");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(19);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test03648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03648");
        java.lang.String str1 = java.util.regex.Pattern.quote("java.nio.DirectByteBuffer[pos=16 lim=32 cap=100]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\\Qjava.nio.DirectByteBuffer[pos=16 lim=32 cap=100]\\E" + "'", str1, "\\Qjava.nio.DirectByteBuffer[pos=16 lim=32 cap=100]\\E");
    }

    @Test
    public void test03649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03649");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = socketFactory0.createSocket(inetAddress9, 90, inetAddress11, 50);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03650");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        float float11 = byteBuffer10.getFloat();
        java.nio.DoubleBuffer doubleBuffer12 = byteBuffer10.asDoubleBuffer();
        boolean boolean13 = byteBuffer10.hasArray();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer10.put((byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = byteBuffer10.getLong((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(doubleBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test03651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03651");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.net.URL uRL11 = response7.url();
        int int12 = response7.statusCode;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.nio.ByteBuffer byteBuffer14 = response13.byteData;
        response13.charset = "java.nio.DirectByteBuffer[pos=26 lim=100 cap=100]";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document17 = response13.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(uRL11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(byteBuffer14);
    }

    @Test
    public void test03652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03652");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response9 = response1.header("Location", "");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteOrder byteOrder21 = byteBuffer20.order();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.duplicate();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer22.putDouble(8, (double) 256);
        java.nio.CharBuffer charBuffer26 = byteBuffer22.asCharBuffer();
        boolean boolean27 = byteBuffer22.isReadOnly();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer22.compact();
        response1.byteData = byteBuffer28;
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.putInt(0);
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.put(byteArray38);
        java.nio.FloatBuffer floatBuffer40 = byteBuffer35.asFloatBuffer();
        boolean boolean41 = byteBuffer35.isDirect();
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.putInt(0);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.put(byteArray50);
        org.jsoup.helper.HttpConnection.Response response52 = null;
        org.jsoup.helper.HttpConnection.Response response53 = new org.jsoup.helper.HttpConnection.Response(response52);
        response53.contentType = "";
        boolean boolean56 = byteBuffer51.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer62.putInt((int) '#');
        int int65 = byteBuffer51.compareTo(byteBuffer62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer35.put(byteBuffer62);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer35.duplicate();
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer73.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer73.putChar('a');
        java.nio.ByteBuffer byteBuffer79 = byteBuffer78.asReadOnlyBuffer();
        int int80 = byteBuffer35.compareTo(byteBuffer78);
        short short82 = byteBuffer78.getShort(16);
        double double84 = byteBuffer78.getDouble(14);
        java.nio.FloatBuffer floatBuffer85 = byteBuffer78.asFloatBuffer();
        int int86 = byteBuffer78.remaining();
        java.nio.ByteBuffer byteBuffer88 = byteBuffer78.putFloat((float) (-24));
        response1.byteData = byteBuffer78;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteOrder21);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(floatBuffer40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-84) + "'", int80 == (-84));
        org.junit.Assert.assertTrue("'" + short82 + "' != '" + (short) 0 + "'", short82 == (short) 0);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(floatBuffer85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 86 + "'", int86 == 86);
        org.junit.Assert.assertNotNull(byteBuffer88);
    }

    @Test
    public void test03653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03653");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.numRedirects = (short) 0;
        java.lang.String str14 = response1.statusMessage;
        java.lang.String str15 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long21 = byteBuffer20.getLong();
        int int22 = byteBuffer20.position();
        float float24 = byteBuffer20.getFloat((int) (short) 10);
        boolean boolean25 = byteBuffer20.hasArray();
        double double26 = byteBuffer20.getDouble();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer20.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.putInt(0);
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.put(byteArray38);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.put((byte) 10);
        java.nio.ByteOrder byteOrder42 = byteBuffer39.order();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer29.order(byteOrder42);
        java.nio.CharBuffer charBuffer44 = byteBuffer43.asCharBuffer();
        short short45 = byteBuffer43.getShort();
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer51.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer51.putChar('a');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer56.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer56.putDouble(0.0d);
        int int60 = byteBuffer43.compareTo(byteBuffer59);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(18, (byte) -1);
        response18.byteData = byteBuffer59;
        java.nio.IntBuffer intBuffer65 = byteBuffer59.asIntBuffer();
        boolean boolean66 = byteBuffer59.isReadOnly();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.0f + "'", float24 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteOrder42);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(charBuffer44);
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 0 + "'", short45 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(intBuffer65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test03654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03654");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        response5.executed = false;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document8 = response5.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test03655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03655");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        float float11 = byteBuffer1.getFloat(1);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer1.putDouble((double) 2);
        byte byte14 = byteBuffer1.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
    }

    @Test
    public void test03656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03656");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer7.putFloat(88, 100.0f);
        java.nio.Buffer buffer13 = byteBuffer12.clear();
        java.nio.Buffer buffer14 = buffer13.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertNotNull(buffer14);
    }

    @Test
    public void test03657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03657");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Response response10 = response6.removeCookie("Location");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.lang.String str12 = response6.contentType;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response6.cookies();
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Response response16 = response14.removeCookie("java.nio.DirectByteBuffer[pos=10 lim=22 cap=22]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(response16);
    }

    @Test
    public void test03658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03658");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putShort((short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putDouble((double) 52);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.duplicate();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putShort((short) 100);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putInt((int) '#');
        float float27 = byteBuffer25.getFloat(4);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer33.get(byteArray46, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.put(byteArray59);
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer62.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.putInt(0);
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.put(byteArray69);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer56.get(byteArray69, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer50.put(byteArray69);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer25.put(byteArray69);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer17.put(byteArray69);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.put(byteArray69);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer9.putShort((short) (byte) 1);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 7.3E-44f + "'", float27 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
    }

    @Test
    public void test03659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03659");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        org.jsoup.Connection.Method method8 = response5.method();
        org.jsoup.Connection.Response response10 = response5.removeHeader("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str13 = response5.header("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        java.net.HttpURLConnection httpURLConnection14 = null;
        org.jsoup.helper.HttpConnection.Response response15 = null;
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response15);
        response16.contentType = "";
        java.lang.String str19 = response16.contentType;
        java.lang.String str20 = response16.charset;
        java.nio.ByteBuffer byteBuffer21 = response16.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = response16.headers();
        org.jsoup.Connection.Response response24 = response16.removeHeader("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.lang.String str26 = response16.cookie("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = response16.headers();
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response16);
        java.lang.String str29 = response16.charset();
        // The following exception was thrown during execution in test generation
        try {
            response5.setupFromConnection(httpURLConnection14, (org.jsoup.Connection.Response) response16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(byteBuffer21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(response24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test03660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03660");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putInt(0);
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.put(byteArray12);
        java.nio.FloatBuffer floatBuffer14 = byteBuffer9.asFloatBuffer();
        java.nio.CharBuffer charBuffer15 = byteBuffer9.asCharBuffer();
        boolean boolean16 = java.util.regex.Pattern.matches("", (java.lang.CharSequence) charBuffer15);
        java.lang.String[] strArray17 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer15);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long20 = byteBuffer19.getLong();
        int int21 = byteBuffer19.position();
        float float23 = byteBuffer19.getFloat((int) (short) 10);
        boolean boolean24 = byteBuffer19.hasArray();
        double double25 = byteBuffer19.getDouble();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer19.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer38.put((byte) 10);
        java.nio.ByteOrder byteOrder41 = byteBuffer38.order();
        java.nio.ByteBuffer byteBuffer42 = byteBuffer28.order(byteOrder41);
        java.nio.CharBuffer charBuffer43 = byteBuffer42.asCharBuffer();
        java.lang.String[] strArray44 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer43);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteOrder41);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(charBuffer43);
// flaky:         org.junit.Assert.assertNotNull(strArray44);
    }

    @Test
    public void test03661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03661");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(128);
        java.nio.Buffer buffer3 = byteBuffer1.position((int) (byte) 100);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(buffer3);
    }

    @Test
    public void test03662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03662");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long48 = byteBuffer47.getLong();
        int int49 = byteBuffer47.position();
        float float51 = byteBuffer47.getFloat((int) (short) 10);
        boolean boolean52 = byteBuffer47.hasArray();
        double double53 = byteBuffer47.getDouble();
        short short55 = byteBuffer47.getShort(0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer47.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response58 = null;
        org.jsoup.helper.HttpConnection.Response response59 = new org.jsoup.helper.HttpConnection.Response(response58);
        java.lang.String str61 = response59.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = response59.cookies();
        org.jsoup.Connection.Response response64 = response59.removeCookie("hi!");
        java.lang.String str65 = response59.statusMessage();
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.putInt(0);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.put(byteArray74);
        boolean boolean76 = byteBuffer71.hasArray();
        response59.byteData = byteBuffer71;
        int int78 = byteBuffer57.compareTo(byteBuffer71);
        java.lang.String str79 = byteBuffer57.toString();
        long long80 = byteBuffer57.getLong();
        java.nio.DoubleBuffer doubleBuffer81 = byteBuffer57.asDoubleBuffer();
        response37.byteData = byteBuffer57;
        org.jsoup.helper.HttpConnection.Response response83 = new org.jsoup.helper.HttpConnection.Response(response37);
        int int84 = response37.numRedirects;
        org.jsoup.helper.HttpConnection.Response response85 = new org.jsoup.helper.HttpConnection.Response(response37);
        java.net.URL uRL86 = response37.url();
        int int87 = response37.statusCode();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) 0 + "'", short55 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(response64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-10) + "'", int78 == (-10));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str79, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(doubleBuffer81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNull(uRL86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test03663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03663");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putChar(10, '4');
        java.nio.DoubleBuffer doubleBuffer14 = byteBuffer13.asDoubleBuffer();
        int int15 = byteBuffer13.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test03664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03664");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        response1.statusCode = 12;
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long19 = byteBuffer18.getLong();
        int int20 = byteBuffer18.position();
        float float22 = byteBuffer18.getFloat((int) (short) 10);
        boolean boolean23 = byteBuffer18.hasArray();
        double double24 = byteBuffer18.getDouble();
        short short26 = byteBuffer18.getShort(0);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer18.putDouble(100.0d);
        float float29 = byteBuffer18.getFloat();
        char char31 = byteBuffer18.getChar(1);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer41.putDouble(7.565251118924485E-307d);
        int int44 = byteBuffer18.compareTo(byteBuffer43);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.putInt((int) (short) 1, (-24));
        response1.byteData = byteBuffer47;
        java.util.Map<java.lang.String, java.lang.String> strMap49 = response1.cookies();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-6) + "'", int44 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(strMap49);
    }

    @Test
    public void test03665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03665");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.lang.String str9 = byteBuffer8.toString();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteOrder byteOrder20 = byteBuffer19.order();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer8.order(byteOrder20);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer8.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer8.putChar(0, '\u0a00');
        java.nio.Buffer buffer27 = byteBuffer8.position(66);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str9, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(buffer27);
    }

    @Test
    public void test03666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03666");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer5 = byteBuffer4.asShortBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        int int9 = byteBuffer7.position();
        float float11 = byteBuffer7.getFloat((int) (short) 10);
        boolean boolean12 = byteBuffer7.hasArray();
        double double13 = byteBuffer7.getDouble();
        short short15 = byteBuffer7.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putDouble(100.0d);
        byte byte19 = byteBuffer17.get((int) (short) 0);
        java.nio.IntBuffer intBuffer20 = byteBuffer17.asIntBuffer();
        int int21 = byteBuffer4.compareTo(byteBuffer17);
        java.nio.ByteOrder byteOrder22 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer1.put(byteBuffer17);
        short short24 = byteBuffer23.getShort();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-24) + "'", int21 == (-24));
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 0 + "'", short24 == (short) 0);
    }

    @Test
    public void test03667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03667");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long6 = byteBuffer5.getLong();
        int int7 = byteBuffer5.position();
        float float9 = byteBuffer5.getFloat((int) (short) 10);
        boolean boolean10 = byteBuffer5.hasArray();
        double double11 = byteBuffer5.getDouble();
        short short13 = byteBuffer5.getShort(0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer5.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer18.slice();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putChar('\n');
        java.nio.CharBuffer charBuffer22 = byteBuffer19.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream23 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer22);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(strStream23);
    }

    @Test
    public void test03668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03668");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        response1.statusCode = 12;
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        boolean boolean26 = byteBuffer21.hasArray();
        double double27 = byteBuffer21.getDouble();
        java.nio.IntBuffer intBuffer28 = byteBuffer21.asIntBuffer();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer21.putShort(0, (short) (byte) 0);
        java.lang.String str32 = byteBuffer31.toString();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.asReadOnlyBuffer();
        response1.byteData = byteBuffer33;
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.asReadOnlyBuffer();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]" + "'", str32, "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
    }

    @Test
    public void test03669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03669");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        long long19 = byteBuffer14.getLong();
        long long20 = byteBuffer14.getLong();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer14.putShort((short) 10);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer22.putShort(23, (short) (byte) 10);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer25);
    }

    @Test
    public void test03670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03670");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.statusCode = 64;
        boolean boolean14 = response1.executed;
        java.net.URL uRL15 = response1.url();
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request17 = null;
        response16.req = request17;
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response16);
        org.jsoup.Connection.Method method20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response21 = response19.method(method20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(uRL15);
    }

    @Test
    public void test03671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03671");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.put((byte) 10);
        java.nio.ByteOrder byteOrder12 = byteBuffer9.order();
        int int13 = byteBuffer9.remaining();
        byte byte14 = byteBuffer9.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteOrder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 85 + "'", int13 == 85);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
    }

    @Test
    public void test03672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03672");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        java.lang.String str81 = response1.contentType();
        java.lang.String str82 = response1.charset();
        java.lang.String str84 = response1.cookie("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        int int85 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response86 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test03673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03673");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response2.headers();
        java.lang.String str9 = response2.contentType();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response10 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test03674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03674");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder13 = byteBuffer12.order();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer12.putChar('\u4120');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test03675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03675");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putChar('\000');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putShort((short) (byte) 1);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer29.putDouble((double) 5.6E-45f);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
    }

    @Test
    public void test03676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03676");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.Connection.Method method20 = response1.method();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.put((byte) 10);
        java.nio.Buffer buffer34 = byteBuffer30.position((int) ' ');
        java.nio.Buffer buffer35 = byteBuffer30.rewind();
        response1.byteData = byteBuffer30;
        java.nio.ByteBuffer byteBuffer38 = byteBuffer30.putFloat((float) 79);
        java.nio.DoubleBuffer doubleBuffer39 = byteBuffer30.asDoubleBuffer();
        float float40 = byteBuffer30.getFloat();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(buffer34);
        org.junit.Assert.assertNotNull(buffer35);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(doubleBuffer39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 7.3E-44f + "'", float40 == 7.3E-44f);
    }

    @Test
    public void test03677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03677");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response7.cookies();
        boolean boolean10 = response7.hasCookie("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str12 = response11.charset;
        java.net.URL uRL13 = response11.url();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(uRL13);
    }

    @Test
    public void test03678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03678");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str7 = response6.charset();
        boolean boolean9 = response6.hasHeader("java.nio.DirectByteBuffer[pos=20 lim=100 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03679");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        int int12 = byteBuffer11.getInt();
        short short13 = byteBuffer11.getShort();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put((byte) 66);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putLong((int) '\u2000', (long) 58);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 256 + "'", int12 == 256);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test03680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03680");
        java.lang.String str1 = java.util.regex.Pattern.quote("java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\\Qjava.nio.HeapByteBuffer[pos=0 lim=52 cap=52]\\E" + "'", str1, "\\Qjava.nio.HeapByteBuffer[pos=0 lim=52 cap=52]\\E");
    }

    @Test
    public void test03681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03681");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.charset = "\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer5 = response4.byteData;
        java.lang.String str7 = response4.getHeaderCaseInsensitive("java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.junit.Assert.assertNull(byteBuffer5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test03682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03682");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Q\\QLocation\\E\\\\E\\Q\\E", 98);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\QLocation\\E\\\\E\\Q\\E");
    }

    @Test
    public void test03683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03683");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.lang.String str10 = response6.charset();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Method method12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response13 = response6.method(method12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test03684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03684");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer69.put(64, (byte) 100);
        java.nio.ByteBuffer byteBuffer74 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long75 = byteBuffer74.getLong();
        int int76 = byteBuffer74.position();
        float float78 = byteBuffer74.getFloat((int) (short) 10);
        boolean boolean79 = byteBuffer74.hasArray();
        java.nio.ByteBuffer byteBuffer81 = byteBuffer74.putFloat((float) (-24));
        int int82 = byteBuffer72.compareTo(byteBuffer81);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer72.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 8 + "'", int76 == 8);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 0.0f + "'", float78 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
        org.junit.Assert.assertNotNull(byteBuffer83);
    }

    @Test
    public void test03685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03685");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E");
        java.util.stream.Stream<java.lang.String> strStream3 = pattern1.splitAsStream((java.lang.CharSequence) "\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E");
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E");
        org.junit.Assert.assertNotNull(strStream3);
    }

    @Test
    public void test03686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03686");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt((int) (short) 1, (-24));
        java.nio.ByteBuffer byteBuffer33 = byteBuffer30.putFloat(88, (float) 58);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        org.jsoup.helper.HttpConnection.Response response44 = null;
        org.jsoup.helper.HttpConnection.Response response45 = new org.jsoup.helper.HttpConnection.Response(response44);
        response45.contentType = "";
        boolean boolean48 = byteBuffer43.equals((java.lang.Object) "");
        double double50 = byteBuffer43.getDouble(0);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer43.putInt((int) '\000', 23);
        int int54 = byteBuffer33.compareTo(byteBuffer43);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer57 = byteBuffer33.putLong((int) '\u2000', (long) 19);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2.57E-322d + "'", double50 == 2.57E-322d);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 66 + "'", int54 == 66);
    }

    @Test
    public void test03687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03687");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.net.URL uRL11 = response7.url();
        java.lang.String str12 = response7.charset;
        java.nio.ByteBuffer byteBuffer13 = response7.byteData;
        org.jsoup.Connection.Request request14 = null;
        response7.req = request14;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(uRL11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(byteBuffer13);
    }

    @Test
    public void test03688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03688");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer17.putDouble(10.0d);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer17.putChar('\n');
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer31.get(byteArray44, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer31.putDouble(100.0d);
        boolean boolean51 = byteBuffer17.equals((java.lang.Object) byteBuffer31);
        boolean boolean52 = byteBuffer11.equals((java.lang.Object) byteBuffer17);
        char char53 = byteBuffer11.getChar();
        java.nio.ByteBuffer byteBuffer55 = byteBuffer11.putDouble((double) 22);
        java.nio.Buffer buffer56 = byteBuffer55.mark();
        java.lang.String str57 = byteBuffer55.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + '\000' + "'", char53 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(buffer56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]" + "'", str57, "java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]");
    }

    @Test
    public void test03689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03689");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.Buffer buffer20 = byteBuffer14.rewind();
        short short22 = byteBuffer14.getShort(14);
        java.nio.LongBuffer longBuffer23 = byteBuffer14.asLongBuffer();
        java.lang.Class<?> wildcardClass24 = byteBuffer14.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(buffer20);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(longBuffer23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test03690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03690");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        int int5 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        response6.charset = "java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test03691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03691");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.FloatBuffer floatBuffer13 = byteBuffer12.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putInt((int) '#');
        float float23 = byteBuffer21.getFloat(4);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer29.get(byteArray42, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer48.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.putInt(0);
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.put(byteArray55);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer52.get(byteArray65, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer46.put(byteArray65);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer21.put(byteArray65);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer12.get(byteArray65);
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.wrap(byteArray65);
        java.nio.ByteBuffer byteBuffer74 = java.nio.ByteBuffer.wrap(byteArray65);
        java.nio.ByteBuffer byteBuffer75 = java.nio.ByteBuffer.wrap(byteArray65);
        java.nio.ByteBuffer byteBuffer76 = java.nio.ByteBuffer.wrap(byteArray65);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer76.putShort((int) (short) 0, (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            long long80 = byteBuffer76.getLong();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(floatBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 7.3E-44f + "'", float23 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 100]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer79);
    }

    @Test
    public void test03692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03692");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response5.contentType();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        boolean boolean14 = response11.hasHeaderWithValue("\\Qjava.nio.DirectByteBuffer[pos=0 lim=22 cap=100]\\E", "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        int int15 = response11.statusCode;
        response11.executed = false;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03693");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        byte byte4 = byteBuffer1.get((int) '4');
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putInt((int) (short) 0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer6.duplicate();
        long long8 = byteBuffer7.getLong();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.put((byte) 100);
        char char11 = byteBuffer7.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
    }

    @Test
    public void test03694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03694");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer1.putShort((short) (byte) 10);
        int int73 = byteBuffer1.getInt(86);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test03695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03695");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket6 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=0 lim=76 cap=76]", 24);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: java.nio.DirectByteBuffer[pos=0 lim=76 cap=76]");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03696");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E", 27);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
    }

    @Test
    public void test03697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03697");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.statusMessage = "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]";
        int int9 = response1.statusCode();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str11 = response10.charset;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test03698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03698");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.net.URL uRL13 = response10.url();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = response10.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(uRL13);
    }

    @Test
    public void test03699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03699");
        java.util.regex.Pattern pattern4 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern7 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        java.nio.CharBuffer charBuffer18 = byteBuffer13.asCharBuffer();
        java.util.regex.Matcher matcher19 = pattern7.matcher((java.lang.CharSequence) charBuffer18);
        java.util.stream.Stream<java.lang.String> strStream20 = null; // flaky: pattern4.splitAsStream((java.lang.CharSequence) charBuffer18);
        boolean boolean21 = java.util.regex.Pattern.matches("\\Q\\Q\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer18);
        boolean boolean22 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E", (java.lang.CharSequence) "\\Q\\Q\\E\\\\E\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern4);
// flaky:         org.junit.Assert.assertEquals(pattern4.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern7);
        org.junit.Assert.assertEquals(pattern7.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(matcher19);
        org.junit.Assert.assertEquals(matcher19.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03700");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.IntBuffer intBuffer11 = byteBuffer9.asIntBuffer();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putLong((long) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer21.compact();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.put((byte) 10);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer21.putInt(22);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer21.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long31 = byteBuffer30.getLong();
        int int32 = byteBuffer30.position();
        float float34 = byteBuffer30.getFloat((int) (short) 10);
        boolean boolean35 = byteBuffer30.hasArray();
        java.nio.DoubleBuffer doubleBuffer36 = byteBuffer30.asDoubleBuffer();
        java.nio.Buffer buffer37 = byteBuffer30.clear();
        java.nio.ByteOrder byteOrder38 = byteBuffer30.order();
        java.nio.ByteBuffer byteBuffer39 = byteBuffer21.order(byteOrder38);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer13.order(byteOrder38);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer40.putDouble(27, 5.43230922487E-312d);
        java.nio.Buffer buffer45 = byteBuffer40.position(16);
        double double46 = byteBuffer40.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleBuffer36);
        org.junit.Assert.assertNotNull(buffer37);
        org.junit.Assert.assertNotNull(byteOrder38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(buffer45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.2379086E-317d + "'", double46 == 3.2379086E-317d);
    }

    @Test
    public void test03701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03701");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer12.duplicate();
        java.nio.ShortBuffer shortBuffer14 = byteBuffer13.asShortBuffer();
        boolean boolean15 = byteBuffer13.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(shortBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03702");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (int) (byte) 100);
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern8 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern11 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern12 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern12;
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer16 = byteBuffer15.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream17 = null; // flaky: pattern12.splitAsStream((java.lang.CharSequence) charBuffer16);
        java.util.regex.Matcher matcher18 = pattern11.matcher((java.lang.CharSequence) charBuffer16);
        java.util.regex.Matcher matcher19 = null; // flaky: pattern8.matcher((java.lang.CharSequence) charBuffer16);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer22 = byteBuffer21.asCharBuffer();
        java.util.regex.Matcher matcher23 = null; // flaky: pattern8.matcher((java.lang.CharSequence) charBuffer22);
        java.lang.String[] strArray25 = pattern5.split((java.lang.CharSequence) charBuffer22, 8);
        java.util.regex.Pattern pattern28 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern29 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern29;
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer33 = byteBuffer32.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream34 = null; // flaky: pattern29.splitAsStream((java.lang.CharSequence) charBuffer33);
        java.util.regex.Matcher matcher35 = pattern28.matcher((java.lang.CharSequence) charBuffer33);
        java.lang.String[] strArray37 = pattern5.split((java.lang.CharSequence) charBuffer33, (-6));
        java.util.regex.Pattern pattern40 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern40;
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.putInt(0);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.put(byteArray50);
        java.nio.FloatBuffer floatBuffer52 = byteBuffer47.asFloatBuffer();
        java.nio.CharBuffer charBuffer53 = byteBuffer47.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream54 = null; // flaky: pattern40.splitAsStream((java.lang.CharSequence) charBuffer53);
        java.lang.String[] strArray55 = pattern5.split((java.lang.CharSequence) charBuffer53);
        java.lang.String[] strArray57 = pattern2.split((java.lang.CharSequence) charBuffer53, 22);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer59 = charBuffer53.position(3407872);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newPosition > limit: (3407872 > 43)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern8);
// flaky:         org.junit.Assert.assertEquals(pattern8.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern11);
        org.junit.Assert.assertEquals(pattern11.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern12);
// flaky:         org.junit.Assert.assertEquals(pattern12.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(charBuffer16);
// flaky:         org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertNotNull(matcher18);
        org.junit.Assert.assertEquals(matcher18.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher19);
// flaky:         org.junit.Assert.assertEquals(matcher19.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
// flaky:         org.junit.Assert.assertNotNull(matcher23);
// flaky:         org.junit.Assert.assertEquals(matcher23.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(pattern28);
        org.junit.Assert.assertEquals(pattern28.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern29);
// flaky:         org.junit.Assert.assertEquals(pattern29.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(charBuffer33);
// flaky:         org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertNotNull(matcher35);
        org.junit.Assert.assertEquals(matcher35.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray37);
// flaky:         org.junit.Assert.assertNotNull(pattern40);
// flaky:         org.junit.Assert.assertEquals(pattern40.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(floatBuffer52);
        org.junit.Assert.assertNotNull(charBuffer53);
// flaky:         org.junit.Assert.assertNotNull(strStream54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test03703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03703");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str8 = response5.statusMessage();
        org.jsoup.Connection.Response response11 = response5.cookie("java.nio.DirectByteBuffer[pos=12 lim=32 cap=100]", "\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(response11);
    }

    @Test
    public void test03704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03704");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.Connection.Response response7 = response2.removeCookie("hi!");
        java.lang.String str8 = response2.statusMessage();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        boolean boolean19 = byteBuffer14.hasArray();
        response2.byteData = byteBuffer14;
        java.net.URL uRL21 = response2.url();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response22 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(uRL21);
    }

    @Test
    public void test03705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03705");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        response1.statusCode = 12;
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long20 = byteBuffer19.getLong();
        int int21 = byteBuffer19.position();
        float float23 = byteBuffer19.getFloat((int) (short) 10);
        boolean boolean24 = byteBuffer19.hasArray();
        double double25 = byteBuffer19.getDouble();
        short short27 = byteBuffer19.getShort(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer19.putDouble(100.0d);
        float float30 = byteBuffer19.getFloat();
        char char32 = byteBuffer19.getChar(1);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putDouble(7.565251118924485E-307d);
        int int45 = byteBuffer19.compareTo(byteBuffer44);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer19.putShort((short) (byte) -1);
        boolean boolean48 = byteBuffer19.isReadOnly();
        short short49 = byteBuffer19.getShort();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer19.putLong((long) 98);
        response17.byteData = byteBuffer51;
        java.lang.String str54 = response17.cookie("\\Qjava.nio.DirectByteBuffer[pos=84 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 0.0f + "'", float30 == 0.0f);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '\000' + "'", char32 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-6) + "'", int45 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) 0 + "'", short49 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test03706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03706");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        java.lang.String str9 = response7.header("Location");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        int int12 = response7.statusCode;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.put(byteArray21);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer18.get(byteArray31, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer41.get(byteArray54, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer35.put(byteArray54);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer35.putShort((short) (byte) 100);
        java.nio.ShortBuffer shortBuffer62 = byteBuffer61.asShortBuffer();
        response7.byteData = byteBuffer61;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer64 = byteBuffer61.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(shortBuffer62);
    }

    @Test
    public void test03707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03707");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry6 = response1.scanHeaders("\\QLocation\\E");
        boolean boolean8 = response1.hasHeader("\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test03708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03708");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.util.function.Predicate<java.lang.String> strPredicate3 = null; // flaky: pattern0.asPredicate();
        int int4 = 0; // flaky: pattern0.flags();
// flaky:         org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-24) + "'", int4 == (-24));
    }

    @Test
    public void test03709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03709");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer1.asReadOnlyBuffer();
        char char72 = byteBuffer1.getChar((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer1.slice();
        char char74 = byteBuffer73.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertTrue("'" + char72 + "' != '" + '\000' + "'", char72 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertTrue("'" + char74 + "' != '" + '\000' + "'", char74 == '\000');
    }

    @Test
    public void test03710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03710");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer16.get(byteArray29, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer39.get(byteArray52, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer33.put(byteArray52);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer5.put(byteArray52);
        char char60 = byteBuffer58.getChar(23);
        java.nio.Buffer buffer62 = byteBuffer58.position((int) '4');
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.allocate((int) '\n');
        java.nio.ByteBuffer byteBuffer66 = byteBuffer64.putLong(10L);
        int int67 = byteBuffer66.position();
        int int68 = byteBuffer58.compareTo(byteBuffer66);
        java.nio.ByteOrder byteOrder69 = null;
        java.nio.ByteBuffer byteBuffer70 = byteBuffer58.order(byteOrder69);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + char60 + "' != '" + '\000' + "'", char60 == '\000');
        org.junit.Assert.assertNotNull(buffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 46 + "'", int68 == 46);
        org.junit.Assert.assertNotNull(byteBuffer70);
    }

    @Test
    public void test03711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03711");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.Buffer buffer36 = byteBuffer14.limit((int) (byte) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer14.putLong(4, (long) (short) 10);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.put((byte) 1);
        java.nio.LongBuffer longBuffer42 = byteBuffer41.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(buffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(longBuffer42);
    }

    @Test
    public void test03712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03712");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.IntBuffer intBuffer7 = byteBuffer5.asIntBuffer();
        int int8 = byteBuffer5.capacity();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer14.putChar('a');
        double double21 = byteBuffer19.getDouble(12);
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.put(byteArray30);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer27.get(byteArray40, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer19.put(byteArray40);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer5.get(byteArray40);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.wrap(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.wrap(byteArray40, (int) (byte) 64, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 7.565251118924485E-307d + "'", double21 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
    }

    @Test
    public void test03713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03713");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer22.putShort((short) (byte) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer48.compact();
        java.nio.Buffer buffer50 = byteBuffer48.clear();
        org.jsoup.helper.HttpConnection.Response response51 = null;
        org.jsoup.helper.HttpConnection.Response response52 = new org.jsoup.helper.HttpConnection.Response(response51);
        java.lang.String str54 = response52.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response55 = new org.jsoup.helper.HttpConnection.Response(response52);
        org.jsoup.helper.HttpConnection.Response response56 = new org.jsoup.helper.HttpConnection.Response(response52);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        short short62 = byteBuffer58.getShort(0);
        int int63 = byteBuffer58.position();
        response52.byteData = byteBuffer58;
        java.nio.ByteBuffer byteBuffer65 = byteBuffer48.put(byteBuffer58);
        double double67 = byteBuffer65.getDouble(74);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(buffer50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) 0 + "'", short62 == (short) 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 8 + "'", int63 == 8);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test03714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03714");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        response1.statusCode = 12;
        java.lang.String str16 = response1.charset;
        int int17 = response1.statusCode();
        java.lang.Class<?> wildcardClass18 = response1.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str16, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test03715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03715");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.put((byte) 10);
        java.nio.Buffer buffer13 = byteBuffer9.position((int) ' ');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer9.compact();
        java.nio.Buffer buffer15 = byteBuffer14.flip();
        java.nio.Buffer buffer17 = buffer15.limit(82);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(buffer17);
    }

    @Test
    public void test03716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03716");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean8 = response6.hasHeader("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        response6.statusCode = 0;
        java.lang.String str12 = response6.charset();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test03717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03717");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar('\n');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer8.putFloat((float) 128);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putChar((int) (byte) 1, '4');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        int int19 = byteBuffer17.getInt((int) (short) 1);
        double double21 = byteBuffer17.getDouble((int) (byte) 10);
        boolean boolean22 = byteBuffer17.isDirect();
        java.nio.IntBuffer intBuffer23 = byteBuffer17.asIntBuffer();
        int int24 = byteBuffer10.compareTo(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-6) + "'", int24 == (-6));
    }

    @Test
    public void test03718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03718");
        java.lang.String str1 = java.util.regex.Pattern.quote("java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\\Qjava.nio.DirectByteBuffer[pos=15 lim=100 cap=100]\\E" + "'", str1, "\\Qjava.nio.DirectByteBuffer[pos=15 lim=100 cap=100]\\E");
    }

    @Test
    public void test03719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03719");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.Connection.Method method7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response8 = response4.method(method7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test03720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03720");
        java.util.regex.Pattern pattern3 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate4 = pattern3.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate5 = pattern3.asPredicate();
        java.util.regex.Pattern pattern8 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate9 = pattern8.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate10 = pattern8.asPredicate();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        java.nio.Buffer buffer18 = byteBuffer12.limit(32);
        java.nio.CharBuffer charBuffer19 = byteBuffer12.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream20 = pattern8.splitAsStream((java.lang.CharSequence) charBuffer19);
        java.util.stream.Stream<java.lang.String> strStream21 = pattern3.splitAsStream((java.lang.CharSequence) charBuffer19);
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.put(byteArray30);
        java.nio.FloatBuffer floatBuffer32 = byteBuffer27.asFloatBuffer();
        java.nio.CharBuffer charBuffer33 = byteBuffer27.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream34 = pattern3.splitAsStream((java.lang.CharSequence) charBuffer33);
        boolean boolean35 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E", (java.lang.CharSequence) charBuffer33);
        org.junit.Assert.assertNotNull(pattern3);
        org.junit.Assert.assertEquals(pattern3.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(strPredicate5);
        org.junit.Assert.assertNotNull(pattern8);
        org.junit.Assert.assertEquals(pattern8.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(floatBuffer32);
        org.junit.Assert.assertNotNull(charBuffer33);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test03721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03721");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer1.putShort((short) (byte) -1);
        boolean boolean30 = byteBuffer1.hasRemaining();
        char char31 = byteBuffer1.getChar();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer1.putFloat((float) '\000');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer33.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer34);
    }

    @Test
    public void test03722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03722");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        double double12 = byteBuffer11.getDouble();
        int int14 = byteBuffer11.getInt(84);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer11.putInt(0);
        java.lang.String str17 = byteBuffer16.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.43230922487E-312d + "'", double12 == 5.43230922487E-312d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.nio.DirectByteBuffer[pos=20 lim=100 cap=100]" + "'", str17, "java.nio.DirectByteBuffer[pos=20 lim=100 cap=100]");
    }

    @Test
    public void test03723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03723");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response7 = response2.header("hi!", "");
        org.jsoup.Connection.Request request8 = null;
        response2.req = request8;
        response2.charset = "\\Q\\E";
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response2);
        boolean boolean14 = response2.hasHeader("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        response2.numRedirects = (-67);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response17 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test03724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03724");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        org.jsoup.Connection.Response response47 = response37.removeHeader("Location");
        org.jsoup.helper.HttpConnection.Response response48 = new org.jsoup.helper.HttpConnection.Response(response37);
        java.lang.String str49 = response48.statusMessage;
        response48.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E";
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(response47);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test03725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03725");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.duplicate();
        java.nio.Buffer buffer8 = byteBuffer6.position(85);
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        short short14 = byteBuffer10.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer10.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.put((byte) 10);
        java.nio.ByteOrder byteOrder30 = byteBuffer27.order();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer17.order(byteOrder30);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer6.order(byteOrder30);
        java.util.regex.Pattern pattern34 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        boolean boolean35 = byteBuffer32.equals((java.lang.Object) "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        int int36 = byteBuffer32.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(buffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 0 + "'", short14 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteOrder30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(pattern34);
        org.junit.Assert.assertEquals(pattern34.toString(), "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
    }

    @Test
    public void test03726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03726");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        byte byte4 = byteBuffer1.get((int) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer6 = byteBuffer5.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
    }

    @Test
    public void test03727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03727");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = response5.req;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(request7);
    }

    @Test
    public void test03728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03728");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket6 = socketFactory0.createSocket(inetAddress4, 320);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03729");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        double double12 = byteBuffer11.getDouble();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.slice();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer13.slice();
        int int15 = byteBuffer13.remaining();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer13.compact();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putDouble((double) (-72));
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.43230922487E-312d + "'", double12 == 5.43230922487E-312d);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 84 + "'", int15 == 84);
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test03730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03730");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        response23.charset = "Location";
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response23);
        int int29 = response23.statusCode;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document30 = response23.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test03731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03731");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        boolean boolean2 = byteBuffer1.isDirect();
        short short4 = byteBuffer1.getShort(0);
        double double5 = byteBuffer1.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 0 + "'", short4 == (short) 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test03732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03732");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.nio.ByteBuffer byteBuffer7 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response1.headers();
        org.jsoup.Connection.Response response11 = response1.cookie("hi!", "\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(byteBuffer7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(response11);
    }

    @Test
    public void test03733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03733");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putInt((int) '#');
        int int23 = byteBuffer9.compareTo(byteBuffer20);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer20.putInt((int) (byte) 1);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer20.putLong(19, 52L);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = byteBuffer28.getInt((int) '\u0a00');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
    }

    @Test
    public void test03734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03734");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer10.putInt((-24));
        java.nio.ByteBuffer byteBuffer17 = byteBuffer10.putInt(1117126656);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer10.duplicate();
        byte byte20 = byteBuffer18.get(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 0 + "'", byte20 == (byte) 0);
    }

    @Test
    public void test03735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03735");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        int int9 = response1.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry11 = response1.scanHeaders("java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
        boolean boolean13 = response1.hasCookie("java.nio.DirectByteBuffer[pos=20 lim=100 cap=100]");
        org.jsoup.Connection.Response response16 = response1.header("java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]", "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.net.HttpURLConnection httpURLConnection18 = null;
        org.jsoup.helper.HttpConnection.Response response19 = null;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response19);
        response20.contentType = "";
        java.lang.String str24 = response20.cookie("hi!");
        int int25 = response20.statusCode();
        response20.contentType = "";
        java.lang.String str28 = response20.contentType;
        response20.executed = true;
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response20);
        // The following exception was thrown during execution in test generation
        try {
            response1.setupFromConnection(httpURLConnection18, (org.jsoup.Connection.Response) response20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(strEntry11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test03736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03736");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        boolean boolean47 = byteBuffer14.isDirect();
        int int48 = byteBuffer14.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
    }

    @Test
    public void test03737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03737");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        boolean boolean6 = response5.executed;
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response7);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response9 = org.jsoup.helper.HttpConnection.Response.execute(request0, response8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test03738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03738");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer4.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer8 = byteBuffer4.putInt(0);
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.put(byteArray11);
        java.nio.FloatBuffer floatBuffer13 = byteBuffer8.asFloatBuffer();
        java.nio.CharBuffer charBuffer14 = byteBuffer8.asCharBuffer();
        java.lang.String[] strArray16 = pattern2.split((java.lang.CharSequence) charBuffer14, (-10));
        java.util.regex.Pattern pattern19 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern22 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern23 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern23;
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer27 = byteBuffer26.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream28 = null; // flaky: pattern23.splitAsStream((java.lang.CharSequence) charBuffer27);
        java.util.regex.Matcher matcher29 = pattern22.matcher((java.lang.CharSequence) charBuffer27);
        java.util.regex.Matcher matcher30 = null; // flaky: pattern19.matcher((java.lang.CharSequence) charBuffer27);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer33 = byteBuffer32.asCharBuffer();
        java.util.regex.Matcher matcher34 = null; // flaky: pattern19.matcher((java.lang.CharSequence) charBuffer33);
        java.util.stream.Stream<java.lang.String> strStream35 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer33);
        java.nio.Buffer buffer36 = charBuffer33.flip();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(floatBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(strArray16);
// flaky:         org.junit.Assert.assertNotNull(pattern19);
// flaky:         org.junit.Assert.assertEquals(pattern19.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern22);
        org.junit.Assert.assertEquals(pattern22.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern23);
// flaky:         org.junit.Assert.assertEquals(pattern23.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
// flaky:         org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(matcher29);
        org.junit.Assert.assertEquals(matcher29.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher30);
// flaky:         org.junit.Assert.assertEquals(matcher30.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(charBuffer33);
// flaky:         org.junit.Assert.assertNotNull(matcher34);
// flaky:         org.junit.Assert.assertEquals(matcher34.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertNotNull(buffer36);
    }

    @Test
    public void test03739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03739");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        long long34 = byteBuffer11.getLong();
        java.nio.FloatBuffer floatBuffer35 = byteBuffer11.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer38 = byteBuffer11.putChar((int) '\000', '\n');
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.compact();
        java.nio.ByteBuffer byteBuffer49 = byteBuffer46.put((byte) 10);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer46.putInt(22);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer46.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long56 = byteBuffer55.getLong();
        int int57 = byteBuffer55.position();
        float float59 = byteBuffer55.getFloat((int) (short) 10);
        boolean boolean60 = byteBuffer55.hasArray();
        java.nio.DoubleBuffer doubleBuffer61 = byteBuffer55.asDoubleBuffer();
        java.nio.Buffer buffer62 = byteBuffer55.clear();
        java.nio.ByteOrder byteOrder63 = byteBuffer55.order();
        java.nio.ByteBuffer byteBuffer64 = byteBuffer46.order(byteOrder63);
        java.nio.DoubleBuffer doubleBuffer65 = byteBuffer64.asDoubleBuffer();
        boolean boolean66 = byteBuffer38.equals((java.lang.Object) byteBuffer64);
        org.jsoup.helper.HttpConnection.Response response67 = null;
        org.jsoup.helper.HttpConnection.Response response68 = new org.jsoup.helper.HttpConnection.Response(response67);
        response68.contentType = "";
        java.lang.String str71 = response68.contentType;
        response68.executed = true;
        response68.executed = false;
        org.jsoup.helper.HttpConnection.Response response76 = new org.jsoup.helper.HttpConnection.Response(response68);
        response68.numRedirects = 83;
        java.net.URL uRL79 = response68.url();
        org.jsoup.Connection.Response response82 = response68.cookie("\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E", "\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E");
        boolean boolean83 = byteBuffer64.equals((java.lang.Object) response68);
        org.jsoup.Connection.Method method84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response85 = response68.method(method84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 0.0f + "'", float59 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleBuffer61);
        org.junit.Assert.assertNotNull(buffer62);
        org.junit.Assert.assertNotNull(byteOrder63);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(doubleBuffer65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNull(uRL79);
        org.junit.Assert.assertNotNull(response82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test03740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03740");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        long long47 = byteBuffer22.getLong();
        java.nio.ByteBuffer byteBuffer48 = byteBuffer22.compact();
        java.nio.CharBuffer charBuffer49 = byteBuffer48.asCharBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(charBuffer49);
    }

    @Test
    public void test03741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03741");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long48 = byteBuffer47.getLong();
        int int49 = byteBuffer47.position();
        float float51 = byteBuffer47.getFloat((int) (short) 10);
        boolean boolean52 = byteBuffer47.hasArray();
        double double53 = byteBuffer47.getDouble();
        short short55 = byteBuffer47.getShort(0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer47.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response58 = null;
        org.jsoup.helper.HttpConnection.Response response59 = new org.jsoup.helper.HttpConnection.Response(response58);
        java.lang.String str61 = response59.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = response59.cookies();
        org.jsoup.Connection.Response response64 = response59.removeCookie("hi!");
        java.lang.String str65 = response59.statusMessage();
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.putInt(0);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.put(byteArray74);
        boolean boolean76 = byteBuffer71.hasArray();
        response59.byteData = byteBuffer71;
        int int78 = byteBuffer57.compareTo(byteBuffer71);
        java.lang.String str79 = byteBuffer57.toString();
        long long80 = byteBuffer57.getLong();
        java.nio.DoubleBuffer doubleBuffer81 = byteBuffer57.asDoubleBuffer();
        response37.byteData = byteBuffer57;
        byte byte83 = byteBuffer57.get();
        long long84 = byteBuffer57.getLong();
        java.nio.Buffer buffer85 = byteBuffer57.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer88 = byteBuffer57.putInt((int) 'a', 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) 0 + "'", short55 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(response64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-10) + "'", int78 == (-10));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str79, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(doubleBuffer81);
        org.junit.Assert.assertTrue("'" + byte83 + "' != '" + (byte) 0 + "'", byte83 == (byte) 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(buffer85);
    }

    @Test
    public void test03742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03742");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocateDirect((int) '4');
        java.nio.LongBuffer longBuffer9 = byteBuffer8.asLongBuffer();
        java.nio.DoubleBuffer doubleBuffer10 = byteBuffer8.asDoubleBuffer();
        response1.byteData = byteBuffer8;
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.Class<?> wildcardClass13 = response12.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertNotNull(doubleBuffer10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test03743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03743");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", 22);
        java.util.regex.Pattern pattern5 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern5;
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer8.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.putInt(0);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.put(byteArray15);
        java.nio.FloatBuffer floatBuffer17 = byteBuffer12.asFloatBuffer();
        java.nio.CharBuffer charBuffer18 = byteBuffer12.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream19 = null; // flaky: pattern5.splitAsStream((java.lang.CharSequence) charBuffer18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.FloatBuffer floatBuffer30 = byteBuffer25.asFloatBuffer();
        java.nio.CharBuffer charBuffer31 = byteBuffer25.asCharBuffer();
        java.lang.String[] strArray33 = null; // flaky: pattern5.split((java.lang.CharSequence) charBuffer31, (-65536));
        java.nio.Buffer buffer34 = charBuffer31.mark();
        java.nio.Buffer buffer35 = charBuffer31.clear();
        java.util.regex.Matcher matcher36 = pattern2.matcher((java.lang.CharSequence) charBuffer31);
        java.util.function.Predicate<java.lang.String> strPredicate37 = pattern2.asPredicate();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(pattern5);
// flaky:         org.junit.Assert.assertEquals(pattern5.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(floatBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
// flaky:         org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(floatBuffer30);
        org.junit.Assert.assertNotNull(charBuffer31);
// flaky:         org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(buffer34);
        org.junit.Assert.assertNotNull(buffer35);
        org.junit.Assert.assertNotNull(matcher36);
        org.junit.Assert.assertEquals(matcher36.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strPredicate37);
    }

    @Test
    public void test03744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03744");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        java.nio.Buffer buffer25 = byteBuffer22.flip();
        short short26 = byteBuffer22.getShort();
        java.nio.ShortBuffer shortBuffer27 = byteBuffer22.asShortBuffer();
        int int28 = byteBuffer22.capacity();
        java.nio.DoubleBuffer doubleBuffer29 = byteBuffer22.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(doubleBuffer29);
    }

    @Test
    public void test03745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03745");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putInt((int) '#');
        int int23 = byteBuffer9.compareTo(byteBuffer20);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer9.putShort((short) (byte) -1);
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.put((byte) 10);
        java.nio.ByteOrder byteOrder38 = byteBuffer35.order();
        java.nio.ByteBuffer byteBuffer39 = byteBuffer9.order(byteOrder38);
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long42 = byteBuffer41.getLong();
        int int43 = byteBuffer41.position();
        float float45 = byteBuffer41.getFloat((int) (short) 10);
        boolean boolean46 = byteBuffer41.hasArray();
        double double47 = byteBuffer41.getDouble();
        short short49 = byteBuffer41.getShort(0);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer41.putDouble(100.0d);
        double double53 = byteBuffer41.getDouble(20);
        int int54 = byteBuffer9.compareTo(byteBuffer41);
        java.nio.Buffer buffer55 = byteBuffer9.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteOrder38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 0.0f + "'", float45 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) 0 + "'", short49 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(buffer55);
    }

    @Test
    public void test03746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03746");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        byte byte4 = byteBuffer1.get((int) '4');
        int int5 = byteBuffer1.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 92 + "'", int5 == 92);
    }

    @Test
    public void test03747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03747");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Request request7 = response1.req;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str9 = response8.contentType;
        java.lang.String str11 = response8.cookie("\\Q\\Q\\E\\\\E\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response8);
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response14 = response8.url(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(request7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test03748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03748");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer25 = byteBuffer24.mark();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putDouble((double) 256);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(byteBuffer26);
    }

    @Test
    public void test03749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03749");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str13 = response9.header("\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str15 = response9.statusMessage();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test03750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03750");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer1.asReadOnlyBuffer();
        char char72 = byteBuffer1.getChar((int) (byte) 0);
        char char73 = byteBuffer1.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertTrue("'" + char72 + "' != '" + '\000' + "'", char72 == '\000');
        org.junit.Assert.assertTrue("'" + char73 + "' != '" + '\000' + "'", char73 == '\000');
    }

    @Test
    public void test03751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03751");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        response23.charset = "Location";
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response23);
        int int29 = response23.statusCode;
        java.lang.String str30 = response23.statusMessage;
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response23);
        response23.statusCode = 58;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test03752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03752");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.Connection.Response response7 = response5.removeHeader("\\Qhi!\\E");
        boolean boolean9 = response5.hasCookie("\\Q\\E");
        java.lang.String str11 = response5.cookie("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        response5.charset = "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E";
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test03753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03753");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.statusMessage = "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]";
        int int9 = response1.statusCode();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test03754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03754");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str14 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response16);
        int int18 = response16.statusCode;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test03755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03755");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.Connection.Request request6 = null;
        response1.req = request6;
        java.lang.String str8 = response1.contentType();
        response1.charset = "Location";
        response1.statusMessage = "\\Q\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E\\\\E\\Q\\E";
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int14 = response13.statusCode();
        org.jsoup.Connection.Response response17 = response13.header("\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E", "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(response17);
    }

    @Test
    public void test03756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03756");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry6 = response1.scanHeaders("\\QLocation\\E");
        response1.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        boolean boolean21 = byteBuffer16.hasArray();
        double double22 = byteBuffer16.getDouble();
        java.nio.IntBuffer intBuffer23 = byteBuffer16.asIntBuffer();
        java.nio.IntBuffer intBuffer24 = byteBuffer16.asIntBuffer();
        short short25 = byteBuffer16.getShort();
        response10.byteData = byteBuffer16;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry6);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertNotNull(intBuffer24);
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 0 + "'", short25 == (short) 0);
    }

    @Test
    public void test03757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03757");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar('\n');
        java.nio.Buffer buffer9 = byteBuffer8.mark();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putInt((int) '#');
        byte byte19 = byteBuffer15.get(1);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.put(14, (byte) -1);
        java.nio.FloatBuffer floatBuffer23 = byteBuffer22.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putInt((int) '#');
        float float33 = byteBuffer31.getFloat(4);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer39.get(byteArray52, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer68.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.putInt(0);
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer76 = byteBuffer72.put(byteArray75);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer62.get(byteArray75, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer56.put(byteArray75);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer31.put(byteArray75);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer22.get(byteArray75);
        java.nio.ByteBuffer byteBuffer83 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ByteBuffer byteBuffer84 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ByteBuffer byteBuffer85 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ByteBuffer byteBuffer86 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ByteBuffer byteBuffer87 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer8.get(byteArray75);
        java.nio.ByteBuffer byteBuffer89 = java.nio.ByteBuffer.wrap(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer92 = java.nio.ByteBuffer.wrap(byteArray75, 64, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(buffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(floatBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 7.3E-44f + "'", float33 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
    }

    @Test
    public void test03758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03758");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        float float5 = byteBuffer3.getFloat(32);
        boolean boolean6 = byteBuffer3.isDirect();
        boolean boolean7 = byteBuffer3.isDirect();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        int int13 = byteBuffer11.getInt((int) (short) 1);
        java.nio.ByteOrder byteOrder14 = byteBuffer11.order();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer3.order(byteOrder14);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteOrder14);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test03759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03759");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer10.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.put(byteArray21);
        org.jsoup.helper.HttpConnection.Response response23 = null;
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response23);
        response24.contentType = "";
        boolean boolean27 = byteBuffer22.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer30 = byteBuffer22.putShort(92, (short) (byte) 0);
        boolean boolean31 = byteBuffer22.isDirect();
        int int32 = byteBuffer12.compareTo(byteBuffer22);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer33 = byteBuffer12.compact();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test03760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03760");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        response22.charset = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response22);
        response22.executed = false;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test03761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03761");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        int int6 = response1.statusCode();
        response1.contentType = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        response1.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E";
        boolean boolean13 = response1.hasHeaderWithValue("\\Q\\E", "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.jsoup.Connection.Method method14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response15 = response1.method(method14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03762");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.put((byte) 10);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer7.putInt(22);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer7.putShort(63, (short) -1);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test03763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03763");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket(inetAddress7, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03764");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer11.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long39 = byteBuffer38.getLong();
        int int40 = byteBuffer38.position();
        float float42 = byteBuffer38.getFloat((int) (short) 10);
        boolean boolean43 = byteBuffer38.hasArray();
        double double44 = byteBuffer38.getDouble();
        short short46 = byteBuffer38.getShort(0);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer38.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response49 = null;
        org.jsoup.helper.HttpConnection.Response response50 = new org.jsoup.helper.HttpConnection.Response(response49);
        java.lang.String str52 = response50.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = response50.cookies();
        org.jsoup.Connection.Response response55 = response50.removeCookie("hi!");
        java.lang.String str56 = response50.statusMessage();
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        boolean boolean67 = byteBuffer62.hasArray();
        response50.byteData = byteBuffer62;
        int int69 = byteBuffer48.compareTo(byteBuffer62);
        java.lang.String str70 = byteBuffer48.toString();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer48.put((byte) 10);
        int int73 = byteBuffer72.limit();
        java.nio.ByteBuffer byteBuffer75 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer75.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer79 = byteBuffer75.putInt(0);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer79.putInt((int) '#');
        byte byte83 = byteBuffer79.get(1);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer79.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder87 = byteBuffer86.order();
        java.nio.ByteBuffer byteBuffer88 = byteBuffer72.order(byteOrder87);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer11.order(byteOrder87);
        long long91 = byteBuffer11.getLong(79);
        java.nio.DoubleBuffer doubleBuffer92 = byteBuffer11.asDoubleBuffer();
        java.nio.FloatBuffer floatBuffer93 = byteBuffer11.asFloatBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) 0 + "'", short46 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(response55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-10) + "'", int69 == (-10));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str70, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertTrue("'" + byte83 + "' != '" + (byte) 0 + "'", byte83 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteOrder87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(doubleBuffer92);
        org.junit.Assert.assertNotNull(floatBuffer93);
    }

    @Test
    public void test03765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03765");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer3 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer3.putLong((long) '4');
        short short7 = byteBuffer3.getShort(0);
        int int9 = byteBuffer3.getInt((int) '4');
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer3);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer3.compact();
        // The following exception was thrown during execution in test generation
        try {
            short short13 = byteBuffer11.getShort((-67));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 0 + "'", short7 == (short) 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer11);
    }

    @Test
    public void test03766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03766");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern10 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = null; // flaky: pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher17 = pattern10.matcher((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher18 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer15);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer21 = byteBuffer20.asCharBuffer();
        java.util.regex.Matcher matcher22 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer21);
        java.util.regex.Pattern pattern25 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern28 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern31 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern32 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern32;
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer36 = byteBuffer35.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream37 = null; // flaky: pattern32.splitAsStream((java.lang.CharSequence) charBuffer36);
        java.util.regex.Matcher matcher38 = pattern31.matcher((java.lang.CharSequence) charBuffer36);
        java.util.regex.Matcher matcher39 = null; // flaky: pattern28.matcher((java.lang.CharSequence) charBuffer36);
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer42 = byteBuffer41.asCharBuffer();
        java.util.regex.Matcher matcher43 = null; // flaky: pattern28.matcher((java.lang.CharSequence) charBuffer42);
        java.lang.String[] strArray45 = pattern25.split((java.lang.CharSequence) charBuffer42, 8);
        java.util.regex.Pattern pattern48 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern49 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern49;
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer53 = byteBuffer52.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream54 = null; // flaky: pattern49.splitAsStream((java.lang.CharSequence) charBuffer53);
        java.util.regex.Matcher matcher55 = pattern48.matcher((java.lang.CharSequence) charBuffer53);
        java.lang.String[] strArray57 = pattern25.split((java.lang.CharSequence) charBuffer53, (-6));
        java.lang.String[] strArray59 = null; // flaky: pattern7.split((java.lang.CharSequence) charBuffer53, (int) (byte) 10);
        boolean boolean60 = byteBuffer4.equals((java.lang.Object) pattern7);
        java.lang.String str61 = null; // flaky: pattern7.pattern();
        int int62 = 0; // flaky: pattern7.flags();
        java.lang.String str63 = null; // flaky: pattern7.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern10);
        org.junit.Assert.assertEquals(pattern10.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern11);
// flaky:         org.junit.Assert.assertEquals(pattern11.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
// flaky:         org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(matcher17);
        org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher18);
// flaky:         org.junit.Assert.assertEquals(matcher18.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
// flaky:         org.junit.Assert.assertNotNull(matcher22);
// flaky:         org.junit.Assert.assertEquals(matcher22.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern25);
        org.junit.Assert.assertEquals(pattern25.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern28);
// flaky:         org.junit.Assert.assertEquals(pattern28.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern31);
        org.junit.Assert.assertEquals(pattern31.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern32);
// flaky:         org.junit.Assert.assertEquals(pattern32.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(charBuffer36);
// flaky:         org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(matcher38);
        org.junit.Assert.assertEquals(matcher38.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher39);
// flaky:         org.junit.Assert.assertEquals(matcher39.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
// flaky:         org.junit.Assert.assertNotNull(matcher43);
// flaky:         org.junit.Assert.assertEquals(matcher43.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(pattern48);
        org.junit.Assert.assertEquals(pattern48.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern49);
// flaky:         org.junit.Assert.assertEquals(pattern49.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(charBuffer53);
// flaky:         org.junit.Assert.assertNotNull(strStream54);
        org.junit.Assert.assertNotNull(matcher55);
        org.junit.Assert.assertEquals(matcher55.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray57);
// flaky:         org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str61, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-24) + "'", int62 == (-24));
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str63, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
    }

    @Test
    public void test03767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03767");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response2.scanHeaders("");
        java.lang.String str11 = response2.getHeaderCaseInsensitive("Location");
        java.lang.String str12 = response2.charset();
        response2.numRedirects = (short) 0;
        java.lang.String str15 = response2.contentType;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response16 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test03768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03768");
        java.lang.String str1 = java.util.regex.Pattern.quote("\\Qjava.nio.DirectByteBuffer[pos=12 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\\Q\\Qjava.nio.DirectByteBuffer[pos=12 lim=100 cap=100]\\E\\\\E\\Q\\E" + "'", str1, "\\Q\\Qjava.nio.DirectByteBuffer[pos=12 lim=100 cap=100]\\E\\\\E\\Q\\E");
    }

    @Test
    public void test03769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03769");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer36.putShort(24, (short) (byte) 0);
        java.nio.FloatBuffer floatBuffer40 = byteBuffer36.asFloatBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(floatBuffer40);
    }

    @Test
    public void test03770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03770");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.lang.String str21 = response1.header("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry23 = response1.scanHeaders("");
        response1.contentType = "java.nio.DirectByteBuffer[pos=12 lim=32 cap=100]";
        org.jsoup.Connection.Method method26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response27 = response1.method(method26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strEntry23);
    }

    @Test
    public void test03771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03771");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer1.compact();
        boolean boolean13 = byteBuffer12.isReadOnly();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.slice();
        byte byte15 = byteBuffer12.get();
        int int16 = byteBuffer12.getInt();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = byteBuffer12.getLong((-72));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 0 + "'", byte15 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test03772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03772");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.Connection.Response response7 = response4.removeCookie("\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response4);
        java.lang.String str10 = response8.getHeaderCaseInsensitive("\\Qjava.nio.DirectByteBuffer[pos=0 lim=22 cap=100]\\E");
        response8.numRedirects = 52;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test03773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03773");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer61 = byteBuffer58.putChar((int) '#', '4');
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteOrder byteOrder72 = byteBuffer71.order();
        byte byte74 = byteBuffer71.get((int) 'a');
        java.nio.DoubleBuffer doubleBuffer75 = byteBuffer71.asDoubleBuffer();
        short short76 = byteBuffer71.getShort();
        java.lang.String str77 = byteBuffer71.toString();
        int int78 = byteBuffer58.compareTo(byteBuffer71);
        java.lang.String str79 = byteBuffer71.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteOrder72);
        org.junit.Assert.assertTrue("'" + byte74 + "' != '" + (byte) 0 + "'", byte74 == (byte) 0);
        org.junit.Assert.assertNotNull(doubleBuffer75);
        org.junit.Assert.assertTrue("'" + short76 + "' != '" + (short) 0 + "'", short76 == (short) 0);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]" + "'", str77, "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-66) + "'", int78 == (-66));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]" + "'", str79, "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
    }

    @Test
    public void test03774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03774");
        org.jsoup.Connection.Request request0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response.writePost(request0, outputStream1, "java.nio.DirectByteBuffer[pos=31 lim=100 cap=100]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03775");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        int int10 = response8.statusCode;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response8);
        response8.executed = true;
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03776");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E", 75);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
    }

    @Test
    public void test03777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03777");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.Buffer buffer57 = byteBuffer32.flip();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer32.putFloat(4, (float) (short) 1);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer60.duplicate();
        java.nio.ByteBuffer byteBuffer63 = byteBuffer61.putLong((long) 3);
        response9.byteData = byteBuffer63;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(buffer57);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
    }

    @Test
    public void test03778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03778");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str14 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.net.HttpURLConnection httpURLConnection16 = null;
        org.jsoup.helper.HttpConnection.Response response17 = null;
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response17);
        response18.contentType = "";
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response18);
        int int22 = response18.numRedirects;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response18);
        java.lang.String str24 = response23.charset();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry26 = response23.scanHeaders("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response23);
        // The following exception was thrown during execution in test generation
        try {
            response15.setupFromConnection(httpURLConnection16, (org.jsoup.Connection.Response) response27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strEntry26);
    }

    @Test
    public void test03779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03779");
        boolean boolean2 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E", (java.lang.CharSequence) "\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test03780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03780");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        java.lang.String str9 = response7.header("Location");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.Connection.Request request12 = response10.req;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.lang.String str14 = response13.charset();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test03781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03781");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        java.lang.String str9 = response7.header("Location");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        int int12 = response7.statusCode;
        response7.statusCode = 79;
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response7);
        response16.contentType = "\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E";
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test03782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03782");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.lang.String str27 = response23.statusMessage;
        java.nio.ByteBuffer byteBuffer28 = null;
        response23.byteData = byteBuffer28;
        org.jsoup.Connection.Response response32 = response23.cookie("java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]", "Location");
        org.jsoup.helper.HttpConnection.Response response33 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.lang.String str34 = response33.statusMessage();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(response32);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test03783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03783");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        int int16 = response11.numRedirects;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response17);
        java.lang.String str19 = response17.contentType();
        java.lang.String str21 = response17.header("\\Qjava.nio.DirectByteBuffer[pos=16 lim=32 cap=100]\\E");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test03784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03784");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=0 lim=76 cap=76]\\E");
        java.util.regex.Pattern pattern4 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer6.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer6.putInt(0);
        byte[] byteArray13 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.put(byteArray13);
        java.nio.CharBuffer charBuffer15 = byteBuffer10.asCharBuffer();
        java.util.regex.Matcher matcher16 = pattern4.matcher((java.lang.CharSequence) charBuffer15);
        java.lang.String[] strArray18 = pattern1.split((java.lang.CharSequence) charBuffer15, (int) (short) 100);
        java.nio.Buffer buffer19 = charBuffer15.rewind();
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "\\Qjava.nio.DirectByteBuffer[pos=0 lim=76 cap=76]\\E");
        org.junit.Assert.assertNotNull(pattern4);
        org.junit.Assert.assertEquals(pattern4.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(matcher16);
        org.junit.Assert.assertEquals(matcher16.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(buffer19);
    }

    @Test
    public void test03785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03785");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        int int10 = byteBuffer5.remaining();
        java.nio.Buffer buffer11 = byteBuffer5.mark();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putChar(8, '\u0a00');
        java.nio.Buffer buffer15 = byteBuffer14.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 84 + "'", int10 == 84);
        org.junit.Assert.assertNotNull(buffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(buffer15);
    }

    @Test
    public void test03786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03786");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        java.nio.Buffer buffer79 = byteBuffer78.rewind();
        java.nio.ByteBuffer byteBuffer80 = byteBuffer78.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer83 = byteBuffer78.putDouble((int) '\u2000', 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(buffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
    }

    @Test
    public void test03787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03787");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        byte byte4 = byteBuffer1.get((int) '4');
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putDouble((double) 23);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer6);
    }

    @Test
    public void test03788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03788");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        int int16 = response11.numRedirects;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response17);
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry21 = response18.scanHeaders("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNull(strEntry21);
    }

    @Test
    public void test03789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03789");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate4 = pattern2.asPredicate();
        java.lang.Class<?> wildcardClass5 = pattern2.getClass();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test03790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03790");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.Buffer buffer15 = byteBuffer10.position(10);
        java.nio.Buffer buffer17 = byteBuffer10.position((int) (short) 0);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer10.slice();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer10.put(97, (byte) 64);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(buffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer21);
    }

    @Test
    public void test03791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03791");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Q\\QLocation\\E\\\\E\\Q\\E", 0);
        java.lang.String str3 = pattern2.pattern();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\QLocation\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\\Q\\QLocation\\E\\\\E\\Q\\E" + "'", str3, "\\Q\\QLocation\\E\\\\E\\Q\\E");
    }

    @Test
    public void test03792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03792");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.FloatBuffer floatBuffer13 = byteBuffer12.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putInt((int) '#');
        float float23 = byteBuffer21.getFloat(4);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer29.get(byteArray42, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer48.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.putInt(0);
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.put(byteArray55);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer52.get(byteArray65, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer46.put(byteArray65);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer21.put(byteArray65);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer12.get(byteArray65);
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.wrap(byteArray65);
        java.nio.ByteBuffer byteBuffer74 = java.nio.ByteBuffer.wrap(byteArray65);
        java.nio.ByteBuffer byteBuffer75 = java.nio.ByteBuffer.wrap(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            char char77 = byteBuffer75.getChar(1117126656);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(floatBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 7.3E-44f + "'", float23 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
    }

    @Test
    public void test03793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03793");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        java.lang.String str13 = byteBuffer1.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer16 = byteBuffer1.put((int) (byte) 100, (byte) 66);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]" + "'", str13, "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
    }

    @Test
    public void test03794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03794");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        boolean boolean37 = byteBuffer32.isReadOnly();
        java.nio.CharBuffer charBuffer38 = byteBuffer32.asCharBuffer();
        int int40 = byteBuffer32.getInt((int) (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charBuffer38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test03795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03795");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        double double16 = byteBuffer9.getDouble(0);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        short short22 = byteBuffer18.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer18.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer31.get(byteArray44, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer31.putDouble(100.0d);
        int int51 = byteBuffer25.compareTo(byteBuffer31);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteOrder byteOrder62 = byteBuffer61.order();
        java.nio.ByteBuffer byteBuffer63 = byteBuffer31.order(byteOrder62);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer31.asReadOnlyBuffer();
        boolean boolean65 = byteBuffer9.equals((java.lang.Object) byteBuffer31);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer31.putShort((short) 100);
        java.nio.DoubleBuffer doubleBuffer68 = byteBuffer67.asDoubleBuffer();
        java.nio.Buffer buffer69 = doubleBuffer68.flip();
        java.nio.Buffer buffer70 = buffer69.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.57E-322d + "'", double16 == 2.57E-322d);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteOrder62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(doubleBuffer68);
        org.junit.Assert.assertNotNull(buffer69);
        org.junit.Assert.assertNotNull(buffer70);
    }

    @Test
    public void test03796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03796");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        java.lang.String str6 = response1.charset();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test03797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03797");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        java.nio.Buffer buffer9 = byteBuffer8.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(buffer9);
    }

    @Test
    public void test03798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03798");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.lang.String str12 = response1.contentType();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long15 = byteBuffer14.getLong();
        int int16 = byteBuffer14.position();
        float float18 = byteBuffer14.getFloat((int) (short) 10);
        boolean boolean19 = byteBuffer14.hasArray();
        double double20 = byteBuffer14.getDouble();
        short short22 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer14.putDouble(100.0d);
        boolean boolean25 = byteBuffer14.isReadOnly();
        response1.byteData = byteBuffer14;
        boolean boolean27 = byteBuffer14.hasRemaining();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer14.slice();
        java.nio.ShortBuffer shortBuffer29 = byteBuffer28.asShortBuffer();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(shortBuffer29);
    }

    @Test
    public void test03799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03799");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        java.lang.String str9 = response1.charset();
        boolean boolean12 = response1.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", "Location");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str15 = response14.charset;
        java.lang.String str16 = response14.charset;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray17 = response14.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test03800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03800");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer15 = byteBuffer5.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putInt((int) '#');
        byte byte25 = byteBuffer21.get(1);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer21.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer21.slice();
        int int30 = byteBuffer29.remaining();
        int int31 = byteBuffer5.compareTo(byteBuffer29);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long34 = byteBuffer33.getLong();
        int int35 = byteBuffer33.position();
        float float37 = byteBuffer33.getFloat((int) (short) 10);
        boolean boolean38 = byteBuffer33.hasArray();
        double double39 = byteBuffer33.getDouble();
        short short41 = byteBuffer33.getShort(0);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer33.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer33.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.duplicate();
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.slice();
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer46.get(byteArray57);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer29.get(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.wrap(byteArray57, 83, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 84 + "'", int30 == 84);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
    }

    @Test
    public void test03801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03801");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        java.nio.Buffer buffer25 = byteBuffer22.flip();
        short short26 = byteBuffer22.getShort();
        java.nio.ShortBuffer shortBuffer27 = byteBuffer22.asShortBuffer();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer22.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer28);
    }

    @Test
    public void test03802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03802");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put((byte) 66);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putLong(78, (long) (short) 256);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer14.putShort((int) (byte) 0, (short) (byte) 66);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer20.asReadOnlyBuffer();
        java.lang.String str22 = byteBuffer21.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.nio.DirectByteBufferR[pos=77 lim=100 cap=100]" + "'", str22, "java.nio.DirectByteBufferR[pos=77 lim=100 cap=100]");
    }

    @Test
    public void test03803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03803");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.lang.String str23 = response20.statusMessage();
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        short short31 = byteBuffer30.getShort();
        int int32 = byteBuffer30.capacity();
        byte byte33 = byteBuffer30.get();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer30.putInt(128);
        java.lang.String str36 = byteBuffer30.toString();
        java.nio.FloatBuffer floatBuffer37 = byteBuffer30.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer43.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer43.putChar('a');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer48.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer48.putDouble(0.0d);
        boolean boolean52 = byteBuffer48.isReadOnly();
        java.nio.ByteOrder byteOrder53 = byteBuffer48.order();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer30.order(byteOrder53);
        response20.byteData = byteBuffer30;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray56 = byteBuffer30.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 0 + "'", short31 == (short) 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + byte33 + "' != '" + (byte) 0 + "'", byte33 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.nio.DirectByteBuffer[pos=19 lim=100 cap=100]" + "'", str36, "java.nio.DirectByteBuffer[pos=19 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(floatBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteOrder53);
        org.junit.Assert.assertNotNull(byteBuffer54);
    }

    @Test
    public void test03804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03804");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer22.putDouble(0, (double) 13376L);
        int int28 = byteBuffer22.position();
        java.nio.Buffer buffer29 = byteBuffer22.rewind();
        java.nio.Buffer buffer31 = buffer29.limit(16);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 14 + "'", int28 == 14);
        org.junit.Assert.assertNotNull(buffer29);
        org.junit.Assert.assertNotNull(buffer31);
    }

    @Test
    public void test03805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03805");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        org.jsoup.Connection.Request request8 = response1.req;
        java.lang.String str9 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = response12.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(request8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test03806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03806");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        int int6 = response1.statusCode();
        response1.contentType = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        boolean boolean11 = response1.hasHeaderWithValue("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E", "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        org.jsoup.Connection.Request request12 = null;
        response1.req = request12;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.net.URL uRL15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response16 = response1.url(uRL15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03807");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer22.putShort((short) (byte) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer48.compact();
        java.nio.LongBuffer longBuffer50 = byteBuffer49.asLongBuffer();
        boolean boolean51 = byteBuffer49.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(longBuffer50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test03808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03808");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putDouble(8, (double) 256);
        java.nio.CharBuffer charBuffer15 = byteBuffer11.asCharBuffer();
        boolean boolean16 = byteBuffer11.isReadOnly();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer11.compact();
        java.nio.CharBuffer charBuffer18 = byteBuffer17.asCharBuffer();
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putDouble(7.565251118924485E-307d);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        short short37 = byteBuffer36.getShort();
        java.nio.IntBuffer intBuffer38 = byteBuffer36.asIntBuffer();
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long41 = byteBuffer40.getLong();
        int int42 = byteBuffer40.position();
        float float44 = byteBuffer40.getFloat((int) (short) 10);
        boolean boolean45 = byteBuffer40.hasArray();
        double double46 = byteBuffer40.getDouble();
        short short48 = byteBuffer40.getShort(0);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer40.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response51 = null;
        org.jsoup.helper.HttpConnection.Response response52 = new org.jsoup.helper.HttpConnection.Response(response51);
        java.lang.String str54 = response52.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = response52.cookies();
        org.jsoup.Connection.Response response57 = response52.removeCookie("hi!");
        java.lang.String str58 = response52.statusMessage();
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        boolean boolean69 = byteBuffer64.hasArray();
        response52.byteData = byteBuffer64;
        int int71 = byteBuffer50.compareTo(byteBuffer64);
        int int72 = byteBuffer36.compareTo(byteBuffer64);
        java.nio.Buffer buffer73 = byteBuffer64.rewind();
        boolean boolean74 = byteBuffer28.equals((java.lang.Object) byteBuffer64);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer75 = byteBuffer17.put(byteBuffer64);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 0 + "'", short37 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) 0 + "'", short48 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(response57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-10) + "'", int71 == (-10));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(buffer73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test03809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03809");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.lang.String str7 = response1.header("");
        org.jsoup.Connection.Response response9 = response1.removeCookie("java.nio.DirectByteBuffer[pos=12 lim=32 cap=100]");
        response1.executed = false;
        org.jsoup.Connection.Response response13 = response1.removeCookie("\\QLocation\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response13);
    }

    @Test
    public void test03810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03810");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        response1.executed = true;
        int int11 = response1.numRedirects;
        boolean boolean13 = response1.hasCookie("\\QLocation\\E");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03811");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.Socket socket9 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress10 = null;
        java.net.InetAddress inetAddress12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket14 = socketFactory0.createSocket(inetAddress10, 27, inetAddress12, 52);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40382]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket9);
        org.junit.Assert.assertEquals(socket9.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03812");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]", 128, inetAddress8, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03813");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.InetAddress inetAddress5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket7 = socketFactory0.createSocket(inetAddress5, 0);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40384]");
    }

    @Test
    public void test03814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03814");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer5.putDouble(10.0d);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putFloat((float) 75);
        int int15 = byteBuffer11.getInt(22);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer11.putDouble((double) 'a');
        int int18 = byteBuffer17.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1117126656 + "'", int15 == 1117126656);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 66 + "'", int18 == 66);
    }

    @Test
    public void test03815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03815");
        java.util.regex.Pattern pattern4 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern7 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        java.nio.CharBuffer charBuffer18 = byteBuffer13.asCharBuffer();
        java.util.regex.Matcher matcher19 = pattern7.matcher((java.lang.CharSequence) charBuffer18);
        java.util.stream.Stream<java.lang.String> strStream20 = null; // flaky: pattern4.splitAsStream((java.lang.CharSequence) charBuffer18);
        java.util.regex.Pattern pattern23 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern24 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern24;
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer28 = byteBuffer27.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream29 = null; // flaky: pattern24.splitAsStream((java.lang.CharSequence) charBuffer28);
        java.util.regex.Matcher matcher30 = pattern23.matcher((java.lang.CharSequence) charBuffer28);
        java.util.regex.Matcher matcher32 = pattern23.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        java.util.regex.Pattern pattern35 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.FloatBuffer floatBuffer46 = byteBuffer41.asFloatBuffer();
        java.nio.CharBuffer charBuffer47 = byteBuffer41.asCharBuffer();
        java.lang.String[] strArray49 = pattern35.split((java.lang.CharSequence) charBuffer47, (-10));
        java.util.regex.Matcher matcher50 = pattern23.matcher((java.lang.CharSequence) charBuffer47);
        java.util.regex.Matcher matcher51 = null; // flaky: pattern4.matcher((java.lang.CharSequence) charBuffer47);
        boolean boolean52 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E", (java.lang.CharSequence) charBuffer47);
        boolean boolean53 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]", (java.lang.CharSequence) charBuffer47);
// flaky:         org.junit.Assert.assertNotNull(pattern4);
// flaky:         org.junit.Assert.assertEquals(pattern4.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern7);
        org.junit.Assert.assertEquals(pattern7.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(matcher19);
        org.junit.Assert.assertEquals(matcher19.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(pattern23);
        org.junit.Assert.assertEquals(pattern23.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern24);
// flaky:         org.junit.Assert.assertEquals(pattern24.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
// flaky:         org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNotNull(matcher30);
        org.junit.Assert.assertEquals(matcher30.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher32);
        org.junit.Assert.assertEquals(matcher32.toString(), "java.util.regex.Matcher[pattern=hi! region=0,7 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern35);
        org.junit.Assert.assertEquals(pattern35.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(floatBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(matcher50);
        org.junit.Assert.assertEquals(matcher50.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher51);
// flaky:         org.junit.Assert.assertEquals(matcher51.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=24 lim=100 cap=100] region=0,43 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test03816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03816");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.capacity();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.put((byte) 0);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) 25);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer11.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) (-53));
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
    }

    @Test
    public void test03817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03817");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(23);
        short short2 = byteBuffer1.getShort();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 0 + "'", short2 == (short) 0);
    }

    @Test
    public void test03818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03818");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.put((byte) 10);
        java.nio.ByteOrder byteOrder23 = byteBuffer20.order();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer10.order(byteOrder23);
        java.nio.CharBuffer charBuffer25 = byteBuffer24.asCharBuffer();
        short short26 = byteBuffer24.getShort();
        short short27 = byteBuffer24.getShort();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer28 = byteBuffer24.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
    }

    @Test
    public void test03819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03819");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer6.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer6.putInt(0);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer12.compact();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer12.put((byte) 10);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer12.putInt(22);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer12.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long22 = byteBuffer21.getLong();
        int int23 = byteBuffer21.position();
        float float25 = byteBuffer21.getFloat((int) (short) 10);
        boolean boolean26 = byteBuffer21.hasArray();
        java.nio.DoubleBuffer doubleBuffer27 = byteBuffer21.asDoubleBuffer();
        java.nio.Buffer buffer28 = byteBuffer21.clear();
        java.nio.ByteOrder byteOrder29 = byteBuffer21.order();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer12.order(byteOrder29);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer4.order(byteOrder29);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putInt((int) '\000');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer31.putInt(0, (int) '4');
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocate((int) '\n');
        byte[] byteArray39 = byteBuffer38.array();
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.wrap(byteArray39, (int) '\u2000', 320);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleBuffer27);
        org.junit.Assert.assertNotNull(buffer28);
        org.junit.Assert.assertNotNull(byteOrder29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer40);
    }

    @Test
    public void test03820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03820");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        org.jsoup.Connection.Response response47 = response37.removeHeader("Location");
        java.nio.ByteBuffer byteBuffer48 = response37.byteData;
        boolean boolean50 = response37.hasCookie("java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry52 = response37.scanHeaders("\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E");
        java.lang.String str54 = response37.cookie("java.nio.DirectByteBuffer[pos=23 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(response47);
        org.junit.Assert.assertNull(byteBuffer48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(strEntry52);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test03821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03821");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "\\Qjava.nio.DirectByteBuffer[pos=16 lim=32 cap=100]\\E";
    }

    @Test
    public void test03822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03822");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", 80);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
    }

    @Test
    public void test03823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03823");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.Socket socket9 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket12 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]", 96);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40388]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket9);
        org.junit.Assert.assertEquals(socket9.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03824");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer22.putShort((short) (byte) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer48.putFloat(84, (-1.0f));
        java.nio.Buffer buffer52 = byteBuffer51.rewind();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer51.putLong((long) (-65536));
        // The following exception was thrown during execution in test generation
        try {
            double double56 = byteBuffer51.getDouble((-90));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(buffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
    }

    @Test
    public void test03825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03825");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.Connection.Method method6 = response4.method();
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.Connection.Method method9 = response8.method();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method9);
    }

    @Test
    public void test03826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03826");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.put((byte) 10);
        java.nio.ByteOrder byteOrder23 = byteBuffer20.order();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer10.order(byteOrder23);
        boolean boolean25 = byteBuffer24.hasRemaining();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer24.put((byte) 1);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteBuffer27);
    }

    @Test
    public void test03827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03827");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt((int) (short) 1, (-24));
        java.nio.ByteBuffer byteBuffer33 = byteBuffer30.putFloat(88, (float) 58);
        org.jsoup.helper.HttpConnection.Response response34 = null;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response34);
        response35.contentType = "";
        java.lang.String str38 = response35.contentType;
        response35.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry42 = response35.scanHeaders("");
        java.lang.String str44 = response35.getHeaderCaseInsensitive("Location");
        java.lang.String str45 = response35.charset();
        response35.statusCode = 64;
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer50 = byteBuffer49.asShortBuffer();
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long53 = byteBuffer52.getLong();
        int int54 = byteBuffer52.position();
        float float56 = byteBuffer52.getFloat((int) (short) 10);
        boolean boolean57 = byteBuffer52.hasArray();
        double double58 = byteBuffer52.getDouble();
        short short60 = byteBuffer52.getShort(0);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer52.putDouble(100.0d);
        byte byte64 = byteBuffer62.get((int) (short) 0);
        java.nio.IntBuffer intBuffer65 = byteBuffer62.asIntBuffer();
        int int66 = byteBuffer49.compareTo(byteBuffer62);
        response35.byteData = byteBuffer49;
        java.nio.ByteOrder byteOrder68 = byteBuffer49.order();
        java.nio.ByteOrder byteOrder69 = byteBuffer49.order();
        java.nio.ByteBuffer byteBuffer70 = byteBuffer33.order(byteOrder69);
        java.nio.DoubleBuffer doubleBuffer71 = byteBuffer70.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.compact();
        java.nio.ByteBuffer byteBuffer74 = java.nio.ByteBuffer.allocate((int) '4');
        int int75 = byteBuffer74.arrayOffset();
        java.nio.ByteBuffer byteBuffer77 = byteBuffer74.putLong((long) (short) 1);
        byte[] byteArray78 = byteBuffer74.array();
        java.nio.ByteBuffer byteBuffer79 = java.nio.ByteBuffer.wrap(byteArray78);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer72.put(byteArray78, (int) '\000', 0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(strEntry42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(shortBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) 0 + "'", short60 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) 0 + "'", byte64 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-24) + "'", int66 == (-24));
        org.junit.Assert.assertNotNull(byteOrder68);
        org.junit.Assert.assertNotNull(byteOrder69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(doubleBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer82);
    }

    @Test
    public void test03828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03828");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.CharBuffer charBuffer25 = byteBuffer20.asCharBuffer();
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putInt((int) '#');
        float float35 = byteBuffer33.getFloat(4);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer41.get(byteArray54, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.putInt(0);
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.put(byteArray77);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer64.get(byteArray77, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer58.put(byteArray77);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer33.put(byteArray77);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer20.get(byteArray77);
        java.nio.ByteBuffer byteBuffer85 = java.nio.ByteBuffer.wrap(byteArray77);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer14.get(byteArray77);
        java.nio.FloatBuffer floatBuffer87 = byteBuffer14.asFloatBuffer();
        java.lang.String str88 = byteBuffer14.toString();
        java.nio.ByteBuffer byteBuffer89 = byteBuffer14.compact();
        java.nio.LongBuffer longBuffer90 = byteBuffer14.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 7.3E-44f + "'", float35 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(floatBuffer87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]" + "'", str88, "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(longBuffer90);
    }

    @Test
    public void test03829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03829");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        int int9 = response1.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry11 = response1.scanHeaders("java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
        java.lang.String str12 = response1.charset;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(strEntry11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test03830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03830");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        int int8 = response6.numRedirects;
        boolean boolean10 = response6.hasCookie("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response11 = org.jsoup.helper.HttpConnection.Response.execute(request0, response6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03831");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.FloatBuffer floatBuffer25 = byteBuffer24.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putChar((int) (short) 10, '\n');
        short short30 = byteBuffer24.getShort(33);
        boolean boolean31 = byteBuffer24.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test03832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03832");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(58);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putChar('\u4120');
        java.nio.ByteBuffer byteBuffer6 = byteBuffer4.putDouble((double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            char char8 = byteBuffer6.getChar((-53));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
    }

    @Test
    public void test03833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03833");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        response26.executed = true;
        java.lang.String str30 = response26.cookie("hi!");
        response26.statusCode = 74;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test03834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03834");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.CharBuffer charBuffer10 = byteBuffer5.asCharBuffer();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putInt((int) '#');
        float float20 = byteBuffer18.getFloat(4);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer18.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer5.get(byteArray62);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.wrap(byteArray62);
        java.nio.ShortBuffer shortBuffer71 = byteBuffer70.asShortBuffer();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer74 = byteBuffer70.putLong((long) 74);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 7.3E-44f + "'", float20 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(shortBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer72);
    }

    @Test
    public void test03835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03835");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        int int12 = response10.statusCode;
        response10.contentType = "\\Qjava.nio.DirectByteBuffer[pos=16 lim=32 cap=100]\\E";
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test03836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03836");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar(6, '\n');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putFloat((float) 18);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putDouble(10, 10.0d);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putInt((int) '#');
        byte byte28 = byteBuffer24.get(1);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer24.put(14, (byte) -1);
        java.nio.FloatBuffer floatBuffer32 = byteBuffer31.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer38.putInt((int) '#');
        float float42 = byteBuffer40.getFloat(4);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer54 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer54.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.putInt(0);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.put(byteArray61);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer48.get(byteArray61, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.putInt(0);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.put(byteArray74);
        java.nio.ByteBuffer byteBuffer77 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer77.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer81 = byteBuffer77.putInt(0);
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer85 = byteBuffer81.put(byteArray84);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer71.get(byteArray84, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer65.put(byteArray84);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer40.put(byteArray84);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer31.get(byteArray84);
        java.nio.ByteBuffer byteBuffer92 = java.nio.ByteBuffer.wrap(byteArray84);
        java.nio.ByteBuffer byteBuffer93 = java.nio.ByteBuffer.wrap(byteArray84);
        java.nio.ByteBuffer byteBuffer94 = java.nio.ByteBuffer.wrap(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer97 = byteBuffer15.put(byteArray84, 33, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 0 + "'", byte28 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(floatBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 7.3E-44f + "'", float42 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
    }

    @Test
    public void test03837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03837");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        java.lang.String str9 = response1.statusMessage();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer12 = response11.byteData;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.Connection.Request request15 = response11.req;
        org.jsoup.Connection.Method method16 = response11.method();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(byteBuffer12);
        org.junit.Assert.assertNull(request15);
        org.junit.Assert.assertNull(method16);
    }

    @Test
    public void test03838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03838");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = 40;
    }

    @Test
    public void test03839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03839");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response6.headers();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = response6.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test03840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03840");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=10 lim=22 cap=22]\\E", 11);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qjava.nio.DirectByteBuffer[pos=10 lim=22 cap=22]\\E");
    }

    @Test
    public void test03841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03841");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]", 85);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]");
    }

    @Test
    public void test03842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03842");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer7.putFloat((float) (byte) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) 12);
        long long62 = byteBuffer61.getLong();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test03843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03843");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.FloatBuffer floatBuffer25 = byteBuffer24.asFloatBuffer();
        java.nio.Buffer buffer26 = byteBuffer24.flip();
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer28.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer39.compact();
        java.nio.ByteBuffer byteBuffer42 = byteBuffer39.put((byte) 10);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer39.putInt(22);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer39.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long49 = byteBuffer48.getLong();
        int int50 = byteBuffer48.position();
        float float52 = byteBuffer48.getFloat((int) (short) 10);
        boolean boolean53 = byteBuffer48.hasArray();
        java.nio.DoubleBuffer doubleBuffer54 = byteBuffer48.asDoubleBuffer();
        java.nio.Buffer buffer55 = byteBuffer48.clear();
        java.nio.ByteOrder byteOrder56 = byteBuffer48.order();
        java.nio.ByteBuffer byteBuffer57 = byteBuffer39.order(byteOrder56);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer31.order(byteOrder56);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer24.order(byteOrder56);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putChar('\u3ff0');
        int int62 = byteBuffer59.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleBuffer54);
        org.junit.Assert.assertNotNull(buffer55);
        org.junit.Assert.assertNotNull(byteOrder56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 23 + "'", int62 == 23);
    }

    @Test
    public void test03844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03844");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        java.nio.Buffer buffer12 = byteBuffer5.position((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putDouble(12, (double) 0);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putFloat(19, 0.0f);
        java.nio.CharBuffer charBuffer19 = byteBuffer18.asCharBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(charBuffer19);
    }

    @Test
    public void test03845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03845");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer11 = byteBuffer1.asCharBuffer();
        boolean boolean12 = charBuffer11.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03846");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.Connection.Method method27 = response26.method();
        response26.numRedirects = 24;
        response26.statusCode = 76;
        org.jsoup.helper.HttpConnection.Response response32 = new org.jsoup.helper.HttpConnection.Response(response26);
        int int33 = response26.statusCode;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 76 + "'", int33 == 76);
    }

    @Test
    public void test03847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03847");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Q\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E\\\\E\\Q\\E", 11);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E\\\\E\\Q\\E");
    }

    @Test
    public void test03848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03848");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int7 = response6.statusCode();
        java.lang.String str8 = response6.statusMessage;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response9);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document12 = response11.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test03849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03849");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean7 = response1.hasHeader("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        response9.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=16 lim=100 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.Connection.Response response14 = response9.removeCookie("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(response14);
    }

    @Test
    public void test03850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03850");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.put((byte) 10);
        java.nio.Buffer buffer13 = byteBuffer9.position((int) ' ');
        java.nio.Buffer buffer14 = buffer13.clear();
        boolean boolean15 = buffer14.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03851");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        response5.charset = "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
    }

    @Test
    public void test03852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03852");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        int int12 = response10.statusCode();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test03853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03853");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        java.lang.String str6 = pattern2.pattern();
        java.util.regex.Matcher matcher8 = pattern2.matcher((java.lang.CharSequence) "\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\\Qhi!\\E" + "'", str6, "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(matcher8);
        org.junit.Assert.assertEquals(matcher8.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,81 lastmatch=]");
    }

    @Test
    public void test03854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03854");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(10);
        int int13 = byteBuffer7.getInt(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer7.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putChar(' ');
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
    }

    @Test
    public void test03855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03855");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder13 = byteBuffer12.order();
        char char15 = byteBuffer12.getChar((int) (byte) 1);
        char char16 = byteBuffer12.getChar();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long19 = byteBuffer18.getLong();
        int int20 = byteBuffer18.position();
        float float22 = byteBuffer18.getFloat((int) (short) 10);
        boolean boolean23 = byteBuffer18.hasArray();
        double double24 = byteBuffer18.getDouble();
        short short26 = byteBuffer18.getShort(0);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(byteArray35);
        boolean boolean37 = byteBuffer32.hasArray();
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putInt(0);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.put(byteArray56);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer43.get(byteArray56, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer62.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.putInt(0);
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.put(byteArray69);
        java.nio.ByteBuffer byteBuffer72 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer72.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer76 = byteBuffer72.putInt(0);
        byte[] byteArray79 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer80 = byteBuffer76.put(byteArray79);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer66.get(byteArray79, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer60.put(byteArray79);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer32.put(byteArray79);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer18.get(byteArray79);
        java.nio.ByteBuffer byteBuffer87 = java.nio.ByteBuffer.wrap(byteArray79);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer12.get(byteArray79);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + '\000' + "'", char16 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
    }

    @Test
    public void test03856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03856");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putInt(0);
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.put(byteArray12);
        java.nio.FloatBuffer floatBuffer14 = byteBuffer9.asFloatBuffer();
        java.nio.CharBuffer charBuffer15 = byteBuffer9.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.FloatBuffer floatBuffer27 = byteBuffer22.asFloatBuffer();
        java.nio.CharBuffer charBuffer28 = byteBuffer22.asCharBuffer();
        java.lang.String[] strArray30 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer28, (-65536));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.lang.String str32 = null; // flaky: pattern2.pattern();
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer38.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer38.putChar('a');
        java.nio.Buffer buffer45 = byteBuffer38.position((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer38.putDouble(12, (double) 0);
        java.nio.CharBuffer charBuffer49 = byteBuffer48.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream50 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) charBuffer49);
        java.lang.String str51 = null; // flaky: pattern2.pattern();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
// flaky:         org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(floatBuffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
// flaky:         org.junit.Assert.assertNotNull(strArray30);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str32, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(buffer45);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(charBuffer49);
// flaky:         org.junit.Assert.assertNotNull(strStream50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str51, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
    }

    @Test
    public void test03857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03857");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        double double12 = byteBuffer1.getDouble(2);
        java.nio.Buffer buffer13 = byteBuffer1.rewind();
        java.nio.Buffer buffer14 = byteBuffer1.rewind();
        java.nio.Buffer buffer15 = byteBuffer1.flip();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer17 = byteBuffer1.putLong((long) 100);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(buffer15);
    }

    @Test
    public void test03858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03858");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str6 = response2.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response2);
        boolean boolean10 = response2.hasHeaderWithValue("\\QLocation\\E", "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.lang.String str12 = response2.cookie("\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response13 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test03859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03859");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(100);
        char char3 = byteBuffer1.getChar(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '\000' + "'", char3 == '\000');
    }

    @Test
    public void test03860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03860");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        int int25 = byteBuffer24.remaining();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putChar(24, ' ');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer24.putDouble((double) (-24));
        java.nio.FloatBuffer floatBuffer31 = byteBuffer24.asFloatBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 75 + "'", int25 == 75);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(floatBuffer31);
    }

    @Test
    public void test03861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03861");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        boolean boolean11 = byteBuffer5.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putInt(100, 64);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03862");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        boolean boolean21 = response1.hasCookie("\\Qhi!\\E");
        int int22 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int24 = response23.statusCode();
        java.lang.String str25 = response23.charset;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray26 = response23.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test03863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03863");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int7 = response6.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response6.scanHeaders("Location");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = response10.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
    }

    @Test
    public void test03864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03864");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str11 = response9.statusMessage;
        java.net.URL uRL12 = response9.url();
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response9);
        boolean boolean15 = response13.hasCookie("java.nio.DirectByteBuffer[pos=19 lim=100 cap=100]");
        response13.charset = "\\Q\\Qhi!\\E\\\\E\\Q\\E";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(uRL12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03865");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putInt(0);
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.put(byteArray12);
        java.nio.FloatBuffer floatBuffer14 = byteBuffer9.asFloatBuffer();
        java.nio.CharBuffer charBuffer15 = byteBuffer9.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.FloatBuffer floatBuffer27 = byteBuffer22.asFloatBuffer();
        java.nio.CharBuffer charBuffer28 = byteBuffer22.asCharBuffer();
        java.lang.String[] strArray30 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer28, (-65536));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern35 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern38 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern39 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern39;
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer43 = byteBuffer42.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream44 = null; // flaky: pattern39.splitAsStream((java.lang.CharSequence) charBuffer43);
        java.util.regex.Matcher matcher45 = pattern38.matcher((java.lang.CharSequence) charBuffer43);
        java.util.regex.Matcher matcher46 = null; // flaky: pattern35.matcher((java.lang.CharSequence) charBuffer43);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer49 = byteBuffer48.asCharBuffer();
        java.util.regex.Matcher matcher50 = null; // flaky: pattern35.matcher((java.lang.CharSequence) charBuffer49);
        boolean boolean51 = java.util.regex.Pattern.matches("\\QLocation\\E", (java.lang.CharSequence) charBuffer49);
        java.util.regex.Matcher matcher52 = null; // flaky: pattern2.matcher((java.lang.CharSequence) "\\QLocation\\E");
        java.util.function.Predicate<java.lang.String> strPredicate53 = null; // flaky: pattern2.asPredicate();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
// flaky:         org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(floatBuffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
// flaky:         org.junit.Assert.assertNotNull(strArray30);
// flaky:         org.junit.Assert.assertNotNull(pattern35);
// flaky:         org.junit.Assert.assertEquals(pattern35.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern38);
        org.junit.Assert.assertEquals(pattern38.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern39);
// flaky:         org.junit.Assert.assertEquals(pattern39.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(charBuffer43);
// flaky:         org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertNotNull(matcher45);
        org.junit.Assert.assertEquals(matcher45.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher46);
// flaky:         org.junit.Assert.assertEquals(matcher46.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(charBuffer49);
// flaky:         org.junit.Assert.assertNotNull(matcher50);
// flaky:         org.junit.Assert.assertEquals(matcher50.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertNotNull(matcher52);
// flaky:         org.junit.Assert.assertEquals(matcher52.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,12 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate53);
    }

    @Test
    public void test03866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03866");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = socketFactory0.createSocket("\\Q\\E", 42, inetAddress11, (int) '\n');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40390]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03867");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.Connection.Response response27 = response25.removeCookie("\\Qjava.nio.HeapByteBuffer[pos=0 lim=25 cap=52]\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(response27);
    }

    @Test
    public void test03868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03868");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putDouble(7.565251118924485E-307d);
        short short13 = byteBuffer11.getShort(20);
        java.nio.LongBuffer longBuffer14 = byteBuffer11.asLongBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer16 = longBuffer14.limit((int) '\u0100');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(longBuffer14);
    }

    @Test
    public void test03869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03869");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.IntBuffer intBuffer11 = byteBuffer5.asIntBuffer();
        char char13 = byteBuffer5.getChar((int) (short) 1);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        byte byte21 = byteBuffer15.get();
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        short short27 = byteBuffer23.getShort(0);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer23.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer36.putDouble(100.0d);
        int int56 = byteBuffer30.compareTo(byteBuffer36);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteOrder byteOrder67 = byteBuffer66.order();
        java.nio.ByteBuffer byteBuffer68 = byteBuffer36.order(byteOrder67);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer15.order(byteOrder67);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer5.order(byteOrder67);
        java.nio.ByteBuffer byteBuffer72 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer72.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer76 = byteBuffer72.putInt(0);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer76.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer76.putChar('a');
        int int82 = byteBuffer5.compareTo(byteBuffer81);
        java.nio.LongBuffer longBuffer83 = byteBuffer5.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + '\u3ff0' + "'", char13 == '\u3ff0');
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 0 + "'", byte21 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 14 + "'", int56 == 14);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteOrder67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(longBuffer83);
    }

    @Test
    public void test03870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03870");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.asReadOnlyBuffer();
        int int48 = byteBuffer47.getInt();
        java.nio.Buffer buffer49 = byteBuffer47.rewind();
        float float51 = byteBuffer47.getFloat((int) (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(buffer49);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
    }

    @Test
    public void test03871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03871");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putInt((int) '#');
        byte byte18 = byteBuffer14.get(1);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer14.slice();
        int int23 = byteBuffer22.remaining();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer3.put(byteBuffer22);
        int int25 = byteBuffer24.limit();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer24.putShort((short) 1);
        float float28 = byteBuffer24.getFloat();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 84 + "'", int23 == 84);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
    }

    @Test
    public void test03872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03872");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        double double11 = byteBuffer5.getDouble();
        java.nio.IntBuffer intBuffer12 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putShort(0, (short) (byte) 0);
        java.lang.String str16 = byteBuffer15.toString();
        java.nio.LongBuffer longBuffer17 = byteBuffer15.asLongBuffer();
        byte byte18 = byteBuffer15.get();
        int int19 = byteBuffer15.position();
        boolean boolean20 = byteBuffer15.isReadOnly();
        char char21 = byteBuffer15.getChar();
        // The following exception was thrown during execution in test generation
        try {
            byte byte23 = byteBuffer15.get(1493172224);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]" + "'", str16, "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(longBuffer17);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + '\000' + "'", char21 == '\000');
    }

    @Test
    public void test03873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03873");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.statusCode = 64;
        boolean boolean14 = response1.executed;
        response1.contentType = "\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E";
        java.lang.String str17 = response1.charset();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test03874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03874");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        long long34 = byteBuffer11.getLong();
        java.nio.FloatBuffer floatBuffer35 = byteBuffer11.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer38 = byteBuffer11.putChar((int) '\000', '\n');
        boolean boolean39 = byteBuffer11.isReadOnly();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray40 = byteBuffer11.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test03875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03875");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        response8.executed = true;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response8.cookies();
        java.lang.String str13 = response8.charset();
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response8);
        java.lang.String str15 = response8.charset;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test03876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03876");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.put((byte) 10);
        char char11 = byteBuffer10.getChar();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putChar('#');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putInt(97);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.put(32, (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = byteBuffer18.getInt((-8));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer18);
    }

    @Test
    public void test03877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03877");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket6 = socketFactory0.createSocket("java.nio.DirectByteBufferR[pos=77 lim=100 cap=100]", 24, inetAddress4, 42);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03878");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        java.lang.String str10 = response5.charset;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = response5.headers();
        java.lang.String str12 = response5.contentType;
        int int13 = response5.numRedirects;
        java.net.URL uRL14 = response5.url();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNull(uRL14);
    }

    @Test
    public void test03879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03879");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer5 = byteBuffer4.asShortBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        int int9 = byteBuffer7.position();
        float float11 = byteBuffer7.getFloat((int) (short) 10);
        boolean boolean12 = byteBuffer7.hasArray();
        double double13 = byteBuffer7.getDouble();
        short short15 = byteBuffer7.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putDouble(100.0d);
        byte byte19 = byteBuffer17.get((int) (short) 0);
        java.nio.IntBuffer intBuffer20 = byteBuffer17.asIntBuffer();
        int int21 = byteBuffer4.compareTo(byteBuffer17);
        java.nio.ByteOrder byteOrder22 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer1.put(byteBuffer17);
        short short25 = byteBuffer1.getShort((int) '4');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-24) + "'", int21 == (-24));
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 0 + "'", short25 == (short) 0);
    }

    @Test
    public void test03880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03880");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=23 lim=100 cap=100]", (int) '\u3ff0', inetAddress8, 47);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40392]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03881");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        response1.executed = true;
        int int11 = response1.numRedirects;
        boolean boolean13 = response1.hasCookie("\\QLocation\\E");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response14);
        boolean boolean17 = response14.hasCookie("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03882");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder13 = byteBuffer12.order();
        byte byte14 = byteBuffer12.get();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer15 = byteBuffer12.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
    }

    @Test
    public void test03883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03883");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(10);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer7.putChar('a');
        short short14 = byteBuffer7.getShort();
        java.nio.Buffer buffer15 = byteBuffer7.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 0 + "'", short14 == (short) 0);
        org.junit.Assert.assertNotNull(buffer15);
    }

    @Test
    public void test03884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03884");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        java.lang.String str10 = response5.charset;
        response5.contentType = "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E";
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response5.scanHeaders("java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = response5.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strEntry14);
    }

    @Test
    public void test03885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03885");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.Connection.Response response7 = response2.removeCookie("hi!");
        java.lang.String str8 = response2.statusMessage();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        boolean boolean19 = byteBuffer14.hasArray();
        response2.byteData = byteBuffer14;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response2);
        boolean boolean22 = response21.executed;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response21);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response21);
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response24);
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response25);
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response26);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response28 = org.jsoup.helper.HttpConnection.Response.execute(request0, response27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03886");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response0);
        response2.statusMessage = "";
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.lang.String str7 = response5.getHeaderCaseInsensitive("\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E");
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response9 = response5.url(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test03887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03887");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.wrap(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.wrap(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            float float33 = byteBuffer31.getFloat((int) '\u4120');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer31);
    }

    @Test
    public void test03888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03888");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.FloatBuffer floatBuffer13 = byteBuffer12.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putInt((int) '#');
        float float23 = byteBuffer21.getFloat(4);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer29.get(byteArray42, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer48.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.putInt(0);
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.put(byteArray55);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer52.get(byteArray65, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer46.put(byteArray65);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer21.put(byteArray65);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer12.get(byteArray65);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer12.putDouble((double) 10L);
        java.nio.Buffer buffer75 = byteBuffer74.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(floatBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 7.3E-44f + "'", float23 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(buffer75);
    }

    @Test
    public void test03889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03889");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response13);
        java.net.URL uRL19 = response18.url();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNull(uRL19);
    }

    @Test
    public void test03890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03890");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer22.putDouble(0, (double) 13376L);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer27.slice();
        int int29 = byteBuffer28.capacity();
        java.nio.ByteOrder byteOrder30 = byteBuffer28.order();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer33 = byteBuffer28.putFloat((-90), (float) (-90));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 86 + "'", int29 == 86);
        org.junit.Assert.assertNotNull(byteOrder30);
    }

    @Test
    public void test03891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03891");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        int int3 = 0; // flaky: pattern0.flags();
        java.lang.String str4 = null; // flaky: pattern0.pattern();
        java.util.regex.Pattern pattern7 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern8 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern8;
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer12 = byteBuffer11.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream13 = null; // flaky: pattern8.splitAsStream((java.lang.CharSequence) charBuffer12);
        java.util.regex.Matcher matcher14 = pattern7.matcher((java.lang.CharSequence) charBuffer12);
        java.util.regex.Matcher matcher16 = pattern7.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        java.util.regex.Pattern pattern19 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.FloatBuffer floatBuffer30 = byteBuffer25.asFloatBuffer();
        java.nio.CharBuffer charBuffer31 = byteBuffer25.asCharBuffer();
        java.lang.String[] strArray33 = pattern19.split((java.lang.CharSequence) charBuffer31, (-10));
        java.util.regex.Matcher matcher34 = pattern7.matcher((java.lang.CharSequence) charBuffer31);
        java.util.regex.Pattern pattern38 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern41 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern42 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern42;
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer46 = byteBuffer45.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream47 = null; // flaky: pattern42.splitAsStream((java.lang.CharSequence) charBuffer46);
        java.util.regex.Matcher matcher48 = pattern41.matcher((java.lang.CharSequence) charBuffer46);
        java.util.regex.Matcher matcher49 = null; // flaky: pattern38.matcher((java.lang.CharSequence) charBuffer46);
        java.nio.ByteBuffer byteBuffer51 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer52 = byteBuffer51.asCharBuffer();
        java.util.regex.Matcher matcher53 = null; // flaky: pattern38.matcher((java.lang.CharSequence) charBuffer52);
        boolean boolean54 = java.util.regex.Pattern.matches("\\QLocation\\E", (java.lang.CharSequence) charBuffer52);
        java.lang.String[] strArray55 = pattern7.split((java.lang.CharSequence) charBuffer52);
        java.lang.String[] strArray57 = null; // flaky: pattern0.split((java.lang.CharSequence) charBuffer52, 80);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer58 = charBuffer52.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-24) + "'", int3 == (-24));
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str4, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern7);
        org.junit.Assert.assertEquals(pattern7.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern8);
// flaky:         org.junit.Assert.assertEquals(pattern8.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(charBuffer12);
// flaky:         org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(matcher14);
        org.junit.Assert.assertEquals(matcher14.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher16);
        org.junit.Assert.assertEquals(matcher16.toString(), "java.util.regex.Matcher[pattern=hi! region=0,7 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern19);
        org.junit.Assert.assertEquals(pattern19.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(floatBuffer30);
        org.junit.Assert.assertNotNull(charBuffer31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(matcher34);
        org.junit.Assert.assertEquals(matcher34.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(pattern38);
// flaky:         org.junit.Assert.assertEquals(pattern38.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern41);
        org.junit.Assert.assertEquals(pattern41.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern42);
// flaky:         org.junit.Assert.assertEquals(pattern42.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(charBuffer46);
// flaky:         org.junit.Assert.assertNotNull(strStream47);
        org.junit.Assert.assertNotNull(matcher48);
        org.junit.Assert.assertEquals(matcher48.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher49);
// flaky:         org.junit.Assert.assertEquals(matcher49.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(charBuffer52);
// flaky:         org.junit.Assert.assertNotNull(matcher53);
// flaky:         org.junit.Assert.assertEquals(matcher53.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray55);
// flaky:         org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test03892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03892");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(0);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ShortBuffer shortBuffer3 = byteBuffer1.asShortBuffer();
        // The following exception was thrown during execution in test generation
        try {
            short short5 = byteBuffer1.getShort(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
    }

    @Test
    public void test03893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03893");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer5.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer5.putDouble((double) 'a');
        int int27 = byteBuffer26.limit();
        java.nio.IntBuffer intBuffer28 = byteBuffer26.asIntBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(intBuffer28);
    }

    @Test
    public void test03894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03894");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str14 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry17 = response15.scanHeaders("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.jsoup.Connection.Request request18 = null;
        response15.req = request18;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strEntry17);
    }

    @Test
    public void test03895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03895");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("\\Q\\Q\\E\\\\E\\Q\\E", (-6));
        java.lang.String str3 = null; // flaky: pattern2.pattern();
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern10 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = null; // flaky: pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher17 = pattern10.matcher((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher18 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer15);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer21 = byteBuffer20.asCharBuffer();
        java.util.regex.Matcher matcher22 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer21);
        boolean boolean23 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (java.lang.CharSequence) charBuffer21);
        java.lang.String[] strArray24 = null; // flaky: pattern2.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\Q\\E\\\\E\\Q\\E");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\\Q\\Q\\E\\\\E\\Q\\E" + "'", str3, "\\Q\\Q\\E\\\\E\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern10);
        org.junit.Assert.assertEquals(pattern10.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern11);
// flaky:         org.junit.Assert.assertEquals(pattern11.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
// flaky:         org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(matcher17);
        org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher18);
// flaky:         org.junit.Assert.assertEquals(matcher18.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
// flaky:         org.junit.Assert.assertNotNull(matcher22);
// flaky:         org.junit.Assert.assertEquals(matcher22.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray24);
    }

    @Test
    public void test03896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03896");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response5.contentType();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = response5.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test03897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03897");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer11.putLong((long) (byte) 10);
        boolean boolean35 = byteBuffer11.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test03898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03898");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        int int16 = response11.numRedirects;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.lang.String str19 = response17.getHeaderCaseInsensitive("\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response17);
        org.jsoup.Connection.Request request21 = null;
        response17.req = request21;
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response24 = response17.url(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test03899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03899");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer14.putChar('a');
        double double21 = byteBuffer19.getDouble(12);
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.put(byteArray30);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer27.get(byteArray40, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer19.put(byteArray40);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.wrap(byteArray40);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer8.get(byteArray40);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer47.putInt(0, 76);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 7.565251118924485E-307d + "'", double21 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
    }

    @Test
    public void test03900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03900");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer25 = byteBuffer24.mark();
        boolean boolean26 = byteBuffer24.isDirect();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putLong((long) (short) 0);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        int int34 = byteBuffer32.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer40.get(byteArray53, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer32.get(byteArray53);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer24.get(byteArray53);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer24.putFloat(80, (float) 0);
        java.nio.IntBuffer intBuffer63 = byteBuffer62.asIntBuffer();
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.putChar(8, '4');
        java.nio.Buffer buffer67 = byteBuffer66.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(intBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(buffer67);
    }

    @Test
    public void test03901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03901");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        int int2 = byteBuffer1.arrayOffset();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) (short) 1);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer1.asDoubleBuffer();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = byteBuffer1.getLong((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
    }

    @Test
    public void test03902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03902");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long27 = byteBuffer26.getLong();
        int int28 = byteBuffer26.position();
        float float30 = byteBuffer26.getFloat((int) (short) 10);
        boolean boolean31 = byteBuffer26.hasArray();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer26.putFloat((float) (-24));
        response24.byteData = byteBuffer26;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response24);
        org.jsoup.helper.HttpConnection.Response response36 = new org.jsoup.helper.HttpConnection.Response(response35);
        int int37 = response35.statusCode;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 0.0f + "'", float30 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test03903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03903");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern3 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer7 = byteBuffer6.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream8 = null; // flaky: pattern3.splitAsStream((java.lang.CharSequence) charBuffer7);
        java.util.regex.Matcher matcher9 = pattern2.matcher((java.lang.CharSequence) charBuffer7);
        java.util.regex.Matcher matcher11 = pattern2.matcher((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.util.function.Predicate<java.lang.String> strPredicate12 = pattern2.asPredicate();
        java.lang.String str13 = pattern2.pattern();
        java.util.regex.Pattern pattern15 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern15;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern15;
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        org.jsoup.helper.HttpConnection.Response response28 = null;
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response28);
        response29.contentType = "";
        boolean boolean32 = byteBuffer27.equals((java.lang.Object) "");
        double double34 = byteBuffer27.getDouble(0);
        java.nio.CharBuffer charBuffer35 = byteBuffer27.asCharBuffer();
        java.util.regex.Matcher matcher36 = null; // flaky: pattern15.matcher((java.lang.CharSequence) charBuffer35);
        boolean boolean37 = java.util.regex.Pattern.matches("\\Qhi!\\E", (java.lang.CharSequence) charBuffer35);
        java.util.regex.Matcher matcher38 = pattern2.matcher((java.lang.CharSequence) charBuffer35);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern3);
// flaky:         org.junit.Assert.assertEquals(pattern3.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
// flaky:         org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(matcher9);
        org.junit.Assert.assertEquals(matcher9.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher11);
        org.junit.Assert.assertEquals(matcher11.toString(), "java.util.regex.Matcher[pattern=hi! region=0,49 lastmatch=]");
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern15);
// flaky:         org.junit.Assert.assertEquals(pattern15.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2.57E-322d + "'", double34 == 2.57E-322d);
        org.junit.Assert.assertNotNull(charBuffer35);
// flaky:         org.junit.Assert.assertNotNull(matcher36);
// flaky:         org.junit.Assert.assertEquals(matcher36.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,43 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matcher38);
        org.junit.Assert.assertEquals(matcher38.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
    }

    @Test
    public void test03904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03904");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.Connection.Response response9 = response1.removeHeader("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        int int10 = response1.statusCode;
        int int11 = response1.statusCode();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test03905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03905");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putChar('4');
        char char11 = byteBuffer1.getChar();
        java.nio.Buffer buffer12 = byteBuffer1.flip();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = byteBuffer1.getLong(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
        org.junit.Assert.assertNotNull(buffer12);
    }

    @Test
    public void test03906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03906");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.duplicate();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.duplicate();
        int int17 = byteBuffer16.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 24 + "'", int17 == 24);
    }

    @Test
    public void test03907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03907");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        boolean boolean37 = byteBuffer32.isReadOnly();
        java.nio.CharBuffer charBuffer38 = byteBuffer32.asCharBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer40 = byteBuffer32.putFloat((float) 23);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charBuffer38);
    }

    @Test
    public void test03908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03908");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.DoubleBuffer doubleBuffer28 = byteBuffer1.asDoubleBuffer();
        boolean boolean29 = byteBuffer1.hasRemaining();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer32 = byteBuffer1.putLong((int) '\u4120', (long) 43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test03909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03909");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.duplicate();
        long long16 = byteBuffer15.getLong();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.put((byte) 100);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putInt((int) '#');
        float float28 = byteBuffer26.getFloat(4);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer26.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = java.nio.ByteBuffer.wrap(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer15.put(byteArray70);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 7.3E-44f + "'", float28 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
    }

    @Test
    public void test03910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03910");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response10.cookies();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test03911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03911");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=82 lim=100 cap=100]", (-8));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-8");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=40394]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03912");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry6 = response1.scanHeaders("\\QLocation\\E");
        response1.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.lang.String str13 = response11.cookie("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry6);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test03913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03913");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) (short) 100);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putDouble(32, (double) 1.0f);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer1.putInt(28);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer9 = byteBuffer1.limit(1493172224);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test03914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03914");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        boolean boolean9 = response6.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.lang.String str11 = response10.contentType;
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long23 = byteBuffer22.getLong();
        int int24 = byteBuffer22.position();
        float float26 = byteBuffer22.getFloat((int) (short) 10);
        boolean boolean27 = byteBuffer22.hasArray();
        double double28 = byteBuffer22.getDouble();
        short short30 = byteBuffer22.getShort(0);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        boolean boolean41 = byteBuffer36.hasArray();
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.putInt(0);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.put(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer47.get(byteArray60, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer66.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.putInt(0);
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.put(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer76.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer80 = byteBuffer76.putInt(0);
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer84 = byteBuffer80.put(byteArray83);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer70.get(byteArray83, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer64.put(byteArray83);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer36.put(byteArray83);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer22.get(byteArray83);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer18.put(byteArray83);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer91.compact();
        boolean boolean93 = byteBuffer92.isDirect();
        java.nio.ByteBuffer byteBuffer94 = byteBuffer92.asReadOnlyBuffer();
        response12.byteData = byteBuffer94;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(byteBuffer94);
    }

    @Test
    public void test03915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03915");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = byteBuffer10.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
    }

    @Test
    public void test03916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03916");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response9 = response1.header("Location", "");
        org.jsoup.Connection.Response response12 = response1.header("\\Q\\E", "\\QLocation\\E");
        response1.executed = false;
        org.jsoup.Connection.Method method15 = response1.method();
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(method15);
    }

    @Test
    public void test03917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03917");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        java.nio.ByteBuffer byteBuffer9 = response1.byteData;
        org.jsoup.Connection.Method method10 = response1.method();
        java.lang.String str11 = response1.statusMessage;
        java.lang.String str13 = response1.cookie("hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test03918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03918");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        java.net.URL uRL14 = response1.url();
        org.jsoup.Connection.Response response16 = response1.removeCookie("\\Q\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(uRL14);
        org.junit.Assert.assertNotNull(response16);
    }

    @Test
    public void test03919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03919");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder13 = byteBuffer12.order();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer12.putInt(1);
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        float float18 = byteBuffer15.getFloat((int) (byte) 66);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
    }

    @Test
    public void test03920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03920");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Response response11 = response7.removeCookie("Location");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str13 = response7.contentType;
        java.lang.String str15 = response7.getHeaderCaseInsensitive("\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response16 = org.jsoup.helper.HttpConnection.Response.execute(request0, response7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test03921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03921");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer15 = byteBuffer5.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putInt((int) '#');
        byte byte25 = byteBuffer21.get(1);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer21.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer21.slice();
        int int30 = byteBuffer29.remaining();
        int int31 = byteBuffer5.compareTo(byteBuffer29);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long34 = byteBuffer33.getLong();
        int int35 = byteBuffer33.position();
        float float37 = byteBuffer33.getFloat((int) (short) 10);
        boolean boolean38 = byteBuffer33.hasArray();
        double double39 = byteBuffer33.getDouble();
        short short41 = byteBuffer33.getShort(0);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer33.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer33.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.duplicate();
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.slice();
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer46.get(byteArray57);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer29.get(byteArray57);
        int int61 = byteBuffer29.capacity();
        java.nio.DoubleBuffer doubleBuffer62 = byteBuffer29.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 84 + "'", int30 == 84);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 84 + "'", int61 == 84);
        org.junit.Assert.assertNotNull(doubleBuffer62);
    }

    @Test
    public void test03922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03922");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        double double12 = byteBuffer11.getDouble();
        int int14 = byteBuffer11.getInt(84);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer11.putInt(0);
        int int17 = byteBuffer11.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.43230922487E-312d + "'", double12 == 5.43230922487E-312d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test03923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03923");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        char char12 = byteBuffer11.getChar();
        byte byte14 = byteBuffer11.get(64);
        java.util.regex.Pattern pattern15 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern15;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern15;
        int int18 = 0; // flaky: pattern15.flags();
        java.lang.String str19 = null; // flaky: pattern15.pattern();
        java.util.function.Predicate<java.lang.String> strPredicate20 = pattern15.asPredicate();
        boolean boolean21 = byteBuffer11.equals((java.lang.Object) pattern15);
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocate((int) '\n');
        byte[] byteArray24 = byteBuffer23.array();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer11.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.putFloat(88, (float) 83);
        int int29 = byteBuffer28.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
        org.junit.Assert.assertNotNull(pattern15);
        org.junit.Assert.assertEquals(pattern15.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 26 + "'", int29 == 26);
    }

    @Test
    public void test03924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03924");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt((int) (short) 1, (-24));
        java.nio.ByteBuffer byteBuffer33 = byteBuffer30.putFloat(88, (float) 58);
        // The following exception was thrown during execution in test generation
        try {
            char char35 = byteBuffer33.getChar((-24));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
    }

    @Test
    public void test03925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03925");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response5.contentType();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        boolean boolean14 = response11.hasHeaderWithValue("\\Qjava.nio.DirectByteBuffer[pos=0 lim=22 cap=100]\\E", "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test03926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03926");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        java.lang.String str9 = response1.statusMessage();
        response1.statusCode = (byte) -1;
        org.jsoup.Connection.Method method12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response13 = response1.method(method12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test03927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03927");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = socketFactory0.createSocket(inetAddress9, 12, inetAddress11, (-52));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03928");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response9 = response1.header("Location", "");
        org.jsoup.Connection.Response response12 = response1.header("\\Q\\E", "\\QLocation\\E");
        org.jsoup.Connection.Method method13 = response1.method();
        int int14 = response1.statusCode();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document15 = response1.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03929");
        java.util.regex.Pattern pattern1 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern1;
        java.util.regex.Pattern pattern4 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.util.regex.Pattern pattern7 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate8 = pattern7.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate9 = pattern7.asPredicate();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        java.nio.Buffer buffer17 = byteBuffer11.limit(32);
        java.nio.CharBuffer charBuffer18 = byteBuffer11.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream19 = pattern7.splitAsStream((java.lang.CharSequence) charBuffer18);
        java.util.stream.Stream<java.lang.String> strStream20 = pattern4.splitAsStream((java.lang.CharSequence) charBuffer18);
        java.util.stream.Stream<java.lang.String> strStream21 = null; // flaky: pattern1.splitAsStream((java.lang.CharSequence) charBuffer18);
        boolean boolean22 = java.util.regex.Pattern.matches("\\Qjava.nio.HeapByteBuffer[pos=0 lim=52 cap=52]\\E", (java.lang.CharSequence) charBuffer18);
// flaky:         org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern4);
        org.junit.Assert.assertEquals(pattern4.toString(), "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern7);
        org.junit.Assert.assertEquals(pattern7.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(buffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(strStream20);
// flaky:         org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03930");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response10.cookies();
        boolean boolean13 = response10.executed;
        boolean boolean15 = response10.hasCookie("java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]");
        int int16 = response10.numRedirects;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test03931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03931");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        int int8 = response1.statusCode;
        java.lang.String str10 = response1.cookie("\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E");
        java.lang.String str11 = response1.contentType();
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response13 = response1.url(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test03932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03932");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        java.lang.String[] strArray8 = pattern2.split((java.lang.CharSequence) "hi!", (-84));
        int int9 = pattern2.flags();
        int int10 = pattern2.flags();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern13 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=0 lim=22 cap=100]");
        java.util.function.Predicate<java.lang.String> strPredicate14 = pattern13.asPredicate();
        java.util.regex.Pattern pattern17 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern18 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern18;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer22 = byteBuffer21.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream23 = pattern18.splitAsStream((java.lang.CharSequence) charBuffer22);
        java.util.regex.Matcher matcher24 = pattern17.matcher((java.lang.CharSequence) charBuffer22);
        java.lang.String str25 = pattern17.pattern();
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long28 = byteBuffer27.getLong();
        int int29 = byteBuffer27.position();
        float float31 = byteBuffer27.getFloat((int) (short) 10);
        boolean boolean32 = byteBuffer27.hasArray();
        double double33 = byteBuffer27.getDouble();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer27.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer37 = byteBuffer27.asCharBuffer();
        java.lang.String[] strArray39 = pattern17.split((java.lang.CharSequence) charBuffer37, (int) '#');
        java.util.regex.Pattern pattern42 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate43 = pattern42.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate44 = pattern42.asPredicate();
        java.util.regex.Pattern pattern47 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate48 = pattern47.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate49 = pattern47.asPredicate();
        java.nio.ByteBuffer byteBuffer51 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer51.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.putInt(0);
        java.nio.Buffer buffer57 = byteBuffer51.limit(32);
        java.nio.CharBuffer charBuffer58 = byteBuffer51.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream59 = pattern47.splitAsStream((java.lang.CharSequence) charBuffer58);
        java.util.stream.Stream<java.lang.String> strStream60 = pattern42.splitAsStream((java.lang.CharSequence) charBuffer58);
        java.util.regex.Pattern pattern61 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern61;
        java.util.function.Predicate<java.lang.String> strPredicate63 = pattern61.asPredicate();
        int int64 = pattern61.flags();
        java.util.regex.Pattern pattern65 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern65;
        java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer69 = byteBuffer68.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream70 = pattern65.splitAsStream((java.lang.CharSequence) charBuffer69);
        java.lang.String[] strArray72 = pattern61.split((java.lang.CharSequence) charBuffer69, (int) (byte) 0);
        java.lang.String[] strArray74 = pattern42.split((java.lang.CharSequence) charBuffer69, (int) (short) 0);
        java.util.regex.Matcher matcher75 = pattern17.matcher((java.lang.CharSequence) charBuffer69);
        java.util.stream.Stream<java.lang.String> strStream76 = pattern13.splitAsStream((java.lang.CharSequence) charBuffer69);
        java.util.stream.Stream<java.lang.String> strStream77 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer69);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(pattern13);
        org.junit.Assert.assertEquals(pattern13.toString(), "java.nio.DirectByteBuffer[pos=0 lim=22 cap=100]");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(pattern17);
        org.junit.Assert.assertEquals(pattern17.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern18);
        org.junit.Assert.assertEquals(pattern18.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertNotNull(matcher24);
        org.junit.Assert.assertEquals(matcher24.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(charBuffer37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(pattern42);
        org.junit.Assert.assertEquals(pattern42.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(strPredicate44);
        org.junit.Assert.assertNotNull(pattern47);
        org.junit.Assert.assertEquals(pattern47.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate48);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(buffer57);
        org.junit.Assert.assertNotNull(charBuffer58);
        org.junit.Assert.assertNotNull(strStream59);
        org.junit.Assert.assertNotNull(strStream60);
        org.junit.Assert.assertNotNull(pattern61);
        org.junit.Assert.assertEquals(pattern61.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strPredicate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(pattern65);
        org.junit.Assert.assertEquals(pattern65.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(charBuffer69);
        org.junit.Assert.assertNotNull(strStream70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(matcher75);
        org.junit.Assert.assertEquals(matcher75.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream76);
        org.junit.Assert.assertNotNull(strStream77);
    }

    @Test
    public void test03933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03933");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.FloatBuffer floatBuffer16 = byteBuffer9.asFloatBuffer();
        int int17 = byteBuffer9.capacity();
        java.nio.DoubleBuffer doubleBuffer18 = byteBuffer9.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer20.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.duplicate();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putShort((short) 100);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        float float36 = byteBuffer34.getFloat(4);
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer38.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.putInt(0);
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.put(byteArray45);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer48.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.putInt(0);
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.put(byteArray55);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer42.get(byteArray55, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer61 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer61.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer65 = byteBuffer61.putInt(0);
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.put(byteArray68);
        java.nio.ByteBuffer byteBuffer71 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer71.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.putInt(0);
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer79 = byteBuffer75.put(byteArray78);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer65.get(byteArray78, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer59.put(byteArray78);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer34.put(byteArray78);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer26.put(byteArray78);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer9.put(byteArray78);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer86.putFloat(100.0f);
        char char90 = byteBuffer88.getChar(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertNotNull(doubleBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 7.3E-44f + "'", float36 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertTrue("'" + char90 + "' != '" + '\000' + "'", char90 == '\000');
    }

    @Test
    public void test03934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03934");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        boolean boolean21 = response1.hasCookie("\\Qhi!\\E");
        int int22 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean25 = response1.hasCookie("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry27 = response1.scanHeaders("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        response1.statusCode = (-1);
        boolean boolean30 = response1.executed;
        response1.numRedirects = 75;
        java.lang.String str33 = response1.charset;
        java.lang.String str34 = response1.contentType;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strEntry27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test03935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03935");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer25 = byteBuffer24.mark();
        boolean boolean26 = byteBuffer24.isDirect();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putLong((long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer30 = byteBuffer24.limit((-16));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteBuffer28);
    }

    @Test
    public void test03936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03936");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request7 = null;
        response6.req = request7;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document9 = response6.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test03937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03937");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer3.putDouble(6.577E-320d);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer6 = byteBuffer5.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
    }

    @Test
    public void test03938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03938");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        boolean boolean21 = response1.hasCookie("\\Qhi!\\E");
        int int22 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int24 = response23.statusCode();
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.net.HttpURLConnection httpURLConnection26 = null;
        org.jsoup.helper.HttpConnection.Response response27 = null;
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response27);
        response28.contentType = "";
        java.lang.String str32 = response28.cookie("hi!");
        int int33 = response28.statusCode();
        java.lang.String str35 = response28.getHeaderCaseInsensitive("\\Qhi!\\E");
        java.lang.String str37 = response28.header("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        java.lang.String str38 = response28.contentType;
        org.jsoup.Connection.Response response41 = response28.header("\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E", "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response42 = new org.jsoup.helper.HttpConnection.Response(response28);
        org.jsoup.Connection.Response response44 = response42.removeHeader("\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        // The following exception was thrown during execution in test generation
        try {
            response25.setupFromConnection(httpURLConnection26, response44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(response41);
        org.junit.Assert.assertNotNull(response44);
    }

    @Test
    public void test03939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03939");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket(inetAddress9, (int) '\uffff');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03940");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.Connection.Method method20 = response1.method();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.put((byte) 10);
        java.nio.Buffer buffer34 = byteBuffer30.position((int) ' ');
        java.nio.Buffer buffer35 = byteBuffer30.rewind();
        response1.byteData = byteBuffer30;
        boolean boolean39 = response1.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", "\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        java.lang.String str40 = response1.contentType();
        int int41 = response1.numRedirects;
        org.jsoup.Connection.Request request42 = null;
        response1.req = request42;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(buffer34);
        org.junit.Assert.assertNotNull(buffer35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test03941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03941");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(86);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test03942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03942");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        float float11 = byteBuffer10.getFloat();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.FloatBuffer floatBuffer22 = byteBuffer17.asFloatBuffer();
        boolean boolean23 = byteBuffer17.isDirect();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        org.jsoup.helper.HttpConnection.Response response34 = null;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response34);
        response35.contentType = "";
        boolean boolean38 = byteBuffer33.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putInt((int) '#');
        int int47 = byteBuffer33.compareTo(byteBuffer44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer17.put(byteBuffer44);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer10.put(byteBuffer17);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer49.compact();
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putInt(18);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer55 = byteBuffer52.putChar((int) (short) -1, '\000');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(floatBuffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
    }

    @Test
    public void test03943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03943");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        org.jsoup.Connection.Method method8 = response5.method();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long11 = byteBuffer10.getLong();
        int int12 = byteBuffer10.position();
        response5.byteData = byteBuffer10;
        java.lang.String str15 = response5.cookie("\\Q\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test03944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03944");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.statusMessage = "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]";
        int int9 = response1.statusCode();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.executed = true;
        int int13 = response1.statusCode;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test03945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03945");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.duplicate();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer14.get(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = byteBuffer14.getLong((-11));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer27);
    }

    @Test
    public void test03946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03946");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.Connection.Response response7 = response2.removeCookie("hi!");
        java.lang.String str8 = response2.statusMessage();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        boolean boolean19 = byteBuffer14.hasArray();
        response2.byteData = byteBuffer14;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response2);
        boolean boolean22 = response21.executed;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response21);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response21);
        boolean boolean26 = response24.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        response24.charset = "Location";
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response24);
        org.jsoup.helper.HttpConnection.Response response30 = new org.jsoup.helper.HttpConnection.Response(response29);
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response30);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response32 = org.jsoup.helper.HttpConnection.Response.execute(request0, response30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03947");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        int int16 = response11.numRedirects;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.lang.String str19 = response17.getHeaderCaseInsensitive("\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E");
        java.net.URL uRL20 = response17.url();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(uRL20);
    }

    @Test
    public void test03948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03948");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer17 = byteBuffer9.putShort(92, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer9.putFloat(85, (float) 128);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer33 = byteBuffer9.put(byteArray29, 23, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
    }

    @Test
    public void test03949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03949");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response10.cookies();
        java.lang.String str14 = response10.header("\\Q\\Qhi!\\E\\\\E\\Q\\E");
        org.jsoup.Connection.Response response17 = response10.cookie("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E", "\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E");
        java.net.URL uRL18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response19 = response10.url(uRL18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(response17);
    }

    @Test
    public void test03950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03950");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        boolean boolean12 = byteBuffer1.isDirect();
        float float14 = byteBuffer1.getFloat(6);
        char char15 = byteBuffer1.getChar();
        java.nio.Buffer buffer16 = byteBuffer1.mark();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer1.putInt(6);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer1.putChar(12, '\u4120');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer21);
    }

    @Test
    public void test03951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03951");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer5.putDouble(100.0d);
        int int25 = byteBuffer24.limit();
        char char27 = byteBuffer24.getChar(88);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer30 = byteBuffer24.putChar((-10), '\uffff');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
    }

    @Test
    public void test03952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03952");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        java.nio.Buffer buffer25 = byteBuffer22.flip();
        short short26 = byteBuffer22.getShort();
        java.nio.ShortBuffer shortBuffer27 = byteBuffer22.asShortBuffer();
        // The following exception was thrown during execution in test generation
        try {
            char char29 = byteBuffer22.getChar(76);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer27);
    }

    @Test
    public void test03953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03953");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putInt((int) '#');
        int int23 = byteBuffer9.compareTo(byteBuffer20);
        java.nio.IntBuffer intBuffer24 = byteBuffer20.asIntBuffer();
        java.nio.Buffer buffer25 = intBuffer24.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(intBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
    }

    @Test
    public void test03954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03954");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer7.putFloat(88, 100.0f);
        java.nio.Buffer buffer13 = byteBuffer12.clear();
        int int14 = byteBuffer12.limit();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putShort((short) (byte) 10);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer24.compact();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer24.put((byte) 10);
        char char28 = byteBuffer27.getChar();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer27.putChar('#');
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.FloatBuffer floatBuffer41 = byteBuffer36.asFloatBuffer();
        boolean boolean42 = byteBuffer36.isDirect();
        java.nio.ByteBuffer byteBuffer45 = byteBuffer36.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer46 = byteBuffer36.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer48.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.putInt(0);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putInt((int) '#');
        byte byte56 = byteBuffer52.get(1);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer52.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer52.slice();
        int int61 = byteBuffer60.remaining();
        int int62 = byteBuffer36.compareTo(byteBuffer60);
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long65 = byteBuffer64.getLong();
        int int66 = byteBuffer64.position();
        float float68 = byteBuffer64.getFloat((int) (short) 10);
        boolean boolean69 = byteBuffer64.hasArray();
        double double70 = byteBuffer64.getDouble();
        short short72 = byteBuffer64.getShort(0);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer64.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer64.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer77.duplicate();
        java.nio.ByteBuffer byteBuffer79 = byteBuffer77.slice();
        java.nio.ByteBuffer byteBuffer81 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer81.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer85 = byteBuffer81.putInt(0);
        byte[] byteArray88 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer89 = byteBuffer85.put(byteArray88);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer77.get(byteArray88);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer60.get(byteArray88);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer30.get(byteArray88);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer12.get(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer96 = java.nio.ByteBuffer.wrap(byteArray88, (-67), 86);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(floatBuffer41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(doubleBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 0 + "'", byte56 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 84 + "'", int61 == 84);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + short72 + "' != '" + (short) 0 + "'", short72 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
    }

    @Test
    public void test03955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03955");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int7 = response6.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response6.scanHeaders("Location");
        java.lang.String str10 = response6.charset;
        int int11 = response6.numRedirects;
        boolean boolean13 = response6.hasCookie("java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.net.URL uRL15 = response14.url();
        org.jsoup.Connection.Request request16 = response14.req;
        org.jsoup.Connection.Request request17 = response14.req;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(uRL15);
        org.junit.Assert.assertNull(request16);
        org.junit.Assert.assertNull(request17);
    }

    @Test
    public void test03956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03956");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Response response14 = response12.removeHeader("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        java.lang.String str15 = response12.contentType;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test03957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03957");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean7 = response1.hasHeader("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request9 = null;
        response8.req = request9;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = response8.headers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test03958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03958");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        int int6 = pattern2.flags();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern9 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern9;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern9;
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        double double28 = byteBuffer21.getDouble(0);
        java.nio.CharBuffer charBuffer29 = byteBuffer21.asCharBuffer();
        java.util.regex.Matcher matcher30 = pattern9.matcher((java.lang.CharSequence) charBuffer29);
        boolean boolean31 = java.util.regex.Pattern.matches("\\Qhi!\\E", (java.lang.CharSequence) charBuffer29);
        java.util.regex.Matcher matcher32 = pattern2.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(pattern9);
        org.junit.Assert.assertEquals(pattern9.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2.57E-322d + "'", double28 == 2.57E-322d);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(matcher30);
        org.junit.Assert.assertEquals(matcher30.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matcher32);
        org.junit.Assert.assertEquals(matcher32.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,7 lastmatch=]");
    }

    @Test
    public void test03959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03959");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        boolean boolean13 = byteBuffer5.isDirect();
        java.nio.Buffer buffer14 = byteBuffer5.flip();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        int int18 = byteBuffer16.position();
        float float20 = byteBuffer16.getFloat((int) (short) 10);
        boolean boolean21 = byteBuffer16.hasArray();
        double double22 = byteBuffer16.getDouble();
        short short24 = byteBuffer16.getShort(0);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.put(byteArray33);
        boolean boolean35 = byteBuffer30.hasArray();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer41.get(byteArray54, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.putInt(0);
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.put(byteArray77);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer64.get(byteArray77, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer58.put(byteArray77);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer30.put(byteArray77);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer16.get(byteArray77);
        java.nio.ByteOrder byteOrder85 = byteBuffer84.order();
        java.nio.ByteBuffer byteBuffer86 = byteBuffer5.order(byteOrder85);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer5.asReadOnlyBuffer();
        int int88 = byteBuffer5.limit();
        boolean boolean89 = byteBuffer5.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 0 + "'", short24 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteOrder85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 14 + "'", int88 == 14);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test03960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03960");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.Connection.Request request11 = null;
        response10.req = request11;
        response10.numRedirects = (-52);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.Connection.Method method16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response17 = response10.method(method16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
    }

    @Test
    public void test03961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03961");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        response1.statusMessage = "\\Qhi!\\E";
        response1.contentType = "\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E";
        java.lang.String str12 = response1.contentType;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E" + "'", str12, "\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E");
    }

    @Test
    public void test03962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03962");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.CharBuffer charBuffer16 = byteBuffer9.asCharBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer9.putChar('a');
        double double19 = byteBuffer9.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test03963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03963");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response10.headers();
        int int13 = response10.statusCode();
        response10.statusCode = 90;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test03964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03964");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        byte byte13 = byteBuffer1.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
    }

    @Test
    public void test03965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03965");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer10.putInt((-24));
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putInt((int) ' ');
        org.jsoup.helper.HttpConnection.Response response18 = null;
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        java.lang.String str21 = response19.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.Connection.Response response24 = response19.removeCookie("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        java.lang.String str26 = response19.header("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        boolean boolean27 = byteBuffer15.equals((java.lang.Object) str26);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(response24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test03966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03966");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.numRedirects = 83;
        int int12 = response1.statusCode;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response1.cookies();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test03967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03967");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long27 = byteBuffer26.getLong();
        int int28 = byteBuffer26.position();
        float float30 = byteBuffer26.getFloat((int) (short) 10);
        boolean boolean31 = byteBuffer26.hasArray();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer26.putFloat((float) (-24));
        response24.byteData = byteBuffer26;
        java.nio.ByteBuffer byteBuffer37 = byteBuffer26.putDouble(88, 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer40 = byteBuffer26.putInt(3407872, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 0.0f + "'", float30 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer37);
    }

    @Test
    public void test03968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03968");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = response1.headers();
        boolean boolean16 = response1.executed;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test03969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03969");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        double double11 = byteBuffer5.getDouble();
        java.nio.IntBuffer intBuffer12 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putShort(0, (short) (byte) 0);
        java.lang.String str16 = byteBuffer15.toString();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.compact();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer15.putChar(18, '4');
        java.nio.Buffer buffer22 = byteBuffer15.mark();
        java.nio.ShortBuffer shortBuffer23 = byteBuffer15.asShortBuffer();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray24 = byteBuffer15.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]" + "'", str16, "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(buffer22);
        org.junit.Assert.assertNotNull(shortBuffer23);
    }

    @Test
    public void test03970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03970");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder13 = byteBuffer12.order();
        char char15 = byteBuffer12.getChar((int) (byte) 1);
        int int17 = byteBuffer12.getInt(83);
        java.nio.DoubleBuffer doubleBuffer18 = byteBuffer12.asDoubleBuffer();
        int int19 = doubleBuffer18.limit();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer21 = doubleBuffer18.position(42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newPosition > limit: (42 > 10)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(doubleBuffer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test03971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03971");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        java.util.function.Predicate<java.lang.String> strPredicate1 = pattern0.asPredicate();
        int int2 = pattern0.flags();
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern0.asPredicate();
        org.junit.Assert.assertNotNull(pattern0);
        org.junit.Assert.assertEquals(pattern0.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strPredicate1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertNotNull(strPredicate3);
    }

    @Test
    public void test03972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03972");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry16 = response13.scanHeaders("\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response13);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = response17.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNull(strEntry16);
    }

    @Test
    public void test03973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03973");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer10.put(byteBuffer69);
        java.nio.Buffer buffer72 = byteBuffer70.limit(20);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(buffer72);
    }

    @Test
    public void test03974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03974");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.Connection.Response response7 = response5.removeHeader("\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response5.cookie("java.nio.DirectByteBuffer[pos=19 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        response5.charset = "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]";
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test03975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03975");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        boolean boolean7 = response1.hasCookie("hi!");
        response1.statusMessage = "";
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = response10.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03976");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.Buffer buffer7 = byteBuffer1.limit(32);
        java.nio.CharBuffer charBuffer8 = byteBuffer1.asCharBuffer();
        int int9 = byteBuffer1.limit();
        int int10 = byteBuffer1.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
    }

    @Test
    public void test03977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03977");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        response1.executed = true;
        int int11 = response1.numRedirects;
        boolean boolean13 = response1.hasCookie("\\QLocation\\E");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int15 = response14.numRedirects;
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response14);
        java.net.HttpURLConnection httpURLConnection17 = null;
        org.jsoup.helper.HttpConnection.Response response18 = null;
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        response19.contentType = "";
        java.lang.String str22 = response19.contentType;
        response19.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry26 = response19.scanHeaders("");
        java.lang.String str28 = response19.getHeaderCaseInsensitive("Location");
        java.lang.String str29 = response19.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = response19.cookies();
        java.lang.String str32 = response19.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response33 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.helper.HttpConnection.Response response34 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.Connection.Response response36 = response34.removeHeader("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response34);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = response37.cookies();
        org.jsoup.helper.HttpConnection.Response response39 = new org.jsoup.helper.HttpConnection.Response(response37);
        boolean boolean42 = response37.hasHeaderWithValue("java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]", "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.jsoup.helper.HttpConnection.Response response43 = new org.jsoup.helper.HttpConnection.Response(response37);
        // The following exception was thrown during execution in test generation
        try {
            response14.setupFromConnection(httpURLConnection17, (org.jsoup.Connection.Response) response37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strEntry26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(response36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test03978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03978");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response6.scanHeaders("hi!");
        java.lang.String str9 = response6.statusMessage;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = response10.headers();
        java.lang.String str12 = response10.charset;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response13 = org.jsoup.helper.HttpConnection.Response.execute(request0, response10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test03979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03979");
        java.util.regex.Pattern pattern3 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern6 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer8.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.putInt(0);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.put(byteArray15);
        java.nio.CharBuffer charBuffer17 = byteBuffer12.asCharBuffer();
        java.util.regex.Matcher matcher18 = pattern6.matcher((java.lang.CharSequence) charBuffer17);
        java.util.stream.Stream<java.lang.String> strStream19 = null; // flaky: pattern3.splitAsStream((java.lang.CharSequence) charBuffer17);
        java.util.regex.Pattern pattern22 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern23 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern23;
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer27 = byteBuffer26.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream28 = pattern23.splitAsStream((java.lang.CharSequence) charBuffer27);
        java.util.regex.Matcher matcher29 = pattern22.matcher((java.lang.CharSequence) charBuffer27);
        java.util.regex.Matcher matcher31 = pattern22.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        java.util.regex.Pattern pattern34 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.FloatBuffer floatBuffer45 = byteBuffer40.asFloatBuffer();
        java.nio.CharBuffer charBuffer46 = byteBuffer40.asCharBuffer();
        java.lang.String[] strArray48 = pattern34.split((java.lang.CharSequence) charBuffer46, (-10));
        java.util.regex.Matcher matcher49 = pattern22.matcher((java.lang.CharSequence) charBuffer46);
        java.util.regex.Matcher matcher50 = null; // flaky: pattern3.matcher((java.lang.CharSequence) charBuffer46);
        java.nio.Buffer buffer51 = charBuffer46.flip();
        boolean boolean52 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=82 lim=100 cap=100]", (java.lang.CharSequence) charBuffer46);
// flaky:         org.junit.Assert.assertNotNull(pattern3);
// flaky:         org.junit.Assert.assertEquals(pattern3.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern6);
        org.junit.Assert.assertEquals(pattern6.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(matcher18);
        org.junit.Assert.assertEquals(matcher18.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(pattern22);
        org.junit.Assert.assertEquals(pattern22.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern23);
        org.junit.Assert.assertEquals(pattern23.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(matcher29);
        org.junit.Assert.assertEquals(matcher29.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher31);
        org.junit.Assert.assertEquals(matcher31.toString(), "java.util.regex.Matcher[pattern=hi! region=0,7 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern34);
        org.junit.Assert.assertEquals(pattern34.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(floatBuffer45);
        org.junit.Assert.assertNotNull(charBuffer46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(matcher49);
        org.junit.Assert.assertEquals(matcher49.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher50);
// flaky:         org.junit.Assert.assertEquals(matcher50.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=24 lim=100 cap=100] region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(buffer51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test03980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03980");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "java.nio.DirectByteBuffer[pos=82 lim=100 cap=100]";
    }

    @Test
    public void test03981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03981");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        java.nio.Buffer buffer12 = byteBuffer5.flip();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putDouble((double) 6);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.duplicate();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.compact();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer19 = byteBuffer16.putChar(100, '\u2000');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test03982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03982");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        java.nio.Buffer buffer70 = byteBuffer69.mark();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer69.put((byte) 100);
        float float74 = byteBuffer72.getFloat(50);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray75 = byteBuffer72.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(buffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
    }

    @Test
    public void test03983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03983");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response10.cookies();
        boolean boolean13 = response10.executed;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response10);
        int int17 = response16.statusCode;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test03984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03984");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.IntBuffer intBuffer7 = byteBuffer5.asIntBuffer();
        java.nio.FloatBuffer floatBuffer8 = byteBuffer5.asFloatBuffer();
        int int9 = byteBuffer5.limit();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer11 = byteBuffer5.position((-8));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newPosition < 0: (-8 < 0)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertNotNull(floatBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
    }

    @Test
    public void test03985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03985");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putChar('\n');
        java.nio.CharBuffer charBuffer18 = byteBuffer17.asCharBuffer();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.duplicate();
        java.nio.ByteBuffer byteBuffer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteBuffer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer19);
    }

    @Test
    public void test03986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03986");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        response23.charset = "Location";
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response23);
        int int29 = response23.statusCode;
        java.lang.String str30 = response23.statusMessage;
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response32 = new org.jsoup.helper.HttpConnection.Response(response31);
        java.net.URL uRL33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response34 = response31.url(uRL33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test03987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03987");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        boolean boolean6 = response1.executed;
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str9 = response7.getHeaderCaseInsensitive("Location");
        java.net.HttpURLConnection httpURLConnection10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = null;
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.lang.String str14 = response12.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = response12.cookies();
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response12);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response12);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response17);
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response17);
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.lang.String str22 = response20.statusMessage;
        java.lang.String str24 = response20.getHeaderCaseInsensitive("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response20);
        response25.statusCode = 28;
        // The following exception was thrown during execution in test generation
        try {
            response7.setupFromConnection(httpURLConnection10, (org.jsoup.Connection.Response) response25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test03988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03988");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response11 = response1.removeHeader("Location");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response12.headers();
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response12);
        response14.contentType = "\\Q\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E\\\\E\\Q\\E";
        boolean boolean17 = response14.executed;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03989");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        float float15 = byteBuffer1.getFloat();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer1.put(32, (byte) 1);
        float float19 = byteBuffer1.getFloat();
        // The following exception was thrown during execution in test generation
        try {
            float float21 = byteBuffer1.getFloat((-53));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.0f + "'", float15 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 2.3509887E-38f + "'", float19 == 2.3509887E-38f);
    }

    @Test
    public void test03990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03990");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.lang.String str27 = response23.statusMessage;
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response23);
        int int30 = response23.statusCode;
        response23.statusCode = 0;
        boolean boolean34 = response23.hasCookie("java.nio.DirectByteBuffer[pos=26 lim=100 cap=100]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document35 = response23.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test03991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03991");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.Connection.Response response9 = response1.removeHeader("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str11 = response1.charset;
        int int12 = response1.statusCode();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test03992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03992");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder13 = byteBuffer12.order();
        char char15 = byteBuffer12.getChar((int) (byte) 1);
        char char16 = byteBuffer12.getChar();
        boolean boolean17 = byteBuffer12.hasArray();
        int int18 = byteBuffer12.remaining();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer12.slice();
        int int21 = byteBuffer12.getInt(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + '\000' + "'", char16 == '\000');
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 82 + "'", int18 == 82);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test03993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03993");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket(inetAddress7, 81);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test03994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03994");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        int int26 = byteBuffer22.getInt(0);
        int int27 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer22.putInt(83, (int) (byte) 100);
        java.nio.ShortBuffer shortBuffer31 = byteBuffer30.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(shortBuffer31);
    }

    @Test
    public void test03995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03995");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.Buffer buffer28 = byteBuffer26.clear();
        short short29 = byteBuffer26.getShort();
        java.nio.IntBuffer intBuffer30 = byteBuffer26.asIntBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(buffer28);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 0 + "'", short29 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer30);
    }

    @Test
    public void test03996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03996");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        java.lang.String str6 = response2.charset;
        java.nio.ByteBuffer byteBuffer7 = response2.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response2.headers();
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        int int11 = response9.statusCode;
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response9);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response13 = org.jsoup.helper.HttpConnection.Response.execute(request0, response9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(byteBuffer7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test03997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03997");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer22.putDouble((int) (byte) 66, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer29 = byteBuffer27.position((int) '\u4120');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newPosition > limit: (16672 > 100)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer27);
    }

    @Test
    public void test03998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03998");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        double double11 = byteBuffer5.getDouble();
        java.nio.IntBuffer intBuffer12 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putShort(0, (short) (byte) 0);
        java.lang.String str16 = byteBuffer15.toString();
        java.nio.ShortBuffer shortBuffer17 = byteBuffer15.asShortBuffer();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer15.putLong((int) (byte) 0, (long) 1117126656);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer21 = byteBuffer20.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]" + "'", str16, "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(shortBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer20);
    }

    @Test
    public void test03999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03999");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        boolean boolean21 = response1.hasCookie("\\Qhi!\\E");
        int int22 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean25 = response1.hasCookie("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer27 = response1.byteData;
        response1.executed = false;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteBuffer27);
    }

    @Test
    public void test04000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test04000");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(10);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer7.putChar('a');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer7.putFloat((float) 0L);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer16 = byteBuffer7.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }
}
