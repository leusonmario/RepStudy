import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str9 = response7.getHeaderCaseInsensitive("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]");
        java.lang.String str11 = response7.cookie("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response12 = org.jsoup.helper.HttpConnection.Response.execute(request0, response7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Q\\E", 128);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\E");
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = (-64);
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        boolean boolean21 = response1.hasCookie("\\Qhi!\\E");
        int int22 = response1.numRedirects;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document23 = response1.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        boolean boolean12 = byteBuffer1.isDirect();
        float float14 = byteBuffer1.getFloat(6);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer1.put((byte) 0);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(byteArray35);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer22.get(byteArray35, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer41.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.putInt(0);
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.put(byteArray48);
        java.nio.ByteBuffer byteBuffer51 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer51.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.putInt(0);
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.put(byteArray58);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer45.get(byteArray58, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer39.put(byteArray58);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer39.putShort((short) (byte) 100);
        int int66 = byteBuffer39.limit();
        byte[] byteArray69 = new byte[] { (byte) -1, (byte) -1 };
        java.nio.ByteBuffer byteBuffer70 = byteBuffer39.get(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer71 = byteBuffer1.put(byteBuffer39);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer70);
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E";
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putDouble(8, (double) 256);
        long long16 = byteBuffer14.getLong((int) (short) 1);
        java.nio.ShortBuffer shortBuffer17 = byteBuffer14.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 13376L + "'", long16 == 13376L);
        org.junit.Assert.assertNotNull(shortBuffer17);
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        double double7 = byteBuffer3.getDouble((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer3.putFloat((float) (-84));
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        short short15 = byteBuffer11.getShort(0);
        int int17 = byteBuffer11.getInt((int) '4');
        long long18 = byteBuffer11.getLong();
        java.nio.FloatBuffer floatBuffer19 = byteBuffer11.asFloatBuffer();
        char char20 = byteBuffer11.getChar();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        short short26 = byteBuffer22.getShort(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer22.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer22.putChar('4');
        boolean boolean32 = byteBuffer22.isReadOnly();
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long35 = byteBuffer34.getLong();
        int int36 = byteBuffer34.position();
        float float38 = byteBuffer34.getFloat((int) (short) 10);
        boolean boolean39 = byteBuffer34.hasArray();
        java.nio.ByteBuffer byteBuffer41 = byteBuffer34.putFloat((float) (-24));
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        int int47 = byteBuffer45.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putInt(0);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.put(byteArray56);
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.putInt(0);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.put(byteArray66);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer53.get(byteArray66, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer45.get(byteArray66);
        java.nio.ByteBuffer byteBuffer72 = java.nio.ByteBuffer.wrap(byteArray66);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer34.put(byteArray66);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer22.get(byteArray66);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer11.get(byteArray66);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer3.put(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer78 = byteBuffer3.position((int) '\u0a00');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newPosition > limit: (2560 > 100)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + '\000' + "'", char20 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer12.duplicate();
        java.nio.ShortBuffer shortBuffer14 = byteBuffer13.asShortBuffer();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer13.put((byte) 1);
        short short17 = byteBuffer16.getShort();
        java.nio.Buffer buffer18 = byteBuffer16.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(shortBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(buffer18);
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.duplicate();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer26.putInt(16, 8);
        int int32 = byteBuffer26.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.put((byte) 10);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer7.putInt(22);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer7.putDouble((double) 1);
        java.nio.CharBuffer charBuffer15 = byteBuffer7.asCharBuffer();
        float float17 = byteBuffer7.getFloat(14);
        double double19 = byteBuffer7.getDouble(23);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer16.get(byteArray29, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer39.get(byteArray52, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer33.put(byteArray52);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer5.put(byteArray52);
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.wrap(byteArray52);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.wrap(byteArray52);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        float float11 = byteBuffer10.getFloat();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.FloatBuffer floatBuffer22 = byteBuffer17.asFloatBuffer();
        boolean boolean23 = byteBuffer17.isDirect();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        org.jsoup.helper.HttpConnection.Response response34 = null;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response34);
        response35.contentType = "";
        boolean boolean38 = byteBuffer33.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putInt((int) '#');
        int int47 = byteBuffer33.compareTo(byteBuffer44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer17.put(byteBuffer44);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer10.put(byteBuffer17);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer49.compact();
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putInt(18);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer50.put((int) (byte) 1, (byte) 1);
        java.nio.ByteOrder byteOrder56 = byteBuffer55.order();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(floatBuffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteOrder56);
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(100);
        java.nio.Buffer buffer2 = byteBuffer1.rewind();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(byteBuffer3);
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer22.putDouble(0, (double) 13376L);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer27.slice();
        java.lang.Class<?> wildcardClass29 = byteBuffer28.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = '\u3ff0';
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        java.net.InetAddress inetAddress9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket(inetAddress7, 3407872, inetAddress9, 68);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket6 = socketFactory0.createSocket("", 47, inetAddress4, 18);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.capacity();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.put((byte) 0);
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer8.put(byteArray27);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer32.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(128, (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 128");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer33);
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.Connection.Response response9 = response1.removeHeader("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.Connection.Response response13 = response11.removeHeader("\\Qjava.nio.DirectByteBuffer[pos=19 lim=100 cap=100]\\E");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response15 = response11.removeCookie("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cookie name must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response13);
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        java.lang.String str1 = java.util.regex.Pattern.quote("\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E" + "'", str1, "\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.nio.ByteBuffer byteBuffer9 = response5.byteData;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        response5.statusMessage = "\\QLocation\\E";
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        java.lang.String str15 = response13.charset;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response17 = response13.removeCookie("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cookie name must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.lang.String str7 = response5.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response8.header("Location");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response11 = org.jsoup.helper.HttpConnection.Response.execute(request0, response8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.InetAddress inetAddress3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket5 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E", 3407872, inetAddress3, 14);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response0);
        response2.statusMessage = "";
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray7 = response6.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.Buffer buffer11 = byteBuffer10.flip();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putChar('#');
        byte[] byteArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer17 = byteBuffer13.get(byteArray14, 75, (-72));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(buffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket7 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E", (-72), inetAddress5, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-2");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket7 = socketFactory0.createSocket(inetAddress5, (-72));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-72");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket(inetAddress6, 0, inetAddress8, 2);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        response23.charset = "Location";
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response28);
        org.jsoup.Connection.Method method30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response31 = response28.method(method30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.net.URL uRL11 = response7.url();
        java.lang.String str12 = response7.charset;
        org.jsoup.Connection.Request request13 = null;
        response7.req = request13;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = response7.body();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(uRL11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        int int53 = byteBuffer51.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer51.get(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer14.get(byteArray72);
        double double79 = byteBuffer14.getDouble();
        java.nio.DoubleBuffer doubleBuffer80 = byteBuffer14.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer82 = byteBuffer14.put((byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer84 = byteBuffer14.limit(3407872);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer82);
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response26);
        boolean boolean30 = response27.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", "\\Qjava.nio.DirectByteBuffer[pos=19 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response27);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.Buffer buffer15 = byteBuffer10.position(10);
        java.nio.Buffer buffer16 = byteBuffer10.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(buffer16);
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.net.URL uRL7 = response1.url();
        org.jsoup.Connection.Method method8 = response1.method();
        org.jsoup.Connection.Method method9 = response1.method();
        java.net.HttpURLConnection httpURLConnection10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = null;
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        response12.contentType = "";
        java.lang.String str15 = response12.contentType;
        response12.executed = true;
        response12.executed = false;
        java.nio.ByteBuffer byteBuffer20 = response12.byteData;
        java.lang.String str21 = response12.charset();
        // The following exception was thrown during execution in test generation
        try {
            response1.setupFromConnection(httpURLConnection10, (org.jsoup.Connection.Response) response12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(uRL7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(byteBuffer20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        double double12 = byteBuffer11.getDouble();
        int int14 = byteBuffer11.getInt(84);
        float float16 = byteBuffer11.getFloat(22);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer11.putChar(6, '4');
        char char21 = byteBuffer19.getChar((int) '?');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.43230922487E-312d + "'", double12 == 5.43230922487E-312d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + '\000' + "'", char21 == '\000');
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer5 = byteBuffer4.asShortBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        int int9 = byteBuffer7.position();
        float float11 = byteBuffer7.getFloat((int) (short) 10);
        boolean boolean12 = byteBuffer7.hasArray();
        double double13 = byteBuffer7.getDouble();
        short short15 = byteBuffer7.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putDouble(100.0d);
        byte byte19 = byteBuffer17.get((int) (short) 0);
        java.nio.IntBuffer intBuffer20 = byteBuffer17.asIntBuffer();
        int int21 = byteBuffer4.compareTo(byteBuffer17);
        java.nio.ByteOrder byteOrder22 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer1.put(byteBuffer17);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer17.slice();
        int int25 = byteBuffer24.capacity();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = byteBuffer24.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-24) + "'", int21 == (-24));
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        boolean boolean7 = response1.hasCookie("hi!");
        response1.statusMessage = "";
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document11 = response10.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "java.nio.DirectByteBuffer[pos=16 lim=32 cap=100]";
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket(inetAddress7, 6);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putInt((int) (short) 10);
        char char27 = byteBuffer24.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(8);
        java.nio.DoubleBuffer doubleBuffer2 = byteBuffer1.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(doubleBuffer2);
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.util.function.Predicate<java.lang.String> strPredicate2 = pattern0.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern0.asPredicate();
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern10 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.CharBuffer charBuffer21 = byteBuffer16.asCharBuffer();
        java.util.regex.Matcher matcher22 = pattern10.matcher((java.lang.CharSequence) charBuffer21);
        java.util.stream.Stream<java.lang.String> strStream23 = null; // flaky: pattern7.splitAsStream((java.lang.CharSequence) charBuffer21);
        boolean boolean24 = java.util.regex.Pattern.matches("\\Q\\Q\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer21);
        java.lang.String[] strArray26 = pattern0.split((java.lang.CharSequence) "\\Q\\Q\\E\\\\E\\Q\\E", (-20));
        org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "\\Q\\E");
        org.junit.Assert.assertNotNull(strPredicate2);
        org.junit.Assert.assertNotNull(strPredicate3);
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern10);
        org.junit.Assert.assertEquals(pattern10.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(matcher22);
        org.junit.Assert.assertEquals(matcher22.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray26);
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = 28;
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        int int10 = response6.statusCode();
        java.lang.String str11 = response6.statusMessage;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.util.regex.Pattern pattern4 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern10 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher17 = pattern10.matcher((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher18 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer15);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer21 = byteBuffer20.asCharBuffer();
        java.util.regex.Matcher matcher22 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer21);
        java.lang.String[] strArray24 = pattern4.split((java.lang.CharSequence) charBuffer21, 8);
        java.util.regex.Pattern pattern27 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern28 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern28;
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer32 = byteBuffer31.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream33 = pattern28.splitAsStream((java.lang.CharSequence) charBuffer32);
        java.util.regex.Matcher matcher34 = pattern27.matcher((java.lang.CharSequence) charBuffer32);
        java.lang.String[] strArray36 = pattern4.split((java.lang.CharSequence) charBuffer32, (-6));
        java.util.regex.Pattern pattern39 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.FloatBuffer floatBuffer51 = byteBuffer46.asFloatBuffer();
        java.nio.CharBuffer charBuffer52 = byteBuffer46.asCharBuffer();
        boolean boolean53 = java.util.regex.Pattern.matches("", (java.lang.CharSequence) charBuffer52);
        java.lang.String[] strArray54 = null; // flaky: pattern39.split((java.lang.CharSequence) charBuffer52);
        java.util.stream.Stream<java.lang.String> strStream55 = pattern4.splitAsStream((java.lang.CharSequence) charBuffer52);
        java.util.regex.Matcher matcher56 = pattern0.matcher((java.lang.CharSequence) charBuffer52);
        java.util.function.Predicate<java.lang.String> strPredicate57 = pattern0.asPredicate();
        org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "\\Q\\E");
        org.junit.Assert.assertNotNull(pattern4);
        org.junit.Assert.assertEquals(pattern4.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern10);
        org.junit.Assert.assertEquals(pattern10.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern11);
// flaky:         org.junit.Assert.assertEquals(pattern11.toString(), "\\Q\\E");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(matcher17);
        org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher18);
// flaky:         org.junit.Assert.assertEquals(matcher18.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
// flaky:         org.junit.Assert.assertNotNull(matcher22);
// flaky:         org.junit.Assert.assertEquals(matcher22.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(pattern27);
        org.junit.Assert.assertEquals(pattern27.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern28);
// flaky:         org.junit.Assert.assertEquals(pattern28.toString(), "\\Q\\E");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(charBuffer32);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(matcher34);
        org.junit.Assert.assertEquals(matcher34.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray36);
// flaky:         org.junit.Assert.assertNotNull(pattern39);
// flaky:         org.junit.Assert.assertEquals(pattern39.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(floatBuffer51);
        org.junit.Assert.assertNotNull(charBuffer52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertNotNull(matcher56);
// flaky:         org.junit.Assert.assertEquals(matcher56.toString(), "java.util.regex.Matcher[pattern=\\Q\\E region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strPredicate57);
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]", 33);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.put((byte) 10);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer7.putInt(22);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer7.putDouble((double) 1);
        byte byte16 = byteBuffer14.get(83);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str14 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        response16.executed = true;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.put((byte) 10);
        java.nio.Buffer buffer13 = byteBuffer9.position((int) ' ');
        java.nio.Buffer buffer14 = byteBuffer9.rewind();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer9.put(75, (byte) 1);
        short short19 = byteBuffer17.getShort(3);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar(6, '\n');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putFloat((float) 18);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putDouble(10, 10.0d);
        short short20 = byteBuffer15.getShort(35);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 0 + "'", short20 == (short) 0);
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        java.lang.String str8 = response1.getHeaderCaseInsensitive("\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry11 = response1.scanHeaders("\\Q\\Qhi!\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strEntry11);
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket8 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]", 85, inetAddress6, (-12));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-12");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putFloat((int) ' ', (float) 4);
        java.nio.IntBuffer intBuffer12 = byteBuffer11.asIntBuffer();
        float float13 = byteBuffer11.getFloat();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str14 = response12.contentType;
        java.lang.String str15 = response12.statusMessage;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        double double12 = byteBuffer1.getDouble(2);
        int int13 = byteBuffer1.remaining();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.putDouble((double) (byte) 1);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long26 = byteBuffer25.getLong();
        int int27 = byteBuffer25.position();
        float float29 = byteBuffer25.getFloat((int) (short) 10);
        boolean boolean30 = byteBuffer25.hasArray();
        double double31 = byteBuffer25.getDouble();
        short short33 = byteBuffer25.getShort(0);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        boolean boolean44 = byteBuffer39.hasArray();
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.putInt(0);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.put(byteArray63);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer50.get(byteArray63, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.put(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer79.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer83 = byteBuffer79.putInt(0);
        byte[] byteArray86 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer87 = byteBuffer83.put(byteArray86);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer73.get(byteArray86, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer67.put(byteArray86);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer39.put(byteArray86);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer25.get(byteArray86);
        java.nio.ByteBuffer byteBuffer94 = byteBuffer21.put(byteArray86);
        java.nio.ByteBuffer byteBuffer95 = java.nio.ByteBuffer.wrap(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer98 = byteBuffer1.put(byteArray86, (-52), 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 84 + "'", int13 == 84);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 0 + "'", short33 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(byteBuffer95);
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.DoubleBuffer doubleBuffer9 = byteBuffer5.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(doubleBuffer9);
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        java.lang.CharSequence charSequence1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E", charSequence1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            float float16 = byteBuffer5.getFloat((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer5.duplicate();
        java.nio.ByteBuffer byteBuffer40 = byteBuffer5.putChar((int) (byte) 10, '\000');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer5.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            float float42 = byteBuffer41.getFloat();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer41);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        java.nio.Buffer buffer8 = byteBuffer7.mark();
        char char9 = byteBuffer7.getChar();
        java.nio.FloatBuffer floatBuffer10 = byteBuffer7.asFloatBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(buffer8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\000' + "'", char9 == '\000');
        org.junit.Assert.assertNotNull(floatBuffer10);
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.Connection.Request request10 = null;
        response8.req = request10;
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.put((byte) 10);
        java.nio.Buffer buffer25 = byteBuffer21.position((int) ' ');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer21.compact();
        java.nio.LongBuffer longBuffer27 = byteBuffer21.asLongBuffer();
        response8.byteData = byteBuffer21;
        response8.executed = true;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(longBuffer27);
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.ByteOrder byteOrder19 = byteBuffer14.order();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer14.slice();
        byte byte22 = byteBuffer14.get(0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer23 = byteBuffer14.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(byteOrder19);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0);
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        response8.executed = true;
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response8);
        java.lang.String str13 = response8.charset();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        response26.executed = true;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = response26.cookies();
        response26.numRedirects = 28;
        response26.contentType = "java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]";
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray34 = response26.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer61.putShort((short) (byte) 66);
        java.nio.Buffer buffer64 = byteBuffer61.clear();
        // The following exception was thrown during execution in test generation
        try {
            char char66 = byteBuffer61.getChar((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(buffer64);
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.Connection.Request request7 = null;
        response6.req = request7;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = response6.cookies();
        java.nio.ByteBuffer byteBuffer10 = response6.byteData;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        response11.contentType = "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response11);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response15 = org.jsoup.helper.HttpConnection.Response.execute(request0, response14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(byteBuffer10);
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        response7.statusMessage = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response10 = org.jsoup.helper.HttpConnection.Response.execute(request0, response7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str14 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry17 = response15.scanHeaders("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        java.lang.String str18 = response15.statusMessage();
        java.lang.String str19 = response15.statusMessage();
        int int20 = response15.numRedirects;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strEntry17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.Buffer buffer36 = byteBuffer14.limit((int) (byte) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer14.putLong(4, (long) (short) 10);
        java.lang.String str40 = byteBuffer14.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(buffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]" + "'", str40, "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        java.nio.Buffer buffer25 = byteBuffer22.flip();
        boolean boolean26 = byteBuffer22.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.nio.ByteBuffer byteBuffer15 = response14.byteData;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(byteBuffer15);
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response25);
        int int27 = response26.statusCode;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = response26.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        boolean boolean58 = byteBuffer57.isReadOnly();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer57.compact();
        java.nio.CharBuffer charBuffer60 = byteBuffer57.asCharBuffer();
        java.nio.Buffer buffer61 = byteBuffer57.mark();
        byte byte63 = byteBuffer57.get((int) (byte) 0);
        byte byte65 = byteBuffer57.get(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(charBuffer60);
        org.junit.Assert.assertNotNull(buffer61);
        org.junit.Assert.assertTrue("'" + byte63 + "' != '" + (byte) 0 + "'", byte63 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte65 + "' != '" + (byte) 0 + "'", byte65 == (byte) 0);
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        int int5 = response1.numRedirects;
        int int6 = response1.numRedirects;
        java.lang.String str8 = response1.header("\\Qjava.nio.DirectByteBuffer[pos=19 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E";
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        response1.executed = true;
        int int11 = response1.numRedirects;
        boolean boolean13 = response1.hasCookie("\\QLocation\\E");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        int int18 = byteBuffer16.position();
        float float20 = byteBuffer16.getFloat((int) (short) 10);
        boolean boolean21 = byteBuffer16.hasArray();
        double double22 = byteBuffer16.getDouble();
        short short24 = byteBuffer16.getShort(0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer16.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response27 = null;
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response27);
        java.lang.String str30 = response28.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = response28.cookies();
        org.jsoup.Connection.Response response33 = response28.removeCookie("hi!");
        java.lang.String str34 = response28.statusMessage();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        boolean boolean45 = byteBuffer40.hasArray();
        response28.byteData = byteBuffer40;
        int int47 = byteBuffer26.compareTo(byteBuffer40);
        java.lang.String str48 = byteBuffer26.toString();
        java.nio.ByteBuffer byteBuffer50 = byteBuffer26.put((byte) 10);
        int int51 = byteBuffer50.limit();
        short short53 = byteBuffer50.getShort((int) 'a');
        response14.byteData = byteBuffer50;
        org.jsoup.helper.HttpConnection.Response response55 = new org.jsoup.helper.HttpConnection.Response(response14);
        org.jsoup.Connection.Response response58 = response14.header("java.nio.DirectByteBuffer[pos=19 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=84 lim=100 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 0 + "'", short24 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(response33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-10) + "'", int47 == (-10));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str48, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) 0 + "'", short53 == (short) 0);
        org.junit.Assert.assertNotNull(response58);
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.numRedirects = 83;
        java.lang.String str12 = response1.statusMessage;
        org.jsoup.Connection.Response response14 = response1.removeHeader("java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(response14);
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        int int6 = response1.statusCode();
        response1.contentType = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        java.net.URL uRL9 = response1.url();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.lang.String str12 = response11.charset;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(uRL9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.IntBuffer intBuffer11 = byteBuffer9.asIntBuffer();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer9.slice();
        int int13 = byteBuffer9.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = 15;
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        double double7 = byteBuffer5.getDouble(12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.asReadOnlyBuffer();
        org.jsoup.helper.HttpConnection.Response response9 = null;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        response10.contentType = "";
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        int int15 = response14.statusCode;
        boolean boolean16 = byteBuffer8.equals((java.lang.Object) int15);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer18 = byteBuffer8.putShort((short) 1);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 6);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.Buffer buffer7 = byteBuffer1.limit(32);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer1.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer9);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", 47);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Request request7 = response1.req;
        java.lang.String str8 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry11 = response1.scanHeaders("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]");
        java.lang.String str12 = response1.charset();
        java.lang.String str13 = response1.charset();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(request7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strEntry11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        java.lang.String str10 = response5.charset;
        response5.contentType = "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E";
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response5.scanHeaders("java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]");
        java.net.HttpURLConnection httpURLConnection15 = null;
        org.jsoup.Connection.Response response16 = null;
        // The following exception was thrown during execution in test generation
        try {
            response5.setupFromConnection(httpURLConnection15, response16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strEntry14);
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response15);
        response15.statusMessage = "\\Qhi!\\E";
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response15);
        response15.charset = "\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E";
        java.util.Map<java.lang.String, java.lang.String> strMap22 = response15.cookies();
        int int23 = response15.numRedirects;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.net.URL uRL11 = response7.url();
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.Class<?> wildcardClass14 = response13.getClass();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(uRL11);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str13 = response9.header("\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = response9.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer22.putShort((short) (byte) 100);
        java.nio.ShortBuffer shortBuffer49 = byteBuffer48.asShortBuffer();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer48.putInt(10);
        java.nio.FloatBuffer floatBuffer52 = byteBuffer51.asFloatBuffer();
        boolean boolean53 = byteBuffer51.isReadOnly();
        int int54 = byteBuffer51.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(shortBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(floatBuffer52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 78 + "'", int54 == 78);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        int int36 = byteBuffer35.limit();
        short short38 = byteBuffer35.getShort((int) 'a');
        java.nio.Buffer buffer39 = byteBuffer35.rewind();
        java.nio.ByteBuffer byteBuffer42 = byteBuffer35.putChar(2, '?');
        // The following exception was thrown during execution in test generation
        try {
            int int43 = byteBuffer35.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 0 + "'", short38 == (short) 0);
        org.junit.Assert.assertNotNull(buffer39);
        org.junit.Assert.assertNotNull(byteBuffer42);
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        boolean boolean7 = response1.hasCookie("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer10 = response1.byteData;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(byteBuffer10);
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer10.put(byteBuffer69);
        float float71 = byteBuffer10.getFloat();
        java.nio.ByteBuffer byteBuffer73 = byteBuffer10.putShort((short) (byte) -1);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + 0.0f + "'", float71 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer73);
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        char char48 = byteBuffer46.getChar(75);
        double double50 = byteBuffer46.getDouble(1);
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.put(byteArray59);
        java.nio.FloatBuffer floatBuffer61 = byteBuffer56.asFloatBuffer();
        boolean boolean62 = byteBuffer56.isDirect();
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer64.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.putInt(0);
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.put(byteArray71);
        org.jsoup.helper.HttpConnection.Response response73 = null;
        org.jsoup.helper.HttpConnection.Response response74 = new org.jsoup.helper.HttpConnection.Response(response73);
        response74.contentType = "";
        boolean boolean77 = byteBuffer72.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer79 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer79.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer83 = byteBuffer79.putInt(0);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer83.putInt((int) '#');
        int int86 = byteBuffer72.compareTo(byteBuffer83);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer56.put(byteBuffer83);
        boolean boolean88 = byteBuffer83.isReadOnly();
        java.nio.CharBuffer charBuffer89 = byteBuffer83.asCharBuffer();
        java.nio.ByteOrder byteOrder90 = byteBuffer83.order();
        java.nio.ByteBuffer byteBuffer91 = byteBuffer46.order(byteOrder90);
        // The following exception was thrown during execution in test generation
        try {
            byte byte93 = byteBuffer46.get((-24));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + char48 + "' != '" + '\000' + "'", char48 == '\000');
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 6.577E-320d + "'", double50 == 6.577E-320d);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(floatBuffer61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(charBuffer89);
        org.junit.Assert.assertNotNull(byteOrder90);
        org.junit.Assert.assertNotNull(byteBuffer91);
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.InetAddress inetAddress1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket3 = socketFactory0.createSocket(inetAddress1, 85);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.statusCode;
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.FloatBuffer floatBuffer8 = byteBuffer7.asFloatBuffer();
        boolean boolean9 = byteBuffer7.isDirect();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putFloat(0.0f);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer11.compact();
        response1.byteData = byteBuffer11;
        boolean boolean16 = response1.hasHeaderWithValue("\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E", "java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(floatBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.lang.String str21 = response1.header("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.nio.ByteBuffer byteBuffer9 = response5.byteData;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        response5.numRedirects = (short) 10;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str14 = response5.statusMessage;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        response8.executed = true;
        response8.numRedirects = 2;
        boolean boolean14 = response8.executed;
        java.nio.ByteBuffer byteBuffer15 = response8.byteData;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(byteBuffer15);
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.nio.ByteBuffer byteBuffer9 = response5.byteData;
        java.lang.String str10 = response5.contentType;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document12 = response11.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        short short18 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.put(byteArray30);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer27.get(byteArray40, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer27.putDouble(100.0d);
        int int47 = byteBuffer21.compareTo(byteBuffer27);
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putInt(0);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.put(byteArray56);
        java.nio.ByteOrder byteOrder58 = byteBuffer57.order();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer27.order(byteOrder58);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer27.slice();
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer62.putLong((long) '4');
        int int66 = byteBuffer64.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer68.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.putInt(0);
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer76 = byteBuffer72.put(byteArray75);
        java.nio.ByteBuffer byteBuffer78 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer78.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer82 = byteBuffer78.putInt(0);
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer86 = byteBuffer82.put(byteArray85);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer72.get(byteArray85, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer64.get(byteArray85);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer27.get(byteArray85);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer5.get(byteArray85);
        java.nio.ByteBuffer byteBuffer93 = java.nio.ByteBuffer.wrap(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer96 = java.nio.ByteBuffer.wrap(byteArray85, 22, (-84));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 0 + "'", short18 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 14 + "'", int47 == 14);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteOrder58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        int int2 = pattern0.flags();
        int int3 = pattern0.flags();
        java.lang.String str4 = pattern0.toString();
        org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-24) + "'", int2 == (-24));
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-24) + "'", int3 == (-24));
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str4, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        response10.statusCode = 1;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.lang.String str15 = response10.charset();
        java.lang.String str16 = response10.contentType;
        java.lang.String str17 = response10.contentType;
        org.jsoup.Connection.Method method18 = response10.method();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(method18);
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        long long13 = byteBuffer5.getLong();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        int int4 = pattern2.flags();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response11 = response1.removeHeader("Location");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response12.headers();
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response14.contentType;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        java.lang.String str9 = response1.header("hi!");
        java.lang.String str10 = response1.statusMessage;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.Class<?> wildcardClass12 = response11.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer10.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putDouble(0.0d);
        java.nio.Buffer buffer15 = byteBuffer13.position(1);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer15);
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress3 = null;
        java.net.InetAddress inetAddress5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket7 = socketFactory0.createSocket(inetAddress3, 0, inetAddress5, (-20));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-20");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        float float11 = byteBuffer10.getFloat();
        java.nio.DoubleBuffer doubleBuffer12 = byteBuffer10.asDoubleBuffer();
        boolean boolean13 = byteBuffer10.hasArray();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer10.putLong((int) ' ', (long) 19);
        int int17 = byteBuffer16.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(doubleBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        response1.numRedirects = (byte) 10;
        org.jsoup.Connection.Response response12 = response1.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer13 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request15 = null;
        response1.req = request15;
        org.jsoup.Connection.Response response18 = response1.removeCookie("java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]");
        response1.statusCode = (-20);
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(byteBuffer13);
        org.junit.Assert.assertNotNull(response18);
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        response1.statusCode = 12;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = response1.body();
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(80);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        java.lang.String str8 = response2.statusMessage;
        java.nio.ByteBuffer byteBuffer9 = response2.byteData;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response11);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response15 = org.jsoup.helper.HttpConnection.Response.execute(request0, response11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(byteBuffer9);
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        double double16 = byteBuffer9.getDouble(0);
        boolean boolean17 = byteBuffer9.isDirect();
        java.nio.Buffer buffer18 = byteBuffer9.flip();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer9.putChar('4');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer23 = byteBuffer9.putLong((-1), (long) 91);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.57E-322d + "'", double16 == 2.57E-322d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = 79;
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Response response10 = response6.removeCookie("Location");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.net.URL uRL12 = response11.url();
        org.jsoup.Connection.Response response15 = response11.cookie("Location", "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.jsoup.Connection.Response response18 = response11.cookie("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.Connection.Request request19 = response11.req;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertNull(uRL12);
        org.junit.Assert.assertNotNull(response15);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(request19);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        boolean boolean11 = byteBuffer5.hasArray();
        long long12 = byteBuffer5.getLong();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = byteBuffer5.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.stream.Stream<java.lang.String> strStream5 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.lang.String str6 = null; // flaky: pattern2.pattern();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strStream5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str6, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean8 = response6.hasHeader("java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        boolean boolean9 = response6.executed;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.net.HttpURLConnection httpURLConnection12 = null;
        org.jsoup.Connection.Response response13 = null;
        // The following exception was thrown during execution in test generation
        try {
            response11.setupFromConnection(httpURLConnection12, response13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        java.lang.String str81 = response1.statusMessage;
        org.jsoup.Connection.Response response83 = response1.removeHeader("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response84 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str85 = response1.charset;
        java.nio.ByteBuffer byteBuffer87 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer87.putLong((long) '4');
        short short91 = byteBuffer87.getShort(0);
        java.nio.ByteBuffer byteBuffer94 = byteBuffer87.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer97 = byteBuffer94.put((int) (short) 10, (byte) 1);
        response1.byteData = byteBuffer94;
        org.jsoup.helper.HttpConnection.Response response99 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(response83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + short91 + "' != '" + (short) 0 + "'", short91 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(byteBuffer97);
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.statusCode = 64;
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer16 = byteBuffer15.asShortBuffer();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long19 = byteBuffer18.getLong();
        int int20 = byteBuffer18.position();
        float float22 = byteBuffer18.getFloat((int) (short) 10);
        boolean boolean23 = byteBuffer18.hasArray();
        double double24 = byteBuffer18.getDouble();
        short short26 = byteBuffer18.getShort(0);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer18.putDouble(100.0d);
        byte byte30 = byteBuffer28.get((int) (short) 0);
        java.nio.IntBuffer intBuffer31 = byteBuffer28.asIntBuffer();
        int int32 = byteBuffer15.compareTo(byteBuffer28);
        response1.byteData = byteBuffer15;
        java.nio.ByteOrder byteOrder34 = byteBuffer15.order();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putInt((int) '#');
        float float44 = byteBuffer42.getFloat(4);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.putInt(0);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.put(byteArray63);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer50.get(byteArray63, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.put(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer79.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer83 = byteBuffer79.putInt(0);
        byte[] byteArray86 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer87 = byteBuffer83.put(byteArray86);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer73.get(byteArray86, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer67.put(byteArray86);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer42.put(byteArray86);
        java.nio.ByteBuffer byteBuffer93 = java.nio.ByteBuffer.wrap(byteArray86);
        java.nio.ByteBuffer byteBuffer94 = byteBuffer15.put(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer97 = byteBuffer15.putDouble(68, 2.12199579097E-313d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(shortBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 0 + "'", byte30 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-24) + "'", int32 == (-24));
        org.junit.Assert.assertNotNull(byteOrder34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 7.3E-44f + "'", float44 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.IntBuffer intBuffer8 = byteBuffer1.asIntBuffer();
        boolean boolean9 = byteBuffer1.isReadOnly();
        java.nio.Buffer buffer11 = byteBuffer1.limit((int) (short) 10);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long14 = byteBuffer13.getLong();
        int int15 = byteBuffer13.position();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put((byte) 100);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putInt((int) '#');
        byte byte27 = byteBuffer23.get(1);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer23.put(14, (byte) -1);
        java.nio.FloatBuffer floatBuffer31 = byteBuffer30.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putInt((int) '#');
        float float41 = byteBuffer39.getFloat(4);
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.putInt(0);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.put(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer47.get(byteArray60, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer66.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.putInt(0);
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.put(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer76.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer80 = byteBuffer76.putInt(0);
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer84 = byteBuffer80.put(byteArray83);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer70.get(byteArray83, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer64.put(byteArray83);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer39.put(byteArray83);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer30.get(byteArray83);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer13.get(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer94 = byteBuffer1.put(byteArray83, (-1), (int) '\u4120');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(buffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(floatBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 7.3E-44f + "'", float41 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]", (-18));
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]");
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.FloatBuffer floatBuffer16 = byteBuffer9.asFloatBuffer();
        byte byte18 = byteBuffer9.get((int) (short) 1);
        byte byte19 = byteBuffer9.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.CharBuffer charBuffer11 = byteBuffer10.asCharBuffer();
        long long12 = byteBuffer10.getLong();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.slice();
        byte byte14 = byteBuffer10.get();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer10.put(83, (byte) 0);
        int int18 = byteBuffer17.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
        java.lang.String str2 = pattern1.pattern();
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]" + "'", str2, "java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.net.URL uRL11 = response10.url();
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.net.URL uRL14 = response12.url();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(uRL11);
        org.junit.Assert.assertNull(uRL14);
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        response1.numRedirects = (byte) 10;
        org.jsoup.Connection.Response response12 = response1.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer13 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response14);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response14);
        java.net.HttpURLConnection httpURLConnection17 = null;
        org.jsoup.helper.HttpConnection.Response response18 = null;
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        response19.contentType = "";
        java.lang.String str22 = response19.contentType;
        response19.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry26 = response19.scanHeaders("");
        java.lang.String str28 = response19.getHeaderCaseInsensitive("Location");
        java.lang.String str29 = response19.charset();
        java.lang.String str30 = response19.contentType();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long33 = byteBuffer32.getLong();
        int int34 = byteBuffer32.position();
        float float36 = byteBuffer32.getFloat((int) (short) 10);
        boolean boolean37 = byteBuffer32.hasArray();
        double double38 = byteBuffer32.getDouble();
        short short40 = byteBuffer32.getShort(0);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer32.putDouble(100.0d);
        boolean boolean43 = byteBuffer32.isReadOnly();
        response19.byteData = byteBuffer32;
        // The following exception was thrown during execution in test generation
        try {
            response16.setupFromConnection(httpURLConnection17, (org.jsoup.Connection.Response) response19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(byteBuffer13);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(strEntry26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.Connection.Request request6 = null;
        response1.req = request6;
        java.lang.String str8 = response1.contentType();
        response1.charset = "Location";
        response1.statusMessage = "\\Q\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E\\\\E\\Q\\E";
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        int int11 = byteBuffer5.position();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.put((byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer14 = byteBuffer5.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 14 + "'", int11 == 14);
        org.junit.Assert.assertNotNull(byteBuffer13);
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.wrap(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.wrap(byteArray24);
        int int32 = byteBuffer31.arrayOffset();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        short short20 = byteBuffer16.getShort(0);
        int int21 = byteBuffer16.capacity();
        long long22 = byteBuffer16.getLong();
        short short23 = byteBuffer16.getShort();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer9.put(byteBuffer16);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer26 = byteBuffer16.putLong((long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 0 + "'", short20 == (short) 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer24);
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response8);
        response8.statusMessage = "\\Q\\Q\\E\\\\E\\Q\\E";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.numRedirects = 83;
        java.lang.String str13 = response1.header("hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt((int) (short) 1, (-24));
        java.nio.ByteBuffer byteBuffer33 = byteBuffer30.putFloat(88, (float) 58);
        boolean boolean34 = byteBuffer33.isReadOnly();
        boolean boolean35 = byteBuffer33.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer10.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putDouble(0.0d);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putFloat((float) '\n');
        java.nio.ByteBuffer byteBuffer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer17 = byteBuffer15.put(byteBuffer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) (byte) 66);
        java.lang.Class<?> wildcardClass2 = byteBuffer1.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response10.cookies();
        boolean boolean13 = response10.executed;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response14);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.put(byteArray22);
        java.nio.CharBuffer charBuffer24 = byteBuffer19.asCharBuffer();
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putInt((int) '#');
        float float34 = byteBuffer32.getFloat(4);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer40.get(byteArray53, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.putInt(0);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.put(byteArray66);
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.put(byteArray76);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer63.get(byteArray76, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer57.put(byteArray76);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer32.put(byteArray76);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer19.get(byteArray76);
        java.nio.ByteBuffer byteBuffer84 = java.nio.ByteBuffer.wrap(byteArray76);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer13.put(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer88 = java.nio.ByteBuffer.wrap(byteArray76, (int) '4', (int) '\000');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 7.3E-44f + "'", float34 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer1.putShort((short) (byte) -1);
        boolean boolean30 = byteBuffer1.hasRemaining();
        char char31 = byteBuffer1.getChar();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer1.putFloat((float) '\000');
        java.nio.LongBuffer longBuffer34 = byteBuffer1.asLongBuffer();
        // The following exception was thrown during execution in test generation
        try {
            float float36 = byteBuffer1.getFloat(1405091840);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(longBuffer34);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        org.jsoup.Connection.Request request0 = null;
        java.nio.ByteBuffer byteBuffer2 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long3 = byteBuffer2.getLong();
        int int4 = byteBuffer2.position();
        float float6 = byteBuffer2.getFloat((int) (short) 10);
        boolean boolean7 = byteBuffer2.hasArray();
        double double8 = byteBuffer2.getDouble();
        short short10 = byteBuffer2.getShort(0);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer2.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response13 = null;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        java.lang.String str16 = response14.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = response14.cookies();
        org.jsoup.Connection.Response response19 = response14.removeCookie("hi!");
        java.lang.String str20 = response14.statusMessage();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        boolean boolean31 = byteBuffer26.hasArray();
        response14.byteData = byteBuffer26;
        int int33 = byteBuffer12.compareTo(byteBuffer26);
        java.lang.String str34 = byteBuffer12.toString();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer12.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response37 = null;
        org.jsoup.helper.HttpConnection.Response response38 = new org.jsoup.helper.HttpConnection.Response(response37);
        response38.contentType = "";
        java.lang.String str41 = response38.contentType;
        response38.executed = true;
        java.lang.String str44 = response38.statusMessage;
        java.nio.ByteBuffer byteBuffer45 = response38.byteData;
        boolean boolean46 = byteBuffer36.equals((java.lang.Object) response38);
        int int47 = response38.statusCode();
        org.jsoup.helper.HttpConnection.Response response48 = new org.jsoup.helper.HttpConnection.Response(response38);
        response38.charset = "\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response51 = new org.jsoup.helper.HttpConnection.Response(response38);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response52 = org.jsoup.helper.HttpConnection.Response.execute(request0, response38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 0.0f + "'", float6 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(response19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-10) + "'", int33 == (-10));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str34, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.Connection.Response response12 = response10.removeCookie("java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer13 = response10.byteData;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(byteBuffer13);
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.asReadOnlyBuffer();
        long long12 = byteBuffer1.getLong();
        byte byte13 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.putShort((short) 0);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer21.putChar('a');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer26.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer26.putDouble(0.0d);
        boolean boolean30 = byteBuffer26.isReadOnly();
        java.nio.ByteOrder byteOrder31 = byteBuffer26.order();
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.order(byteOrder31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.FloatBuffer floatBuffer43 = byteBuffer38.asFloatBuffer();
        boolean boolean44 = byteBuffer38.isDirect();
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        org.jsoup.helper.HttpConnection.Response response55 = null;
        org.jsoup.helper.HttpConnection.Response response56 = new org.jsoup.helper.HttpConnection.Response(response55);
        response56.contentType = "";
        boolean boolean59 = byteBuffer54.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer61 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer61.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer65 = byteBuffer61.putInt(0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putInt((int) '#');
        int int68 = byteBuffer54.compareTo(byteBuffer65);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer38.put(byteBuffer65);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer38.putShort((short) 1);
        boolean boolean72 = byteBuffer32.equals((java.lang.Object) byteBuffer38);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer75 = byteBuffer38.putLong((int) '\u3ff0', (long) 64);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteOrder31);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(floatBuffer43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response9 = response1.header("Location", "");
        org.jsoup.Connection.Response response12 = response1.header("\\Q\\E", "\\QLocation\\E");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        java.nio.ByteBuffer byteBuffer15 = response14.byteData;
        response14.contentType = "\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(byteBuffer15);
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response5.contentType();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        response5.executed = true;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response5);
        response5.charset = "\\Qjava.nio.DirectByteBuffer[pos=16 lim=100 cap=100]\\E";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer34 = byteBuffer11.compact();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray35 = byteBuffer34.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer34);
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern10 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = null; // flaky: pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher17 = pattern10.matcher((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher18 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer15);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer21 = byteBuffer20.asCharBuffer();
        java.util.regex.Matcher matcher22 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer21);
        java.util.regex.Pattern pattern25 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern28 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern31 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern32 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern32;
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer36 = byteBuffer35.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream37 = null; // flaky: pattern32.splitAsStream((java.lang.CharSequence) charBuffer36);
        java.util.regex.Matcher matcher38 = pattern31.matcher((java.lang.CharSequence) charBuffer36);
        java.util.regex.Matcher matcher39 = null; // flaky: pattern28.matcher((java.lang.CharSequence) charBuffer36);
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer42 = byteBuffer41.asCharBuffer();
        java.util.regex.Matcher matcher43 = null; // flaky: pattern28.matcher((java.lang.CharSequence) charBuffer42);
        java.lang.String[] strArray45 = pattern25.split((java.lang.CharSequence) charBuffer42, 8);
        java.util.regex.Pattern pattern48 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern49 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern49;
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer53 = byteBuffer52.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream54 = null; // flaky: pattern49.splitAsStream((java.lang.CharSequence) charBuffer53);
        java.util.regex.Matcher matcher55 = pattern48.matcher((java.lang.CharSequence) charBuffer53);
        java.lang.String[] strArray57 = pattern25.split((java.lang.CharSequence) charBuffer53, (-6));
        java.lang.String[] strArray59 = null; // flaky: pattern7.split((java.lang.CharSequence) charBuffer53, (int) (byte) 10);
        boolean boolean60 = byteBuffer4.equals((java.lang.Object) pattern7);
        java.nio.Buffer buffer61 = byteBuffer4.flip();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray62 = byteBuffer4.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern10);
        org.junit.Assert.assertEquals(pattern10.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern11);
// flaky:         org.junit.Assert.assertEquals(pattern11.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
// flaky:         org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(matcher17);
        org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher18);
// flaky:         org.junit.Assert.assertEquals(matcher18.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
// flaky:         org.junit.Assert.assertNotNull(matcher22);
// flaky:         org.junit.Assert.assertEquals(matcher22.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern25);
        org.junit.Assert.assertEquals(pattern25.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern28);
// flaky:         org.junit.Assert.assertEquals(pattern28.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern31);
        org.junit.Assert.assertEquals(pattern31.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern32);
// flaky:         org.junit.Assert.assertEquals(pattern32.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(charBuffer36);
// flaky:         org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(matcher38);
        org.junit.Assert.assertEquals(matcher38.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher39);
// flaky:         org.junit.Assert.assertEquals(matcher39.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
// flaky:         org.junit.Assert.assertNotNull(matcher43);
// flaky:         org.junit.Assert.assertEquals(matcher43.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(pattern48);
        org.junit.Assert.assertEquals(pattern48.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern49);
// flaky:         org.junit.Assert.assertEquals(pattern49.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(charBuffer53);
// flaky:         org.junit.Assert.assertNotNull(strStream54);
        org.junit.Assert.assertNotNull(matcher55);
        org.junit.Assert.assertEquals(matcher55.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray57);
// flaky:         org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(buffer61);
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer10.put(byteBuffer69);
        double double72 = byteBuffer69.getDouble(12);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.compact();
        char char74 = byteBuffer73.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 12.0d + "'", double72 == 12.0d);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertTrue("'" + char74 + "' != '" + '\000' + "'", char74 == '\000');
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        java.lang.String str81 = response1.statusMessage;
        org.jsoup.Connection.Response response83 = response1.removeHeader("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response84 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str85 = response1.charset;
        java.nio.ByteBuffer byteBuffer87 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer87.putLong((long) '4');
        short short91 = byteBuffer87.getShort(0);
        java.nio.ByteBuffer byteBuffer94 = byteBuffer87.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer97 = byteBuffer94.put((int) (short) 10, (byte) 1);
        response1.byteData = byteBuffer94;
        java.lang.String str99 = response1.charset;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(response83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + short91 + "' != '" + (short) 0 + "'", short91 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(byteBuffer97);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean9 = response1.hasHeaderWithValue("\\QLocation\\E", "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.lang.String str11 = response1.cookie("\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request13 = null;
        response12.req = request13;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putInt(0);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer9.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer9.putChar(' ');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long20 = byteBuffer19.getLong();
        int int21 = byteBuffer19.position();
        float float23 = byteBuffer19.getFloat((int) (short) 10);
        boolean boolean24 = byteBuffer19.hasArray();
        double double25 = byteBuffer19.getDouble();
        short short27 = byteBuffer19.getShort(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer19.putDouble(100.0d);
        boolean boolean30 = byteBuffer19.isDirect();
        int int31 = byteBuffer17.compareTo(byteBuffer19);
        java.nio.DoubleBuffer doubleBuffer32 = byteBuffer19.asDoubleBuffer();
        int int33 = byteBuffer1.compareTo(byteBuffer19);
        long long34 = byteBuffer1.getLong();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(doubleBuffer32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.Buffer buffer47 = byteBuffer22.flip();
        java.nio.ByteBuffer byteBuffer50 = byteBuffer22.putFloat(4, (float) (short) 1);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer50.duplicate();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer51.putLong((long) 3);
        char char54 = byteBuffer53.getChar();
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer64.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer64.putChar(' ');
        java.nio.ByteBuffer byteBuffer72 = byteBuffer69.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer74 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long75 = byteBuffer74.getLong();
        int int76 = byteBuffer74.position();
        float float78 = byteBuffer74.getFloat((int) (short) 10);
        boolean boolean79 = byteBuffer74.hasArray();
        double double80 = byteBuffer74.getDouble();
        short short82 = byteBuffer74.getShort(0);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer74.putDouble(100.0d);
        boolean boolean85 = byteBuffer74.isDirect();
        int int86 = byteBuffer72.compareTo(byteBuffer74);
        java.nio.DoubleBuffer doubleBuffer87 = byteBuffer74.asDoubleBuffer();
        int int88 = byteBuffer56.compareTo(byteBuffer74);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer74.putShort((short) (byte) 66);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer91 = byteBuffer53.put(byteBuffer74);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(buffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + char54 + "' != '" + '\000' + "'", char54 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 8 + "'", int76 == 8);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 0.0f + "'", float78 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertTrue("'" + short82 + "' != '" + (short) 0 + "'", short82 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(doubleBuffer87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 16 + "'", int88 == 16);
        org.junit.Assert.assertNotNull(byteBuffer90);
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer1.putShort((short) (byte) -1);
        boolean boolean30 = byteBuffer1.hasRemaining();
        char char31 = byteBuffer1.getChar();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer1.putFloat((float) '\000');
        java.nio.Buffer buffer35 = byteBuffer33.position(19);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(buffer35);
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Request request7 = response1.req;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response11 = response1.cookie("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", "Location");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        response1.statusMessage = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response15);
        int int17 = response15.statusCode();
        java.net.HttpURLConnection httpURLConnection18 = null;
        org.jsoup.helper.HttpConnection.Response response19 = null;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response19);
        java.lang.String str22 = response20.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = response20.cookies();
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = response25.headers();
        java.net.URL uRL27 = response25.url();
        // The following exception was thrown during execution in test generation
        try {
            response15.setupFromConnection(httpURLConnection18, (org.jsoup.Connection.Response) response25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(request7);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(uRL27);
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket8 = socketFactory0.createSocket(inetAddress6, 47);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        response1.numRedirects = (byte) 10;
        org.jsoup.Connection.Response response12 = response1.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer13 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request16 = null;
        response15.req = request16;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(byteBuffer13);
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.lang.String str10 = response5.getHeaderCaseInsensitive("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        int int12 = response5.numRedirects;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        short short23 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer15.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer15.compact();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer15.put((byte) 66);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer28.putLong(78, (long) (short) 256);
        boolean boolean32 = byteBuffer31.hasRemaining();
        response13.byteData = byteBuffer31;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Request request8 = null;
        response6.req = request8;
        java.net.URL uRL10 = response6.url();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(uRL10);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "\\Q\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E\\\\E\\Q\\E";
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str6 = response2.cookie("hi!");
        int int7 = response2.statusCode();
        org.jsoup.Connection.Request request8 = response2.req;
        boolean boolean9 = response2.executed;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response10 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(request8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket(inetAddress6, (-24), inetAddress8, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer81 = java.nio.ByteBuffer.wrap(byteArray70, 97, 25);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E", 10, inetAddress7, 256);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E", (-12));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-12");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        boolean boolean80 = byteBuffer25.hasArray();
        java.nio.DoubleBuffer doubleBuffer81 = byteBuffer25.asDoubleBuffer();
        float float82 = byteBuffer25.getFloat();
        java.nio.ByteBuffer byteBuffer83 = byteBuffer25.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer86 = byteBuffer83.putChar(4325376, '\u0100');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleBuffer81);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer83);
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.stream.Stream<java.lang.String> strStream5 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.lang.String str6 = null; // flaky: pattern2.pattern();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        int int9 = 0; // flaky: pattern2.flags();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strStream5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str6, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-24) + "'", int9 == (-24));
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(64);
        java.nio.ByteBuffer byteBuffer3 = java.nio.ByteBuffer.allocate((int) (short) 1);
        boolean boolean4 = byteBuffer1.equals((java.lang.Object) byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long27 = byteBuffer26.getLong();
        int int28 = byteBuffer26.position();
        float float30 = byteBuffer26.getFloat((int) (short) 10);
        boolean boolean31 = byteBuffer26.hasArray();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer26.putFloat((float) (-24));
        response24.byteData = byteBuffer26;
        java.nio.ByteBuffer byteBuffer37 = byteBuffer26.putDouble(88, 10.0d);
        java.nio.Buffer buffer38 = byteBuffer26.flip();
        int int39 = byteBuffer26.limit();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 0.0f + "'", float30 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(buffer38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(58);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        byte byte4 = byteBuffer1.get(2);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.charset = "\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E";
        java.net.URL uRL4 = response1.url();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.Class<?> wildcardClass6 = response5.getClass();
        org.junit.Assert.assertNull(uRL4);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        boolean boolean13 = byteBuffer5.isDirect();
        java.lang.String str14 = byteBuffer5.toString();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer5.putShort((int) 'a', (short) (byte) 100);
        java.nio.Buffer buffer18 = byteBuffer5.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]" + "'", str14, "java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(buffer18);
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response25);
        org.jsoup.Connection.Method method27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response28 = response25.method(method27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.Buffer buffer47 = byteBuffer22.flip();
        java.nio.ByteBuffer byteBuffer50 = byteBuffer22.putFloat(4, (float) (short) 1);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer22.putInt(24);
        // The following exception was thrown during execution in test generation
        try {
            float float54 = byteBuffer22.getFloat(84);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(buffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.Connection.Response response9 = response1.removeHeader("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.Connection.Response response13 = response11.removeHeader("\\Qjava.nio.DirectByteBuffer[pos=19 lim=100 cap=100]\\E");
        java.lang.String str15 = response11.header("java.nio.DirectByteBuffer[pos=31 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        boolean boolean11 = response10.executed;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.CharBuffer charBuffer12 = byteBuffer1.asCharBuffer();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long15 = byteBuffer14.getLong();
        int int16 = byteBuffer14.position();
        float float18 = byteBuffer14.getFloat((int) (short) 10);
        boolean boolean19 = byteBuffer14.hasArray();
        double double20 = byteBuffer14.getDouble();
        short short22 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer14.putDouble(100.0d);
        float float25 = byteBuffer14.getFloat();
        char char27 = byteBuffer14.getChar(1);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putDouble(7.565251118924485E-307d);
        int int40 = byteBuffer14.compareTo(byteBuffer39);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer14.putShort((short) (byte) -1);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 0 };
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.put(byteArray45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer1.put(byteArray45);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.wrap(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer51 = java.nio.ByteBuffer.wrap(byteArray45, (int) (short) 1, 3407872);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-6) + "'", int40 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 0]");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        java.lang.CharSequence charSequence1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E", charSequence1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        double double16 = byteBuffer9.getDouble(0);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        short short22 = byteBuffer18.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer18.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer31.get(byteArray44, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer31.putDouble(100.0d);
        int int51 = byteBuffer25.compareTo(byteBuffer31);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteOrder byteOrder62 = byteBuffer61.order();
        java.nio.ByteBuffer byteBuffer63 = byteBuffer31.order(byteOrder62);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer31.asReadOnlyBuffer();
        boolean boolean65 = byteBuffer9.equals((java.lang.Object) byteBuffer31);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer31.putShort((short) 100);
        java.nio.DoubleBuffer doubleBuffer68 = byteBuffer67.asDoubleBuffer();
        boolean boolean69 = doubleBuffer68.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.57E-322d + "'", double16 == 2.57E-322d);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteOrder62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(doubleBuffer68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.ByteOrder byteOrder19 = byteBuffer14.order();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putShort((short) (byte) 0);
        byte byte24 = byteBuffer20.get(58);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        boolean boolean32 = byteBuffer26.equals((java.lang.Object) (byte) 0);
        boolean boolean33 = byteBuffer26.isDirect();
        long long34 = byteBuffer26.getLong();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer35 = byteBuffer20.put(byteBuffer26);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(byteOrder19);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        int int6 = response1.statusCode();
        response1.contentType = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        java.net.URL uRL9 = response1.url();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = response10.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(uRL9);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        byte byte71 = byteBuffer1.get((int) '\n');
        java.nio.ByteBuffer byteBuffer72 = byteBuffer1.slice();
        java.nio.ByteBuffer byteBuffer74 = byteBuffer1.putChar('a');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer77 = byteBuffer1.putChar((int) (byte) -1, '\u0100');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertTrue("'" + byte71 + "' != '" + (byte) 0 + "'", byte71 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Response response10 = response6.removeCookie("Location");
        java.lang.String str11 = response6.charset;
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("hi!");
        java.lang.String str2 = pattern1.pattern();
        int int3 = pattern1.flags();
        java.lang.String str4 = pattern1.toString();
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        java.lang.String str6 = response2.charset;
        response2.statusCode = ' ';
        java.net.URL uRL9 = response2.url();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response10 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(uRL9);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        java.lang.String str9 = response1.statusMessage();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = response10.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        int int16 = response11.numRedirects;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document20 = response18.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(10);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer7.putChar('a');
        java.nio.Buffer buffer15 = byteBuffer7.position(52);
        long long17 = byteBuffer7.getLong(85);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(1117126656);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer3 = byteBuffer1.limit((-64));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer25 = byteBuffer24.mark();
        java.nio.Buffer buffer26 = byteBuffer24.flip();
        double double27 = byteBuffer24.getDouble();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = byteBuffer24.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        java.lang.String str13 = byteBuffer1.toString();
        byte byte14 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer1.putFloat((float) (short) 100);
        java.nio.FloatBuffer floatBuffer17 = byteBuffer1.asFloatBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer20 = byteBuffer1.putShort((int) '\u3ff0', (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]" + "'", str13, "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(floatBuffer17);
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        java.nio.ByteBuffer byteBuffer9 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document11 = response10.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(byteBuffer9);
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(98);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress5 = null;
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket(inetAddress5, (int) (short) 10, inetAddress7, (int) '\u0a00');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Response response10 = response6.removeCookie("Location");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Request request12 = response11.req;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertNull(request12);
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        double double16 = byteBuffer9.getDouble(0);
        boolean boolean17 = byteBuffer9.isDirect();
        java.nio.Buffer buffer18 = byteBuffer9.flip();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer9.putChar('4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer9.putLong((long) 12);
        java.nio.LongBuffer longBuffer23 = byteBuffer9.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.57E-322d + "'", double16 == 2.57E-322d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(longBuffer23);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.Connection.Request request10 = null;
        response8.req = request10;
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.put((byte) 10);
        java.nio.Buffer buffer25 = byteBuffer21.position((int) ' ');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer21.compact();
        java.nio.LongBuffer longBuffer27 = byteBuffer21.asLongBuffer();
        response8.byteData = byteBuffer21;
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(longBuffer27);
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer78.compact();
        java.nio.ShortBuffer shortBuffer80 = byteBuffer78.asShortBuffer();
        // The following exception was thrown during execution in test generation
        try {
            int int82 = byteBuffer78.getInt((-18));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(shortBuffer80);
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        org.jsoup.Connection.Response response47 = response37.removeHeader("Location");
        java.lang.String str48 = response37.charset();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document49 = response37.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(response47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        org.jsoup.Connection.Request request0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response.writePost(request0, outputStream1, "java.nio.DirectByteBuffer[pos=26 lim=100 cap=100]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.put((byte) 10);
        java.nio.ByteOrder byteOrder23 = byteBuffer20.order();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer10.order(byteOrder23);
        long long25 = byteBuffer10.getLong();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer32 = byteBuffer10.get(byteArray29, 85, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 1]");
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.numRedirects = (short) 0;
        java.lang.String str14 = response1.statusMessage;
        java.lang.String str15 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response1);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document18 = response1.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putShort((short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putChar('#');
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long20 = byteBuffer19.getLong();
        int int21 = byteBuffer19.position();
        float float23 = byteBuffer19.getFloat((int) (short) 10);
        boolean boolean24 = byteBuffer19.hasArray();
        double double25 = byteBuffer19.getDouble();
        short short27 = byteBuffer19.getShort(0);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        boolean boolean38 = byteBuffer33.hasArray();
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer44.get(byteArray57, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer73.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.putInt(0);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer81 = byteBuffer77.put(byteArray80);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer67.get(byteArray80, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer61.put(byteArray80);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer33.put(byteArray80);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer19.get(byteArray80);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer15.put(byteArray80);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer5.get(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer92 = java.nio.ByteBuffer.wrap(byteArray80, 97, (-20));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        int int6 = response2.numRedirects;
        int int7 = response2.statusCode();
        response2.contentType = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        java.net.URL uRL10 = response2.url();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response13 = org.jsoup.helper.HttpConnection.Response.execute(request0, response12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(uRL10);
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        float float11 = byteBuffer10.getFloat();
        java.nio.DoubleBuffer doubleBuffer12 = byteBuffer10.asDoubleBuffer();
        boolean boolean13 = byteBuffer10.hasArray();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer10.putLong((int) ' ', (long) 19);
        java.nio.LongBuffer longBuffer17 = byteBuffer16.asLongBuffer();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer16.get(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer80 = java.nio.ByteBuffer.wrap(byteArray70, 0, (-35));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(doubleBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(longBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer5.duplicate();
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer43.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer43.putChar('a');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer48.asReadOnlyBuffer();
        int int50 = byteBuffer5.compareTo(byteBuffer48);
        short short52 = byteBuffer48.getShort(16);
        double double54 = byteBuffer48.getDouble(14);
        java.nio.FloatBuffer floatBuffer55 = byteBuffer48.asFloatBuffer();
        int int56 = byteBuffer48.remaining();
        byte byte57 = byteBuffer48.get();
        // The following exception was thrown during execution in test generation
        try {
            float float59 = byteBuffer48.getFloat((-24));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-84) + "'", int50 == (-84));
        org.junit.Assert.assertTrue("'" + short52 + "' != '" + (short) 0 + "'", short52 == (short) 0);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(floatBuffer55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 86 + "'", int56 == 86);
        org.junit.Assert.assertTrue("'" + byte57 + "' != '" + (byte) 0 + "'", byte57 == (byte) 0);
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer10.put(byteBuffer69);
        java.nio.Buffer buffer71 = byteBuffer70.flip();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.compact();
        java.nio.ByteBuffer byteBuffer74 = byteBuffer72.put((byte) 66);
        // The following exception was thrown during execution in test generation
        try {
            float float76 = byteBuffer72.getFloat((-65536));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(buffer71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        float float11 = byteBuffer1.getFloat(1);
        java.nio.FloatBuffer floatBuffer12 = byteBuffer1.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer1.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.asReadOnlyBuffer();
        byte byte48 = byteBuffer47.get();
        java.nio.Buffer buffer49 = byteBuffer47.mark();
        double double50 = byteBuffer47.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 0 + "'", byte48 == (byte) 0);
        org.junit.Assert.assertNotNull(buffer49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate4 = pattern2.asPredicate();
        int int5 = pattern2.flags();
        java.util.function.Predicate<java.lang.String> strPredicate6 = pattern2.asPredicate();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(strPredicate6);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        boolean boolean25 = byteBuffer22.equals((java.lang.Object) '\n');
        char char26 = byteBuffer22.getChar();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = byteBuffer22.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + '\000' + "'", char26 == '\000');
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long48 = byteBuffer47.getLong();
        int int49 = byteBuffer47.position();
        float float51 = byteBuffer47.getFloat((int) (short) 10);
        boolean boolean52 = byteBuffer47.hasArray();
        double double53 = byteBuffer47.getDouble();
        short short55 = byteBuffer47.getShort(0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer47.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response58 = null;
        org.jsoup.helper.HttpConnection.Response response59 = new org.jsoup.helper.HttpConnection.Response(response58);
        java.lang.String str61 = response59.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = response59.cookies();
        org.jsoup.Connection.Response response64 = response59.removeCookie("hi!");
        java.lang.String str65 = response59.statusMessage();
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.putInt(0);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.put(byteArray74);
        boolean boolean76 = byteBuffer71.hasArray();
        response59.byteData = byteBuffer71;
        int int78 = byteBuffer57.compareTo(byteBuffer71);
        java.lang.String str79 = byteBuffer57.toString();
        long long80 = byteBuffer57.getLong();
        java.nio.DoubleBuffer doubleBuffer81 = byteBuffer57.asDoubleBuffer();
        response37.byteData = byteBuffer57;
        byte byte83 = byteBuffer57.get();
        long long84 = byteBuffer57.getLong();
        java.nio.Buffer buffer85 = byteBuffer57.clear();
        java.nio.Buffer buffer86 = byteBuffer57.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) 0 + "'", short55 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(response64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-10) + "'", int78 == (-10));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str79, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(doubleBuffer81);
        org.junit.Assert.assertTrue("'" + byte83 + "' != '" + (byte) 0 + "'", byte83 == (byte) 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(buffer85);
        org.junit.Assert.assertNotNull(buffer86);
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        int int2 = 0; // flaky: pattern0.flags();
        int int3 = 0; // flaky: pattern0.flags();
        java.util.regex.Matcher matcher5 = null; // flaky: pattern0.matcher((java.lang.CharSequence) "\\Q\\Q\\E\\\\E\\Q\\E");
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.util.regex.Pattern pattern9 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate10 = pattern9.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate11 = pattern9.asPredicate();
        java.util.regex.Pattern pattern13 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern13;
        java.util.function.Predicate<java.lang.String> strPredicate15 = null; // flaky: pattern13.asPredicate();
        int int16 = 0; // flaky: pattern13.flags();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern13;
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long21 = byteBuffer20.getLong();
        int int22 = byteBuffer20.position();
        float float24 = byteBuffer20.getFloat((int) (short) 10);
        boolean boolean25 = byteBuffer20.hasArray();
        double double26 = byteBuffer20.getDouble();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer20.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer30 = byteBuffer20.asCharBuffer();
        boolean boolean31 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]", (java.lang.CharSequence) charBuffer30);
        java.util.stream.Stream<java.lang.String> strStream32 = null; // flaky: pattern13.splitAsStream((java.lang.CharSequence) charBuffer30);
        boolean boolean33 = java.util.regex.Pattern.matches("\\Q\\Q\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer30);
        java.util.regex.Matcher matcher34 = pattern9.matcher((java.lang.CharSequence) charBuffer30);
        java.lang.String[] strArray36 = null; // flaky: pattern0.split((java.lang.CharSequence) charBuffer30, (-72));
// flaky:         org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-24) + "'", int2 == (-24));
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-24) + "'", int3 == (-24));
// flaky:         org.junit.Assert.assertNotNull(matcher5);
// flaky:         org.junit.Assert.assertEquals(matcher5.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,13 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern9);
        org.junit.Assert.assertEquals(pattern9.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(strPredicate11);
// flaky:         org.junit.Assert.assertNotNull(pattern13);
// flaky:         org.junit.Assert.assertEquals(pattern13.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-24) + "'", int16 == (-24));
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.0f + "'", float24 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matcher34);
        org.junit.Assert.assertEquals(matcher34.toString(), "java.util.regex.Matcher[pattern=hi! region=0,42 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response5);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response8 = org.jsoup.helper.HttpConnection.Response.execute(request0, response5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        response1.statusCode = ' ';
        java.net.URL uRL8 = response1.url();
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(uRL8);
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        boolean boolean9 = response6.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.lang.String str11 = response10.contentType;
        int int12 = response10.statusCode;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        response1.statusCode = 12;
        java.lang.String str16 = response1.charset;
        int int17 = response1.statusCode();
        org.jsoup.Connection.Response response20 = response1.cookie("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E", "java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]");
        org.jsoup.Connection.Method method21 = response1.method();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str16, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(response20);
        org.junit.Assert.assertNull(method21);
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.FloatBuffer floatBuffer25 = byteBuffer24.asFloatBuffer();
        boolean boolean26 = byteBuffer24.hasArray();
        int int27 = byteBuffer24.getInt();
        boolean boolean28 = byteBuffer24.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean23 = response20.hasHeader("java.nio.DirectByteBuffer[pos=31 lim=100 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) '\u3ff0');
        java.nio.ByteBuffer byteBuffer3 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long4 = byteBuffer3.getLong();
        int int5 = byteBuffer3.position();
        float float7 = byteBuffer3.getFloat((int) (short) 10);
        boolean boolean8 = byteBuffer3.hasArray();
        double double9 = byteBuffer3.getDouble();
        short short11 = byteBuffer3.getShort(0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer3.putDouble(100.0d);
        java.nio.CharBuffer charBuffer14 = byteBuffer3.asCharBuffer();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        int int18 = byteBuffer16.position();
        float float20 = byteBuffer16.getFloat((int) (short) 10);
        boolean boolean21 = byteBuffer16.hasArray();
        double double22 = byteBuffer16.getDouble();
        short short24 = byteBuffer16.getShort(0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer16.putDouble(100.0d);
        float float27 = byteBuffer16.getFloat();
        char char29 = byteBuffer16.getChar(1);
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.putInt(0);
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.put(byteArray38);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putDouble(7.565251118924485E-307d);
        int int42 = byteBuffer16.compareTo(byteBuffer41);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer16.putShort((short) (byte) -1);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 0 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer16.put(byteArray47);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer3.put(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.wrap(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = java.nio.ByteBuffer.wrap(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer54 = byteBuffer1.put(byteArray47, 75, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 0.0f + "'", float7 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 0 + "'", short11 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 0 + "'", short24 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.0f + "'", float27 == 0.0f);
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + '\000' + "'", char29 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-6) + "'", int42 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 0]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer51);
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((-52));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Response response9 = response1.header("\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E", "\\Qhi!\\E");
        java.net.HttpURLConnection httpURLConnection10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = null;
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        response12.contentType = "";
        java.lang.String str16 = response12.cookie("hi!");
        int int17 = response12.statusCode();
        org.jsoup.Connection.Request request18 = response12.req;
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str20 = response19.contentType;
        java.lang.String str22 = response19.cookie("\\Q\\Q\\E\\\\E\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response19);
        // The following exception was thrown during execution in test generation
        try {
            response1.setupFromConnection(httpURLConnection10, (org.jsoup.Connection.Response) response23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(request18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.Connection.Response response8 = response4.removeCookie("\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        int int9 = response4.numRedirects;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = response10.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response9 = response1.header("Location", "");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.net.HttpURLConnection httpURLConnection11 = null;
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        response13.contentType = "";
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response13);
        java.lang.String str18 = response16.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response16);
        response19.executed = true;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response19);
        // The following exception was thrown during execution in test generation
        try {
            response1.setupFromConnection(httpURLConnection11, (org.jsoup.Connection.Response) response27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        int int26 = byteBuffer22.getInt(0);
        int int27 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer22.putInt(83, (int) (byte) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putFloat((float) 256);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer32.putChar(23, 'a');
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        java.lang.String str41 = response37.charset;
        java.nio.ByteBuffer byteBuffer42 = response37.byteData;
        org.jsoup.Connection.Response response44 = response37.removeCookie("Location");
        response37.statusCode = (short) 10;
        response37.statusMessage = "hi!";
        org.jsoup.helper.HttpConnection.Response response49 = new org.jsoup.helper.HttpConnection.Response(response37);
        boolean boolean50 = byteBuffer35.equals((java.lang.Object) response49);
        org.jsoup.Connection.Method method51 = response49.method();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(byteBuffer42);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(method51);
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        boolean boolean12 = response5.hasHeaderWithValue("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=12 lim=32 cap=100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putDouble(7.565251118924485E-307d);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer17.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer17.putChar(' ');
        float float23 = byteBuffer22.getFloat();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.FloatBuffer floatBuffer34 = byteBuffer29.asFloatBuffer();
        boolean boolean35 = byteBuffer29.isDirect();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        org.jsoup.helper.HttpConnection.Response response46 = null;
        org.jsoup.helper.HttpConnection.Response response47 = new org.jsoup.helper.HttpConnection.Response(response46);
        response47.contentType = "";
        boolean boolean50 = byteBuffer45.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putInt((int) '#');
        int int59 = byteBuffer45.compareTo(byteBuffer56);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer29.put(byteBuffer56);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer22.put(byteBuffer29);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer22.compact();
        int int63 = byteBuffer9.compareTo(byteBuffer62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.putLong(24, (-1L));
        java.nio.IntBuffer intBuffer67 = byteBuffer66.asIntBuffer();
        // The following exception was thrown during execution in test generation
        try {
            int int69 = byteBuffer66.getInt((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 58 + "'", int63 == 58);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(intBuffer67);
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.asReadOnlyBuffer();
        long long12 = byteBuffer1.getLong();
        short short13 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.duplicate();
        java.lang.String str15 = byteBuffer14.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.nio.DirectByteBuffer[pos=26 lim=100 cap=100]" + "'", str15, "java.nio.DirectByteBuffer[pos=26 lim=100 cap=100]");
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.Connection.Response response7 = response2.removeCookie("hi!");
        java.lang.String str8 = response2.statusMessage();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        boolean boolean19 = byteBuffer14.hasArray();
        response2.byteData = byteBuffer14;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response2);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response22 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = response9.cookies();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.Connection.Method method13 = response12.method();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response7);
        boolean boolean16 = response13.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", "\\Q\\E");
        response13.executed = false;
        org.jsoup.Connection.Method method19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response20 = response13.method(method19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.IntBuffer intBuffer11 = byteBuffer9.asIntBuffer();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putLong((long) (short) 100);
        byte byte15 = byteBuffer9.get((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            byte byte17 = byteBuffer9.get(1117126656);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 0 + "'", byte15 == (byte) 0);
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        response1.statusCode = 12;
        java.lang.String str16 = response1.charset;
        int int17 = response1.statusCode();
        org.jsoup.Connection.Response response20 = response1.cookie("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E", "java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]");
        boolean boolean22 = response1.hasHeader("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]");
        boolean boolean24 = response1.hasCookie("\\QLocation\\E");
        java.lang.String str25 = response1.statusMessage;
        boolean boolean27 = response1.hasCookie("Location");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str16, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(response20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer6 = byteBuffer5.duplicate();
        java.nio.Buffer buffer8 = byteBuffer5.limit(90);
        boolean boolean9 = buffer8.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(buffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putInt((int) (short) 10);
        boolean boolean27 = byteBuffer24.hasArray();
        byte[] byteArray28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer31 = byteBuffer24.get(byteArray28, 84, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer12.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = byteBuffer13.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.duplicate();
        java.nio.Buffer buffer8 = byteBuffer6.position(85);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer6.putChar(10, '4');
        long long12 = byteBuffer6.getLong();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(buffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\QLocation\\E", (int) (short) 0);
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer4.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer8 = byteBuffer4.putInt(0);
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.put(byteArray11);
        java.nio.CharBuffer charBuffer13 = byteBuffer8.asCharBuffer();
        java.lang.String[] strArray15 = pattern2.split((java.lang.CharSequence) charBuffer13, (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.lang.String str17 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\QLocation\\E");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\\QLocation\\E" + "'", str17, "\\QLocation\\E");
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.net.URL uRL11 = response7.url();
        int int12 = response7.statusCode;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(uRL11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.InetAddress inetAddress3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket5 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]", 0, inetAddress3, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putInt(0);
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.put(byteArray12);
        java.nio.FloatBuffer floatBuffer14 = byteBuffer9.asFloatBuffer();
        java.nio.CharBuffer charBuffer15 = byteBuffer9.asCharBuffer();
        boolean boolean16 = java.util.regex.Pattern.matches("", (java.lang.CharSequence) charBuffer15);
        java.lang.String[] strArray17 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer15);
        java.lang.Class<?> wildcardClass18 = null; // flaky: strArray17.getClass();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray17);
// flaky:         org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer5.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer24.asReadOnlyBuffer();
        double double26 = byteBuffer24.getDouble();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putChar('\u0a00');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray29 = byteBuffer24.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer28);
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putChar(10, '4');
        java.nio.DoubleBuffer doubleBuffer14 = byteBuffer13.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer13.put((byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer19 = byteBuffer13.putFloat((int) '\u4120', (float) 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.Connection.Request request12 = null;
        response11.req = request12;
        int int14 = response11.statusCode();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        java.lang.String str8 = response2.statusMessage;
        java.nio.ByteBuffer byteBuffer9 = response2.byteData;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.Connection.Response response12 = response2.removeHeader("Location");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response2);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response14 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNotNull(response12);
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        int int11 = byteBuffer5.position();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.put((byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = byteBuffer5.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 14 + "'", int11 == 14);
        org.junit.Assert.assertNotNull(byteBuffer13);
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer17 = byteBuffer9.putShort(92, (short) (byte) 0);
        org.jsoup.helper.HttpConnection.Response response18 = null;
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        java.lang.String str21 = response19.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = response19.cookies();
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response24);
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response24);
        org.jsoup.Connection.Response response28 = response24.removeCookie("Location");
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response24);
        boolean boolean30 = byteBuffer9.equals((java.lang.Object) response29);
        int int31 = byteBuffer9.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer15 = byteBuffer5.asDoubleBuffer();
        java.nio.Buffer buffer16 = doubleBuffer15.mark();
        java.nio.Buffer buffer17 = doubleBuffer15.flip();
        java.nio.Buffer buffer18 = buffer17.rewind();
        int int19 = buffer18.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertNotNull(buffer17);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E");
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int10 = response1.statusCode();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response13 = response1.removeHeader("\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(response13);
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.Buffer buffer24 = byteBuffer5.position(35);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer5.putInt(0, 18);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = byteBuffer5.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(buffer24);
        org.junit.Assert.assertNotNull(byteBuffer27);
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.slice();
        java.nio.ByteOrder byteOrder16 = byteBuffer15.order();
        int int17 = byteBuffer15.limit();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer20 = byteBuffer15.putShort(79, (short) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteOrder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 76 + "'", int17 == 76);
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.duplicate();
        java.nio.Buffer buffer8 = byteBuffer6.position(85);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer6.putChar(10, '4');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = byteBuffer11.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(buffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer17 = byteBuffer9.putShort(92, (short) (byte) 0);
        boolean boolean18 = byteBuffer9.isDirect();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer9.put((byte) 66);
        java.nio.Buffer buffer22 = byteBuffer20.limit(58);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = byteBuffer20.getInt((int) '\u2000');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(buffer22);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.IntBuffer intBuffer8 = byteBuffer1.asIntBuffer();
        float float9 = byteBuffer1.getFloat();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer12 = byteBuffer11.asShortBuffer();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long15 = byteBuffer14.getLong();
        int int16 = byteBuffer14.position();
        float float18 = byteBuffer14.getFloat((int) (short) 10);
        boolean boolean19 = byteBuffer14.hasArray();
        double double20 = byteBuffer14.getDouble();
        short short22 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer14.putDouble(100.0d);
        byte byte26 = byteBuffer24.get((int) (short) 0);
        java.nio.IntBuffer intBuffer27 = byteBuffer24.asIntBuffer();
        int int28 = byteBuffer11.compareTo(byteBuffer24);
        java.nio.ByteOrder byteOrder29 = byteBuffer24.order();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer24.slice();
        byte byte32 = byteBuffer24.get(0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer1.put(byteBuffer24);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer33.putDouble(80, (double) 24);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putShort((short) (byte) 100);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) 0 + "'", byte26 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-24) + "'", int28 == (-24));
        org.junit.Assert.assertNotNull(byteOrder29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 0 + "'", byte32 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.CharBuffer charBuffer12 = byteBuffer1.asCharBuffer();
        long long14 = byteBuffer1.getLong((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long25 = byteBuffer24.getLong();
        int int26 = byteBuffer24.position();
        float float28 = byteBuffer24.getFloat((int) (short) 10);
        boolean boolean29 = byteBuffer24.hasArray();
        double double30 = byteBuffer24.getDouble();
        short short32 = byteBuffer24.getShort(0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        boolean boolean43 = byteBuffer38.hasArray();
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer68.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.putInt(0);
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer76 = byteBuffer72.put(byteArray75);
        java.nio.ByteBuffer byteBuffer78 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer78.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer82 = byteBuffer78.putInt(0);
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer86 = byteBuffer82.put(byteArray85);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer72.get(byteArray85, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer66.put(byteArray85);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer38.put(byteArray85);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer24.get(byteArray85);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer20.put(byteArray85);
        java.nio.ByteBuffer byteBuffer94 = java.nio.ByteBuffer.wrap(byteArray85);
        java.nio.ByteBuffer byteBuffer95 = byteBuffer1.put(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer98 = byteBuffer95.putShort((-18), (short) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 0 + "'", short32 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(byteBuffer95);
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Request request7 = response1.req;
        boolean boolean8 = response1.executed;
        java.net.HttpURLConnection httpURLConnection9 = null;
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        java.lang.String str15 = response11.cookie("hi!");
        int int16 = response11.statusCode();
        org.jsoup.Connection.Request request17 = response11.req;
        int int18 = response11.statusCode;
        // The following exception was thrown during execution in test generation
        try {
            response1.setupFromConnection(httpURLConnection9, (org.jsoup.Connection.Response) response11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(request7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(request17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response4);
        int int7 = response4.numRedirects;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = response4.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putFloat((float) (-24));
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        int int14 = byteBuffer12.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.put(byteArray33);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer20.get(byteArray33, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer12.get(byteArray33);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.wrap(byteArray33);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer1.put(byteArray33);
        char char42 = byteBuffer40.getChar(52);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '\000' + "'", char42 == '\000');
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        response8.executed = true;
        response8.numRedirects = 2;
        boolean boolean14 = response8.executed;
        response8.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E";
        boolean boolean18 = response8.hasCookie("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.lang.String str21 = response1.header("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        response1.charset = "\\QLocation\\E";
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str25 = response1.statusMessage();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.FloatBuffer floatBuffer2 = byteBuffer1.asFloatBuffer();
        java.nio.Buffer buffer4 = byteBuffer1.limit((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.asReadOnlyBuffer();
        java.nio.Buffer buffer7 = byteBuffer1.limit(10);
        boolean boolean8 = byteBuffer1.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = byteBuffer1.getInt(256);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteOrder byteOrder47 = byteBuffer46.order();
        short short48 = byteBuffer46.getShort();
        java.nio.ByteBuffer byteBuffer49 = byteBuffer46.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer51 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long52 = byteBuffer51.getLong();
        int int53 = byteBuffer51.position();
        float float55 = byteBuffer51.getFloat((int) (short) 10);
        boolean boolean56 = byteBuffer51.hasArray();
        double double57 = byteBuffer51.getDouble();
        short short59 = byteBuffer51.getShort(0);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer51.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer51.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer64.duplicate();
        java.nio.ByteBuffer byteBuffer66 = byteBuffer64.slice();
        java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer68.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.putInt(0);
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer76 = byteBuffer72.put(byteArray75);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer64.get(byteArray75);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer46.get(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            float float80 = byteBuffer78.getFloat(256);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteOrder47);
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) 0 + "'", short48 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 0.0f + "'", float55 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + short59 + "' != '" + (short) 0 + "'", short59 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        int int2 = byteBuffer1.arrayOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = byteBuffer1.getInt((-72));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        java.util.regex.Pattern pattern4 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern4;
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.FloatBuffer floatBuffer16 = byteBuffer11.asFloatBuffer();
        java.nio.CharBuffer charBuffer17 = byteBuffer11.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream18 = null; // flaky: pattern4.splitAsStream((java.lang.CharSequence) charBuffer17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.FloatBuffer floatBuffer29 = byteBuffer24.asFloatBuffer();
        java.nio.CharBuffer charBuffer30 = byteBuffer24.asCharBuffer();
        java.lang.String[] strArray32 = null; // flaky: pattern4.split((java.lang.CharSequence) charBuffer30, (-65536));
        java.nio.Buffer buffer33 = charBuffer30.mark();
        boolean boolean34 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]", (java.lang.CharSequence) charBuffer30);
        boolean boolean35 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]", (java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(pattern4);
// flaky:         org.junit.Assert.assertEquals(pattern4.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
// flaky:         org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(floatBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
// flaky:         org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(buffer33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket(inetAddress6, 16, inetAddress8, 46);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str13 = response9.header("\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str15 = response9.charset;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        char char12 = byteBuffer11.getChar();
        byte byte14 = byteBuffer11.get(64);
        java.util.regex.Pattern pattern15 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern15;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern15;
        int int18 = 0; // flaky: pattern15.flags();
        java.lang.String str19 = null; // flaky: pattern15.pattern();
        java.util.function.Predicate<java.lang.String> strPredicate20 = null; // flaky: pattern15.asPredicate();
        boolean boolean21 = byteBuffer11.equals((java.lang.Object) pattern15);
        java.lang.String str22 = null; // flaky: pattern15.pattern();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
// flaky:         org.junit.Assert.assertNotNull(pattern15);
// flaky:         org.junit.Assert.assertEquals(pattern15.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str19, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str22, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer34 = byteBuffer11.compact();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.put((byte) 1);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer36.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = byteBuffer37.getInt((-18));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.slice();
        int int14 = byteBuffer13.remaining();
        float float15 = byteBuffer13.getFloat();
        int int16 = byteBuffer13.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 84 + "'", int14 == 84);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.0f + "'", float15 == 0.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 80 + "'", int16 == 80);
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response13);
        java.lang.String str17 = response16.contentType;
        response16.charset = "java.nio.DirectByteBuffer[pos=0 lim=76 cap=76]";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.lang.String str3 = null; // flaky: pattern0.pattern();
        java.util.function.Predicate<java.lang.String> strPredicate4 = null; // flaky: pattern0.asPredicate();
// flaky:         org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str3, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate4);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        java.lang.String str9 = response7.header("Location");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Response response12 = response10.removeCookie("\\Qjava.nio.DirectByteBuffer[pos=18 lim=100 cap=100]\\E");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(response12);
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putChar('\000');
        java.nio.CharBuffer charBuffer32 = byteBuffer29.asCharBuffer();
        java.nio.ShortBuffer shortBuffer33 = byteBuffer29.asShortBuffer();
        boolean boolean34 = shortBuffer33.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(charBuffer32);
        org.junit.Assert.assertNotNull(shortBuffer33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putInt((int) '#');
        byte byte18 = byteBuffer14.get(1);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer14.slice();
        int int23 = byteBuffer22.remaining();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer3.put(byteBuffer22);
        int int25 = byteBuffer24.limit();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer24.putShort((short) 1);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer24.putInt(76);
        int int30 = byteBuffer24.position();
        // The following exception was thrown during execution in test generation
        try {
            byte byte32 = byteBuffer24.get((int) '\u0a00');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 84 + "'", int23 == 84);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 98 + "'", int30 == 98);
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        double double12 = byteBuffer10.getDouble(12);
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.put(byteArray21);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer18.get(byteArray31, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer10.put(byteArray31);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer36.putInt(75, 0);
        short short40 = byteBuffer39.getShort();
        java.nio.Buffer buffer42 = byteBuffer39.limit(66);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer44 = byteBuffer39.limit(256);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 7.565251118924485E-307d + "'", double12 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNotNull(buffer42);
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.InetAddress inetAddress1 = null;
        java.net.InetAddress inetAddress3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket5 = socketFactory0.createSocket(inetAddress1, (int) (byte) 1, inetAddress3, (-90));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-90");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.FloatBuffer floatBuffer25 = byteBuffer24.asFloatBuffer();
        java.nio.Buffer buffer26 = byteBuffer24.flip();
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer28.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer39.compact();
        java.nio.ByteBuffer byteBuffer42 = byteBuffer39.put((byte) 10);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer39.putInt(22);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer39.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long49 = byteBuffer48.getLong();
        int int50 = byteBuffer48.position();
        float float52 = byteBuffer48.getFloat((int) (short) 10);
        boolean boolean53 = byteBuffer48.hasArray();
        java.nio.DoubleBuffer doubleBuffer54 = byteBuffer48.asDoubleBuffer();
        java.nio.Buffer buffer55 = byteBuffer48.clear();
        java.nio.ByteOrder byteOrder56 = byteBuffer48.order();
        java.nio.ByteBuffer byteBuffer57 = byteBuffer39.order(byteOrder56);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer31.order(byteOrder56);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer24.order(byteOrder56);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer62 = byteBuffer59.putShort((-6), (short) (byte) 66);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleBuffer54);
        org.junit.Assert.assertNotNull(buffer55);
        org.junit.Assert.assertNotNull(byteOrder56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        java.util.regex.Pattern pattern4 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern7 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern8 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern8;
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer12 = byteBuffer11.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream13 = null; // flaky: pattern8.splitAsStream((java.lang.CharSequence) charBuffer12);
        java.util.regex.Matcher matcher14 = pattern7.matcher((java.lang.CharSequence) charBuffer12);
        java.util.regex.Matcher matcher15 = null; // flaky: pattern4.matcher((java.lang.CharSequence) charBuffer12);
        boolean boolean16 = java.util.regex.Pattern.matches("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]", (java.lang.CharSequence) charBuffer12);
        boolean boolean17 = java.util.regex.Pattern.matches("\\Q\\Q\\E\\\\E\\Q\\E", (java.lang.CharSequence) "java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(pattern4);
// flaky:         org.junit.Assert.assertEquals(pattern4.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern7);
        org.junit.Assert.assertEquals(pattern7.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern8);
// flaky:         org.junit.Assert.assertEquals(pattern8.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(charBuffer12);
// flaky:         org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(matcher14);
        org.junit.Assert.assertEquals(matcher14.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher15);
// flaky:         org.junit.Assert.assertEquals(matcher15.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket6 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]", 18, inetAddress4, (-52));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.Buffer buffer9 = byteBuffer8.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(buffer9);
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer3 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer3.putLong((long) '4');
        short short7 = byteBuffer3.getShort(0);
        int int9 = byteBuffer3.getInt((int) '4');
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer3);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer3.compact();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer14 = byteBuffer3.putFloat((-90), (float) 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 0 + "'", short7 == (short) 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer11);
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.Buffer buffer6 = byteBuffer1.rewind();
        int int7 = byteBuffer1.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer24.compact();
        java.nio.Buffer buffer26 = byteBuffer24.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(buffer26);
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer25 = byteBuffer24.mark();
        boolean boolean26 = byteBuffer24.isDirect();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putLong((long) (short) 0);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        int int34 = byteBuffer32.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer40.get(byteArray53, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer32.get(byteArray53);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer24.get(byteArray53);
        java.nio.ByteBuffer byteBuffer61 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer61.putLong((long) '4');
        float float65 = byteBuffer63.getFloat(32);
        boolean boolean66 = byteBuffer63.isDirect();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer67 = byteBuffer59.put(byteBuffer63);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 0.0f + "'", float65 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.Buffer buffer12 = byteBuffer5.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(buffer12);
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        int int53 = byteBuffer51.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer51.get(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer14.get(byteArray72);
        java.nio.Buffer buffer79 = byteBuffer78.flip();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer82 = byteBuffer78.putDouble(63, (double) 256);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(buffer79);
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket7 = socketFactory0.createSocket(inetAddress5, 12);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer5.duplicate();
        java.nio.ByteBuffer byteBuffer40 = byteBuffer5.putChar((int) (byte) 10, '\000');
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer48.compact();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer48.put((byte) 10);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer48.putInt(22);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer48.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer57 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long58 = byteBuffer57.getLong();
        int int59 = byteBuffer57.position();
        float float61 = byteBuffer57.getFloat((int) (short) 10);
        boolean boolean62 = byteBuffer57.hasArray();
        java.nio.DoubleBuffer doubleBuffer63 = byteBuffer57.asDoubleBuffer();
        java.nio.Buffer buffer64 = byteBuffer57.clear();
        java.nio.ByteOrder byteOrder65 = byteBuffer57.order();
        java.nio.ByteBuffer byteBuffer66 = byteBuffer48.order(byteOrder65);
        java.nio.Buffer buffer68 = byteBuffer48.limit(58);
        int int69 = byteBuffer5.compareTo(byteBuffer48);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray70 = byteBuffer48.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 0.0f + "'", float61 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleBuffer63);
        org.junit.Assert.assertNotNull(buffer64);
        org.junit.Assert.assertNotNull(byteOrder65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(buffer68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.duplicate();
        java.lang.String str16 = byteBuffer15.toString();
        java.nio.FloatBuffer floatBuffer17 = byteBuffer15.asFloatBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str16, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(floatBuffer17);
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int7 = response6.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response6.scanHeaders("Location");
        java.lang.String str10 = response6.charset;
        java.lang.String str12 = response6.header("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.net.URL uRL7 = response1.url();
        org.jsoup.Connection.Method method8 = response1.method();
        org.jsoup.Connection.Method method9 = response1.method();
        org.jsoup.Connection.Method method10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response11 = response1.method(method10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(uRL7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method9);
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        org.jsoup.Connection.Response response8 = response1.removeCookie("Location");
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str10 = response1.statusMessage();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        short short16 = byteBuffer15.getShort();
        java.nio.IntBuffer intBuffer17 = byteBuffer15.asIntBuffer();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long20 = byteBuffer19.getLong();
        int int21 = byteBuffer19.position();
        float float23 = byteBuffer19.getFloat((int) (short) 10);
        boolean boolean24 = byteBuffer19.hasArray();
        double double25 = byteBuffer19.getDouble();
        short short27 = byteBuffer19.getShort(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer19.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response30 = null;
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response30);
        java.lang.String str33 = response31.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = response31.cookies();
        org.jsoup.Connection.Response response36 = response31.removeCookie("hi!");
        java.lang.String str37 = response31.statusMessage();
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        boolean boolean48 = byteBuffer43.hasArray();
        response31.byteData = byteBuffer43;
        int int50 = byteBuffer29.compareTo(byteBuffer43);
        int int51 = byteBuffer15.compareTo(byteBuffer43);
        java.nio.Buffer buffer52 = byteBuffer43.rewind();
        short short54 = byteBuffer43.getShort(10);
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        short short58 = byteBuffer56.getShort((int) '\000');
        boolean boolean59 = byteBuffer43.equals((java.lang.Object) byteBuffer56);
        response6.byteData = byteBuffer43;
        org.jsoup.helper.HttpConnection.Response response61 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer73.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.putInt(0);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer81 = byteBuffer77.put(byteArray80);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer67.get(byteArray80, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer84.putShort((short) -1);
        int int88 = byteBuffer84.getInt(0);
        int int89 = byteBuffer84.position();
        java.nio.ByteBuffer byteBuffer92 = byteBuffer84.putInt(83, (int) (byte) 100);
        java.lang.String str93 = byteBuffer92.toString();
        response61.byteData = byteBuffer92;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 0 + "'", short16 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(response36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-10) + "'", int50 == (-10));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(buffer52);
        org.junit.Assert.assertTrue("'" + short54 + "' != '" + (short) 0 + "'", short54 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + short58 + "' != '" + (short) 0 + "'", short58 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 16 + "'", int89 == 16);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]" + "'", str93, "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]");
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response2.scanHeaders("");
        java.lang.String str11 = response2.getHeaderCaseInsensitive("Location");
        java.lang.String str12 = response2.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response2.cookies();
        java.lang.String str15 = response2.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.Connection.Response response19 = response17.removeHeader("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        boolean boolean21 = response17.hasCookie("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        int int22 = response17.numRedirects;
        java.lang.String str24 = response17.header("\\Q\\Q\\E\\\\E\\Q\\E");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response25 = org.jsoup.helper.HttpConnection.Response.execute(request0, response17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(response19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.InetAddress inetAddress1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket3 = socketFactory0.createSocket(inetAddress1, 88);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = response9.cookies();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str12 = response11.contentType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        java.nio.Buffer buffer25 = byteBuffer22.limit(4);
        java.nio.LongBuffer longBuffer26 = byteBuffer22.asLongBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer29 = byteBuffer22.putDouble((int) 'a', (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(longBuffer26);
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        org.jsoup.Connection.Request request8 = response1.req;
        java.lang.String str9 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        boolean boolean13 = response11.hasCookie("java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(request8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", (int) (short) 10);
        java.lang.String str3 = pattern2.pattern();
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E");
        java.util.stream.Stream<java.lang.String> strStream7 = pattern2.splitAsStream((java.lang.CharSequence) "\\Qjava.nio.DirectByteBuffer[pos=8 lim=100 cap=100]\\E");
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str3, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strStream7);
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket7 = socketFactory0.createSocket(inetAddress5, 28);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response15);
        response15.statusMessage = "\\Qhi!\\E";
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response15);
        boolean boolean21 = response15.hasHeader("\\Qjava.nio.DirectByteBuffer[pos=16 lim=100 cap=100]\\E");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        java.lang.String str9 = response7.header("Location");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long14 = byteBuffer13.getLong();
        int int15 = byteBuffer13.position();
        float float17 = byteBuffer13.getFloat((int) (short) 10);
        boolean boolean18 = byteBuffer13.hasArray();
        double double19 = byteBuffer13.getDouble();
        short short21 = byteBuffer13.getShort(0);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer13.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer13.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer26.duplicate();
        response11.byteData = byteBuffer27;
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.put((int) '4', (byte) -1);
        byte byte32 = byteBuffer27.get();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = byteBuffer27.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 0 + "'", short21 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 0 + "'", byte32 == (byte) 0);
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.DoubleBuffer doubleBuffer28 = byteBuffer1.asDoubleBuffer();
        java.nio.Buffer buffer30 = byteBuffer1.position(58);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer31 = buffer30.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(buffer30);
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer17 = byteBuffer9.putShort(92, (short) (byte) 0);
        org.jsoup.helper.HttpConnection.Response response18 = null;
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        java.lang.String str21 = response19.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = response19.cookies();
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response19);
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response24);
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response24);
        org.jsoup.Connection.Response response28 = response24.removeCookie("Location");
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response24);
        boolean boolean30 = byteBuffer9.equals((java.lang.Object) response29);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer32 = byteBuffer9.limit(1117126656);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        int int11 = byteBuffer5.limit();
        boolean boolean12 = byteBuffer5.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int7 = response6.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response6.scanHeaders("Location");
        java.lang.String str10 = response6.charset;
        int int11 = response6.statusCode();
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Request request13 = null;
        response12.req = request13;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int7 = response6.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response6.scanHeaders("Location");
        java.lang.String str10 = response6.charset;
        boolean boolean11 = response6.executed;
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer22.putDouble(0, (double) 13376L);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer27.slice();
        java.nio.Buffer buffer29 = byteBuffer27.mark();
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long32 = byteBuffer31.getLong();
        int int33 = byteBuffer31.position();
        float float35 = byteBuffer31.getFloat((int) (short) 10);
        boolean boolean36 = byteBuffer31.hasArray();
        double double37 = byteBuffer31.getDouble();
        short short39 = byteBuffer31.getShort(0);
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocate((int) '\n');
        byte[] byteArray42 = byteBuffer41.array();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer31.get(byteArray42);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.wrap(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer47 = byteBuffer27.put(byteArray42, 59, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(buffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) 0 + "'", short39 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer44);
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        int int9 = byteBuffer8.remaining();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer12 = byteBuffer8.putFloat((-20), (float) '\000');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 92 + "'", int9 == 92);
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer3.putDouble((double) ' ');
        java.nio.IntBuffer intBuffer32 = byteBuffer3.asIntBuffer();
        char char33 = byteBuffer3.getChar();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer3.putShort((short) (byte) 0);
        java.nio.LongBuffer longBuffer36 = byteBuffer3.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertTrue("'" + char33 + "' != '" + '\000' + "'", char33 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(longBuffer36);
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response12 = response9.cookie("\\Qhi!\\E", "");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str14 = response9.statusMessage();
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response9);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document16 = response9.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response10.cookies();
        boolean boolean13 = response10.executed;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        org.jsoup.helper.HttpConnection.Response response27 = null;
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response27);
        response28.contentType = "";
        boolean boolean31 = byteBuffer26.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer34 = byteBuffer26.putShort(92, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer26.putFloat(85, (float) 128);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer37.putLong(85, 42949672960L);
        response10.byteData = byteBuffer37;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer40);
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder13 = byteBuffer12.order();
        char char15 = byteBuffer12.getChar((int) (byte) 1);
        char char16 = byteBuffer12.getChar();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray17 = byteBuffer12.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + '\000' + "'", char16 == '\000');
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        int int6 = byteBuffer1.getInt();
        java.lang.String str7 = byteBuffer1.toString();
        java.nio.DoubleBuffer doubleBuffer8 = byteBuffer1.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer16.compact();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer16.put((byte) 10);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer16.putInt(22);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer16.putDouble((double) 1);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long26 = byteBuffer25.getLong();
        int int27 = byteBuffer25.position();
        float float29 = byteBuffer25.getFloat((int) (short) 10);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.DoubleBuffer doubleBuffer31 = byteBuffer25.asDoubleBuffer();
        java.nio.Buffer buffer32 = byteBuffer25.clear();
        java.nio.ByteOrder byteOrder33 = byteBuffer25.order();
        java.nio.ByteBuffer byteBuffer34 = byteBuffer16.order(byteOrder33);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer1.order(byteOrder33);
        int int36 = byteBuffer35.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]" + "'", str7, "java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(doubleBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleBuffer31);
        org.junit.Assert.assertNotNull(buffer32);
        org.junit.Assert.assertNotNull(byteOrder33);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket5 = socketFactory0.createSocket(inetAddress3, (-64));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-64");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        int int24 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer22.putDouble(0, (double) 13376L);
        org.jsoup.helper.HttpConnection.Response response28 = null;
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response28);
        response29.contentType = "";
        java.lang.String str32 = response29.contentType;
        java.lang.String str33 = response29.charset;
        java.nio.ByteBuffer byteBuffer34 = response29.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap35 = response29.headers();
        org.jsoup.helper.HttpConnection.Response response36 = new org.jsoup.helper.HttpConnection.Response(response29);
        boolean boolean38 = response29.hasHeader("\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response39 = new org.jsoup.helper.HttpConnection.Response(response29);
        org.jsoup.helper.HttpConnection.Response response40 = new org.jsoup.helper.HttpConnection.Response(response29);
        boolean boolean41 = byteBuffer27.equals((java.lang.Object) response29);
        java.lang.String str42 = response29.contentType;
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(byteBuffer34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        double double12 = byteBuffer11.getDouble();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.slice();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer13.slice();
        java.nio.Buffer buffer15 = byteBuffer13.rewind();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer16 = buffer15.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.43230922487E-312d + "'", double12 == 5.43230922487E-312d);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(buffer15);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        int int6 = response1.statusCode();
        response1.contentType = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        java.net.URL uRL9 = response1.url();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        boolean boolean13 = response10.hasHeader("\\Q\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E\\\\E\\Q\\E");
        response10.executed = true;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(uRL9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        double double16 = byteBuffer9.getDouble(0);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        short short22 = byteBuffer18.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer18.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer31.get(byteArray44, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer31.putDouble(100.0d);
        int int51 = byteBuffer25.compareTo(byteBuffer31);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteOrder byteOrder62 = byteBuffer61.order();
        java.nio.ByteBuffer byteBuffer63 = byteBuffer31.order(byteOrder62);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer31.asReadOnlyBuffer();
        boolean boolean65 = byteBuffer9.equals((java.lang.Object) byteBuffer31);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer31.putShort((short) 100);
        java.nio.FloatBuffer floatBuffer68 = byteBuffer67.asFloatBuffer();
        java.nio.ShortBuffer shortBuffer69 = byteBuffer67.asShortBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer70 = shortBuffer69.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.57E-322d + "'", double16 == 2.57E-322d);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteOrder62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(floatBuffer68);
        org.junit.Assert.assertNotNull(shortBuffer69);
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response6.scanHeaders("hi!");
        org.jsoup.Connection.Method method9 = response6.method();
        org.jsoup.Connection.Response response11 = response6.removeHeader("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        int int17 = byteBuffer15.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer15.putChar((int) ' ', '#');
        short short21 = byteBuffer20.getShort();
        response6.byteData = byteBuffer20;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response6);
        boolean boolean24 = response6.executed;
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response6);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response26 = org.jsoup.helper.HttpConnection.Response.execute(request0, response6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 0 + "'", short21 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.util.function.Predicate<java.lang.String> strPredicate2 = null; // flaky: pattern0.asPredicate();
        int int3 = 0; // flaky: pattern0.flags();
        java.util.function.Predicate<java.lang.String> strPredicate4 = null; // flaky: pattern0.asPredicate();
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer7 = byteBuffer6.asCharBuffer();
        java.util.regex.Matcher matcher8 = null; // flaky: pattern0.matcher((java.lang.CharSequence) charBuffer7);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        org.jsoup.helper.HttpConnection.Response response20 = null;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        response21.contentType = "";
        boolean boolean24 = byteBuffer19.equals((java.lang.Object) "");
        double double26 = byteBuffer19.getDouble(0);
        java.nio.CharBuffer charBuffer27 = byteBuffer19.asCharBuffer();
        boolean boolean28 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]", (java.lang.CharSequence) charBuffer27);
        java.lang.String[] strArray30 = null; // flaky: pattern0.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]", 58);
        java.util.regex.Pattern pattern33 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern36 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern39 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern40 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern40;
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer44 = byteBuffer43.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream45 = null; // flaky: pattern40.splitAsStream((java.lang.CharSequence) charBuffer44);
        java.util.regex.Matcher matcher46 = pattern39.matcher((java.lang.CharSequence) charBuffer44);
        java.util.regex.Matcher matcher47 = null; // flaky: pattern36.matcher((java.lang.CharSequence) charBuffer44);
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer50 = byteBuffer49.asCharBuffer();
        java.util.regex.Matcher matcher51 = null; // flaky: pattern36.matcher((java.lang.CharSequence) charBuffer50);
        java.lang.String[] strArray53 = pattern33.split((java.lang.CharSequence) charBuffer50, 8);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern33;
        java.util.regex.Pattern pattern57 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern57;
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.FloatBuffer floatBuffer69 = byteBuffer64.asFloatBuffer();
        java.nio.CharBuffer charBuffer70 = byteBuffer64.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream71 = null; // flaky: pattern57.splitAsStream((java.lang.CharSequence) charBuffer70);
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer73.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.putInt(0);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer81 = byteBuffer77.put(byteArray80);
        java.nio.FloatBuffer floatBuffer82 = byteBuffer77.asFloatBuffer();
        java.nio.CharBuffer charBuffer83 = byteBuffer77.asCharBuffer();
        java.lang.String[] strArray85 = null; // flaky: pattern57.split((java.lang.CharSequence) charBuffer83, (-65536));
        java.lang.String[] strArray86 = pattern33.split((java.lang.CharSequence) charBuffer83);
        java.lang.String[] strArray88 = null; // flaky: pattern0.split((java.lang.CharSequence) charBuffer83, (int) (byte) 1);
// flaky:         org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-24) + "'", int3 == (-24));
// flaky:         org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
// flaky:         org.junit.Assert.assertNotNull(matcher8);
// flaky:         org.junit.Assert.assertEquals(matcher8.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2.57E-322d + "'", double26 == 2.57E-322d);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(pattern33);
        org.junit.Assert.assertEquals(pattern33.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern36);
// flaky:         org.junit.Assert.assertEquals(pattern36.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern39);
        org.junit.Assert.assertEquals(pattern39.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern40);
// flaky:         org.junit.Assert.assertEquals(pattern40.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(charBuffer44);
// flaky:         org.junit.Assert.assertNotNull(strStream45);
        org.junit.Assert.assertNotNull(matcher46);
        org.junit.Assert.assertEquals(matcher46.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher47);
// flaky:         org.junit.Assert.assertEquals(matcher47.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(charBuffer50);
// flaky:         org.junit.Assert.assertNotNull(matcher51);
// flaky:         org.junit.Assert.assertEquals(matcher51.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray53);
// flaky:         org.junit.Assert.assertNotNull(pattern57);
// flaky:         org.junit.Assert.assertEquals(pattern57.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(floatBuffer69);
        org.junit.Assert.assertNotNull(charBuffer70);
// flaky:         org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(floatBuffer82);
        org.junit.Assert.assertNotNull(charBuffer83);
// flaky:         org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
// flaky:         org.junit.Assert.assertNotNull(strArray88);
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.Connection.Response response7 = response5.removeHeader("\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response5);
        response8.charset = "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E";
        org.junit.Assert.assertNotNull(response7);
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        response1.statusMessage = "\\Qhi!\\E";
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str11 = response1.contentType;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer1.putShort((short) (byte) -1);
        java.nio.Buffer buffer30 = byteBuffer29.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putLong((int) (short) 256, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(buffer30);
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        org.jsoup.Connection.Request request9 = null;
        response1.req = request9;
        response1.contentType = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        int int15 = response14.statusCode();
        java.net.HttpURLConnection httpURLConnection16 = null;
        org.jsoup.helper.HttpConnection.Response response17 = null;
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response17);
        response18.contentType = "";
        java.lang.String str21 = response18.contentType;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response18);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response23);
        boolean boolean26 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.lang.String str28 = response27.contentType;
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response27);
        org.jsoup.helper.HttpConnection.Response response30 = new org.jsoup.helper.HttpConnection.Response(response29);
        org.jsoup.Connection.Request request31 = response29.req;
        // The following exception was thrown during execution in test generation
        try {
            response14.setupFromConnection(httpURLConnection16, (org.jsoup.Connection.Response) response29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(request31);
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean8 = response6.hasHeader("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket8 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", 100, inetAddress6, 90);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        byte byte7 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        short short13 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer9.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(byteArray35);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer22.get(byteArray35, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer22.putDouble(100.0d);
        int int42 = byteBuffer16.compareTo(byteBuffer22);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteOrder byteOrder53 = byteBuffer52.order();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer22.order(byteOrder53);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer1.order(byteOrder53);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer1.putLong(4, (long) 8);
        int int59 = byteBuffer58.limit();
        java.nio.ByteBuffer byteBuffer61 = byteBuffer58.put((byte) 0);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer58.putChar(76, ' ');
        int int65 = byteBuffer58.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteOrder53);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 90 + "'", int65 == 90);
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.asReadOnlyBuffer();
        long long12 = byteBuffer1.getLong();
        byte byte13 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.putShort((short) 0);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer21.putChar('a');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer26.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer26.putDouble(0.0d);
        boolean boolean30 = byteBuffer26.isReadOnly();
        java.nio.ByteOrder byteOrder31 = byteBuffer26.order();
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.order(byteOrder31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.FloatBuffer floatBuffer43 = byteBuffer38.asFloatBuffer();
        boolean boolean44 = byteBuffer38.isDirect();
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        org.jsoup.helper.HttpConnection.Response response55 = null;
        org.jsoup.helper.HttpConnection.Response response56 = new org.jsoup.helper.HttpConnection.Response(response55);
        response56.contentType = "";
        boolean boolean59 = byteBuffer54.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer61 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer61.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer65 = byteBuffer61.putInt(0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putInt((int) '#');
        int int68 = byteBuffer54.compareTo(byteBuffer65);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer38.put(byteBuffer65);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer38.putShort((short) 1);
        boolean boolean72 = byteBuffer32.equals((java.lang.Object) byteBuffer38);
        java.nio.ByteBuffer byteBuffer74 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer74.putLong((long) '4');
        short short78 = byteBuffer74.getShort(0);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer74.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer84 = byteBuffer81.put((int) (short) 10, (byte) 1);
        short short85 = byteBuffer81.getShort();
        java.lang.String str86 = byteBuffer81.toString();
        short short87 = byteBuffer81.getShort();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer88 = byteBuffer38.put(byteBuffer81);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteOrder31);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(floatBuffer43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertTrue("'" + short78 + "' != '" + (short) 0 + "'", short78 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertTrue("'" + short85 + "' != '" + (short) 0 + "'", short85 == (short) 0);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str86, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + short87 + "' != '" + (short) 256 + "'", short87 == (short) 256);
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.lang.String str10 = response5.getHeaderCaseInsensitive("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        int int12 = response5.numRedirects;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.Class<?> wildcardClass14 = response13.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str11 = response9.statusMessage;
        java.lang.String str13 = response9.getHeaderCaseInsensitive("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response9);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = response9.hasHeader("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Header name must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar(6, '\n');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putFloat((float) 18);
        // The following exception was thrown during execution in test generation
        try {
            char char17 = byteBuffer5.getChar((-12));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putLong(8, (long) (short) 1);
        java.nio.Buffer buffer10 = byteBuffer9.clear();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long13 = byteBuffer12.getLong();
        int int14 = byteBuffer12.position();
        float float16 = byteBuffer12.getFloat((int) (short) 10);
        boolean boolean17 = byteBuffer12.hasArray();
        double double18 = byteBuffer12.getDouble();
        java.nio.IntBuffer intBuffer19 = byteBuffer12.asIntBuffer();
        float float20 = byteBuffer12.getFloat();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer23 = byteBuffer22.asShortBuffer();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long26 = byteBuffer25.getLong();
        int int27 = byteBuffer25.position();
        float float29 = byteBuffer25.getFloat((int) (short) 10);
        boolean boolean30 = byteBuffer25.hasArray();
        double double31 = byteBuffer25.getDouble();
        short short33 = byteBuffer25.getShort(0);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer25.putDouble(100.0d);
        byte byte37 = byteBuffer35.get((int) (short) 0);
        java.nio.IntBuffer intBuffer38 = byteBuffer35.asIntBuffer();
        int int39 = byteBuffer22.compareTo(byteBuffer35);
        java.nio.ByteOrder byteOrder40 = byteBuffer35.order();
        java.nio.ByteBuffer byteBuffer41 = byteBuffer35.slice();
        byte byte43 = byteBuffer35.get(0);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer12.put(byteBuffer35);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long47 = byteBuffer46.getLong();
        int int48 = byteBuffer46.position();
        float float50 = byteBuffer46.getFloat((int) (short) 10);
        boolean boolean51 = byteBuffer46.hasArray();
        double double52 = byteBuffer46.getDouble();
        short short54 = byteBuffer46.getShort(0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer46.putDouble(100.0d);
        java.nio.CharBuffer charBuffer57 = byteBuffer46.asCharBuffer();
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long60 = byteBuffer59.getLong();
        int int61 = byteBuffer59.position();
        float float63 = byteBuffer59.getFloat((int) (short) 10);
        boolean boolean64 = byteBuffer59.hasArray();
        double double65 = byteBuffer59.getDouble();
        short short67 = byteBuffer59.getShort(0);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer59.putDouble(100.0d);
        float float70 = byteBuffer59.getFloat();
        char char72 = byteBuffer59.getChar(1);
        java.nio.ByteBuffer byteBuffer74 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer74.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.putInt(0);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer82 = byteBuffer78.put(byteArray81);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer82.putDouble(7.565251118924485E-307d);
        int int85 = byteBuffer59.compareTo(byteBuffer84);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer59.putShort((short) (byte) -1);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 0 };
        java.nio.ByteBuffer byteBuffer91 = byteBuffer59.put(byteArray90);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer46.put(byteArray90);
        java.nio.ByteBuffer byteBuffer93 = java.nio.ByteBuffer.wrap(byteArray90);
        java.nio.ByteBuffer byteBuffer94 = byteBuffer44.put(byteArray90);
        java.nio.ByteBuffer byteBuffer95 = byteBuffer9.put(byteArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer98 = java.nio.ByteBuffer.wrap(byteArray90, 68, 25);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer19);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(shortBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 0 + "'", short33 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 0 + "'", byte37 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-24) + "'", int39 == (-24));
        org.junit.Assert.assertNotNull(byteOrder40);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) 0 + "'", byte43 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 0.0f + "'", float50 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + short54 + "' != '" + (short) 0 + "'", short54 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(charBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + short67 + "' != '" + (short) 0 + "'", short67 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertTrue("'" + char72 + "' != '" + '\000' + "'", char72 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-6) + "'", int85 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[1, 0]");
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(byteBuffer95);
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str13 = response9.header("\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response9);
        response14.contentType = "java.nio.DirectByteBuffer[pos=12 lim=32 cap=100]";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        double double12 = byteBuffer10.getDouble(12);
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.put(byteArray21);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer18.get(byteArray31, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer10.put(byteArray31);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer36.putInt(75, 0);
        short short40 = byteBuffer39.getShort();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putDouble(3, (double) '4');
        int int45 = byteBuffer39.getInt(27);
        boolean boolean46 = byteBuffer39.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 7.565251118924485E-307d + "'", double12 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        java.nio.Buffer buffer25 = byteBuffer22.limit(4);
        java.nio.Buffer buffer26 = byteBuffer22.clear();
        long long27 = byteBuffer22.getLong();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response2.scanHeaders("");
        java.lang.String str11 = response2.getHeaderCaseInsensitive("Location");
        java.lang.String str12 = response2.charset();
        response2.statusCode = 64;
        boolean boolean15 = response2.executed;
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response2);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response17 = org.jsoup.helper.HttpConnection.Response.execute(request0, response16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putInt(0);
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.put(byteArray12);
        java.nio.FloatBuffer floatBuffer14 = byteBuffer9.asFloatBuffer();
        java.nio.CharBuffer charBuffer15 = byteBuffer9.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.FloatBuffer floatBuffer27 = byteBuffer22.asFloatBuffer();
        java.nio.CharBuffer charBuffer28 = byteBuffer22.asCharBuffer();
        java.lang.String[] strArray30 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer28, (-65536));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        int int32 = 0; // flaky: pattern2.flags();
        java.util.regex.Matcher matcher34 = null; // flaky: pattern2.matcher((java.lang.CharSequence) "\\Q\\Q\\E\\\\E\\Q\\E");
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        int int36 = 0; // flaky: pattern2.flags();
        java.util.regex.Pattern pattern39 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern39;
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.FloatBuffer floatBuffer51 = byteBuffer46.asFloatBuffer();
        java.nio.CharBuffer charBuffer52 = byteBuffer46.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream53 = null; // flaky: pattern39.splitAsStream((java.lang.CharSequence) charBuffer52);
        java.util.regex.Matcher matcher54 = null; // flaky: pattern2.matcher((java.lang.CharSequence) charBuffer52);
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
// flaky:         org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(floatBuffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
// flaky:         org.junit.Assert.assertNotNull(strArray30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-24) + "'", int32 == (-24));
// flaky:         org.junit.Assert.assertNotNull(matcher34);
// flaky:         org.junit.Assert.assertEquals(matcher34.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,13 lastmatch=]");
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-24) + "'", int36 == (-24));
// flaky:         org.junit.Assert.assertNotNull(pattern39);
// flaky:         org.junit.Assert.assertEquals(pattern39.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(floatBuffer51);
        org.junit.Assert.assertNotNull(charBuffer52);
// flaky:         org.junit.Assert.assertNotNull(strStream53);
// flaky:         org.junit.Assert.assertNotNull(matcher54);
// flaky:         org.junit.Assert.assertEquals(matcher54.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,43 lastmatch=]");
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.Connection.Response response7 = response2.removeCookie("hi!");
        java.lang.String str8 = response2.statusMessage();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        boolean boolean19 = byteBuffer14.hasArray();
        response2.byteData = byteBuffer14;
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        boolean boolean31 = byteBuffer26.hasArray();
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.putInt(0);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.put(byteArray50);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer37.get(byteArray50, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.putInt(0);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.put(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer66.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.putInt(0);
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.put(byteArray73);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer60.get(byteArray73, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer54.put(byteArray73);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer26.put(byteArray73);
        response2.byteData = byteBuffer26;
        boolean boolean81 = byteBuffer26.hasArray();
        java.nio.ByteBuffer byteBuffer84 = byteBuffer26.putInt(14, 12);
        java.nio.CharBuffer charBuffer85 = byteBuffer84.asCharBuffer();
        boolean boolean86 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]", (java.lang.CharSequence) charBuffer85);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer87 = charBuffer85.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(charBuffer85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.Connection.Response response6 = response1.removeHeader("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response1);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document8 = response1.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(response6);
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) (short) 1);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.asReadOnlyBuffer();
        boolean boolean3 = byteBuffer1.isReadOnly();
        java.nio.Buffer buffer4 = byteBuffer1.mark();
        // The following exception was thrown during execution in test generation
        try {
            char char6 = byteBuffer1.getChar(22);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(buffer4);
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern3 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer7 = byteBuffer6.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream8 = null; // flaky: pattern3.splitAsStream((java.lang.CharSequence) charBuffer7);
        java.util.regex.Matcher matcher9 = pattern2.matcher((java.lang.CharSequence) charBuffer7);
        int int10 = pattern2.flags();
        java.util.regex.Pattern pattern13 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern16 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern19 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern20 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern20;
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer24 = byteBuffer23.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream25 = null; // flaky: pattern20.splitAsStream((java.lang.CharSequence) charBuffer24);
        java.util.regex.Matcher matcher26 = pattern19.matcher((java.lang.CharSequence) charBuffer24);
        java.util.regex.Matcher matcher27 = null; // flaky: pattern16.matcher((java.lang.CharSequence) charBuffer24);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer30 = byteBuffer29.asCharBuffer();
        java.util.regex.Matcher matcher31 = null; // flaky: pattern16.matcher((java.lang.CharSequence) charBuffer30);
        java.lang.String[] strArray33 = pattern13.split((java.lang.CharSequence) charBuffer30, 8);
        java.util.regex.Pattern pattern36 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern37 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern37;
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer41 = byteBuffer40.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream42 = null; // flaky: pattern37.splitAsStream((java.lang.CharSequence) charBuffer41);
        java.util.regex.Matcher matcher43 = pattern36.matcher((java.lang.CharSequence) charBuffer41);
        java.lang.String[] strArray45 = pattern13.split((java.lang.CharSequence) charBuffer41, (-6));
        java.util.stream.Stream<java.lang.String> strStream46 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer41);
        java.lang.String str47 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern3);
// flaky:         org.junit.Assert.assertEquals(pattern3.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
// flaky:         org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(matcher9);
        org.junit.Assert.assertEquals(matcher9.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(pattern13);
        org.junit.Assert.assertEquals(pattern13.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern16);
// flaky:         org.junit.Assert.assertEquals(pattern16.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern19);
        org.junit.Assert.assertEquals(pattern19.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern20);
// flaky:         org.junit.Assert.assertEquals(pattern20.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(charBuffer24);
// flaky:         org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertNotNull(matcher26);
        org.junit.Assert.assertEquals(matcher26.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher27);
// flaky:         org.junit.Assert.assertEquals(matcher27.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
// flaky:         org.junit.Assert.assertNotNull(matcher31);
// flaky:         org.junit.Assert.assertEquals(matcher31.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(pattern36);
        org.junit.Assert.assertEquals(pattern36.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern37);
// flaky:         org.junit.Assert.assertEquals(pattern37.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(charBuffer41);
// flaky:         org.junit.Assert.assertNotNull(strStream42);
        org.junit.Assert.assertNotNull(matcher43);
        org.junit.Assert.assertEquals(matcher43.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        java.nio.Buffer buffer12 = byteBuffer5.flip();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putDouble((double) 6);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            float float17 = byteBuffer15.getFloat((-18));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        double double12 = byteBuffer10.getDouble(12);
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.put(byteArray21);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer18.get(byteArray31, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer10.put(byteArray31);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer36.putInt(75, 0);
        short short40 = byteBuffer39.getShort();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putDouble(3, (double) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer39.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 7.565251118924485E-307d + "'", double12 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer44);
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt((int) (short) 1, (-24));
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long33 = byteBuffer32.getLong();
        int int34 = byteBuffer32.position();
        float float36 = byteBuffer32.getFloat((int) (short) 10);
        boolean boolean37 = byteBuffer32.hasArray();
        double double38 = byteBuffer32.getDouble();
        short short40 = byteBuffer32.getShort(0);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer32.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer32.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer45.duplicate();
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.slice();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putInt(0);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.put(byteArray56);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer45.get(byteArray56);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer26.put(byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.wrap(byteArray56, 20, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer3.putDouble((double) ' ');
        boolean boolean32 = byteBuffer3.isReadOnly();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer34 = byteBuffer3.limit((-72));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Response response11 = response9.removeCookie("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response9.cookies();
        boolean boolean14 = response9.hasHeader("\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = response9.cookies();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putInt((int) '#');
        int int23 = byteBuffer9.compareTo(byteBuffer20);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer9.putShort((short) (byte) -1);
        char char26 = byteBuffer9.getChar();
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer32.putDouble(10.0d);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer32.putChar('\n');
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.put(byteArray59);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer46.get(byteArray59, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer46.putDouble(100.0d);
        boolean boolean66 = byteBuffer32.equals((java.lang.Object) byteBuffer46);
        double double68 = byteBuffer32.getDouble(14);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long71 = byteBuffer70.getLong();
        int int72 = byteBuffer70.position();
        float float74 = byteBuffer70.getFloat((int) (short) 10);
        boolean boolean75 = byteBuffer70.hasArray();
        double double76 = byteBuffer70.getDouble();
        short short78 = byteBuffer70.getShort(0);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer70.putDouble(100.0d);
        float float81 = byteBuffer70.getFloat();
        char char83 = byteBuffer70.getChar(1);
        java.nio.ByteBuffer byteBuffer85 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer85.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer89 = byteBuffer85.putInt(0);
        byte[] byteArray92 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer93 = byteBuffer89.put(byteArray92);
        java.nio.ByteBuffer byteBuffer95 = byteBuffer93.putDouble(7.565251118924485E-307d);
        int int96 = byteBuffer70.compareTo(byteBuffer95);
        java.nio.DoubleBuffer doubleBuffer97 = byteBuffer70.asDoubleBuffer();
        int int98 = byteBuffer32.compareTo(byteBuffer70);
        int int99 = byteBuffer9.compareTo(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + '\000' + "'", char26 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 8 + "'", int72 == 8);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + short78 + "' != '" + (short) 0 + "'", short78 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + 0.0f + "'", float81 == 0.0f);
        org.junit.Assert.assertTrue("'" + char83 + "' != '" + '\000' + "'", char83 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-6) + "'", int96 == (-6));
        org.junit.Assert.assertNotNull(doubleBuffer97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 10 + "'", int99 == 10);
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        double double13 = byteBuffer1.getDouble(20);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        int int19 = byteBuffer17.getInt((int) (short) 1);
        double double21 = byteBuffer17.getDouble((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer17.putFloat((float) (-84));
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        short short29 = byteBuffer25.getShort(0);
        int int31 = byteBuffer25.getInt((int) '4');
        long long32 = byteBuffer25.getLong();
        java.nio.FloatBuffer floatBuffer33 = byteBuffer25.asFloatBuffer();
        char char34 = byteBuffer25.getChar();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        short short40 = byteBuffer36.getShort(0);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer36.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer45 = byteBuffer36.putChar('4');
        boolean boolean46 = byteBuffer36.isReadOnly();
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long49 = byteBuffer48.getLong();
        int int50 = byteBuffer48.position();
        float float52 = byteBuffer48.getFloat((int) (short) 10);
        boolean boolean53 = byteBuffer48.hasArray();
        java.nio.ByteBuffer byteBuffer55 = byteBuffer48.putFloat((float) (-24));
        java.nio.ByteBuffer byteBuffer57 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer57.putLong((long) '4');
        int int61 = byteBuffer59.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer73.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.putInt(0);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer81 = byteBuffer77.put(byteArray80);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer67.get(byteArray80, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer59.get(byteArray80);
        java.nio.ByteBuffer byteBuffer86 = java.nio.ByteBuffer.wrap(byteArray80);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer48.put(byteArray80);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer36.get(byteArray80);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer25.get(byteArray80);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer17.put(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer93 = byteBuffer1.get(byteArray80, 97, 83);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 0 + "'", short29 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer33);
        org.junit.Assert.assertTrue("'" + char34 + "' != '" + '\000' + "'", char34 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer78.compact();
        java.nio.ByteBuffer byteBuffer80 = byteBuffer79.slice();
        java.nio.ByteBuffer byteBuffer82 = java.nio.ByteBuffer.allocate((int) '\n');
        java.nio.ByteBuffer byteBuffer83 = byteBuffer80.put(byteBuffer82);
        java.lang.String str84 = byteBuffer83.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=22 cap=22]" + "'", str84, "java.nio.DirectByteBuffer[pos=10 lim=22 cap=22]");
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer5 = byteBuffer4.asShortBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        int int9 = byteBuffer7.position();
        float float11 = byteBuffer7.getFloat((int) (short) 10);
        boolean boolean12 = byteBuffer7.hasArray();
        double double13 = byteBuffer7.getDouble();
        short short15 = byteBuffer7.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putDouble(100.0d);
        byte byte19 = byteBuffer17.get((int) (short) 0);
        java.nio.IntBuffer intBuffer20 = byteBuffer17.asIntBuffer();
        int int21 = byteBuffer4.compareTo(byteBuffer17);
        java.nio.ByteOrder byteOrder22 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer1.put(byteBuffer17);
        java.nio.FloatBuffer floatBuffer24 = byteBuffer1.asFloatBuffer();
        java.nio.ShortBuffer shortBuffer25 = byteBuffer1.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-24) + "'", int21 == (-24));
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(floatBuffer24);
        org.junit.Assert.assertNotNull(shortBuffer25);
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putChar('#');
        org.jsoup.helper.HttpConnection.Response response49 = null;
        org.jsoup.helper.HttpConnection.Response response50 = new org.jsoup.helper.HttpConnection.Response(response49);
        response50.contentType = "";
        java.lang.String str53 = response50.contentType;
        response50.executed = true;
        response50.executed = false;
        java.lang.String str58 = response50.statusMessage();
        org.jsoup.helper.HttpConnection.Response response59 = new org.jsoup.helper.HttpConnection.Response(response50);
        org.jsoup.helper.HttpConnection.Response response60 = new org.jsoup.helper.HttpConnection.Response(response50);
        boolean boolean61 = byteBuffer46.equals((java.lang.Object) response50);
        char char62 = byteBuffer46.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + char62 + "' != '" + '\000' + "'", char62 == '\000');
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer11 = byteBuffer1.asCharBuffer();
        boolean boolean12 = byteBuffer1.hasRemaining();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        short short18 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.put(byteArray30);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer27.get(byteArray40, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer27.putDouble(100.0d);
        int int47 = byteBuffer21.compareTo(byteBuffer27);
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putInt(0);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.put(byteArray56);
        java.nio.ByteOrder byteOrder58 = byteBuffer57.order();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer27.order(byteOrder58);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer27.slice();
        int int61 = byteBuffer1.compareTo(byteBuffer60);
        int int62 = byteBuffer60.getInt();
        java.nio.IntBuffer intBuffer63 = byteBuffer60.asIntBuffer();
        // The following exception was thrown during execution in test generation
        try {
            int int65 = byteBuffer60.getInt((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 0 + "'", short18 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 14 + "'", int47 == 14);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteOrder58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intBuffer63);
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        char char48 = byteBuffer46.getChar(75);
        java.nio.DoubleBuffer doubleBuffer49 = byteBuffer46.asDoubleBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer52 = byteBuffer46.putInt((-20), 1405091840);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + char48 + "' != '" + '\000' + "'", char48 == '\000');
        org.junit.Assert.assertNotNull(doubleBuffer49);
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        java.lang.String str1 = java.util.regex.Pattern.quote("java.nio.DirectByteBuffer[pos=0 lim=76 cap=76]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\\Qjava.nio.DirectByteBuffer[pos=0 lim=76 cap=76]\\E" + "'", str1, "\\Qjava.nio.DirectByteBuffer[pos=0 lim=76 cap=76]\\E");
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(4);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putChar('\000');
        // The following exception was thrown during execution in test generation
        try {
            double double5 = byteBuffer1.getDouble(14);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket4 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]", (-64));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-64");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "java.nio.DirectByteBuffer[pos=0 lim=76 cap=76]";
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        long long19 = byteBuffer14.getLong();
        long long20 = byteBuffer14.getLong();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer14.putShort((short) 10);
        java.nio.Buffer buffer23 = byteBuffer14.mark();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long26 = byteBuffer25.getLong();
        int int27 = byteBuffer25.position();
        float float29 = byteBuffer25.getFloat((int) (short) 10);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = byteBuffer25.putFloat((float) (-24));
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        int int38 = byteBuffer36.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer44.get(byteArray57, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer36.get(byteArray57);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.wrap(byteArray57);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer25.put(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer67 = byteBuffer14.get(byteArray57, 92, 68);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer64);
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        double double13 = byteBuffer1.getDouble(20);
        // The following exception was thrown during execution in test generation
        try {
            float float15 = byteBuffer1.getFloat((int) '\u3ff0');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) '4');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.DoubleBuffer doubleBuffer3 = byteBuffer1.asDoubleBuffer();
        boolean boolean4 = byteBuffer1.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(doubleBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocate(64);
        boolean boolean18 = byteBuffer17.isReadOnly();
        java.nio.Buffer buffer19 = byteBuffer17.mark();
        java.nio.ByteOrder byteOrder20 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer17.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer9.put(byteArray62);
        int int70 = byteBuffer69.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(buffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response2.scanHeaders("");
        java.lang.String str11 = response2.getHeaderCaseInsensitive("Location");
        java.lang.String str12 = response2.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response2.cookies();
        java.lang.String str15 = response2.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response17);
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response17);
        org.jsoup.Connection.Response response22 = response19.header("\\Qjava.nio.DirectByteBuffer[pos=19 lim=100 cap=100]\\E", "\\Qhi!\\E");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response23 = org.jsoup.helper.HttpConnection.Response.execute(request0, response19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(response22);
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        org.jsoup.Connection.Method method8 = response5.method();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long11 = byteBuffer10.getLong();
        int int12 = byteBuffer10.position();
        response5.byteData = byteBuffer10;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str15 = response14.charset();
        java.lang.String str16 = response14.charset;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.slice();
        boolean boolean48 = byteBuffer14.hasArray();
        boolean boolean49 = byteBuffer14.isDirect();
        java.nio.Buffer buffer50 = byteBuffer14.flip();
        java.nio.ByteOrder byteOrder51 = byteBuffer14.order();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer54 = byteBuffer14.putChar(96, '\000');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(buffer50);
        org.junit.Assert.assertNotNull(byteOrder51);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        int int8 = byteBuffer5.position();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        boolean boolean19 = byteBuffer14.hasArray();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.putInt(0);
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.put(byteArray38);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer25.get(byteArray38, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer54 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer54.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.putInt(0);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.put(byteArray61);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer48.get(byteArray61, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer42.put(byteArray61);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer14.put(byteArray61);
        java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.wrap(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer71 = byteBuffer5.get(byteArray61, 0, (-67));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer5.putDouble(100.0d);
        int int25 = byteBuffer24.limit();
        char char27 = byteBuffer24.getChar(88);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer24.put((byte) 0);
        java.nio.CharBuffer charBuffer30 = byteBuffer29.asCharBuffer();
        java.lang.Class<?> wildcardClass31 = charBuffer30.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket5 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E", 25);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: \\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        double double11 = byteBuffer5.getDouble();
        java.nio.IntBuffer intBuffer12 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putShort(0, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer15.compact();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putChar((-1), '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        java.util.regex.Pattern pattern6 = java.util.regex.Pattern.compile("\\QLocation\\E", (int) (short) 0);
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer8.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.putInt(0);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.put(byteArray15);
        java.nio.CharBuffer charBuffer17 = byteBuffer12.asCharBuffer();
        java.lang.String[] strArray19 = pattern6.split((java.lang.CharSequence) charBuffer17, (-24));
        boolean boolean20 = java.util.regex.Pattern.matches("\\QLocation\\E", (java.lang.CharSequence) charBuffer17);
        java.nio.Buffer buffer22 = charBuffer17.position(19);
        boolean boolean23 = java.util.regex.Pattern.matches("\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer17);
        boolean boolean24 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=82 lim=100 cap=100]", (java.lang.CharSequence) charBuffer17);
        boolean boolean25 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]", (java.lang.CharSequence) charBuffer17);
        org.junit.Assert.assertNotNull(pattern6);
        org.junit.Assert.assertEquals(pattern6.toString(), "\\QLocation\\E");
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(buffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer22.putShort((short) (byte) 100);
        java.nio.ShortBuffer shortBuffer49 = byteBuffer48.asShortBuffer();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer48.putInt(10);
        java.nio.FloatBuffer floatBuffer52 = byteBuffer51.asFloatBuffer();
        boolean boolean53 = byteBuffer51.isReadOnly();
        java.nio.ByteBuffer byteBuffer56 = byteBuffer51.putFloat(90, 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray57 = byteBuffer56.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(shortBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(floatBuffer52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteBuffer56);
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putLong(8, (long) (short) 1);
        int int11 = byteBuffer9.getInt(85);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.put(byteArray30);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer17.get(byteArray30, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer40.get(byteArray53, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer34.put(byteArray53);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer9.put(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = byteBuffer9.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response10.cookies();
        boolean boolean13 = response10.executed;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.lang.String str17 = response10.contentType();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.Connection.Request request6 = null;
        response1.req = request6;
        java.lang.String str8 = response1.contentType();
        response1.charset = "Location";
        java.lang.String str11 = response1.statusMessage();
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response12.headers();
        response12.executed = true;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        boolean boolean7 = response1.hasCookie("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean10 = response1.executed;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        byte byte7 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        short short13 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer9.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(byteArray35);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer22.get(byteArray35, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer22.putDouble(100.0d);
        int int42 = byteBuffer16.compareTo(byteBuffer22);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteOrder byteOrder53 = byteBuffer52.order();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer22.order(byteOrder53);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer1.order(byteOrder53);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer1.putLong(4, (long) 8);
        java.nio.LongBuffer longBuffer59 = byteBuffer1.asLongBuffer();
        int int60 = longBuffer59.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteOrder53);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(longBuffer59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 11 + "'", int60 == 11);
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        double double12 = byteBuffer10.getDouble(12);
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.put(byteArray21);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer18.get(byteArray31, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer10.put(byteArray31);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer36.putInt(75, 0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putDouble((double) 76);
        java.nio.FloatBuffer floatBuffer42 = byteBuffer41.asFloatBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer45 = byteBuffer41.putFloat((-65536), (float) (-65536));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 7.565251118924485E-307d + "'", double12 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(floatBuffer42);
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.put((byte) 10);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer7.putInt(22);
        java.nio.FloatBuffer floatBuffer13 = byteBuffer7.asFloatBuffer();
        java.nio.Buffer buffer15 = byteBuffer7.position(12);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(floatBuffer13);
        org.junit.Assert.assertNotNull(buffer15);
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket5 = socketFactory0.createSocket(inetAddress3, (int) '\u3ff0');
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.FloatBuffer floatBuffer16 = byteBuffer9.asFloatBuffer();
        byte byte18 = byteBuffer9.get((int) (short) 1);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer9.putDouble(0, (double) 0.0f);
        java.nio.Buffer buffer22 = byteBuffer9.rewind();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer23 = byteBuffer9.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(buffer22);
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putChar('\000');
        java.nio.Buffer buffer5 = byteBuffer1.flip();
        boolean boolean6 = buffer5.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocate((int) '\n');
        byte[] byteArray12 = byteBuffer11.array();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer1.get(byteArray12);
        double double14 = byteBuffer1.getDouble();
        boolean boolean15 = byteBuffer1.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer4.asReadOnlyBuffer();
        short short6 = byteBuffer5.getShort();
        int int7 = byteBuffer5.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 18 + "'", int7 == 18);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer17 = byteBuffer9.putShort(92, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer9.putFloat(85, (float) 128);
        long long21 = byteBuffer9.getLong();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer23 = byteBuffer9.position((-20));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newPosition < 0: (-20 < 0)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putInt((int) '#');
        int int23 = byteBuffer9.compareTo(byteBuffer20);
        java.nio.Buffer buffer24 = byteBuffer20.clear();
        java.nio.ByteOrder byteOrder25 = null;
        java.nio.ByteBuffer byteBuffer26 = byteBuffer20.order(byteOrder25);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(buffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        int int6 = response2.numRedirects;
        int int7 = response2.statusCode();
        response2.contentType = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        java.net.URL uRL10 = response2.url();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response2);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response12 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(uRL10);
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.lang.String str21 = response1.header("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        response1.charset = "\\QLocation\\E";
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int25 = response1.statusCode();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        int int4 = pattern2.flags();
        java.util.regex.Pattern pattern7 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        java.nio.CharBuffer charBuffer18 = byteBuffer13.asCharBuffer();
        java.util.regex.Matcher matcher19 = pattern7.matcher((java.lang.CharSequence) charBuffer18);
        java.lang.String[] strArray20 = pattern2.split((java.lang.CharSequence) charBuffer18);
        int int21 = pattern2.flags();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(pattern7);
        org.junit.Assert.assertEquals(pattern7.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(matcher19);
        org.junit.Assert.assertEquals(matcher19.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putFloat((int) ' ', (float) 4);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putShort((int) '\u2000', (short) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        java.nio.Buffer buffer25 = byteBuffer22.flip();
        short short26 = byteBuffer22.getShort();
        java.nio.ShortBuffer shortBuffer27 = byteBuffer22.asShortBuffer();
        int int28 = byteBuffer22.capacity();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer30 = byteBuffer22.position(78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newPosition > limit: (78 > 16)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response0);
        response2.statusMessage = "";
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.headers();
        response2.charset = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document8 = response2.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        java.nio.ByteBuffer byteBuffer2 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer4 = byteBuffer2.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer6 = byteBuffer2.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer6.putInt((int) '#');
        float float10 = byteBuffer8.getFloat(4);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.putInt(10);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer8.putChar('a');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer8.putFloat((float) 0L);
        java.nio.CharBuffer charBuffer17 = byteBuffer16.asCharBuffer();
        boolean boolean18 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=19 lim=100 cap=100]", (java.lang.CharSequence) charBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 7.3E-44f + "'", float10 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket("\\Qhi!\\E", (-11), inetAddress8, 91);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.net.HttpURLConnection httpURLConnection12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = null;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        response14.contentType = "";
        java.lang.String str17 = response14.contentType;
        response14.executed = true;
        response14.executed = false;
        boolean boolean24 = response14.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", "\\Q\\E");
        java.nio.ByteBuffer byteBuffer25 = response14.byteData;
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response14);
        java.net.URL uRL27 = response26.url();
        // The following exception was thrown during execution in test generation
        try {
            response10.setupFromConnection(httpURLConnection12, (org.jsoup.Connection.Response) response26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(byteBuffer25);
        org.junit.Assert.assertNull(uRL27);
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response5);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document9 = response5.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long48 = byteBuffer47.getLong();
        int int49 = byteBuffer47.position();
        float float51 = byteBuffer47.getFloat((int) (short) 10);
        boolean boolean52 = byteBuffer47.hasArray();
        double double53 = byteBuffer47.getDouble();
        short short55 = byteBuffer47.getShort(0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer47.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response58 = null;
        org.jsoup.helper.HttpConnection.Response response59 = new org.jsoup.helper.HttpConnection.Response(response58);
        java.lang.String str61 = response59.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = response59.cookies();
        org.jsoup.Connection.Response response64 = response59.removeCookie("hi!");
        java.lang.String str65 = response59.statusMessage();
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.putInt(0);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.put(byteArray74);
        boolean boolean76 = byteBuffer71.hasArray();
        response59.byteData = byteBuffer71;
        int int78 = byteBuffer57.compareTo(byteBuffer71);
        java.lang.String str79 = byteBuffer57.toString();
        long long80 = byteBuffer57.getLong();
        java.nio.DoubleBuffer doubleBuffer81 = byteBuffer57.asDoubleBuffer();
        response37.byteData = byteBuffer57;
        org.jsoup.helper.HttpConnection.Response response83 = new org.jsoup.helper.HttpConnection.Response(response37);
        int int84 = response37.numRedirects;
        org.jsoup.helper.HttpConnection.Response response85 = new org.jsoup.helper.HttpConnection.Response(response37);
        java.net.URL uRL86 = response37.url();
        org.jsoup.Connection.Request request87 = null;
        response37.req = request87;
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) 0 + "'", short55 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(response64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-10) + "'", int78 == (-10));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str79, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(doubleBuffer81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNull(uRL86);
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        int int46 = response37.statusCode();
        java.lang.String str47 = response37.contentType();
        response37.contentType = "\\Qhi!\\E";
        org.jsoup.helper.HttpConnection.Response response50 = new org.jsoup.helper.HttpConnection.Response(response37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = response37.body();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(96);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putFloat((float) 100);
        short short8 = byteBuffer5.getShort();
        // The following exception was thrown during execution in test generation
        try {
            byte byte10 = byteBuffer5.get((int) '\u3ff0');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int7 = response6.statusCode();
        java.lang.String str8 = response6.statusMessage;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.lang.String str11 = response6.cookie("\\Q\\Qhi!\\E\\\\E\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket8 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", 24);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        int int80 = response1.statusCode;
        org.jsoup.helper.HttpConnection.Response response81 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap82 = response1.cookies();
        java.lang.String str84 = response1.getHeaderCaseInsensitive("java.nio.DirectByteBuffer[pos=82 lim=100 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        java.lang.String str10 = response5.charset;
        response5.contentType = "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        response13.numRedirects = 50;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]", 85);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]");
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        int int16 = response15.numRedirects;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response18 = response15.removeCookie("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cookie name must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response2.scanHeaders("");
        java.lang.String str11 = response2.getHeaderCaseInsensitive("Location");
        java.lang.String str12 = response2.charset();
        response2.numRedirects = (short) 0;
        java.nio.ByteBuffer byteBuffer15 = response2.byteData;
        response2.executed = false;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response18 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(byteBuffer15);
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.duplicate();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer14.get(byteArray25);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer14.putShort((short) 10);
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long32 = byteBuffer31.getLong();
        int int33 = byteBuffer31.position();
        float float35 = byteBuffer31.getFloat((int) (short) 10);
        boolean boolean36 = byteBuffer31.hasArray();
        double double37 = byteBuffer31.getDouble();
        short short39 = byteBuffer31.getShort(0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer31.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response42 = null;
        org.jsoup.helper.HttpConnection.Response response43 = new org.jsoup.helper.HttpConnection.Response(response42);
        java.lang.String str45 = response43.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = response43.cookies();
        org.jsoup.Connection.Response response48 = response43.removeCookie("hi!");
        java.lang.String str49 = response43.statusMessage();
        java.nio.ByteBuffer byteBuffer51 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer51.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.putInt(0);
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.put(byteArray58);
        boolean boolean60 = byteBuffer55.hasArray();
        response43.byteData = byteBuffer55;
        int int62 = byteBuffer41.compareTo(byteBuffer55);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer41.putLong((long) (byte) 10);
        int int65 = byteBuffer14.compareTo(byteBuffer41);
        java.nio.CharBuffer charBuffer66 = byteBuffer41.asCharBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) 0 + "'", short39 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(response48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-10) + "'", int62 == (-10));
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertNotNull(charBuffer66);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ShortBuffer shortBuffer30 = byteBuffer3.asShortBuffer();
        java.nio.Buffer buffer32 = byteBuffer3.limit((int) 'a');
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long35 = byteBuffer34.getLong();
        int int36 = byteBuffer34.position();
        float float38 = byteBuffer34.getFloat((int) (short) 10);
        boolean boolean39 = byteBuffer34.hasArray();
        double double40 = byteBuffer34.getDouble();
        short short42 = byteBuffer34.getShort(0);
        java.nio.ShortBuffer shortBuffer43 = byteBuffer34.asShortBuffer();
        java.nio.Buffer buffer45 = byteBuffer34.position((int) '#');
        java.lang.String str46 = byteBuffer34.toString();
        byte byte47 = byteBuffer34.get();
        java.nio.ByteBuffer byteBuffer49 = byteBuffer34.putFloat((float) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer34.putInt(1, 0);
        int int53 = byteBuffer3.compareTo(byteBuffer52);
        boolean boolean54 = byteBuffer52.isDirect();
        char char55 = byteBuffer52.getChar();
        // The following exception was thrown during execution in test generation
        try {
            int int57 = byteBuffer52.getInt(1405091840);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(shortBuffer30);
        org.junit.Assert.assertNotNull(buffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) 0 + "'", short42 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer43);
        org.junit.Assert.assertNotNull(buffer45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]" + "'", str46, "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) 0 + "'", byte47 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 27 + "'", int53 == 27);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + char55 + "' != '" + '\000' + "'", char55 == '\000');
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        boolean boolean20 = byteBuffer14.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = byteBuffer14.getLong((int) '\u3ff0');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.Buffer buffer28 = byteBuffer26.clear();
        long long30 = byteBuffer26.getLong(4);
        short short31 = byteBuffer26.getShort();
        java.nio.DoubleBuffer doubleBuffer32 = byteBuffer26.asDoubleBuffer();
        int int33 = doubleBuffer32.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(buffer28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 223338299392L + "'", long30 == 223338299392L);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 0 + "'", short31 == (short) 0);
        org.junit.Assert.assertNotNull(doubleBuffer32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket7 = socketFactory0.createSocket(inetAddress5, 10);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        boolean boolean6 = response1.executed;
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int8 = response1.statusCode;
        java.lang.String str10 = response1.header("\\Q\\Q\\E\\\\E\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        int int13 = response12.statusCode;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response5.contentType();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        boolean boolean14 = response11.hasHeaderWithValue("\\Qjava.nio.DirectByteBuffer[pos=0 lim=22 cap=100]\\E", "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        org.jsoup.Connection.Response response16 = response11.removeHeader("\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response11);
        response11.contentType = "";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(response16);
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        org.jsoup.helper.HttpConnection.Response response22 = null;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response22);
        response23.contentType = "";
        boolean boolean26 = byteBuffer21.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putInt((int) '#');
        int int35 = byteBuffer21.compareTo(byteBuffer32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer5.put(byteBuffer32);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer5.putShort((short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer40 = byteBuffer38.putShort((short) 256);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(0);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.compact();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putDouble(3, (double) 42949672960L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer3);
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean7 = response1.hasHeader("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str10 = response1.cookie("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E");
        java.lang.String str11 = response1.statusMessage();
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.Buffer buffer7 = byteBuffer1.limit(32);
        boolean boolean8 = byteBuffer1.isDirect();
        java.nio.ByteOrder byteOrder9 = byteBuffer1.order();
        int int11 = byteBuffer1.getInt((int) (byte) 10);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.IntBuffer intBuffer11 = byteBuffer5.asIntBuffer();
        char char13 = byteBuffer5.getChar((int) (short) 1);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        byte byte21 = byteBuffer15.get();
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        short short27 = byteBuffer23.getShort(0);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer23.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer36.putDouble(100.0d);
        int int56 = byteBuffer30.compareTo(byteBuffer36);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteOrder byteOrder67 = byteBuffer66.order();
        java.nio.ByteBuffer byteBuffer68 = byteBuffer36.order(byteOrder67);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer15.order(byteOrder67);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer5.order(byteOrder67);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.putShort((short) (byte) -1);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + '\u3ff0' + "'", char13 == '\u3ff0');
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 0 + "'", byte21 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 14 + "'", int56 == 14);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteOrder67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.IntBuffer intBuffer7 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer9.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response20 = null;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.lang.String str23 = response21.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = response21.cookies();
        org.jsoup.Connection.Response response26 = response21.removeCookie("hi!");
        java.lang.String str27 = response21.statusMessage();
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        boolean boolean38 = byteBuffer33.hasArray();
        response21.byteData = byteBuffer33;
        int int40 = byteBuffer19.compareTo(byteBuffer33);
        int int41 = byteBuffer5.compareTo(byteBuffer33);
        java.nio.Buffer buffer42 = byteBuffer33.rewind();
        boolean boolean43 = byteBuffer33.isDirect();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer33.putShort((int) (byte) 0, (short) (byte) 66);
        byte[] byteArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer48 = byteBuffer33.put(byteArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(response26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-10) + "'", int40 == (-10));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(buffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteBuffer46);
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer22.putShort((short) (byte) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer48.compact();
        java.nio.Buffer buffer50 = byteBuffer48.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(buffer50);
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.InetAddress inetAddress3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket5 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E", 0, inetAddress3, 12);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer22.putShort((short) (byte) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer48.compact();
        java.nio.Buffer buffer50 = byteBuffer48.clear();
        org.jsoup.helper.HttpConnection.Response response51 = null;
        org.jsoup.helper.HttpConnection.Response response52 = new org.jsoup.helper.HttpConnection.Response(response51);
        java.lang.String str54 = response52.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response55 = new org.jsoup.helper.HttpConnection.Response(response52);
        org.jsoup.helper.HttpConnection.Response response56 = new org.jsoup.helper.HttpConnection.Response(response52);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        short short62 = byteBuffer58.getShort(0);
        int int63 = byteBuffer58.position();
        response52.byteData = byteBuffer58;
        java.nio.ByteBuffer byteBuffer65 = byteBuffer48.put(byteBuffer58);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer48.putFloat((float) 82);
        java.nio.IntBuffer intBuffer68 = byteBuffer48.asIntBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(buffer50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) 0 + "'", short62 == (short) 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 8 + "'", int63 == 8);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(intBuffer68);
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.duplicate();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer26.putInt(16, 8);
        java.nio.Buffer buffer32 = byteBuffer26.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(buffer32);
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.nio.ByteBuffer byteBuffer9 = response5.byteData;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        response5.statusMessage = "\\QLocation\\E";
        response5.numRedirects = 88;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response5);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Too many redirects occurred trying to load URL null");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(byteBuffer9);
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        java.lang.String str1 = java.util.regex.Pattern.quote("\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E" + "'", str1, "\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response0);
        response2.statusMessage = "";
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.headers();
        response2.charset = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        boolean boolean9 = response2.hasCookie("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response12 = response10.url(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putInt(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putInt((int) '#');
        byte byte13 = byteBuffer9.get(1);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer9.put(14, (byte) -1);
        java.nio.FloatBuffer floatBuffer17 = byteBuffer16.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putInt((int) '#');
        float float27 = byteBuffer25.getFloat(4);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer33.get(byteArray46, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.put(byteArray59);
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer62.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.putInt(0);
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.put(byteArray69);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer56.get(byteArray69, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer50.put(byteArray69);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer25.put(byteArray69);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer16.get(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer79 = byteBuffer1.get(byteArray69, (int) (short) 256, (-16));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(floatBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 7.3E-44f + "'", float27 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        int int53 = byteBuffer51.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer51.get(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer14.get(byteArray72);
        char char80 = byteBuffer78.getChar(35);
        // The following exception was thrown during execution in test generation
        try {
            float float82 = byteBuffer78.getFloat((int) '\u2000');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + char80 + "' != '" + '\000' + "'", char80 == '\000');
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.IntBuffer intBuffer8 = byteBuffer1.asIntBuffer();
        short short10 = byteBuffer1.getShort((int) (byte) 66);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.slice();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putInt(0, (int) (short) 10);
        java.nio.ByteOrder byteOrder15 = byteBuffer14.order();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putLong(100L);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteOrder15);
        org.junit.Assert.assertNotNull(byteBuffer17);
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response12 = response9.cookie("\\Qhi!\\E", "");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response9);
        response9.statusCode = 98;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(response12);
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.IntBuffer intBuffer11 = byteBuffer9.asIntBuffer();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putLong((long) (short) 100);
        java.nio.Buffer buffer14 = byteBuffer9.rewind();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        int int20 = byteBuffer18.getInt((int) (short) 1);
        double double22 = byteBuffer18.getDouble((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer18.putFloat((float) (-84));
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        short short30 = byteBuffer26.getShort(0);
        int int32 = byteBuffer26.getInt((int) '4');
        long long33 = byteBuffer26.getLong();
        java.nio.FloatBuffer floatBuffer34 = byteBuffer26.asFloatBuffer();
        char char35 = byteBuffer26.getChar();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        short short41 = byteBuffer37.getShort(0);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer37.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer37.putChar('4');
        boolean boolean47 = byteBuffer37.isReadOnly();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long50 = byteBuffer49.getLong();
        int int51 = byteBuffer49.position();
        float float53 = byteBuffer49.getFloat((int) (short) 10);
        boolean boolean54 = byteBuffer49.hasArray();
        java.nio.ByteBuffer byteBuffer56 = byteBuffer49.putFloat((float) (-24));
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        int int62 = byteBuffer60.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer64.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.putInt(0);
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.put(byteArray71);
        java.nio.ByteBuffer byteBuffer74 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer74.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.putInt(0);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer82 = byteBuffer78.put(byteArray81);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer68.get(byteArray81, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer60.get(byteArray81);
        java.nio.ByteBuffer byteBuffer87 = java.nio.ByteBuffer.wrap(byteArray81);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer49.put(byteArray81);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer37.get(byteArray81);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer26.get(byteArray81);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer18.put(byteArray81);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer9.put(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer95 = java.nio.ByteBuffer.wrap(byteArray81, 16, 128);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertTrue("'" + char35 + "' != '" + '\000' + "'", char35 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Request request7 = response1.req;
        java.lang.String str8 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry11 = response1.scanHeaders("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = response1.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(request7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strEntry11);
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress5 = null;
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket(inetAddress5, (-18), inetAddress7, 98);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '\n');
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putInt((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer6 = byteBuffer3.putShort(75, (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response9 = response1.header("Location", "");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = response1.cookies();
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response12 = response1.url(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.lang.String str9 = byteBuffer8.toString();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteOrder byteOrder20 = byteBuffer19.order();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer8.order(byteOrder20);
        java.nio.Buffer buffer23 = byteBuffer8.position(22);
        java.nio.DoubleBuffer doubleBuffer24 = byteBuffer8.asDoubleBuffer();
        float float26 = byteBuffer8.getFloat((int) (short) 0);
        int int27 = byteBuffer8.remaining();
        java.nio.Buffer buffer28 = byteBuffer8.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str9, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(doubleBuffer24);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 78 + "'", int27 == 78);
        org.junit.Assert.assertNotNull(buffer28);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        float float35 = byteBuffer8.getFloat();
        boolean boolean36 = byteBuffer8.hasArray();
        java.nio.Buffer buffer37 = byteBuffer8.mark();
        boolean boolean38 = byteBuffer8.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(buffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        boolean boolean12 = byteBuffer1.isReadOnly();
        int int13 = byteBuffer1.getInt();
        int int14 = byteBuffer1.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 28 + "'", int14 == 28);
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        response1.numRedirects = (byte) 10;
        org.jsoup.Connection.Response response12 = response1.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer13 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request15 = null;
        response1.req = request15;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str18 = response1.contentType;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(byteBuffer13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        java.nio.ByteBuffer byteBuffer79 = java.nio.ByteBuffer.wrap(byteArray70);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer79.compact();
        java.nio.ByteBuffer byteBuffer81 = byteBuffer80.compact();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putInt((int) '#');
        int int23 = byteBuffer9.compareTo(byteBuffer20);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer20.putInt((int) (byte) 1);
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        int int31 = byteBuffer29.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.putInt(0);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.put(byteArray50);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer37.get(byteArray50, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer29.get(byteArray50);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer29.putDouble((double) ' ');
        java.nio.IntBuffer intBuffer58 = byteBuffer29.asIntBuffer();
        char char59 = byteBuffer29.getChar();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer25.put(byteBuffer29);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putDouble((double) 18);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(intBuffer58);
        org.junit.Assert.assertTrue("'" + char59 + "' != '" + '\000' + "'", char59 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer60);
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        java.lang.String str81 = response1.contentType();
        java.lang.String str83 = response1.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response84 = new org.jsoup.helper.HttpConnection.Response(response1);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document85 = response84.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(24);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) 1405091840);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putDouble((int) (byte) 1, (double) 42949672960L);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer9 = byteBuffer1.putShort((int) (short) 256, (short) (byte) 66);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer6);
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern5 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern8 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern9 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern9;
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer13 = byteBuffer12.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream14 = null; // flaky: pattern9.splitAsStream((java.lang.CharSequence) charBuffer13);
        java.util.regex.Matcher matcher15 = pattern8.matcher((java.lang.CharSequence) charBuffer13);
        java.util.regex.Matcher matcher16 = null; // flaky: pattern5.matcher((java.lang.CharSequence) charBuffer13);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer19 = byteBuffer18.asCharBuffer();
        java.util.regex.Matcher matcher20 = null; // flaky: pattern5.matcher((java.lang.CharSequence) charBuffer19);
        java.lang.String[] strArray22 = pattern2.split((java.lang.CharSequence) charBuffer19, 8);
        java.util.function.Predicate<java.lang.String> strPredicate23 = pattern2.asPredicate();
        java.lang.String[] strArray25 = pattern2.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.lang.String str26 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern5);
// flaky:         org.junit.Assert.assertEquals(pattern5.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern8);
        org.junit.Assert.assertEquals(pattern8.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern9);
// flaky:         org.junit.Assert.assertEquals(pattern9.toString(), "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(charBuffer13);
// flaky:         org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(matcher15);
        org.junit.Assert.assertEquals(matcher15.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher16);
// flaky:         org.junit.Assert.assertEquals(matcher16.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(charBuffer19);
// flaky:         org.junit.Assert.assertNotNull(matcher20);
// flaky:         org.junit.Assert.assertEquals(matcher20.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strPredicate23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\\Q\\E" + "'", str26, "\\Q\\E");
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        float float13 = byteBuffer1.getFloat();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer3.putInt(4);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer16.get(byteArray29, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer10.put(byteArray29);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer34.slice();
        int int36 = byteBuffer35.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.Connection.Response response6 = response1.removeHeader("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.Connection.Request request7 = response1.req;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = response8.headers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(request7);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        boolean boolean6 = response1.hasHeader("hi!");
        boolean boolean8 = response1.hasHeader("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        java.lang.String str9 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int11 = response1.statusCode();
        boolean boolean13 = response1.hasHeader("java.nio.DirectByteBuffer[pos=0 lim=22 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putShort((short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putChar('#');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer10 = byteBuffer9.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer7.putFloat((float) (byte) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) 12);
        byte byte62 = byteBuffer61.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) 0 + "'", byte62 == (byte) 0);
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.util.function.Predicate<java.lang.String> strPredicate2 = null; // flaky: pattern0.asPredicate();
        int int3 = 0; // flaky: pattern0.flags();
        java.util.function.Predicate<java.lang.String> strPredicate4 = null; // flaky: pattern0.asPredicate();
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer7 = byteBuffer6.asCharBuffer();
        java.util.regex.Matcher matcher8 = null; // flaky: pattern0.matcher((java.lang.CharSequence) charBuffer7);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        org.jsoup.helper.HttpConnection.Response response20 = null;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        response21.contentType = "";
        boolean boolean24 = byteBuffer19.equals((java.lang.Object) "");
        double double26 = byteBuffer19.getDouble(0);
        java.nio.CharBuffer charBuffer27 = byteBuffer19.asCharBuffer();
        boolean boolean28 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]", (java.lang.CharSequence) charBuffer27);
        java.lang.String[] strArray30 = null; // flaky: pattern0.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]", 58);
        java.util.regex.Pattern pattern34 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern34;
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.FloatBuffer floatBuffer46 = byteBuffer41.asFloatBuffer();
        java.nio.CharBuffer charBuffer47 = byteBuffer41.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream48 = null; // flaky: pattern34.splitAsStream((java.lang.CharSequence) charBuffer47);
        boolean boolean49 = java.util.regex.Pattern.matches("\\Q\\E", (java.lang.CharSequence) charBuffer47);
        java.util.regex.Matcher matcher50 = null; // flaky: pattern0.matcher((java.lang.CharSequence) "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 84 + "'", int3 == 84);
// flaky:         org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
// flaky:         org.junit.Assert.assertNotNull(matcher8);
// flaky:         org.junit.Assert.assertEquals(matcher8.toString(), "java.util.regex.Matcher[pattern=java.nio.HeapByteBuffer[pos=0 lim=52 cap=52] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2.57E-322d + "'", double26 == 2.57E-322d);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray30);
// flaky:         org.junit.Assert.assertNotNull(pattern34);
// flaky:         org.junit.Assert.assertEquals(pattern34.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(floatBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
// flaky:         org.junit.Assert.assertNotNull(strStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertNotNull(matcher50);
// flaky:         org.junit.Assert.assertEquals(matcher50.toString(), "java.util.regex.Matcher[pattern=java.nio.HeapByteBuffer[pos=0 lim=52 cap=52] region=0,4 lastmatch=]");
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        int int36 = byteBuffer35.limit();
        short short38 = byteBuffer35.getShort((int) 'a');
        java.nio.Buffer buffer39 = byteBuffer35.rewind();
        java.nio.ByteBuffer byteBuffer42 = byteBuffer35.putChar(2, '?');
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        short short48 = byteBuffer44.getShort(0);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer44.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer51.put((int) (short) 10, (byte) 1);
        int int55 = byteBuffer54.getInt();
        short short56 = byteBuffer54.getShort();
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put((byte) 66);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long61 = byteBuffer60.getLong();
        int int62 = byteBuffer60.position();
        float float64 = byteBuffer60.getFloat((int) (short) 10);
        boolean boolean65 = byteBuffer60.hasArray();
        double double66 = byteBuffer60.getDouble();
        short short68 = byteBuffer60.getShort(0);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocate((int) '\n');
        byte[] byteArray71 = byteBuffer70.array();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer60.get(byteArray71);
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.wrap(byteArray71);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer58.get(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer77 = byteBuffer35.get(byteArray71, (int) '\u0a00', 59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 0 + "'", short38 == (short) 0);
        org.junit.Assert.assertNotNull(buffer39);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) 0 + "'", short48 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 256 + "'", int55 == 256);
        org.junit.Assert.assertTrue("'" + short56 + "' != '" + (short) 0 + "'", short56 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + 0.0f + "'", float64 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) 0 + "'", short68 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer16.get(byteArray29, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer39.get(byteArray52, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer33.put(byteArray52);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer5.put(byteArray52);
        char char60 = byteBuffer58.getChar(23);
        // The following exception was thrown during execution in test generation
        try {
            short short62 = byteBuffer58.getShort((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + char60 + "' != '" + '\000' + "'", char60 == '\000');
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putDouble(7.565251118924485E-307d);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer17.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer17.putChar(' ');
        float float23 = byteBuffer22.getFloat();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.FloatBuffer floatBuffer34 = byteBuffer29.asFloatBuffer();
        boolean boolean35 = byteBuffer29.isDirect();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        org.jsoup.helper.HttpConnection.Response response46 = null;
        org.jsoup.helper.HttpConnection.Response response47 = new org.jsoup.helper.HttpConnection.Response(response46);
        response47.contentType = "";
        boolean boolean50 = byteBuffer45.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putInt((int) '#');
        int int59 = byteBuffer45.compareTo(byteBuffer56);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer29.put(byteBuffer56);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer22.put(byteBuffer29);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer22.compact();
        int int63 = byteBuffer9.compareTo(byteBuffer62);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer62.asReadOnlyBuffer();
        int int65 = byteBuffer64.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 58 + "'", int63 == 58);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Response response9 = response1.header("\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E", "\\Qhi!\\E");
        java.lang.String str11 = response1.getHeaderCaseInsensitive("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        boolean boolean13 = byteBuffer5.isDirect();
        java.nio.Buffer buffer14 = byteBuffer5.flip();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        int int18 = byteBuffer16.position();
        float float20 = byteBuffer16.getFloat((int) (short) 10);
        boolean boolean21 = byteBuffer16.hasArray();
        double double22 = byteBuffer16.getDouble();
        short short24 = byteBuffer16.getShort(0);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.put(byteArray33);
        boolean boolean35 = byteBuffer30.hasArray();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer41.get(byteArray54, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.putInt(0);
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.put(byteArray77);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer64.get(byteArray77, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer58.put(byteArray77);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer30.put(byteArray77);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer16.get(byteArray77);
        java.nio.ByteOrder byteOrder85 = byteBuffer84.order();
        java.nio.ByteBuffer byteBuffer86 = byteBuffer5.order(byteOrder85);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer5.putInt(52);
        // The following exception was thrown during execution in test generation
        try {
            float float90 = byteBuffer88.getFloat((-20));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 0 + "'", short24 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteOrder85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer88);
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern1;
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern1.asPredicate();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern1;
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern7;
        java.util.stream.Stream<java.lang.String> strStream10 = null; // flaky: pattern7.splitAsStream((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.lang.String str11 = null; // flaky: pattern7.pattern();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern7;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern7;
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.FloatBuffer floatBuffer25 = byteBuffer20.asFloatBuffer();
        java.nio.CharBuffer charBuffer26 = byteBuffer20.asCharBuffer();
        boolean boolean27 = java.util.regex.Pattern.matches("", (java.lang.CharSequence) charBuffer26);
        java.lang.String[] strArray28 = null; // flaky: pattern7.split((java.lang.CharSequence) charBuffer26);
        java.util.regex.Matcher matcher29 = pattern1.matcher((java.lang.CharSequence) charBuffer26);
        java.lang.CharSequence charSequence30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray31 = pattern1.split(charSequence30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strPredicate3);
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strStream10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str11, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(matcher29);
        org.junit.Assert.assertEquals(matcher29.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        java.lang.String str8 = response2.statusMessage;
        java.nio.ByteBuffer byteBuffer9 = response2.byteData;
        response2.numRedirects = (byte) 10;
        org.jsoup.Connection.Response response13 = response2.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer14 = response2.byteData;
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response15);
        boolean boolean18 = response16.hasCookie("\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response16);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response20 = org.jsoup.helper.HttpConnection.Response.execute(request0, response16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNotNull(response13);
        org.junit.Assert.assertNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putFloat((float) 100);
        boolean boolean8 = byteBuffer5.isDirect();
        java.nio.LongBuffer longBuffer9 = byteBuffer5.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(longBuffer9);
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        short short23 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer15.putDouble(100.0d);
        boolean boolean26 = byteBuffer15.isDirect();
        int int27 = byteBuffer13.compareTo(byteBuffer15);
        java.nio.DoubleBuffer doubleBuffer28 = byteBuffer15.asDoubleBuffer();
        java.nio.IntBuffer intBuffer29 = byteBuffer15.asIntBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(intBuffer29);
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putDouble(8, (double) 256);
        java.nio.CharBuffer charBuffer15 = byteBuffer11.asCharBuffer();
        boolean boolean16 = byteBuffer11.isReadOnly();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer11.compact();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long28 = byteBuffer27.getLong();
        int int29 = byteBuffer27.position();
        float float31 = byteBuffer27.getFloat((int) (short) 10);
        boolean boolean32 = byteBuffer27.hasArray();
        double double33 = byteBuffer27.getDouble();
        short short35 = byteBuffer27.getShort(0);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        boolean boolean46 = byteBuffer41.hasArray();
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer48.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.putInt(0);
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.put(byteArray55);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer52.get(byteArray65, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer71 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer71.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.putInt(0);
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer79 = byteBuffer75.put(byteArray78);
        java.nio.ByteBuffer byteBuffer81 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer81.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer85 = byteBuffer81.putInt(0);
        byte[] byteArray88 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer89 = byteBuffer85.put(byteArray88);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer75.get(byteArray88, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer69.put(byteArray88);
        java.nio.ByteBuffer byteBuffer94 = byteBuffer41.put(byteArray88);
        java.nio.ByteBuffer byteBuffer95 = byteBuffer27.get(byteArray88);
        java.nio.ByteBuffer byteBuffer96 = byteBuffer23.put(byteArray88);
        java.nio.ByteBuffer byteBuffer97 = byteBuffer17.get(byteArray88);
        java.nio.DoubleBuffer doubleBuffer98 = byteBuffer97.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 0 + "'", short35 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(byteBuffer95);
        org.junit.Assert.assertNotNull(byteBuffer96);
        org.junit.Assert.assertNotNull(byteBuffer97);
        org.junit.Assert.assertNotNull(doubleBuffer98);
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        org.jsoup.Connection.Method method8 = response5.method();
        org.jsoup.Connection.Response response10 = response5.removeHeader("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        int int16 = byteBuffer14.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer14.putChar((int) ' ', '#');
        short short20 = byteBuffer19.getShort();
        response5.byteData = byteBuffer19;
        int int22 = response5.statusCode();
        org.jsoup.Connection.Response response25 = response5.cookie("\\Qhi!\\E", "\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 0 + "'", short20 == (short) 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(response25);
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response8 = response1.removeCookie("java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str11 = response10.charset;
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.FloatBuffer floatBuffer22 = byteBuffer17.asFloatBuffer();
        java.nio.CharBuffer charBuffer23 = byteBuffer17.asCharBuffer();
        boolean boolean24 = byteBuffer17.isReadOnly();
        byte byte25 = byteBuffer17.get();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer17.duplicate();
        response10.byteData = byteBuffer17;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(floatBuffer22);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.ByteOrder byteOrder19 = byteBuffer14.order();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer14.slice();
        byte byte22 = byteBuffer14.get(0);
        java.nio.Buffer buffer24 = byteBuffer14.limit(2);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer26 = byteBuffer14.putFloat((float) 48);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(byteOrder19);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0);
        org.junit.Assert.assertNotNull(buffer24);
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putChar('4');
        boolean boolean11 = byteBuffer1.isReadOnly();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = byteBuffer1.getInt(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        int int26 = byteBuffer22.getInt(0);
        int int27 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer22.putInt(83, (int) (byte) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putFloat((float) 256);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer32.putChar(23, 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer38 = byteBuffer32.put((int) '\u4120', (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 16672");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer3.putDouble((double) ' ');
        boolean boolean32 = byteBuffer31.hasRemaining();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(23, (byte) 0);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer31.putLong((long) 23);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putChar('\u4120');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.statusCode = 64;
        boolean boolean14 = response1.executed;
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str17 = response1.cookie("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder13 = byteBuffer12.order();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer12.putInt(1);
        // The following exception was thrown during execution in test generation
        try {
            char char17 = byteBuffer12.getChar((-18));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.Connection.Response response6 = response1.removeHeader("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        java.lang.String str7 = response1.statusMessage;
        java.lang.String str9 = response1.cookie("java.nio.DirectByteBuffer[pos=12 lim=32 cap=100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        boolean boolean80 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer83 = byteBuffer25.putInt(14, 12);
        float float85 = byteBuffer83.getFloat((int) (byte) 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + 0.0f + "'", float85 == 0.0f);
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = (-11);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.put((byte) 100);
        int int32 = byteBuffer29.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        boolean boolean13 = byteBuffer5.isDirect();
        java.nio.LongBuffer longBuffer14 = byteBuffer5.asLongBuffer();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        byte byte19 = byteBuffer16.get((int) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer16.putInt((int) (short) 0);
        int int22 = byteBuffer5.compareTo(byteBuffer21);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.duplicate();
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putShort((short) (byte) 66);
        java.nio.Buffer buffer26 = byteBuffer25.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-2) + "'", int22 == (-2));
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(buffer26);
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.put((byte) 10);
        char char11 = byteBuffer10.getChar();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putChar('#');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putInt(97);
        int int16 = byteBuffer13.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        float float11 = byteBuffer1.getFloat(1);
        java.nio.FloatBuffer floatBuffer12 = byteBuffer1.asFloatBuffer();
        java.nio.Buffer buffer13 = byteBuffer1.clear();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.put(byteArray22);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer19.get(byteArray32, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer1.get(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.wrap(byteArray32, (int) ' ', 86);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.putDouble(3, 1.1034378113E-312d);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        short short22 = byteBuffer21.getShort();
        java.nio.IntBuffer intBuffer23 = byteBuffer21.asIntBuffer();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long26 = byteBuffer25.getLong();
        int int27 = byteBuffer25.position();
        float float29 = byteBuffer25.getFloat((int) (short) 10);
        boolean boolean30 = byteBuffer25.hasArray();
        double double31 = byteBuffer25.getDouble();
        short short33 = byteBuffer25.getShort(0);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer25.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        java.lang.String str39 = response37.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = response37.cookies();
        org.jsoup.Connection.Response response42 = response37.removeCookie("hi!");
        java.lang.String str43 = response37.statusMessage();
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        boolean boolean54 = byteBuffer49.hasArray();
        response37.byteData = byteBuffer49;
        int int56 = byteBuffer35.compareTo(byteBuffer49);
        int int57 = byteBuffer21.compareTo(byteBuffer49);
        java.nio.Buffer buffer58 = byteBuffer49.rewind();
        short short59 = byteBuffer49.getShort();
        int int60 = byteBuffer1.compareTo(byteBuffer49);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer1.putShort((short) 0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 0 + "'", short33 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(response42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-10) + "'", int56 == (-10));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(buffer58);
        org.junit.Assert.assertTrue("'" + short59 + "' != '" + (short) 0 + "'", short59 == (short) 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-52) + "'", int60 == (-52));
        org.junit.Assert.assertNotNull(byteBuffer62);
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        // The following exception was thrown during execution in test generation
        try {
            char char16 = byteBuffer9.getChar((int) '\u0a00');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        double double12 = byteBuffer10.getDouble(12);
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.put(byteArray21);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer18.get(byteArray31, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer10.put(byteArray31);
        byte byte37 = byteBuffer36.get();
        java.nio.Buffer buffer38 = byteBuffer36.clear();
        java.nio.Buffer buffer39 = buffer38.flip();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer40 = buffer38.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 7.565251118924485E-307d + "'", double12 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 0 + "'", byte37 == (byte) 0);
        org.junit.Assert.assertNotNull(buffer38);
        org.junit.Assert.assertNotNull(buffer39);
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.InetAddress inetAddress4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket6 = socketFactory0.createSocket(inetAddress2, 58, inetAddress4, 63);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(10);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer7.putChar('a');
        java.nio.Buffer buffer15 = byteBuffer7.position(52);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer7.putShort((int) (byte) 0, (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            float float20 = byteBuffer7.getFloat((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(byteBuffer18);
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.CharBuffer charBuffer12 = byteBuffer1.asCharBuffer();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long15 = byteBuffer14.getLong();
        int int16 = byteBuffer14.position();
        float float18 = byteBuffer14.getFloat((int) (short) 10);
        boolean boolean19 = byteBuffer14.hasArray();
        double double20 = byteBuffer14.getDouble();
        short short22 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer14.putDouble(100.0d);
        float float25 = byteBuffer14.getFloat();
        char char27 = byteBuffer14.getChar(1);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putDouble(7.565251118924485E-307d);
        int int40 = byteBuffer14.compareTo(byteBuffer39);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer14.putShort((short) (byte) -1);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 0 };
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.put(byteArray45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer1.put(byteArray45);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer1.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer49 = byteBuffer1.asDoubleBuffer();
        int int50 = byteBuffer1.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-6) + "'", int40 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 0]");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(doubleBuffer49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 74 + "'", int50 == 74);
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        response1.statusCode = 12;
        java.lang.String str16 = response1.charset;
        int int17 = response1.statusCode();
        org.jsoup.Connection.Response response20 = response1.cookie("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E", "java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]");
        boolean boolean22 = response1.hasHeader("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Too many redirects occurred trying to load URL null");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str16, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(response20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer22.putShort((short) (byte) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer48.putFloat(84, (-1.0f));
        java.nio.ByteBuffer byteBuffer53 = byteBuffer51.putShort((short) (byte) -1);
        boolean boolean54 = byteBuffer53.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.charset = "\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E";
        java.net.URL uRL4 = response1.url();
        boolean boolean6 = response1.hasCookie("java.nio.DirectByteBuffer[pos=12 lim=32 cap=100]");
        org.junit.Assert.assertNull(uRL4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putDouble(7.565251118924485E-307d);
        java.lang.String str12 = byteBuffer9.toString();
        byte byte13 = byteBuffer9.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]" + "'", str12, "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 33);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.lang.String str9 = byteBuffer8.toString();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteOrder byteOrder20 = byteBuffer19.order();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer8.order(byteOrder20);
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putInt(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putInt((int) '#');
        float float31 = byteBuffer29.getFloat(4);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.putInt(0);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.put(byteArray50);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer37.get(byteArray50, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.putInt(0);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.put(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer66.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.putInt(0);
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.put(byteArray73);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer60.get(byteArray73, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer54.put(byteArray73);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer29.put(byteArray73);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer29.compact();
        java.nio.ByteBuffer byteBuffer83 = byteBuffer80.putShort(8, (short) (byte) 1);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer80.duplicate();
        java.nio.ByteOrder byteOrder85 = byteBuffer80.order();
        java.nio.ByteBuffer byteBuffer86 = byteBuffer21.order(byteOrder85);
        java.nio.Buffer buffer87 = byteBuffer21.flip();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer90 = byteBuffer21.putShort(20, (short) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str9, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 7.3E-44f + "'", float31 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteOrder85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(buffer87);
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        response1.numRedirects = (byte) 10;
        org.jsoup.Connection.Response response12 = response1.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.lang.String str13 = response1.statusMessage;
        response1.contentType = "\\Q\\Qhi!\\E\\\\E\\Q\\E";
        org.jsoup.Connection.Response response18 = response1.header("java.nio.DirectByteBuffer[pos=84 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=20 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(response18);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int7 = byteBuffer1.getInt((int) '4');
        long long8 = byteBuffer1.getLong();
        java.nio.FloatBuffer floatBuffer9 = byteBuffer1.asFloatBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer12 = byteBuffer1.putChar((-16), '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer9);
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.put((byte) 100);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer5.compact();
        boolean boolean7 = byteBuffer6.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str13 = response1.charset;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Too many redirects occurred trying to load URL null");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        double double12 = byteBuffer10.getDouble(12);
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.put(byteArray21);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer18.get(byteArray31, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer10.put(byteArray31);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer36.putInt(75, 0);
        short short40 = byteBuffer39.getShort();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putDouble(3, (double) '4');
        int int45 = byteBuffer39.getInt(27);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer39.putChar((int) ' ', '?');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 7.565251118924485E-307d + "'", double12 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteBuffer48);
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        java.lang.String str9 = response1.charset();
        response1.executed = true;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Too many redirects occurred trying to load URL null");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer61.putShort((short) (byte) 66);
        java.nio.Buffer buffer64 = byteBuffer61.clear();
        java.nio.ByteBuffer byteBuffer67 = byteBuffer61.putShort(16, (short) (byte) -1);
        java.nio.Buffer buffer68 = byteBuffer61.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(buffer64);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(buffer68);
    }
}
