import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest11 {

    public static boolean debug = false;

    @Test
    public void test05501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05501");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        response1.numRedirects = (byte) 10;
        org.jsoup.Connection.Response response12 = response1.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer13 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response14);
        boolean boolean17 = response15.hasCookie("\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response15);
        org.jsoup.Connection.Response response21 = response15.cookie("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.lang.String str22 = response15.charset();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(response21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test05502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05502");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.lang.String str13 = response12.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = response12.cookies();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test05503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05503");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.lang.String str7 = response5.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response8.header("Location");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response8);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response13 = org.jsoup.helper.HttpConnection.Response.execute(request0, response8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test05504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05504");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        char char12 = byteBuffer11.getChar();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.slice();
        int int14 = byteBuffer13.remaining();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        int int18 = byteBuffer16.position();
        float float20 = byteBuffer16.getFloat((int) (short) 10);
        boolean boolean21 = byteBuffer16.hasArray();
        double double22 = byteBuffer16.getDouble();
        short short24 = byteBuffer16.getShort(0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer16.putDouble(100.0d);
        double double28 = byteBuffer16.getDouble(20);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer16.slice();
        char char30 = byteBuffer16.getChar();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer13.put(byteBuffer16);
        java.nio.ByteBuffer byteBuffer32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int33 = byteBuffer13.compareTo(byteBuffer32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 84 + "'", int14 == 84);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 0 + "'", short24 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + char30 + "' != '" + '\000' + "'", char30 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer31);
    }

    @Test
    public void test05505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05505");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean5 = response4.executed;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response4);
        response6.charset = "\\Qjava.nio.DirectByteBuffer[pos=8 lim=100 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.lang.String str10 = response6.charset;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\\Qjava.nio.DirectByteBuffer[pos=8 lim=100 cap=100]\\E" + "'", str10, "\\Qjava.nio.DirectByteBuffer[pos=8 lim=100 cap=100]\\E");
    }

    @Test
    public void test05506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05506");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocateDirect((int) '4');
        java.nio.LongBuffer longBuffer9 = byteBuffer8.asLongBuffer();
        java.nio.DoubleBuffer doubleBuffer10 = byteBuffer8.asDoubleBuffer();
        response1.byteData = byteBuffer8;
        response1.contentType = "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]";
        response1.contentType = "java.nio.HeapByteBuffer[pos=2 lim=2 cap=2]";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertNotNull(doubleBuffer10);
    }

    @Test
    public void test05507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05507");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response26);
        org.jsoup.Connection.Request request28 = null;
        response27.req = request28;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test05508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05508");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.Connection.Method method27 = response26.method();
        response26.numRedirects = 24;
        response26.statusCode = 76;
        org.jsoup.helper.HttpConnection.Response response32 = null; // flaky: new org.jsoup.helper.HttpConnection.Response(response26);
        org.jsoup.Connection.Method method33 = response26.method();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertNull(method33);
    }

    @Test
    public void test05509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05509");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putFloat((int) ' ', (float) 4);
        java.nio.LongBuffer longBuffer12 = byteBuffer1.asLongBuffer();
        java.nio.FloatBuffer floatBuffer13 = byteBuffer1.asFloatBuffer();
        boolean boolean14 = floatBuffer13.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(longBuffer12);
        org.junit.Assert.assertNotNull(floatBuffer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05510");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.IntBuffer intBuffer7 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer9.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response20 = null;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.lang.String str23 = response21.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = response21.cookies();
        org.jsoup.Connection.Response response26 = response21.removeCookie("hi!");
        java.lang.String str27 = response21.statusMessage();
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        boolean boolean38 = byteBuffer33.hasArray();
        response21.byteData = byteBuffer33;
        int int40 = byteBuffer19.compareTo(byteBuffer33);
        int int41 = byteBuffer5.compareTo(byteBuffer33);
        java.nio.Buffer buffer42 = byteBuffer33.rewind();
        boolean boolean43 = byteBuffer33.isDirect();
        double double45 = byteBuffer33.getDouble(0);
        java.nio.Buffer buffer46 = byteBuffer33.flip();
        org.jsoup.helper.HttpConnection.Response response47 = null;
        org.jsoup.helper.HttpConnection.Response response48 = new org.jsoup.helper.HttpConnection.Response(response47);
        response48.contentType = "";
        java.lang.String str51 = response48.contentType;
        org.jsoup.helper.HttpConnection.Response response52 = new org.jsoup.helper.HttpConnection.Response(response48);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry54 = response52.scanHeaders("hi!");
        java.lang.String str55 = response52.statusMessage;
        org.jsoup.helper.HttpConnection.Response response56 = new org.jsoup.helper.HttpConnection.Response(response52);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = response56.headers();
        boolean boolean58 = byteBuffer33.equals((java.lang.Object) strMap57);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(response26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-10) + "'", int40 == (-10));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(buffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2.57E-322d + "'", double45 == 2.57E-322d);
        org.junit.Assert.assertNotNull(buffer46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(strEntry54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test05511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05511");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        int int10 = response8.numRedirects;
        org.jsoup.Connection.Response response12 = response8.removeHeader("java.nio.DirectByteBuffer[pos=23 lim=100 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(response12);
    }

    @Test
    public void test05512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05512");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Response response10 = response6.removeCookie("Location");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.net.URL uRL12 = response11.url();
        org.jsoup.Connection.Response response15 = response11.header("java.nio.DirectByteBuffer[pos=82 lim=100 cap=100]", "\\Qhi!\\E");
        java.net.URL uRL16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response17 = response11.url(uRL16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertNull(uRL12);
        org.junit.Assert.assertNotNull(response15);
    }

    @Test
    public void test05513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05513");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str16 = response5.header("\\Qjava.nio.DirectByteBuffer[pos=84 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test05514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05514");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        boolean boolean21 = response1.hasCookie("\\Qhi!\\E");
        int int22 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str24 = response1.charset();
        org.jsoup.Connection.Request request25 = response1.req;
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int27 = response26.statusCode;
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response26);
        org.jsoup.Connection.Response response30 = response26.removeHeader("\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(request25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(response30);
    }

    @Test
    public void test05515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05515");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response11 = response1.removeHeader("Location");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response12.headers();
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.net.URL uRL15 = response12.url();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(uRL15);
    }

    @Test
    public void test05516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05516");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        boolean boolean7 = response1.hasCookie("hi!");
        response1.statusMessage = "";
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int11 = response10.statusCode;
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response10);
        response10.statusMessage = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test05517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05517");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.Connection.Response response7 = response5.removeHeader("\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Response response10 = response8.removeCookie("\\Qjava.nio.DirectByteBuffer[pos=16 lim=100 cap=100]\\E");
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response12 = response8.url(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNotNull(response10);
    }

    @Test
    public void test05518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05518");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        boolean boolean13 = byteBuffer5.isDirect();
        java.nio.Buffer buffer14 = byteBuffer5.flip();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        int int18 = byteBuffer16.position();
        float float20 = byteBuffer16.getFloat((int) (short) 10);
        boolean boolean21 = byteBuffer16.hasArray();
        double double22 = byteBuffer16.getDouble();
        short short24 = byteBuffer16.getShort(0);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.put(byteArray33);
        boolean boolean35 = byteBuffer30.hasArray();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer41.get(byteArray54, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.putInt(0);
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.put(byteArray77);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer64.get(byteArray77, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer58.put(byteArray77);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer30.put(byteArray77);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer16.get(byteArray77);
        java.nio.ByteOrder byteOrder85 = byteBuffer84.order();
        java.nio.ByteBuffer byteBuffer86 = byteBuffer5.order(byteOrder85);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer5.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer90 = byteBuffer87.putDouble(23, (double) 128);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 0 + "'", short24 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteOrder85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
    }

    @Test
    public void test05519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05519");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        int int26 = byteBuffer22.getInt(0);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer22.putShort((short) (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
    }

    @Test
    public void test05520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05520");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        java.lang.String str9 = response1.charset();
        boolean boolean12 = response1.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", "Location");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str15 = response14.statusMessage();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test05521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05521");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.asReadOnlyBuffer();
        boolean boolean6 = byteBuffer1.isDirect();
        java.nio.Buffer buffer7 = byteBuffer1.clear();
        boolean boolean8 = byteBuffer1.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05522");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.put((byte) 10);
        char char11 = byteBuffer10.getChar();
        float float12 = byteBuffer10.getFloat();
        char char13 = byteBuffer10.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + '\000' + "'", char13 == '\000');
    }

    @Test
    public void test05523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05523");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket(inetAddress9, (-8));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-8");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05524");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        boolean boolean21 = response1.hasCookie("\\Qhi!\\E");
        int int22 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer24 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str26 = response1.contentType;
        int int27 = response1.statusCode;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test05525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05525");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress5 = null;
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket(inetAddress5, 86, inetAddress7, 82);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05526");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer1.compact();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
    }

    @Test
    public void test05527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05527");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        int int16 = response11.numRedirects;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response17);
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response18);
        org.jsoup.Connection.Request request21 = null;
        response20.req = request21;
        response20.statusCode = 81;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test05528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05528");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.Buffer buffer47 = byteBuffer22.flip();
        long long48 = byteBuffer22.getLong();
        java.nio.FloatBuffer floatBuffer49 = byteBuffer22.asFloatBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(buffer47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertNotNull(floatBuffer49);
    }

    @Test
    public void test05529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05529");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.lang.String str27 = response23.statusMessage;
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response30 = new org.jsoup.helper.HttpConnection.Response(response29);
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response30);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test05530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05530");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        org.jsoup.Connection.Request request12 = response1.req;
        org.jsoup.Connection.Request request13 = response1.req;
        java.nio.ByteBuffer byteBuffer14 = response1.byteData;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(request13);
        org.junit.Assert.assertNull(byteBuffer14);
    }

    @Test
    public void test05531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05531");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response14);
        org.jsoup.Connection.Response response18 = response14.cookie("java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]", "\\Q\\Qjava.nio.HeapByteBuffer[pos=0 lim=25 cap=52]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response18);
    }

    @Test
    public void test05532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05532");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        float float11 = byteBuffer10.getFloat();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.FloatBuffer floatBuffer22 = byteBuffer17.asFloatBuffer();
        boolean boolean23 = byteBuffer17.isDirect();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        org.jsoup.helper.HttpConnection.Response response34 = null;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response34);
        response35.contentType = "";
        boolean boolean38 = byteBuffer33.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putInt((int) '#');
        int int47 = byteBuffer33.compareTo(byteBuffer44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer17.put(byteBuffer44);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer10.put(byteBuffer17);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer49.compact();
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putInt(18);
        short short54 = byteBuffer52.getShort(33);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(floatBuffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + short54 + "' != '" + (short) 0 + "'", short54 == (short) 0);
    }

    @Test
    public void test05533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05533");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        short short12 = byteBuffer8.getShort();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer8.putShort(88, (short) (byte) 66);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer8.put((byte) 100);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long20 = byteBuffer19.getLong();
        int int21 = byteBuffer19.position();
        float float23 = byteBuffer19.getFloat((int) (short) 10);
        boolean boolean24 = byteBuffer19.hasArray();
        double double25 = byteBuffer19.getDouble();
        short short27 = byteBuffer19.getShort(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer19.putDouble(100.0d);
        java.nio.CharBuffer charBuffer30 = byteBuffer19.asCharBuffer();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long33 = byteBuffer32.getLong();
        int int34 = byteBuffer32.position();
        float float36 = byteBuffer32.getFloat((int) (short) 10);
        boolean boolean37 = byteBuffer32.hasArray();
        double double38 = byteBuffer32.getDouble();
        short short40 = byteBuffer32.getShort(0);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer32.putDouble(100.0d);
        float float43 = byteBuffer32.getFloat();
        char char45 = byteBuffer32.getChar(1);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putDouble(7.565251118924485E-307d);
        int int58 = byteBuffer32.compareTo(byteBuffer57);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer32.putShort((short) (byte) -1);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 0 };
        java.nio.ByteBuffer byteBuffer64 = byteBuffer32.put(byteArray63);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer19.put(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.wrap(byteArray63);
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.wrap(byteArray63);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer8.put(byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer71 = byteBuffer8.putShort((-8), (short) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-6) + "'", int58 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 0]");
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
    }

    @Test
    public void test05534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05534");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response26);
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response27);
        java.net.HttpURLConnection httpURLConnection29 = null;
        org.jsoup.helper.HttpConnection.Response response30 = null;
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response30);
        java.lang.String str33 = response31.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = response31.cookies();
        org.jsoup.Connection.Response response36 = response31.removeCookie("hi!");
        java.lang.String str37 = response31.statusMessage();
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        boolean boolean48 = byteBuffer43.hasArray();
        response31.byteData = byteBuffer43;
        boolean boolean51 = response31.hasCookie("\\Qhi!\\E");
        int int52 = response31.numRedirects;
        org.jsoup.helper.HttpConnection.Response response53 = new org.jsoup.helper.HttpConnection.Response(response31);
        // The following exception was thrown during execution in test generation
        try {
            response27.setupFromConnection(httpURLConnection29, (org.jsoup.Connection.Response) response53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(response36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test05535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05535");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Response response8 = response6.removeHeader("\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.Connection.Response response12 = response9.cookie("\\Qjava.nio.DirectByteBuffer[pos=0 lim=22 cap=100]\\E", "\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response15 = org.jsoup.helper.HttpConnection.Response.execute(request0, response13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNotNull(response12);
    }

    @Test
    public void test05536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05536");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = 86;
    }

    @Test
    public void test05537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05537");
        org.jsoup.Connection.Request request0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response.writePost(request0, outputStream1, "\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test05538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05538");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response15);
        response15.statusMessage = "\\Qhi!\\E";
        int int19 = response15.statusCode();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test05539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05539");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str8 = response5.getHeaderCaseInsensitive("java.nio.DirectByteBuffer[pos=84 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test05540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05540");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer1.compact();
        boolean boolean13 = byteBuffer12.isReadOnly();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.slice();
        byte byte15 = byteBuffer12.get();
        int int16 = byteBuffer12.getInt();
        java.lang.Class<?> wildcardClass17 = byteBuffer12.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 0 + "'", byte15 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test05541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05541");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer25 = byteBuffer24.mark();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.asReadOnlyBuffer();
        byte byte27 = byteBuffer24.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
    }

    @Test
    public void test05542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05542");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.put((byte) 10);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.FloatBuffer floatBuffer22 = byteBuffer17.asFloatBuffer();
        boolean boolean23 = byteBuffer17.isDirect();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        org.jsoup.helper.HttpConnection.Response response34 = null;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response34);
        response35.contentType = "";
        boolean boolean38 = byteBuffer33.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putInt((int) '#');
        int int47 = byteBuffer33.compareTo(byteBuffer44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer17.put(byteBuffer44);
        int int49 = byteBuffer9.compareTo(byteBuffer48);
        java.nio.LongBuffer longBuffer50 = byteBuffer9.asLongBuffer();
        java.lang.Class<?> wildcardClass51 = byteBuffer9.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(floatBuffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 83 + "'", int49 == 83);
        org.junit.Assert.assertNotNull(longBuffer50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test05543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05543");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.Buffer buffer47 = byteBuffer22.flip();
        java.nio.ByteBuffer byteBuffer50 = byteBuffer22.putFloat(4, (float) (short) 1);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer50.duplicate();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer51.putLong((long) 3);
        char char54 = byteBuffer53.getChar();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putShort(1405091840, (short) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(buffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + char54 + "' != '" + '\000' + "'", char54 == '\000');
    }

    @Test
    public void test05544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05544");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str13 = response9.header("\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = response14.headers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test05545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05545");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        java.lang.String str8 = response1.getHeaderCaseInsensitive("\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = response1.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test05546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05546");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        float float15 = byteBuffer1.getFloat();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer1.put(32, (byte) 1);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer18.slice();
        java.nio.LongBuffer longBuffer20 = byteBuffer18.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.0f + "'", float15 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(longBuffer20);
    }

    @Test
    public void test05547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05547");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        java.nio.Buffer buffer25 = byteBuffer22.flip();
        short short26 = byteBuffer22.getShort();
        java.nio.ByteOrder byteOrder27 = byteBuffer22.order();
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer33.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer33.putChar(' ');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer38.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.putLong((long) '4');
        short short47 = byteBuffer43.getShort(0);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer43.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.put(byteArray59);
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer62.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.putInt(0);
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.put(byteArray69);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer56.get(byteArray69, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer56.putDouble(100.0d);
        int int76 = byteBuffer50.compareTo(byteBuffer56);
        java.nio.ByteBuffer byteBuffer78 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer78.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer82 = byteBuffer78.putInt(0);
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer86 = byteBuffer82.put(byteArray85);
        java.nio.ByteOrder byteOrder87 = byteBuffer86.order();
        java.nio.ByteBuffer byteBuffer88 = byteBuffer56.order(byteOrder87);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer38.order(byteOrder87);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer22.order(byteOrder87);
        // The following exception was thrown during execution in test generation
        try {
            float float92 = byteBuffer90.getFloat(18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(byteOrder27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) 0 + "'", short47 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 14 + "'", int76 == 14);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteOrder87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
    }

    @Test
    public void test05548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05548");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        response6.contentType = "hi!";
        org.jsoup.Connection.Response response12 = response6.cookie("java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]", "\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        org.jsoup.Connection.Request request13 = null;
        response6.req = request13;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(response12);
    }

    @Test
    public void test05549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05549");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        int int6 = pattern2.flags();
        java.util.regex.Pattern pattern7 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern7;
        java.util.function.Predicate<java.lang.String> strPredicate9 = pattern7.asPredicate();
        int int10 = pattern7.flags();
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.lang.String[] strArray18 = pattern7.split((java.lang.CharSequence) charBuffer15, (int) (byte) 0);
        java.lang.String[] strArray19 = pattern2.split((java.lang.CharSequence) charBuffer15);
        java.lang.String[] strArray22 = pattern2.split((java.lang.CharSequence) "java.nio.DirectByteBufferR[pos=12 lim=100 cap=100]", 256);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.lang.String str24 = pattern2.pattern();
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(byteArray35);
        java.nio.ByteOrder byteOrder37 = byteBuffer36.order();
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.duplicate();
        java.nio.ByteBuffer byteBuffer41 = byteBuffer38.putDouble(8, (double) 256);
        java.nio.CharBuffer charBuffer42 = byteBuffer38.asCharBuffer();
        boolean boolean43 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E", (java.lang.CharSequence) charBuffer42);
        boolean boolean44 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=12 lim=32 cap=100]", (java.lang.CharSequence) charBuffer42);
        java.lang.String[] strArray45 = pattern2.split((java.lang.CharSequence) charBuffer42);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(strPredicate9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-24) + "'", int10 == (-24));
        org.junit.Assert.assertNotNull(pattern11);
// flaky:         org.junit.Assert.assertEquals(pattern11.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\\Qhi!\\E" + "'", str24, "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteOrder37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray45);
    }

    @Test
    public void test05550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05550");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        java.lang.String str6 = pattern2.pattern();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.lang.String str8 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\\Qhi!\\E" + "'", str6, "\\Qhi!\\E");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\\Qhi!\\E" + "'", str8, "\\Qhi!\\E");
    }

    @Test
    public void test05551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05551");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer1.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer1.putDouble((double) 3);
        int int73 = byteBuffer1.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 74 + "'", int73 == 74);
    }

    @Test
    public void test05552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05552");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str14 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response18 = response16.removeHeader("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response16);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = response19.cookies();
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response19);
        java.lang.String str22 = response19.contentType;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response19);
        boolean boolean24 = response23.executed;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05553");
        java.nio.ByteBuffer byteBuffer2 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long3 = byteBuffer2.getLong();
        int int4 = byteBuffer2.position();
        float float6 = byteBuffer2.getFloat((int) (short) 10);
        boolean boolean7 = byteBuffer2.hasArray();
        double double8 = byteBuffer2.getDouble();
        short short10 = byteBuffer2.getShort(0);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer2.putDouble(100.0d);
        float float13 = byteBuffer2.getFloat();
        char char15 = byteBuffer2.getChar(1);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putDouble(7.565251118924485E-307d);
        int int28 = byteBuffer2.compareTo(byteBuffer27);
        java.nio.DoubleBuffer doubleBuffer29 = byteBuffer2.asDoubleBuffer();
        boolean boolean30 = byteBuffer2.hasRemaining();
        short short31 = byteBuffer2.getShort();
        double double33 = byteBuffer2.getDouble(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer2.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long37 = byteBuffer36.getLong();
        int int38 = byteBuffer36.position();
        float float40 = byteBuffer36.getFloat((int) (short) 10);
        boolean boolean41 = byteBuffer36.hasArray();
        double double42 = byteBuffer36.getDouble();
        short short44 = byteBuffer36.getShort(0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer36.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer36.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer49.slice();
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putChar('\n');
        float float53 = byteBuffer50.getFloat();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer2.put(byteBuffer50);
        java.nio.CharBuffer charBuffer55 = byteBuffer50.asCharBuffer();
        boolean boolean56 = java.util.regex.Pattern.matches("\\Q\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 0.0f + "'", float6 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-6) + "'", int28 == (-6));
        org.junit.Assert.assertNotNull(doubleBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 0 + "'", short31 == (short) 0);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 0.0f + "'", float40 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) 0 + "'", short44 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(charBuffer55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test05554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05554");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        double double13 = byteBuffer1.getDouble(20);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.slice();
        java.nio.IntBuffer intBuffer15 = byteBuffer14.asIntBuffer();
        java.nio.Buffer buffer16 = byteBuffer14.flip();
        // The following exception was thrown during execution in test generation
        try {
            float float18 = byteBuffer14.getFloat(373288960);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(intBuffer15);
        org.junit.Assert.assertNotNull(buffer16);
    }

    @Test
    public void test05555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05555");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        response1.contentType = "";
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry10 = response1.scanHeaders("java.nio.DirectByteBuffer[pos=92 lim=100 cap=100]");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(strEntry10);
    }

    @Test
    public void test05556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05556");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.capacity();
        long long7 = byteBuffer1.getLong();
        java.nio.IntBuffer intBuffer8 = byteBuffer1.asIntBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putChar('\u3ff0');
        java.nio.ByteBuffer byteBuffer12 = byteBuffer1.putInt((int) (byte) 64);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
    }

    @Test
    public void test05557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05557");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        response8.executed = true;
        response8.numRedirects = 2;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
    }

    @Test
    public void test05558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05558");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response6.scanHeaders("hi!");
        java.lang.String str9 = response6.statusMessage;
        org.jsoup.Connection.Request request10 = response6.req;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response14);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry17 = response14.scanHeaders("\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response18 = org.jsoup.helper.HttpConnection.Response.execute(request0, response14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(request10);
        org.junit.Assert.assertNull(strEntry17);
    }

    @Test
    public void test05559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05559");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        int int80 = response1.statusCode;
        org.jsoup.helper.HttpConnection.Response response81 = new org.jsoup.helper.HttpConnection.Response(response1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = response81.cookie("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cookie name must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test05560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05560");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.Connection.Response response6 = response1.removeHeader("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response1.cookies();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test05561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05561");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket(inetAddress8, 28);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05562");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        response26.executed = true;
        java.lang.String str30 = response26.cookie("hi!");
        java.lang.String str31 = response26.statusMessage;
        org.jsoup.helper.HttpConnection.Response response32 = new org.jsoup.helper.HttpConnection.Response(response26);
        org.jsoup.Connection.Response response35 = response32.header("\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E", "\\Q\\Qjava.nio.DirectByteBuffer[pos=16 lim=32 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(response35);
    }

    @Test
    public void test05563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05563");
        java.nio.ByteBuffer byteBuffer2 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer4 = byteBuffer2.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer6 = byteBuffer2.putInt(0);
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer10 = byteBuffer6.put(byteArray9);
        boolean boolean11 = byteBuffer6.hasArray();
        double double12 = byteBuffer6.getDouble();
        java.nio.IntBuffer intBuffer13 = byteBuffer6.asIntBuffer();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer6.putShort(0, (short) (byte) 0);
        java.lang.String str17 = byteBuffer16.toString();
        java.nio.CharBuffer charBuffer18 = byteBuffer16.asCharBuffer();
        boolean boolean19 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]", (java.lang.CharSequence) charBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]" + "'", str17, "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test05564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05564");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        java.lang.String[] strArray8 = pattern2.split((java.lang.CharSequence) "hi!", (-84));
        int int9 = pattern2.flags();
        int int10 = pattern2.flags();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        float float16 = byteBuffer14.getFloat(32);
        boolean boolean17 = byteBuffer14.isDirect();
        java.util.regex.Pattern pattern20 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate21 = pattern20.asPredicate();
        boolean boolean22 = byteBuffer14.equals((java.lang.Object) pattern20);
        java.util.regex.Pattern pattern25 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern28 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.CharBuffer charBuffer39 = byteBuffer34.asCharBuffer();
        java.util.regex.Matcher matcher40 = pattern28.matcher((java.lang.CharSequence) charBuffer39);
        java.util.stream.Stream<java.lang.String> strStream41 = null; // flaky: pattern25.splitAsStream((java.lang.CharSequence) charBuffer39);
        java.lang.String[] strArray43 = pattern20.split((java.lang.CharSequence) charBuffer39, 32);
        java.util.regex.Pattern pattern46 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern47 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern47;
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer51 = byteBuffer50.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream52 = pattern47.splitAsStream((java.lang.CharSequence) charBuffer51);
        java.util.regex.Matcher matcher53 = pattern46.matcher((java.lang.CharSequence) charBuffer51);
        java.util.regex.Matcher matcher55 = pattern46.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        java.util.regex.Pattern pattern58 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.FloatBuffer floatBuffer69 = byteBuffer64.asFloatBuffer();
        java.nio.CharBuffer charBuffer70 = byteBuffer64.asCharBuffer();
        java.lang.String[] strArray72 = pattern58.split((java.lang.CharSequence) charBuffer70, (-10));
        java.util.regex.Matcher matcher73 = pattern46.matcher((java.lang.CharSequence) charBuffer70);
        java.util.stream.Stream<java.lang.String> strStream75 = pattern46.splitAsStream((java.lang.CharSequence) "\\Q\\E");
        java.lang.String str76 = pattern46.pattern();
        java.nio.ByteBuffer byteBuffer78 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long79 = byteBuffer78.getLong();
        int int80 = byteBuffer78.position();
        float float82 = byteBuffer78.getFloat((int) (short) 10);
        boolean boolean83 = byteBuffer78.hasArray();
        double double84 = byteBuffer78.getDouble();
        java.nio.ByteBuffer byteBuffer87 = byteBuffer78.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer88 = byteBuffer78.asCharBuffer();
        java.lang.String[] strArray90 = pattern46.split((java.lang.CharSequence) charBuffer88, 14);
        java.lang.String[] strArray91 = pattern20.split((java.lang.CharSequence) charBuffer88);
        java.lang.String[] strArray93 = pattern2.split((java.lang.CharSequence) charBuffer88, (-65536));
        java.util.function.Predicate<java.lang.String> strPredicate94 = pattern2.asPredicate();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(pattern20);
        org.junit.Assert.assertEquals(pattern20.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertNotNull(pattern25);
// flaky:         org.junit.Assert.assertEquals(pattern25.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern28);
        org.junit.Assert.assertEquals(pattern28.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertNotNull(matcher40);
        org.junit.Assert.assertEquals(matcher40.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(pattern46);
        org.junit.Assert.assertEquals(pattern46.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern47);
        org.junit.Assert.assertEquals(pattern47.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(charBuffer51);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertNotNull(matcher53);
        org.junit.Assert.assertEquals(matcher53.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher55);
        org.junit.Assert.assertEquals(matcher55.toString(), "java.util.regex.Matcher[pattern=hi! region=0,7 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern58);
        org.junit.Assert.assertEquals(pattern58.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(floatBuffer69);
        org.junit.Assert.assertNotNull(charBuffer70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(matcher73);
        org.junit.Assert.assertEquals(matcher73.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 8 + "'", int80 == 8);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(charBuffer88);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strPredicate94);
    }

    @Test
    public void test05565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05565");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.asReadOnlyBuffer();
        java.nio.Buffer buffer16 = byteBuffer14.limit(35);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(buffer16);
    }

    @Test
    public void test05566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05566");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        byte byte12 = byteBuffer9.get((int) 'a');
        java.nio.DoubleBuffer doubleBuffer13 = byteBuffer9.asDoubleBuffer();
        java.nio.FloatBuffer floatBuffer14 = byteBuffer9.asFloatBuffer();
        java.nio.Buffer buffer15 = byteBuffer9.clear();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer9.putInt((-18));
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        int int23 = byteBuffer21.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer29.get(byteArray42, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer21.get(byteArray42);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.wrap(byteArray42);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer17.put(byteArray42);
        java.nio.IntBuffer intBuffer50 = byteBuffer49.asIntBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(intBuffer50);
    }

    @Test
    public void test05567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05567");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(64);
        boolean boolean2 = byteBuffer1.isReadOnly();
        java.nio.Buffer buffer3 = byteBuffer1.mark();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.slice();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
    }

    @Test
    public void test05568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05568");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putLong(8, (long) (short) 1);
        int int11 = byteBuffer9.getInt(85);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putChar('\u0a00');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        short short23 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer15.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer15.compact();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer15.putLong((long) 128);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putInt((int) '#');
        float float38 = byteBuffer36.getFloat(4);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer44.get(byteArray57, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer73.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.putInt(0);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer81 = byteBuffer77.put(byteArray80);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer67.get(byteArray80, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer61.put(byteArray80);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer36.put(byteArray80);
        java.nio.ByteBuffer byteBuffer87 = java.nio.ByteBuffer.wrap(byteArray80);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer15.put(byteArray80);
        java.nio.ByteBuffer byteBuffer89 = java.nio.ByteBuffer.wrap(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer92 = byteBuffer13.put(byteArray80, 58, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 7.3E-44f + "'", float38 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
    }

    @Test
    public void test05569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05569");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.FloatBuffer floatBuffer25 = byteBuffer24.asFloatBuffer();
        boolean boolean26 = byteBuffer24.hasArray();
        int int27 = byteBuffer24.getInt();
        java.nio.IntBuffer intBuffer28 = byteBuffer24.asIntBuffer();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer24.putLong((long) 68);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer24.putInt(91, (int) 'a');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
    }

    @Test
    public void test05570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05570");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Request request7 = response1.req;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str9 = response8.contentType;
        int int10 = response8.statusCode();
        java.lang.String str12 = response8.cookie("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(request7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test05571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05571");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response2.scanHeaders("");
        java.lang.String str11 = response2.getHeaderCaseInsensitive("Location");
        java.lang.String str12 = response2.charset();
        response2.numRedirects = (short) 0;
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response2);
        response15.numRedirects = 0;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response18 = org.jsoup.helper.HttpConnection.Response.execute(request0, response15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test05572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05572");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer61.putShort((short) (byte) 66);
        java.nio.Buffer buffer64 = byteBuffer61.clear();
        java.nio.ByteBuffer byteBuffer67 = byteBuffer61.putShort(16, (short) (byte) -1);
        java.nio.ByteOrder byteOrder68 = byteBuffer67.order();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(buffer64);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteOrder68);
    }

    @Test
    public void test05573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05573");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putInt((int) '#');
        byte byte18 = byteBuffer14.get(1);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer14.slice();
        int int23 = byteBuffer22.remaining();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer3.put(byteBuffer22);
        int int25 = byteBuffer24.limit();
        java.nio.Buffer buffer26 = byteBuffer24.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 84 + "'", int23 == 84);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(buffer26);
    }

    @Test
    public void test05574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05574");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        boolean boolean22 = byteBuffer17.hasArray();
        double double23 = byteBuffer17.getDouble();
        java.nio.IntBuffer intBuffer24 = byteBuffer17.asIntBuffer();
        boolean boolean25 = byteBuffer11.equals((java.lang.Object) intBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test05575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05575");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ShortBuffer shortBuffer30 = byteBuffer3.asShortBuffer();
        java.nio.ByteBuffer byteBuffer32 = byteBuffer3.putLong((long) 88);
        char char34 = byteBuffer3.getChar(30);
        java.nio.IntBuffer intBuffer35 = byteBuffer3.asIntBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(shortBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + char34 + "' != '" + '\000' + "'", char34 == '\000');
        org.junit.Assert.assertNotNull(intBuffer35);
    }

    @Test
    public void test05576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05576");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.ByteOrder byteOrder19 = byteBuffer14.order();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer14.slice();
        java.nio.IntBuffer intBuffer21 = byteBuffer20.asIntBuffer();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putFloat(30, (float) (byte) 1);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(byteOrder19);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(intBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
    }

    @Test
    public void test05577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05577");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        response1.charset = "\\Q\\E";
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response11);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document14 = response11.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
    }

    @Test
    public void test05578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05578");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 1);
        boolean boolean2 = byteBuffer1.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test05579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05579");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "java.nio.DirectByteBuffer[pos=23 lim=100 cap=100]";
    }

    @Test
    public void test05580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05580");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        int int5 = byteBuffer1.getInt();
        int int6 = byteBuffer1.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-65536) + "'", int5 == (-65536));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test05581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05581");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str7 = response6.charset();
        java.lang.String str8 = response6.contentType();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test05582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05582");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E", 23, inetAddress7, 32);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05583");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        org.jsoup.Connection.Response response8 = response1.removeCookie("Location");
        response1.statusCode = (short) 10;
        response1.statusMessage = "hi!";
        java.lang.String str13 = response1.charset();
        response1.numRedirects = 50;
        response1.statusCode = '\n';
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test05584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05584");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response5.contentType();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.lang.String str14 = response11.contentType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test05585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05585");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.InetAddress inetAddress4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket6 = socketFactory0.createSocket(inetAddress2, 52, inetAddress4, 30);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05586");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        byte byte9 = byteBuffer5.get(1);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.slice();
        char char14 = byteBuffer5.getChar();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long25 = byteBuffer24.getLong();
        int int26 = byteBuffer24.position();
        float float28 = byteBuffer24.getFloat((int) (short) 10);
        boolean boolean29 = byteBuffer24.hasArray();
        double double30 = byteBuffer24.getDouble();
        short short32 = byteBuffer24.getShort(0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        boolean boolean43 = byteBuffer38.hasArray();
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer68.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.putInt(0);
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer76 = byteBuffer72.put(byteArray75);
        java.nio.ByteBuffer byteBuffer78 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer78.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer82 = byteBuffer78.putInt(0);
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer86 = byteBuffer82.put(byteArray85);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer72.get(byteArray85, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer66.put(byteArray85);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer38.put(byteArray85);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer24.get(byteArray85);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer20.put(byteArray85);
        java.nio.ByteBuffer byteBuffer94 = byteBuffer5.get(byteArray85);
        boolean boolean95 = byteBuffer5.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 0 + "'", short32 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test05587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05587");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.Connection.Response response9 = response1.removeHeader("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.lang.String str11 = response1.cookie("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.headers();
        boolean boolean13 = response1.executed;
        response1.executed = true;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05588");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        java.lang.Class<?> wildcardClass7 = byteBuffer1.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test05589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05589");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.wrap(byteArray41);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
    }

    @Test
    public void test05590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05590");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer3.putDouble((double) ' ');
        boolean boolean32 = byteBuffer31.hasRemaining();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.put(23, (byte) 0);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer31.putLong((long) 23);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer31.putInt((-72));
        int int40 = byteBuffer31.position();
        java.nio.ShortBuffer shortBuffer41 = byteBuffer31.asShortBuffer();
        java.nio.ByteBuffer byteBuffer42 = byteBuffer31.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 30 + "'", int40 == 30);
        org.junit.Assert.assertNotNull(shortBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer42);
    }

    @Test
    public void test05591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05591");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        double double16 = byteBuffer9.getDouble(0);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer9.putLong((-1L));
        byte byte19 = byteBuffer18.get();
        java.nio.Buffer buffer20 = byteBuffer18.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.57E-322d + "'", double16 == 2.57E-322d);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(buffer20);
    }

    @Test
    public void test05592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05592");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        java.lang.String str9 = response1.charset();
        boolean boolean12 = response1.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", "Location");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str15 = response14.charset;
        response14.executed = false;
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response14);
        int int19 = response18.numRedirects;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response18);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test05593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05593");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        response9.charset = "hi!";
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str13 = response12.charset();
        int int14 = response12.numRedirects;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test05594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05594");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]", (int) '\u4120');
        java.util.function.Predicate<java.lang.String> strPredicate3 = null; // flaky: pattern2.asPredicate();
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putInt(0);
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.put(byteArray12);
        java.nio.ByteOrder byteOrder14 = byteBuffer13.order();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.duplicate();
        char char16 = byteBuffer15.getChar();
        byte byte18 = byteBuffer15.get(64);
        java.util.regex.Pattern pattern19 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern19;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern19;
        int int22 = pattern19.flags();
        java.lang.String str23 = pattern19.pattern();
        java.util.function.Predicate<java.lang.String> strPredicate24 = pattern19.asPredicate();
        boolean boolean25 = byteBuffer15.equals((java.lang.Object) pattern19);
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocate((int) '\n');
        byte[] byteArray28 = byteBuffer27.array();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer15.put(byteArray28);
        java.nio.CharBuffer charBuffer30 = byteBuffer15.asCharBuffer();
        java.util.regex.Matcher matcher31 = null; // flaky: pattern2.matcher((java.lang.CharSequence) charBuffer30);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer32 = charBuffer30.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteOrder14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + '\000' + "'", char16 == '\000');
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertNotNull(pattern19);
// flaky:         org.junit.Assert.assertEquals(pattern19.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-24) + "'", int22 == (-24));
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str23, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(strPredicate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
// flaky:         org.junit.Assert.assertNotNull(matcher31);
// flaky:         org.junit.Assert.assertEquals(matcher31.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=32 lim=100 cap=100] region=0,37 lastmatch=]");
    }

    @Test
    public void test05595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05595");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        java.net.Socket socket8 = socketFactory0.createSocket(inetAddress6, 25);
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket("\\Qjava.nio.HeapByteBuffer[pos=0 lim=52 cap=52]\\E", 96);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: \\Qjava.nio.HeapByteBuffer[pos=0 lim=52 cap=52]\\E");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
// flaky:         org.junit.Assert.assertEquals(socket8.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=35836]");
    }

    @Test
    public void test05596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05596");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        response4.executed = false;
        response4.statusCode = (byte) 0;
    }

    @Test
    public void test05597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05597");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer11.putLong((long) (byte) 10);
        byte byte36 = byteBuffer34.get(28);
        char char37 = byteBuffer34.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 0 + "'", byte36 == (byte) 0);
        org.junit.Assert.assertTrue("'" + char37 + "' != '" + '\000' + "'", char37 == '\000');
    }

    @Test
    public void test05598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05598");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocate(64);
        boolean boolean18 = byteBuffer17.isReadOnly();
        java.nio.Buffer buffer19 = byteBuffer17.mark();
        java.nio.ByteOrder byteOrder20 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer17.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer9.put(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer72 = java.nio.ByteBuffer.wrap(byteArray62, (-35), 96);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(buffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
    }

    @Test
    public void test05599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05599");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket6 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=40 lim=100 cap=100]", (-84), inetAddress4, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-84");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05600");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 81);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05601");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.lang.String str10 = response5.getHeaderCaseInsensitive("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test05602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05602");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate6 = pattern5.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate7 = pattern5.asPredicate();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        java.nio.Buffer buffer15 = byteBuffer9.limit(32);
        java.nio.CharBuffer charBuffer16 = byteBuffer9.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream17 = pattern5.splitAsStream((java.lang.CharSequence) charBuffer16);
        java.lang.String[] strArray18 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer16);
        java.lang.String str19 = null; // flaky: pattern2.pattern();
        java.util.regex.Matcher matcher21 = null; // flaky: pattern2.matcher((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern25 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern26 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern26;
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer30 = byteBuffer29.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream31 = null; // flaky: pattern26.splitAsStream((java.lang.CharSequence) charBuffer30);
        java.util.regex.Matcher matcher32 = pattern25.matcher((java.lang.CharSequence) charBuffer30);
        java.util.regex.Matcher matcher34 = pattern25.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        java.util.regex.Pattern pattern37 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.FloatBuffer floatBuffer48 = byteBuffer43.asFloatBuffer();
        java.nio.CharBuffer charBuffer49 = byteBuffer43.asCharBuffer();
        java.lang.String[] strArray51 = pattern37.split((java.lang.CharSequence) charBuffer49, (-10));
        java.util.regex.Matcher matcher52 = pattern25.matcher((java.lang.CharSequence) charBuffer49);
        java.util.regex.Matcher matcher53 = null; // flaky: pattern2.matcher((java.lang.CharSequence) charBuffer49);
        java.util.function.Predicate<java.lang.String> strPredicate54 = null; // flaky: pattern2.asPredicate();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(strStream17);
// flaky:         org.junit.Assert.assertNotNull(strArray18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str19, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(matcher21);
// flaky:         org.junit.Assert.assertEquals(matcher21.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,49 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern25);
        org.junit.Assert.assertEquals(pattern25.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern26);
// flaky:         org.junit.Assert.assertEquals(pattern26.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
// flaky:         org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(matcher32);
        org.junit.Assert.assertEquals(matcher32.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher34);
        org.junit.Assert.assertEquals(matcher34.toString(), "java.util.regex.Matcher[pattern=hi! region=0,7 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern37);
        org.junit.Assert.assertEquals(pattern37.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(floatBuffer48);
        org.junit.Assert.assertNotNull(charBuffer49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(matcher52);
        org.junit.Assert.assertEquals(matcher52.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher53);
// flaky:         org.junit.Assert.assertEquals(matcher53.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate54);
    }

    @Test
    public void test05603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05603");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = response7.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test05604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05604");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        response10.statusCode = 1;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.lang.String str15 = response10.charset();
        java.lang.String str16 = response10.contentType;
        org.jsoup.Connection.Response response18 = response10.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(response18);
    }

    @Test
    public void test05605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05605");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.Connection.Response response7 = response2.removeCookie("hi!");
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response2.scanHeaders("hi!");
        java.lang.String str10 = response2.charset;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response2);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response12 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test05606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05606");
        byte[] byteArray3 = new byte[] { (byte) 66, (byte) 1, (byte) 1 };
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.wrap(byteArray3);
        int int5 = byteBuffer4.limit();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[66, 1, 1]");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
    }

    @Test
    public void test05607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05607");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.lang.String str9 = byteBuffer8.toString();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteOrder byteOrder20 = byteBuffer19.order();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer8.order(byteOrder20);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer8.asReadOnlyBuffer();
        short short24 = byteBuffer22.getShort(84);
        double double26 = byteBuffer22.getDouble(19);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer28.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer33 = byteBuffer22.put(byteBuffer32);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str9, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 0 + "'", short24 == (short) 0);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer32);
    }

    @Test
    public void test05608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05608");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E", (int) (byte) 10);
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern6 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern6;
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer10 = byteBuffer9.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream11 = null; // flaky: pattern6.splitAsStream((java.lang.CharSequence) charBuffer10);
        java.util.regex.Matcher matcher12 = pattern5.matcher((java.lang.CharSequence) charBuffer10);
        java.util.regex.Matcher matcher14 = pattern5.matcher((java.lang.CharSequence) "\\Qhi!\\E");
        java.util.regex.Pattern pattern17 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        java.nio.FloatBuffer floatBuffer28 = byteBuffer23.asFloatBuffer();
        java.nio.CharBuffer charBuffer29 = byteBuffer23.asCharBuffer();
        java.lang.String[] strArray31 = pattern17.split((java.lang.CharSequence) charBuffer29, (-10));
        java.util.regex.Matcher matcher32 = pattern5.matcher((java.lang.CharSequence) charBuffer29);
        java.util.stream.Stream<java.lang.String> strStream34 = pattern5.splitAsStream((java.lang.CharSequence) "\\Q\\E");
        java.lang.String str35 = pattern5.pattern();
        java.lang.String str36 = pattern5.pattern();
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer38.putLong((long) '4');
        float float42 = byteBuffer40.getFloat(32);
        boolean boolean43 = byteBuffer40.isDirect();
        java.util.regex.Pattern pattern46 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate47 = pattern46.asPredicate();
        boolean boolean48 = byteBuffer40.equals((java.lang.Object) pattern46);
        java.util.regex.Pattern pattern51 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern54 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.putInt(0);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.put(byteArray63);
        java.nio.CharBuffer charBuffer65 = byteBuffer60.asCharBuffer();
        java.util.regex.Matcher matcher66 = pattern54.matcher((java.lang.CharSequence) charBuffer65);
        java.util.stream.Stream<java.lang.String> strStream67 = null; // flaky: pattern51.splitAsStream((java.lang.CharSequence) charBuffer65);
        java.lang.String[] strArray69 = pattern46.split((java.lang.CharSequence) charBuffer65, 32);
        java.lang.String[] strArray71 = pattern5.split((java.lang.CharSequence) charBuffer65, 16);
        java.util.regex.Matcher matcher72 = pattern2.matcher((java.lang.CharSequence) charBuffer65);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer74 = charBuffer65.limit((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E");
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern6);
// flaky:         org.junit.Assert.assertEquals(pattern6.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
// flaky:         org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(matcher12);
        org.junit.Assert.assertEquals(matcher12.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher14);
        org.junit.Assert.assertEquals(matcher14.toString(), "java.util.regex.Matcher[pattern=hi! region=0,7 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern17);
        org.junit.Assert.assertEquals(pattern17.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(floatBuffer28);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(matcher32);
        org.junit.Assert.assertEquals(matcher32.toString(), "java.util.regex.Matcher[pattern=hi! region=0,43 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(pattern46);
        org.junit.Assert.assertEquals(pattern46.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertNotNull(pattern51);
// flaky:         org.junit.Assert.assertEquals(pattern51.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern54);
        org.junit.Assert.assertEquals(pattern54.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(charBuffer65);
        org.junit.Assert.assertNotNull(matcher66);
        org.junit.Assert.assertEquals(matcher66.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(matcher72);
        org.junit.Assert.assertEquals(matcher72.toString(), "java.util.regex.Matcher[pattern=\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E region=0,43 lastmatch=]");
    }

    @Test
    public void test05609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05609");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(64);
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer4 = byteBuffer1.position((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newPosition > limit: (100 > 64)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
    }

    @Test
    public void test05610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05610");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        double double11 = byteBuffer5.getDouble();
        java.nio.IntBuffer intBuffer12 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putShort(0, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer15.compact();
        java.nio.CharBuffer charBuffer17 = byteBuffer15.asCharBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
    }

    @Test
    public void test05611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05611");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        boolean boolean7 = response1.hasCookie("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str9 = response1.charset;
        int int10 = response1.numRedirects;
        org.jsoup.Connection.Response response12 = response1.removeCookie("java.nio.DirectByteBuffer[pos=92 lim=100 cap=100]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document13 = response1.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(response12);
    }

    @Test
    public void test05612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05612");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.lang.String str9 = byteBuffer8.toString();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteOrder byteOrder20 = byteBuffer19.order();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer8.order(byteOrder20);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer8.asReadOnlyBuffer();
        short short24 = byteBuffer22.getShort(84);
        int int25 = byteBuffer22.getInt();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.duplicate();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str9, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 0 + "'", short24 == (short) 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
    }

    @Test
    public void test05613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05613");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.DoubleBuffer doubleBuffer28 = byteBuffer1.asDoubleBuffer();
        boolean boolean29 = byteBuffer1.hasRemaining();
        short short30 = byteBuffer1.getShort();
        double double32 = byteBuffer1.getDouble(0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer1.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long36 = byteBuffer35.getLong();
        int int37 = byteBuffer35.position();
        float float39 = byteBuffer35.getFloat((int) (short) 10);
        boolean boolean40 = byteBuffer35.hasArray();
        double double41 = byteBuffer35.getDouble();
        short short43 = byteBuffer35.getShort(0);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer35.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer35.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer48.slice();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putChar('\n');
        float float52 = byteBuffer49.getFloat();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer1.put(byteBuffer49);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer1.putDouble(13, (double) 85);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) 0 + "'", short43 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer56);
    }

    @Test
    public void test05614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05614");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer1.putChar('\u4120');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test05615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05615");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(4325376);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test05616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05616");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer1.putShort((short) (byte) -1);
        boolean boolean30 = byteBuffer1.hasRemaining();
        char char31 = byteBuffer1.getChar();
        java.nio.ShortBuffer shortBuffer32 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer34 = byteBuffer1.putDouble((double) 5.871732E-39f);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + char31 + "' != '" + '\000' + "'", char31 == '\000');
        org.junit.Assert.assertNotNull(shortBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
    }

    @Test
    public void test05617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05617");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer11.putLong((long) (byte) 10);
        int int35 = byteBuffer34.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 68 + "'", int35 == 68);
    }

    @Test
    public void test05618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05618");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("hi!");
        java.nio.ByteBuffer byteBuffer9 = response1.byteData;
        response1.charset = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        int int12 = response1.statusCode();
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test05619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05619");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.Buffer buffer25 = byteBuffer24.mark();
        double double27 = byteBuffer24.getDouble((int) (short) 10);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long30 = byteBuffer29.getLong();
        int int31 = byteBuffer29.position();
        float float33 = byteBuffer29.getFloat((int) (short) 10);
        boolean boolean34 = byteBuffer29.hasArray();
        double double35 = byteBuffer29.getDouble();
        java.nio.ByteBuffer byteBuffer38 = byteBuffer29.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer39 = byteBuffer29.asCharBuffer();
        boolean boolean40 = byteBuffer29.hasRemaining();
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        short short46 = byteBuffer42.getShort(0);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer42.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer51 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer51.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.putInt(0);
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.put(byteArray58);
        java.nio.ByteBuffer byteBuffer61 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer61.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer65 = byteBuffer61.putInt(0);
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.put(byteArray68);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer55.get(byteArray68, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer55.putDouble(100.0d);
        int int75 = byteBuffer49.compareTo(byteBuffer55);
        java.nio.ByteBuffer byteBuffer77 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer77.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer81 = byteBuffer77.putInt(0);
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer85 = byteBuffer81.put(byteArray84);
        java.nio.ByteOrder byteOrder86 = byteBuffer85.order();
        java.nio.ByteBuffer byteBuffer87 = byteBuffer55.order(byteOrder86);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer55.slice();
        int int89 = byteBuffer29.compareTo(byteBuffer88);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer29.putFloat((float) (-10));
        byte byte93 = byteBuffer91.get(86);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer94 = byteBuffer24.put(byteBuffer91);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 8.1387E-320d + "'", double27 == 8.1387E-320d);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) 0 + "'", short46 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 14 + "'", int75 == 14);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteOrder86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 6 + "'", int89 == 6);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertTrue("'" + byte93 + "' != '" + (byte) 0 + "'", byte93 == (byte) 0);
    }

    @Test
    public void test05620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05620");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        long long15 = byteBuffer1.getLong();
        byte byte17 = byteBuffer1.get(92);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
    }

    @Test
    public void test05621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05621");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        byte byte23 = byteBuffer14.get((int) (byte) 1);
        java.nio.Buffer buffer24 = byteBuffer14.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 0 + "'", byte23 == (byte) 0);
        org.junit.Assert.assertNotNull(buffer24);
    }

    @Test
    public void test05622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05622");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(0);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ShortBuffer shortBuffer3 = byteBuffer1.asShortBuffer();
        boolean boolean4 = byteBuffer1.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test05623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05623");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("hi!");
        java.nio.ByteBuffer byteBuffer9 = response1.byteData;
        java.lang.String str10 = response1.contentType();
        boolean boolean13 = response1.hasHeaderWithValue("\\Q\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E\\\\E\\Q\\E", "hi!");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = response14.headers();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test05624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05624");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]", 84);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern6 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern6;
        java.util.function.Predicate<java.lang.String> strPredicate8 = null; // flaky: pattern6.asPredicate();
        java.lang.String str9 = null; // flaky: pattern6.pattern();
        java.util.regex.Pattern pattern13 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern16 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern17 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern17;
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer21 = byteBuffer20.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream22 = null; // flaky: pattern17.splitAsStream((java.lang.CharSequence) charBuffer21);
        java.util.regex.Matcher matcher23 = pattern16.matcher((java.lang.CharSequence) charBuffer21);
        java.util.regex.Matcher matcher24 = null; // flaky: pattern13.matcher((java.lang.CharSequence) charBuffer21);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer27 = byteBuffer26.asCharBuffer();
        java.util.regex.Matcher matcher28 = null; // flaky: pattern13.matcher((java.lang.CharSequence) charBuffer27);
        boolean boolean29 = java.util.regex.Pattern.matches("\\QLocation\\E", (java.lang.CharSequence) charBuffer27);
        java.lang.String[] strArray31 = null; // flaky: pattern6.split((java.lang.CharSequence) charBuffer27, 1);
        int int32 = 0; // flaky: pattern6.flags();
        java.util.regex.Pattern pattern33 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern33;
        int int35 = 0; // flaky: pattern33.flags();
        java.util.regex.Pattern pattern38 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern38;
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer41.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.putInt(0);
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.put(byteArray48);
        java.nio.FloatBuffer floatBuffer50 = byteBuffer45.asFloatBuffer();
        java.nio.CharBuffer charBuffer51 = byteBuffer45.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream52 = null; // flaky: pattern38.splitAsStream((java.lang.CharSequence) charBuffer51);
        java.util.stream.Stream<java.lang.String> strStream53 = null; // flaky: pattern33.splitAsStream((java.lang.CharSequence) charBuffer51);
        java.util.stream.Stream<java.lang.String> strStream54 = null; // flaky: pattern6.splitAsStream((java.lang.CharSequence) charBuffer51);
        java.util.regex.Matcher matcher55 = pattern2.matcher((java.lang.CharSequence) charBuffer51);
        int int56 = pattern2.flags();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
// flaky:         org.junit.Assert.assertNotNull(pattern6);
// flaky:         org.junit.Assert.assertEquals(pattern6.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str9, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(pattern13);
// flaky:         org.junit.Assert.assertEquals(pattern13.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern16);
        org.junit.Assert.assertEquals(pattern16.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern17);
// flaky:         org.junit.Assert.assertEquals(pattern17.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
// flaky:         org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(matcher23);
        org.junit.Assert.assertEquals(matcher23.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher24);
// flaky:         org.junit.Assert.assertEquals(matcher24.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
// flaky:         org.junit.Assert.assertNotNull(matcher28);
// flaky:         org.junit.Assert.assertEquals(matcher28.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-24) + "'", int32 == (-24));
// flaky:         org.junit.Assert.assertNotNull(pattern33);
// flaky:         org.junit.Assert.assertEquals(pattern33.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-24) + "'", int35 == (-24));
// flaky:         org.junit.Assert.assertNotNull(pattern38);
// flaky:         org.junit.Assert.assertEquals(pattern38.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(floatBuffer50);
        org.junit.Assert.assertNotNull(charBuffer51);
// flaky:         org.junit.Assert.assertNotNull(strStream52);
// flaky:         org.junit.Assert.assertNotNull(strStream53);
// flaky:         org.junit.Assert.assertNotNull(strStream54);
        org.junit.Assert.assertNotNull(matcher55);
        org.junit.Assert.assertEquals(matcher55.toString(), "java.util.regex.Matcher[pattern=java.nio.HeapByteBuffer[pos=0 lim=52 cap=52] region=0,43 lastmatch=]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 84 + "'", int56 == 84);
    }

    @Test
    public void test05625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05625");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.CharBuffer charBuffer25 = byteBuffer20.asCharBuffer();
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putInt((int) '#');
        float float35 = byteBuffer33.getFloat(4);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer41.get(byteArray54, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer60.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.putInt(0);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.put(byteArray67);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer70.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.putInt(0);
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.put(byteArray77);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer64.get(byteArray77, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer58.put(byteArray77);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer33.put(byteArray77);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer20.get(byteArray77);
        java.nio.ByteBuffer byteBuffer85 = java.nio.ByteBuffer.wrap(byteArray77);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer14.get(byteArray77);
        java.nio.Buffer buffer87 = byteBuffer14.rewind();
        boolean boolean88 = byteBuffer14.isReadOnly();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer91 = byteBuffer14.putLong(16777216, (long) 373288960);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 7.3E-44f + "'", float35 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(buffer87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test05626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05626");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=0 lim=16 cap=100]\\E", 4325376);
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "\\Qjava.nio.DirectByteBuffer[pos=0 lim=16 cap=100]\\E");
    }

    @Test
    public void test05627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05627");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer23 = byteBuffer22.asIntBuffer();
        boolean boolean25 = byteBuffer22.equals((java.lang.Object) '\n');
        char char26 = byteBuffer22.getChar();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer22.putFloat(0, (float) 25);
        java.nio.Buffer buffer31 = byteBuffer22.position(30);
        java.nio.FloatBuffer floatBuffer32 = byteBuffer22.asFloatBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + char26 + "' != '" + '\000' + "'", char26 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(buffer31);
        org.junit.Assert.assertNotNull(floatBuffer32);
    }

    @Test
    public void test05628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05628");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        boolean boolean13 = byteBuffer5.isDirect();
        java.nio.LongBuffer longBuffer14 = byteBuffer5.asLongBuffer();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        byte byte19 = byteBuffer16.get((int) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer16.putInt((int) (short) 0);
        int int22 = byteBuffer5.compareTo(byteBuffer21);
        java.nio.Buffer buffer23 = byteBuffer21.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer25 = byteBuffer21.limit(128);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-2) + "'", int22 == (-2));
        org.junit.Assert.assertNotNull(buffer23);
    }

    @Test
    public void test05629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05629");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket("\\Qjava.nio.DirectByteBuffer[pos=0 lim=22 cap=100]\\E", (int) (short) 0, inetAddress8, 25);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05630");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putChar('\000');
        java.nio.Buffer buffer5 = byteBuffer1.flip();
        boolean boolean6 = byteBuffer1.isDirect();
        int int7 = byteBuffer1.remaining();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer9 = byteBuffer1.position(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newPosition > limit: (100 > 2)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test05631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05631");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        boolean boolean21 = response1.hasCookie("\\Qhi!\\E");
        int int22 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int24 = response23.statusCode();
        java.lang.String str25 = response23.charset;
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test05632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05632");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        int int13 = byteBuffer1.capacity();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer19.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer19.putChar('a');
        double double26 = byteBuffer24.getDouble(12);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer38.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.putInt(0);
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.put(byteArray45);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer32.get(byteArray45, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer24.put(byteArray45);
        java.nio.ByteBuffer byteBuffer51 = java.nio.ByteBuffer.wrap(byteArray45);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer1.get(byteArray45);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer55 = byteBuffer1.put((byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray56 = byteBuffer55.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 7.565251118924485E-307d + "'", double26 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
    }

    @Test
    public void test05633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05633");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.put((byte) 10);
        java.nio.ByteOrder byteOrder23 = byteBuffer20.order();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer10.order(byteOrder23);
        java.nio.CharBuffer charBuffer25 = byteBuffer24.asCharBuffer();
        short short26 = byteBuffer24.getShort();
        boolean boolean27 = byteBuffer24.isDirect();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.duplicate();
        int int29 = byteBuffer28.position();
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putLong(14, (long) 35);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 18 + "'", int29 == 18);
        org.junit.Assert.assertNotNull(byteBuffer32);
    }

    @Test
    public void test05634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05634");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("Location", (int) (byte) 100);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "Location");
    }

    @Test
    public void test05635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05635");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("\\Q\\Qhi!\\E\\\\E\\Q\\E");
        java.util.regex.Pattern pattern2 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.util.regex.Pattern pattern8 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate9 = pattern8.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate10 = pattern8.asPredicate();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        java.nio.Buffer buffer18 = byteBuffer12.limit(32);
        java.nio.CharBuffer charBuffer19 = byteBuffer12.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream20 = pattern8.splitAsStream((java.lang.CharSequence) charBuffer19);
        java.util.stream.Stream<java.lang.String> strStream21 = pattern5.splitAsStream((java.lang.CharSequence) charBuffer19);
        java.util.stream.Stream<java.lang.String> strStream22 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer19);
        java.util.regex.Matcher matcher23 = pattern1.matcher((java.lang.CharSequence) charBuffer19);
        java.util.function.Predicate<java.lang.String> strPredicate24 = pattern1.asPredicate();
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "\\Q\\Qhi!\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "Location");
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern8);
        org.junit.Assert.assertEquals(pattern8.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(matcher23);
        org.junit.Assert.assertEquals(matcher23.toString(), "java.util.regex.Matcher[pattern=\\Q\\Qhi!\\E\\\\E\\Q\\E region=0,10 lastmatch=]");
        org.junit.Assert.assertNotNull(strPredicate24);
    }

    @Test
    public void test05636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05636");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.asReadOnlyBuffer();
        long long12 = byteBuffer1.getLong();
        byte byte13 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.putShort((short) 0);
        int int16 = byteBuffer1.getInt();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long19 = byteBuffer18.getLong();
        int int20 = byteBuffer18.position();
        float float22 = byteBuffer18.getFloat((int) (short) 10);
        boolean boolean23 = byteBuffer18.hasArray();
        double double24 = byteBuffer18.getDouble();
        short short26 = byteBuffer18.getShort(0);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer18.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer18.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer31.duplicate();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.slice();
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer31.get(byteArray42);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer1.put(byteArray42);
        int int46 = byteBuffer45.capacity();
        java.nio.ByteBuffer byteBuffer48 = byteBuffer45.put((byte) -1);
        int int49 = byteBuffer45.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test05637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05637");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        byte byte12 = byteBuffer9.get((int) 'a');
        java.nio.DoubleBuffer doubleBuffer13 = byteBuffer9.asDoubleBuffer();
        java.nio.FloatBuffer floatBuffer14 = byteBuffer9.asFloatBuffer();
        java.nio.Buffer buffer15 = byteBuffer9.clear();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer9.putInt((-18));
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        int int23 = byteBuffer21.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer29.get(byteArray42, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer21.get(byteArray42);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.wrap(byteArray42);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer17.put(byteArray42);
        java.lang.String str50 = byteBuffer17.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.nio.DirectByteBuffer[pos=6 lim=100 cap=100]" + "'", str50, "java.nio.DirectByteBuffer[pos=6 lim=100 cap=100]");
    }

    @Test
    public void test05638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05638");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.lang.String str13 = response12.charset();
        response12.contentType = "\\Q\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test05639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05639");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=31 lim=100 cap=100]", 47);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=31 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test05640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05640");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E", 68);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E");
    }

    @Test
    public void test05641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05641");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        response26.executed = true;
        java.lang.String str30 = response26.cookie("hi!");
        java.lang.String str31 = response26.statusMessage;
        org.jsoup.helper.HttpConnection.Response response32 = new org.jsoup.helper.HttpConnection.Response(response26);
        org.jsoup.helper.HttpConnection.Response response33 = new org.jsoup.helper.HttpConnection.Response(response26);
        org.jsoup.helper.HttpConnection.Response response34 = new org.jsoup.helper.HttpConnection.Response(response33);
        org.jsoup.Connection.Request request35 = null;
        response33.req = request35;
        int int37 = response33.statusCode;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test05642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05642");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.IntBuffer intBuffer7 = byteBuffer5.asIntBuffer();
        java.nio.FloatBuffer floatBuffer8 = byteBuffer5.asFloatBuffer();
        java.nio.LongBuffer longBuffer9 = byteBuffer5.asLongBuffer();
        byte byte10 = byteBuffer5.get();
        java.nio.Buffer buffer11 = byteBuffer5.clear();
        short short12 = byteBuffer5.getShort();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertNotNull(floatBuffer8);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 0 + "'", byte10 == (byte) 0);
        org.junit.Assert.assertNotNull(buffer11);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
    }

    @Test
    public void test05643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05643");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket("", 8, inetAddress8, (int) (byte) 66);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05644");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response7.charset();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response12 = org.jsoup.helper.HttpConnection.Response.execute(request0, response7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test05645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05645");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.numRedirects = (short) 0;
        java.lang.String str14 = response1.statusMessage;
        java.lang.String str15 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean19 = response1.hasCookie("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        response20.statusMessage = "";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test05646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05646");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        short short23 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer15.putDouble(100.0d);
        boolean boolean26 = byteBuffer15.isDirect();
        int int27 = byteBuffer13.compareTo(byteBuffer15);
        java.nio.DoubleBuffer doubleBuffer28 = byteBuffer15.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer15.slice();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer15.put((byte) 10);
        java.nio.Buffer buffer33 = byteBuffer15.limit(48);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer15.putInt(14, 66);
        // The following exception was thrown during execution in test generation
        try {
            byte byte38 = byteBuffer36.get((int) '\u6400');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(buffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
    }

    @Test
    public void test05647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05647");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.lang.String str7 = response5.getHeaderCaseInsensitive("hi!");
        java.lang.String str9 = response5.cookie("\\QLocation\\E");
        boolean boolean10 = response5.executed;
        java.lang.String str12 = response5.cookie("\\Qjava.nio.DirectByteBuffer[pos=8 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response14 = org.jsoup.helper.HttpConnection.Response.execute(request0, response13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test05648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05648");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer34 = byteBuffer11.compact();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putShort((short) 0);
        short short38 = byteBuffer34.getShort(79);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 0 + "'", short38 == (short) 0);
    }

    @Test
    public void test05649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05649");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("", 97);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.function.Predicate<java.lang.String> strPredicate4 = pattern2.asPredicate();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "");
        org.junit.Assert.assertNotNull(strPredicate4);
    }

    @Test
    public void test05650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05650");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", (int) (short) 10);
        java.lang.String str3 = pattern2.pattern();
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer6 = byteBuffer5.asCharBuffer();
        java.util.regex.Matcher matcher7 = pattern2.matcher((java.lang.CharSequence) charBuffer6);
        java.lang.CharSequence charSequence8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.String> strStream9 = pattern2.splitAsStream(charSequence8);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str3, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(matcher7);
        org.junit.Assert.assertEquals(matcher7.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=8 lim=100 cap=100] region=0,50 lastmatch=]");
    }

    @Test
    public void test05651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05651");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        boolean boolean8 = response5.hasHeader("\\QLocation\\E");
        org.jsoup.Connection.Response response11 = response5.header("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(response11);
    }

    @Test
    public void test05652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05652");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.IntBuffer intBuffer11 = byteBuffer5.asIntBuffer();
        double double12 = byteBuffer5.getDouble();
        boolean boolean13 = byteBuffer5.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test05653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05653");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str12 = response1.cookie("\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int14 = response13.statusCode();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test05654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05654");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket(inetAddress7, (-64));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-64");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=35840]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05655");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar(6, '\n');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putFloat((float) 18);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer5.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = byteBuffer16.getInt(83);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test05656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05656");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer22.putShort((short) (byte) 100);
        java.nio.ShortBuffer shortBuffer49 = byteBuffer48.asShortBuffer();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer48.putInt(10);
        java.nio.FloatBuffer floatBuffer52 = byteBuffer51.asFloatBuffer();
        boolean boolean53 = byteBuffer51.isReadOnly();
        java.nio.Buffer buffer54 = byteBuffer51.mark();
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long57 = byteBuffer56.getLong();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer56.putLong((long) 4);
        java.nio.IntBuffer intBuffer60 = byteBuffer59.asIntBuffer();
        boolean boolean61 = byteBuffer51.equals((java.lang.Object) intBuffer60);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer51.putShort(1, (short) (byte) 10);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer51.putInt(28);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(shortBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(floatBuffer52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(buffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(intBuffer60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
    }

    @Test
    public void test05657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05657");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response10.headers();
        int int13 = response10.statusCode();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        response10.byteData = byteBuffer15;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test05658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05658");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        short short17 = byteBuffer13.getShort(0);
        int int19 = byteBuffer13.getInt((int) '4');
        boolean boolean20 = byteBuffer11.equals((java.lang.Object) byteBuffer13);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer11.putFloat((-1.0f));
        byte[] byteArray23 = byteBuffer22.array();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer9.put(byteArray23);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-65, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer24);
    }

    @Test
    public void test05659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05659");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000";
    }

    @Test
    public void test05660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05660");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.IntBuffer intBuffer11 = byteBuffer5.asIntBuffer();
        java.nio.FloatBuffer floatBuffer12 = byteBuffer5.asFloatBuffer();
        long long13 = byteBuffer5.getLong();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test05661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05661");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.capacity();
        long long7 = byteBuffer1.getLong();
        short short8 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer14.putChar(' ');
        float float20 = byteBuffer19.getFloat();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.FloatBuffer floatBuffer31 = byteBuffer26.asFloatBuffer();
        boolean boolean32 = byteBuffer26.isDirect();
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        org.jsoup.helper.HttpConnection.Response response43 = null;
        org.jsoup.helper.HttpConnection.Response response44 = new org.jsoup.helper.HttpConnection.Response(response43);
        response44.contentType = "";
        boolean boolean47 = byteBuffer42.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putInt(0);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putInt((int) '#');
        int int56 = byteBuffer42.compareTo(byteBuffer53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer26.put(byteBuffer53);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer19.put(byteBuffer26);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer58.compact();
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putInt(18);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer1.put(byteBuffer59);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer64 = byteBuffer1.position((-20));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: newPosition < 0: (-20 < 0)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(floatBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
    }

    @Test
    public void test05662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05662");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer22.putShort((short) (byte) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer48.compact();
        double double50 = byteBuffer48.getDouble();
        int int52 = byteBuffer48.getInt(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test05663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05663");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Request request7 = response1.req;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int9 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int11 = response1.statusCode();
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response13 = response1.url(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(request7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test05664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05664");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(64);
        boolean boolean2 = byteBuffer1.isReadOnly();
        java.nio.Buffer buffer3 = byteBuffer1.mark();
        boolean boolean4 = byteBuffer1.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test05665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05665");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern6 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern6;
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer10 = byteBuffer9.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream11 = pattern6.splitAsStream((java.lang.CharSequence) charBuffer10);
        java.util.regex.Matcher matcher12 = pattern5.matcher((java.lang.CharSequence) charBuffer10);
        java.util.regex.Matcher matcher13 = null; // flaky: pattern2.matcher((java.lang.CharSequence) charBuffer10);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer15.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer25 = byteBuffer15.asCharBuffer();
        java.lang.String[] strArray27 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer25, 12);
        int int28 = 0; // flaky: pattern2.flags();
        java.lang.String str29 = null; // flaky: pattern2.toString();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern6);
// flaky:         org.junit.Assert.assertEquals(pattern6.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(matcher12);
        org.junit.Assert.assertEquals(matcher12.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher13);
// flaky:         org.junit.Assert.assertEquals(matcher13.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
// flaky:         org.junit.Assert.assertNotNull(strArray27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-24) + "'", int28 == (-24));
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str29, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
    }

    @Test
    public void test05666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05666");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.Connection.Request request11 = null;
        response10.req = request11;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.net.URL uRL14 = response10.url();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(uRL14);
    }

    @Test
    public void test05667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05667");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern0;
        java.util.function.Predicate<java.lang.String> strPredicate2 = pattern0.asPredicate();
        int int3 = pattern0.flags();
        java.util.regex.Pattern pattern4 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern4;
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer8 = byteBuffer7.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream9 = pattern4.splitAsStream((java.lang.CharSequence) charBuffer8);
        java.lang.String[] strArray11 = pattern0.split((java.lang.CharSequence) charBuffer8, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer13.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.duplicate();
        java.nio.CharBuffer charBuffer18 = byteBuffer13.asCharBuffer();
        java.lang.String[] strArray19 = pattern0.split((java.lang.CharSequence) charBuffer18);
        java.lang.String[] strArray21 = pattern0.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]");
        java.util.regex.Pattern pattern24 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern24;
        java.util.regex.Pattern pattern28 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.FloatBuffer floatBuffer39 = byteBuffer34.asFloatBuffer();
        java.nio.CharBuffer charBuffer40 = byteBuffer34.asCharBuffer();
        java.lang.String[] strArray42 = pattern28.split((java.lang.CharSequence) charBuffer40, (-10));
        java.util.stream.Stream<java.lang.String> strStream43 = pattern24.splitAsStream((java.lang.CharSequence) charBuffer40);
        java.util.regex.Matcher matcher45 = pattern24.matcher((java.lang.CharSequence) "");
        java.util.function.Predicate<java.lang.String> strPredicate46 = pattern24.asPredicate();
        java.lang.String str47 = pattern24.pattern();
        java.util.regex.Pattern pattern49 = java.util.regex.Pattern.compile("");
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.put(byteArray59);
        org.jsoup.helper.HttpConnection.Response response61 = null;
        org.jsoup.helper.HttpConnection.Response response62 = new org.jsoup.helper.HttpConnection.Response(response61);
        response62.contentType = "";
        boolean boolean65 = byteBuffer60.equals((java.lang.Object) "");
        double double67 = byteBuffer60.getDouble(0);
        java.nio.CharBuffer charBuffer68 = byteBuffer60.asCharBuffer();
        boolean boolean69 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]", (java.lang.CharSequence) charBuffer68);
        java.util.stream.Stream<java.lang.String> strStream70 = pattern49.splitAsStream((java.lang.CharSequence) charBuffer68);
        java.util.stream.Stream<java.lang.String> strStream71 = pattern24.splitAsStream((java.lang.CharSequence) charBuffer68);
        java.lang.String[] strArray73 = pattern0.split((java.lang.CharSequence) charBuffer68, (-67));
        java.lang.CharSequence charSequence74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray76 = pattern0.split(charSequence74, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(strPredicate2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-24) + "'", int3 == (-24));
        org.junit.Assert.assertNotNull(pattern4);
// flaky:         org.junit.Assert.assertEquals(pattern4.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(pattern24);
        org.junit.Assert.assertEquals(pattern24.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(pattern28);
        org.junit.Assert.assertEquals(pattern28.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(floatBuffer39);
        org.junit.Assert.assertNotNull(charBuffer40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertNotNull(matcher45);
        org.junit.Assert.assertEquals(matcher45.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,0 lastmatch=]");
        org.junit.Assert.assertNotNull(strPredicate46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\\Qhi!\\E" + "'", str47, "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2.57E-322d + "'", double67 == 2.57E-322d);
        org.junit.Assert.assertNotNull(charBuffer68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strStream70);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test05668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05668");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        response1.numRedirects = (byte) 10;
        org.jsoup.Connection.Response response12 = response1.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer13 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str16 = response15.contentType;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(byteBuffer13);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test05669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05669");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str8 = response1.header("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.jsoup.Connection.Response response11 = response1.cookie("\\Q\\Qhi!\\E\\\\E\\Q\\E", "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        boolean boolean13 = response1.hasHeader("java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]");
        java.net.URL uRL14 = response1.url();
        java.lang.String str15 = response1.statusMessage();
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = response1.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(uRL14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test05670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05670");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.Connection.Method method7 = response4.method();
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response4);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry10 = response8.scanHeaders("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.lang.String str11 = response8.statusMessage;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(strEntry10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test05671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05671");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        org.jsoup.Connection.Request request8 = response1.req;
        java.net.URL uRL9 = response1.url();
        response1.charset = "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]";
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(request8);
        org.junit.Assert.assertNull(uRL9);
    }

    @Test
    public void test05672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05672");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        response5.charset = "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        response5.statusMessage = "\\Q\\Qjava.nio.DirectByteBufferR[pos=16 lim=100 cap=100]\\E\\\\E\\Q\\E";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
    }

    @Test
    public void test05673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05673");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.lang.String str11 = response10.charset;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response10.cookies();
        boolean boolean13 = response10.executed;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response10);
        java.lang.String str17 = response16.contentType;
        response16.numRedirects = 0;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test05674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05674");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request11 = response10.req;
        int int12 = response10.numRedirects;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNull(request11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test05675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05675");
        java.util.regex.Pattern pattern3 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern6 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer8.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.putInt(0);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.put(byteArray15);
        java.nio.CharBuffer charBuffer17 = byteBuffer12.asCharBuffer();
        java.util.regex.Matcher matcher18 = pattern6.matcher((java.lang.CharSequence) charBuffer17);
        java.util.stream.Stream<java.lang.String> strStream19 = null; // flaky: pattern3.splitAsStream((java.lang.CharSequence) charBuffer17);
        boolean boolean20 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=92 lim=100 cap=100]", (java.lang.CharSequence) charBuffer17);
// flaky:         org.junit.Assert.assertNotNull(pattern3);
// flaky:         org.junit.Assert.assertEquals(pattern3.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern6);
        org.junit.Assert.assertEquals(pattern6.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(matcher18);
        org.junit.Assert.assertEquals(matcher18.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test05676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05676");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        boolean boolean13 = response10.hasCookie("java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05677");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        float float15 = byteBuffer1.getFloat();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer1.put(32, (byte) 1);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer18.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer20 = byteBuffer18.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.0f + "'", float15 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer19);
    }

    @Test
    public void test05678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05678");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry6 = response1.scanHeaders("\\QLocation\\E");
        response1.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.Connection.Request request12 = null;
        response11.req = request12;
        response11.contentType = "java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]";
        org.jsoup.Connection.Request request16 = null;
        response11.req = request16;
        response11.contentType = "java.nio.DirectByteBuffer[pos=0 lim=22 cap=100]";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry6);
    }

    @Test
    public void test05679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05679");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.IntBuffer intBuffer7 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer9.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response20 = null;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.lang.String str23 = response21.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = response21.cookies();
        org.jsoup.Connection.Response response26 = response21.removeCookie("hi!");
        java.lang.String str27 = response21.statusMessage();
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        boolean boolean38 = byteBuffer33.hasArray();
        response21.byteData = byteBuffer33;
        int int40 = byteBuffer19.compareTo(byteBuffer33);
        int int41 = byteBuffer5.compareTo(byteBuffer33);
        boolean boolean42 = byteBuffer33.hasArray();
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.FloatBuffer floatBuffer53 = byteBuffer48.asFloatBuffer();
        boolean boolean54 = byteBuffer48.isDirect();
        java.nio.ByteBuffer byteBuffer57 = byteBuffer48.putFloat((int) (short) 0, (float) '#');
        float float59 = byteBuffer57.getFloat(20);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer33.put(byteBuffer57);
        int int61 = byteBuffer60.capacity();
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long64 = byteBuffer63.getLong();
        int int65 = byteBuffer63.position();
        float float67 = byteBuffer63.getFloat((int) (short) 10);
        boolean boolean68 = byteBuffer63.hasArray();
        double double69 = byteBuffer63.getDouble();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer63.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer74 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer74.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer78 = byteBuffer74.putInt(0);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer82 = byteBuffer78.put(byteArray81);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer82.put((byte) 10);
        java.nio.ByteOrder byteOrder85 = byteBuffer82.order();
        java.nio.ByteBuffer byteBuffer86 = byteBuffer72.order(byteOrder85);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer60.order(byteOrder85);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer89 = byteBuffer87.putChar('\u0a00');
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(response26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-10) + "'", int40 == (-10));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(floatBuffer53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 0.0f + "'", float59 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 0.0f + "'", float67 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteOrder85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
    }

    @Test
    public void test05680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05680");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        long long9 = byteBuffer5.getLong((int) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer5.putInt(1);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putFloat((float) 20);
        int int14 = byteBuffer5.getInt();
        byte byte16 = byteBuffer5.get(47);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
    }

    @Test
    public void test05681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05681");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.put((byte) 10);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.put(byteArray20);
        java.nio.FloatBuffer floatBuffer22 = byteBuffer17.asFloatBuffer();
        boolean boolean23 = byteBuffer17.isDirect();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        org.jsoup.helper.HttpConnection.Response response34 = null;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response34);
        response35.contentType = "";
        boolean boolean38 = byteBuffer33.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putInt((int) '#');
        int int47 = byteBuffer33.compareTo(byteBuffer44);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer17.put(byteBuffer44);
        int int49 = byteBuffer9.compareTo(byteBuffer48);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer9.slice();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer9.putShort(80, (short) 0);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer9.put((byte) 0);
        long long56 = byteBuffer9.getLong();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer9.putDouble(2, (double) (byte) 100);
        byte byte60 = byteBuffer9.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(floatBuffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 83 + "'", int49 == 83);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertTrue("'" + byte60 + "' != '" + (byte) 0 + "'", byte60 == (byte) 0);
    }

    @Test
    public void test05682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05682");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "java.nio.DirectByteBuffer[pos=12 lim=32 cap=100]";
    }

    @Test
    public void test05683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05683");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        response23.charset = "Location";
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response23);
        int int29 = response23.statusCode;
        java.lang.String str30 = response23.statusMessage;
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response23);
        java.lang.String str33 = response31.header("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        java.lang.String str34 = response31.charset;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response31);
        int int36 = response31.numRedirects;
        int int37 = response31.statusCode;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test05684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05684");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        float float5 = byteBuffer3.getFloat(32);
        boolean boolean6 = byteBuffer3.isDirect();
        java.util.regex.Pattern pattern9 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate10 = pattern9.asPredicate();
        boolean boolean11 = byteBuffer3.equals((java.lang.Object) pattern9);
        java.util.regex.Pattern pattern14 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern17 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        java.nio.CharBuffer charBuffer28 = byteBuffer23.asCharBuffer();
        java.util.regex.Matcher matcher29 = pattern17.matcher((java.lang.CharSequence) charBuffer28);
        java.util.stream.Stream<java.lang.String> strStream30 = null; // flaky: pattern14.splitAsStream((java.lang.CharSequence) charBuffer28);
        java.lang.String[] strArray32 = pattern9.split((java.lang.CharSequence) charBuffer28, 32);
        java.util.function.Predicate<java.lang.String> strPredicate33 = pattern9.asPredicate();
        int int34 = pattern9.flags();
        java.lang.String str35 = pattern9.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(pattern9);
        org.junit.Assert.assertEquals(pattern9.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertNotNull(pattern14);
// flaky:         org.junit.Assert.assertEquals(pattern14.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern17);
        org.junit.Assert.assertEquals(pattern17.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(matcher29);
        org.junit.Assert.assertEquals(matcher29.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strPredicate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test05685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05685");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(64);
        boolean boolean2 = byteBuffer1.isReadOnly();
        java.nio.Buffer buffer3 = byteBuffer1.mark();
        java.nio.ByteOrder byteOrder4 = byteBuffer1.order();
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer6.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer6.putInt(0);
        byte[] byteArray13 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.put(byteArray13);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer10.get(byteArray23, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer33.get(byteArray46, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer27.put(byteArray46);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer1.put(byteArray46);
        java.nio.DoubleBuffer doubleBuffer53 = byteBuffer1.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(doubleBuffer53);
    }

    @Test
    public void test05686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05686");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.FloatBuffer floatBuffer2 = byteBuffer1.asFloatBuffer();
        boolean boolean3 = byteBuffer1.isDirect();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putFloat(0.0f);
        java.nio.CharBuffer charBuffer6 = byteBuffer1.asCharBuffer();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate((int) 'a');
        int int10 = byteBuffer8.getInt(20);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.putFloat((float) (-6));
        java.nio.ByteBuffer byteBuffer13 = byteBuffer1.put(byteBuffer8);
        java.lang.String str14 = byteBuffer1.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.nio.DirectByteBuffer[pos=97 lim=100 cap=100]" + "'", str14, "java.nio.DirectByteBuffer[pos=97 lim=100 cap=100]");
    }

    @Test
    public void test05687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05687");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.capacity();
        long long7 = byteBuffer1.getLong();
        java.nio.Buffer buffer8 = byteBuffer1.rewind();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer9.put(76, (byte) -1);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer9.putFloat(0, (float) 4325376);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(buffer8);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test05688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05688");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        java.lang.String str10 = response5.getHeaderCaseInsensitive("\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test05689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05689");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ShortBuffer shortBuffer28 = byteBuffer26.asShortBuffer();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put((byte) -1);
        java.nio.FloatBuffer floatBuffer31 = byteBuffer30.asFloatBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(shortBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(floatBuffer31);
    }

    @Test
    public void test05690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05690");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(1117126656);
        int int2 = byteBuffer1.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1117126656 + "'", int2 == 1117126656);
    }

    @Test
    public void test05691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05691");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=92 lim=100 cap=100]\\E", 84);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qjava.nio.DirectByteBuffer[pos=92 lim=100 cap=100]\\E");
    }

    @Test
    public void test05692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05692");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.net.URL uRL9 = response8.url();
        org.jsoup.Connection.Response response11 = response8.removeHeader("Location");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response8);
        boolean boolean13 = response8.executed;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response8);
        response14.numRedirects = (-65536);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(uRL9);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05693");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress7 = null;
        java.net.InetAddress inetAddress9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket(inetAddress7, (-99), inetAddress9, 37);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05694");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        int int9 = byteBuffer8.remaining();
        float float10 = byteBuffer8.getFloat();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.putLong((long) 97);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putFloat((float) '\000');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putDouble((double) (-1));
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 92 + "'", int9 == 92);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test05695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05695");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer15 = byteBuffer5.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putInt((int) '#');
        byte byte25 = byteBuffer21.get(1);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer21.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer21.slice();
        int int30 = byteBuffer29.remaining();
        int int31 = byteBuffer5.compareTo(byteBuffer29);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long34 = byteBuffer33.getLong();
        int int35 = byteBuffer33.position();
        float float37 = byteBuffer33.getFloat((int) (short) 10);
        boolean boolean38 = byteBuffer33.hasArray();
        double double39 = byteBuffer33.getDouble();
        short short41 = byteBuffer33.getShort(0);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer33.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer33.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.duplicate();
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.slice();
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer46.get(byteArray57);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer29.get(byteArray57);
        java.nio.FloatBuffer floatBuffer61 = byteBuffer29.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer63 = byteBuffer29.put((byte) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.put((byte) 0);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer65.duplicate();
        java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer68.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.putInt(0);
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer76 = byteBuffer72.put(byteArray75);
        java.nio.ByteOrder byteOrder77 = byteBuffer76.order();
        java.nio.ByteBuffer byteBuffer78 = byteBuffer76.duplicate();
        char char79 = byteBuffer78.getChar();
        byte byte81 = byteBuffer78.get(64);
        java.util.regex.Pattern pattern82 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern82;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern82;
        int int85 = pattern82.flags();
        java.lang.String str86 = pattern82.pattern();
        java.util.function.Predicate<java.lang.String> strPredicate87 = pattern82.asPredicate();
        boolean boolean88 = byteBuffer78.equals((java.lang.Object) pattern82);
        java.nio.ByteBuffer byteBuffer90 = java.nio.ByteBuffer.allocate((int) '\n');
        byte[] byteArray91 = byteBuffer90.array();
        java.nio.ByteBuffer byteBuffer92 = byteBuffer78.put(byteArray91);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer66.get(byteArray91);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 84 + "'", int30 == 84);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(floatBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteOrder77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + char79 + "' != '" + '\000' + "'", char79 == '\000');
        org.junit.Assert.assertTrue("'" + byte81 + "' != '" + (byte) 0 + "'", byte81 == (byte) 0);
        org.junit.Assert.assertNotNull(pattern82);
        org.junit.Assert.assertEquals(pattern82.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\\Qhi!\\E" + "'", str86, "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strPredicate87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
    }

    @Test
    public void test05696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05696");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate6 = pattern5.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate7 = pattern5.asPredicate();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        java.nio.Buffer buffer15 = byteBuffer9.limit(32);
        java.nio.CharBuffer charBuffer16 = byteBuffer9.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream17 = pattern5.splitAsStream((java.lang.CharSequence) charBuffer16);
        java.lang.String[] strArray18 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer16);
        java.nio.Buffer buffer20 = charBuffer16.limit(0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer21 = charBuffer16.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate6);
        org.junit.Assert.assertNotNull(strPredicate7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(strStream17);
// flaky:         org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(buffer20);
    }

    @Test
    public void test05697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05697");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.IntBuffer intBuffer11 = byteBuffer5.asIntBuffer();
        char char13 = byteBuffer5.getChar((int) (short) 1);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        byte byte21 = byteBuffer15.get();
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        short short27 = byteBuffer23.getShort(0);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer23.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer36.putDouble(100.0d);
        int int56 = byteBuffer30.compareTo(byteBuffer36);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteOrder byteOrder67 = byteBuffer66.order();
        java.nio.ByteBuffer byteBuffer68 = byteBuffer36.order(byteOrder67);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer15.order(byteOrder67);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer5.order(byteOrder67);
        java.nio.ByteBuffer byteBuffer72 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer72.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer76 = byteBuffer72.putInt(0);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer76.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer76.putChar('a');
        int int82 = byteBuffer5.compareTo(byteBuffer81);
        java.nio.CharBuffer charBuffer83 = byteBuffer81.asCharBuffer();
        java.nio.ByteBuffer byteBuffer85 = byteBuffer81.putLong((long) 81);
        int int87 = byteBuffer85.getInt(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + '\u3ff0' + "'", char13 == '\u3ff0');
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 0 + "'", byte21 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 14 + "'", int56 == 14);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteOrder67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(charBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4190208 + "'", int87 == 4190208);
    }

    @Test
    public void test05698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05698");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        long long34 = byteBuffer11.getLong();
        java.nio.ByteBuffer byteBuffer37 = byteBuffer11.putChar(24, '\000');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer11.putDouble((double) 85);
        long long41 = byteBuffer39.getLong((int) (short) 66);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test05699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05699");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.FloatBuffer floatBuffer25 = byteBuffer24.asFloatBuffer();
        double double26 = byteBuffer24.getDouble();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer24.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer27);
    }

    @Test
    public void test05700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05700");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.Connection.Response response7 = response5.removeHeader("\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Response response11 = response8.cookie("\\Qjava.nio.DirectByteBuffer[pos=0 lim=22 cap=100]\\E", "\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response8);
        java.lang.String str13 = response8.contentType;
        org.jsoup.Connection.Response response16 = response8.header("\\Qjava.nio.DirectByteBuffer[pos=16 lim=100 cap=100]\\E", "java.nio.DirectByteBuffer[pos=25 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(response16);
    }

    @Test
    public void test05701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05701");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = 84;
    }

    @Test
    public void test05702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05702");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        int int7 = byteBuffer5.capacity();
        byte byte8 = byteBuffer5.get();
        java.nio.ByteOrder byteOrder9 = byteBuffer5.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer5.put((byte) 64);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer11);
    }

    @Test
    public void test05703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05703");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        boolean boolean4 = response1.executed;
        response1.charset = "";
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = response1.body();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test05704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05704");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.nio.ByteBuffer byteBuffer9 = response5.byteData;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        boolean boolean12 = response10.hasHeader("\\Qjava.nio.DirectByteBuffer[pos=19 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response10);
        response13.charset = "\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05705");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer14.putDouble(27, (double) '\000');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putFloat((float) (short) 63);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
    }

    @Test
    public void test05706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05706");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern6 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern6;
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer10 = byteBuffer9.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream11 = pattern6.splitAsStream((java.lang.CharSequence) charBuffer10);
        java.util.regex.Matcher matcher12 = pattern5.matcher((java.lang.CharSequence) charBuffer10);
        java.util.regex.Matcher matcher13 = null; // flaky: pattern2.matcher((java.lang.CharSequence) charBuffer10);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer16 = byteBuffer15.asCharBuffer();
        java.util.regex.Matcher matcher17 = null; // flaky: pattern2.matcher((java.lang.CharSequence) charBuffer16);
        java.util.regex.Pattern pattern20 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern23 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern26 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern27 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern27;
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer31 = byteBuffer30.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream32 = pattern27.splitAsStream((java.lang.CharSequence) charBuffer31);
        java.util.regex.Matcher matcher33 = pattern26.matcher((java.lang.CharSequence) charBuffer31);
        java.util.regex.Matcher matcher34 = null; // flaky: pattern23.matcher((java.lang.CharSequence) charBuffer31);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer37 = byteBuffer36.asCharBuffer();
        java.util.regex.Matcher matcher38 = null; // flaky: pattern23.matcher((java.lang.CharSequence) charBuffer37);
        java.lang.String[] strArray40 = pattern20.split((java.lang.CharSequence) charBuffer37, 8);
        java.util.regex.Pattern pattern43 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern44 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern44;
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer48 = byteBuffer47.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream49 = pattern44.splitAsStream((java.lang.CharSequence) charBuffer48);
        java.util.regex.Matcher matcher50 = pattern43.matcher((java.lang.CharSequence) charBuffer48);
        java.lang.String[] strArray52 = pattern20.split((java.lang.CharSequence) charBuffer48, (-6));
        java.lang.String[] strArray54 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer48, (int) (byte) 10);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        int int56 = 0; // flaky: pattern2.flags();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern6);
        org.junit.Assert.assertEquals(pattern6.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(matcher12);
        org.junit.Assert.assertEquals(matcher12.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher13);
// flaky:         org.junit.Assert.assertEquals(matcher13.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(charBuffer16);
// flaky:         org.junit.Assert.assertNotNull(matcher17);
// flaky:         org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern20);
        org.junit.Assert.assertEquals(pattern20.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern23);
// flaky:         org.junit.Assert.assertEquals(pattern23.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern26);
        org.junit.Assert.assertEquals(pattern26.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern27);
        org.junit.Assert.assertEquals(pattern27.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(charBuffer31);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertNotNull(matcher33);
        org.junit.Assert.assertEquals(matcher33.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher34);
// flaky:         org.junit.Assert.assertEquals(matcher34.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(charBuffer37);
// flaky:         org.junit.Assert.assertNotNull(matcher38);
// flaky:         org.junit.Assert.assertEquals(matcher38.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(pattern43);
        org.junit.Assert.assertEquals(pattern43.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern44);
        org.junit.Assert.assertEquals(pattern44.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(charBuffer48);
        org.junit.Assert.assertNotNull(strStream49);
        org.junit.Assert.assertNotNull(matcher50);
        org.junit.Assert.assertEquals(matcher50.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray52);
// flaky:         org.junit.Assert.assertNotNull(strArray54);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-24) + "'", int56 == (-24));
    }

    @Test
    public void test05707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05707");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        java.lang.String str8 = response1.getHeaderCaseInsensitive("\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str11 = response9.contentType();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test05708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05708");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocate(64);
        boolean boolean18 = byteBuffer17.isReadOnly();
        java.nio.Buffer buffer19 = byteBuffer17.mark();
        java.nio.ByteOrder byteOrder20 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer17.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer9.put(byteArray62);
        byte byte70 = byteBuffer69.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(buffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertTrue("'" + byte70 + "' != '" + (byte) 0 + "'", byte70 == (byte) 0);
    }

    @Test
    public void test05709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05709");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.IntBuffer intBuffer11 = byteBuffer9.asIntBuffer();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putLong((long) (short) 100);
        byte byte15 = byteBuffer9.get((int) (short) 0);
        java.nio.Buffer buffer16 = byteBuffer9.flip();
        int int17 = buffer16.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 0 + "'", byte15 == (byte) 0);
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test05710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05710");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putDouble((int) '\n', 2.57E-322d);
        int int9 = byteBuffer8.remaining();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.putLong((long) (-2));
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) 22);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer11.putFloat(48, (float) 1405091840);
        java.nio.ByteBuffer byteBuffer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = byteBuffer11.compareTo(byteBuffer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 92 + "'", int9 == 92);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test05711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05711");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        boolean boolean6 = response4.executed;
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response8 = response4.url(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test05712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05712");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\QLocation\\E", (int) (short) 0);
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer4.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer8 = byteBuffer4.putInt(0);
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.put(byteArray11);
        java.nio.CharBuffer charBuffer13 = byteBuffer8.asCharBuffer();
        java.lang.String[] strArray15 = pattern2.split((java.lang.CharSequence) charBuffer13, (-24));
        java.lang.String[] strArray18 = pattern2.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=27 lim=100 cap=100]", 33);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\QLocation\\E");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray18);
    }

    @Test
    public void test05713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05713");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.FloatBuffer floatBuffer2 = byteBuffer1.asFloatBuffer();
        java.nio.Buffer buffer4 = byteBuffer1.limit((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        int int6 = byteBuffer1.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test05714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05714");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket7 = socketFactory0.createSocket("\\Q\\Qhi!\\E\\\\E\\Q\\E", 74);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: \\Q\\Qhi!\\E\\\\E\\Q\\E");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=35842]");
    }

    @Test
    public void test05715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05715");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.Connection.Response response7 = response2.removeCookie("hi!");
        java.lang.String str8 = response2.statusMessage();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        boolean boolean19 = byteBuffer14.hasArray();
        response2.byteData = byteBuffer14;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response2);
        boolean boolean22 = response21.executed;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response21);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response21);
        boolean boolean26 = response24.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response24);
        response27.executed = true;
        java.lang.String str31 = response27.cookie("hi!");
        java.lang.String str32 = response27.contentType();
        org.jsoup.helper.HttpConnection.Response response33 = new org.jsoup.helper.HttpConnection.Response(response27);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response34 = org.jsoup.helper.HttpConnection.Response.execute(request0, response27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test05716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05716");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str7 = response6.charset();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response6.scanHeaders("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document10 = response6.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strEntry9);
    }

    @Test
    public void test05717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05717");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putChar('\000');
        java.nio.Buffer buffer5 = byteBuffer1.flip();
        boolean boolean6 = byteBuffer1.isDirect();
        java.nio.DoubleBuffer doubleBuffer7 = byteBuffer1.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleBuffer7);
    }

    @Test
    public void test05718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05718");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putLong(8, (long) (short) 1);
        int int11 = byteBuffer9.getInt(85);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer9.duplicate();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.asReadOnlyBuffer();
        java.nio.Buffer buffer14 = byteBuffer9.flip();
        boolean boolean15 = byteBuffer9.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05719");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put((byte) 66);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putLong(78, (long) (short) 256);
        boolean boolean18 = byteBuffer17.hasRemaining();
        java.nio.DoubleBuffer doubleBuffer19 = byteBuffer17.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleBuffer19);
    }

    @Test
    public void test05720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05720");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response0);
        org.jsoup.Connection.Response response5 = response2.header("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document6 = response2.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response5);
    }

    @Test
    public void test05721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05721");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.charset = "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str15 = response14.contentType();
        response14.numRedirects = 0;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test05722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05722");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]", 2);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
    }

    @Test
    public void test05723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05723");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response7);
        response13.numRedirects = 2;
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test05724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05724");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        org.jsoup.Connection.Method method8 = response5.method();
        org.jsoup.Connection.Response response10 = response5.removeHeader("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        int int16 = byteBuffer14.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer14.putChar((int) ' ', '#');
        short short20 = byteBuffer19.getShort();
        response5.byteData = byteBuffer19;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response5);
        boolean boolean23 = response5.executed;
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response5);
        boolean boolean26 = response5.hasHeader("java.nio.DirectByteBuffer[pos=24 lim=84 cap=84]");
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response5);
        response5.numRedirects = (short) -1;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 0 + "'", short20 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test05725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05725");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        int int7 = response5.numRedirects;
        boolean boolean9 = response5.hasCookie("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer10 = response5.byteData;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry12 = response5.scanHeaders("java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response5.scanHeaders("java.nio.DirectByteBuffer[pos=82 lim=100 cap=100]");
        int int15 = response5.statusCode();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(byteBuffer10);
        org.junit.Assert.assertNull(strEntry12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test05726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05726");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket8 = socketFactory0.createSocket("\\Q\\Qjava.nio.DirectByteBuffer[pos=16 lim=32 cap=100]\\E\\\\E\\Q\\E", (int) (short) 256);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: \\Q\\Qjava.nio.DirectByteBuffer[pos=16 lim=32 cap=100]\\E\\\\E\\Q\\E");
        } catch (java.net.UnknownHostException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05727");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket("java.nio.DirectByteBuffer[pos=0 lim=76 cap=76]", (-16), inetAddress8, 98);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=35844]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05728");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.nio.ByteBuffer byteBuffer9 = response5.byteData;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        boolean boolean12 = response10.hasHeader("\\Qjava.nio.DirectByteBuffer[pos=19 lim=100 cap=100]\\E");
        java.lang.String str13 = response10.statusMessage();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test05729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05729");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response0);
        response2.statusMessage = "";
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.headers();
        response2.charset = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        boolean boolean9 = response2.hasCookie("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.lang.String str11 = response2.contentType();
        int int12 = response2.numRedirects;
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test05730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05730");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 4);
        boolean boolean5 = byteBuffer4.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = byteBuffer4.getInt(98);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05731");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        org.jsoup.Connection.Response response8 = response1.removeCookie("Location");
        response1.statusCode = (short) 10;
        response1.statusMessage = "hi!";
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str14 = response13.statusMessage;
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response13);
        int int16 = response13.statusCode();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test05732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05732");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        int int16 = response11.numRedirects;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        org.jsoup.Connection.Response response21 = response18.removeCookie("java.nio.DirectByteBuffer[pos=0 lim=82 cap=82]");
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response18);
        java.lang.String str24 = response22.header("java.nio.HeapByteBuffer[pos=0 lim=25 cap=52]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(response21);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test05733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05733");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        short short12 = byteBuffer8.getShort();
        java.lang.String str13 = byteBuffer8.toString();
        short short14 = byteBuffer8.getShort();
        java.nio.LongBuffer longBuffer15 = byteBuffer8.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str13, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 256 + "'", short14 == (short) 256);
        org.junit.Assert.assertNotNull(longBuffer15);
    }

    @Test
    public void test05734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05734");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.IntBuffer intBuffer7 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer9.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response20 = null;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.lang.String str23 = response21.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = response21.cookies();
        org.jsoup.Connection.Response response26 = response21.removeCookie("hi!");
        java.lang.String str27 = response21.statusMessage();
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        boolean boolean38 = byteBuffer33.hasArray();
        response21.byteData = byteBuffer33;
        int int40 = byteBuffer19.compareTo(byteBuffer33);
        int int41 = byteBuffer5.compareTo(byteBuffer33);
        java.nio.Buffer buffer42 = byteBuffer33.rewind();
        short short44 = byteBuffer33.getShort(10);
        java.nio.LongBuffer longBuffer45 = byteBuffer33.asLongBuffer();
        java.nio.ByteBuffer byteBuffer48 = byteBuffer33.putShort(78, (short) (byte) 64);
        byte byte50 = byteBuffer33.get(41);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(response26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-10) + "'", int40 == (-10));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(buffer42);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) 0 + "'", short44 == (short) 0);
        org.junit.Assert.assertNotNull(longBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertTrue("'" + byte50 + "' != '" + (byte) 0 + "'", byte50 == (byte) 0);
    }

    @Test
    public void test05735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05735");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.Buffer buffer20 = byteBuffer14.rewind();
        short short22 = byteBuffer14.getShort(14);
        java.nio.LongBuffer longBuffer23 = byteBuffer14.asLongBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer26 = byteBuffer14.putFloat(3407872, (float) 81);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(buffer20);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(longBuffer23);
    }

    @Test
    public void test05736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05736");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer5.putDouble(10.0d);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar('\n');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.put(byteArray22);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer19.get(byteArray32, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer19.putDouble(100.0d);
        boolean boolean39 = byteBuffer5.equals((java.lang.Object) byteBuffer19);
        double double41 = byteBuffer5.getDouble(14);
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long44 = byteBuffer43.getLong();
        int int45 = byteBuffer43.position();
        float float47 = byteBuffer43.getFloat((int) (short) 10);
        boolean boolean48 = byteBuffer43.hasArray();
        double double49 = byteBuffer43.getDouble();
        short short51 = byteBuffer43.getShort(0);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer43.putDouble(100.0d);
        float float54 = byteBuffer43.getFloat();
        char char56 = byteBuffer43.getChar(1);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer66.putDouble(7.565251118924485E-307d);
        int int69 = byteBuffer43.compareTo(byteBuffer68);
        java.nio.DoubleBuffer doubleBuffer70 = byteBuffer43.asDoubleBuffer();
        int int71 = byteBuffer5.compareTo(byteBuffer43);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer5.putInt(0);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer5.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer76 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer77 = byteBuffer76.asReadOnlyBuffer();
        java.nio.IntBuffer intBuffer78 = byteBuffer77.asIntBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + short51 + "' != '" + (short) 0 + "'", short51 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.0f + "'", float54 == 0.0f);
        org.junit.Assert.assertTrue("'" + char56 + "' != '" + '\000' + "'", char56 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-6) + "'", int69 == (-6));
        org.junit.Assert.assertNotNull(doubleBuffer70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(intBuffer78);
    }

    @Test
    public void test05737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05737");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E";
    }

    @Test
    public void test05738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05738");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        response22.charset = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response22);
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response22);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test05739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05739");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer9 = byteBuffer8.duplicate();
        float float11 = byteBuffer8.getFloat(80);
        int int12 = byteBuffer8.position();
        int int13 = byteBuffer8.position();
        java.nio.Buffer buffer14 = byteBuffer8.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(buffer14);
    }

    @Test
    public void test05740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05740");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        byte byte7 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        short short13 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer9.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(byteArray35);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer22.get(byteArray35, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer22.putDouble(100.0d);
        int int42 = byteBuffer16.compareTo(byteBuffer22);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteOrder byteOrder53 = byteBuffer52.order();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer22.order(byteOrder53);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer1.order(byteOrder53);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer1.putLong(4, (long) 8);
        int int59 = byteBuffer58.limit();
        java.nio.ByteBuffer byteBuffer61 = byteBuffer58.put((byte) 0);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer58.putChar(76, ' ');
        java.nio.Buffer buffer65 = byteBuffer64.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteOrder53);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(buffer65);
    }

    @Test
    public void test05741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05741");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putFloat(0, (float) (short) 10);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.put((byte) 10);
        java.nio.ByteOrder byteOrder23 = byteBuffer20.order();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer10.order(byteOrder23);
        java.nio.CharBuffer charBuffer25 = byteBuffer24.asCharBuffer();
        short short26 = byteBuffer24.getShort();
        boolean boolean27 = byteBuffer24.isDirect();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.duplicate();
        int int29 = byteBuffer28.position();
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(26, 28);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 18 + "'", int29 == 18);
        org.junit.Assert.assertNotNull(byteBuffer32);
    }

    @Test
    public void test05742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05742");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        response1.statusCode = 64;
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer16 = byteBuffer15.asShortBuffer();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long19 = byteBuffer18.getLong();
        int int20 = byteBuffer18.position();
        float float22 = byteBuffer18.getFloat((int) (short) 10);
        boolean boolean23 = byteBuffer18.hasArray();
        double double24 = byteBuffer18.getDouble();
        short short26 = byteBuffer18.getShort(0);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer18.putDouble(100.0d);
        byte byte30 = byteBuffer28.get((int) (short) 0);
        java.nio.IntBuffer intBuffer31 = byteBuffer28.asIntBuffer();
        int int32 = byteBuffer15.compareTo(byteBuffer28);
        response1.byteData = byteBuffer15;
        float float35 = byteBuffer15.getFloat(22);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer15.put((byte) 0);
        double double38 = byteBuffer15.getDouble();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(shortBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 0 + "'", byte30 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-24) + "'", int32 == (-24));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test05743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05743");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        short short16 = byteBuffer15.getShort();
        java.nio.IntBuffer intBuffer17 = byteBuffer15.asIntBuffer();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long20 = byteBuffer19.getLong();
        int int21 = byteBuffer19.position();
        float float23 = byteBuffer19.getFloat((int) (short) 10);
        boolean boolean24 = byteBuffer19.hasArray();
        double double25 = byteBuffer19.getDouble();
        short short27 = byteBuffer19.getShort(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer19.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response30 = null;
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response30);
        java.lang.String str33 = response31.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = response31.cookies();
        org.jsoup.Connection.Response response36 = response31.removeCookie("hi!");
        java.lang.String str37 = response31.statusMessage();
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        boolean boolean48 = byteBuffer43.hasArray();
        response31.byteData = byteBuffer43;
        int int50 = byteBuffer29.compareTo(byteBuffer43);
        int int51 = byteBuffer15.compareTo(byteBuffer43);
        java.nio.Buffer buffer52 = byteBuffer43.rewind();
        short short54 = byteBuffer43.getShort(10);
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        short short58 = byteBuffer56.getShort((int) '\000');
        boolean boolean59 = byteBuffer43.equals((java.lang.Object) byteBuffer56);
        response6.byteData = byteBuffer43;
        java.nio.ByteBuffer byteBuffer61 = byteBuffer43.duplicate();
        java.nio.ByteBuffer byteBuffer64 = byteBuffer43.putDouble(0, (double) 1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 0 + "'", short16 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(response36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-10) + "'", int50 == (-10));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(buffer52);
        org.junit.Assert.assertTrue("'" + short54 + "' != '" + (short) 0 + "'", short54 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + short58 + "' != '" + (short) 0 + "'", short58 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer64);
    }

    @Test
    public void test05744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05744");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response11.headers();
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response11);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document14 = response11.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before parsing response");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test05745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05745");
        boolean boolean2 = java.util.regex.Pattern.matches("\\Q\\Qjava.nio.DirectByteBuffer[pos=12 lim=100 cap=100]\\E\\\\E\\Q\\E", (java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=19 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test05746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05746");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        response2.contentType = "";
        java.lang.String str5 = response2.contentType;
        response2.executed = true;
        response2.executed = false;
        java.lang.String str10 = response2.statusMessage();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.nio.ByteBuffer byteBuffer13 = response12.byteData;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response12);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response15 = org.jsoup.helper.HttpConnection.Response.execute(request0, response14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(byteBuffer13);
    }

    @Test
    public void test05747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05747");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket11 = socketFactory0.createSocket(inetAddress9, 7);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05748");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.put(byteArray22);
        java.nio.CharBuffer charBuffer24 = byteBuffer19.asCharBuffer();
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putInt((int) '#');
        float float34 = byteBuffer32.getFloat(4);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer40.get(byteArray53, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.putInt(0);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.put(byteArray66);
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.put(byteArray76);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer63.get(byteArray76, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer57.put(byteArray76);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer32.put(byteArray76);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer19.get(byteArray76);
        java.nio.ByteBuffer byteBuffer84 = java.nio.ByteBuffer.wrap(byteArray76);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer13.put(byteArray76);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer13.duplicate();
        double double88 = byteBuffer86.getDouble(63);
        int int89 = byteBuffer86.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 7.3E-44f + "'", float34 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
    }

    @Test
    public void test05749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05749");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer3.putChar((int) ' ', '#');
        java.lang.String str9 = byteBuffer8.toString();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteOrder byteOrder20 = byteBuffer19.order();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer8.order(byteOrder20);
        java.nio.Buffer buffer23 = byteBuffer8.position(22);
        java.nio.DoubleBuffer doubleBuffer24 = byteBuffer8.asDoubleBuffer();
        float float26 = byteBuffer8.getFloat((int) (short) 0);
        int int27 = byteBuffer8.remaining();
        java.nio.Buffer buffer28 = byteBuffer8.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str9, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(doubleBuffer24);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 78 + "'", int27 == 78);
        org.junit.Assert.assertNotNull(buffer28);
    }

    @Test
    public void test05750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05750");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "java.nio.HeapByteBuffer[pos=6 lim=52 cap=52]";
    }

    @Test
    public void test05751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05751");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        int int6 = byteBuffer1.capacity();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.put((byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = byteBuffer1.getInt(1493172224);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(byteBuffer8);
    }

    @Test
    public void test05752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05752");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        boolean boolean11 = response1.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]", "\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response12.cookies();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test05753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05753");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        response1.numRedirects = (byte) 10;
        org.jsoup.Connection.Response response12 = response1.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer13 = response1.byteData;
        response1.statusCode = (-24);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(byteBuffer13);
    }

    @Test
    public void test05754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05754");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putInt((int) '#');
        float float22 = byteBuffer20.getFloat(4);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer47.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer51 = byteBuffer47.putInt(0);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.put(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer57.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.putInt(0);
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer65 = byteBuffer61.put(byteArray64);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer51.get(byteArray64, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer45.put(byteArray64);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer20.put(byteArray64);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer20.compact();
        java.nio.ByteBuffer byteBuffer74 = byteBuffer71.putShort(8, (short) (byte) 1);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.duplicate();
        java.nio.ByteOrder byteOrder76 = byteBuffer71.order();
        java.nio.ByteBuffer byteBuffer77 = byteBuffer12.order(byteOrder76);
        double double79 = byteBuffer77.getDouble(33);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 7.3E-44f + "'", float22 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteOrder76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
    }

    @Test
    public void test05755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05755");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        long long34 = byteBuffer11.getLong();
        java.nio.FloatBuffer floatBuffer35 = byteBuffer11.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer38 = byteBuffer11.putChar((int) '\000', '\n');
        boolean boolean39 = byteBuffer38.isReadOnly();
        java.nio.ByteBuffer byteBuffer41 = byteBuffer38.putShort((short) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer42 = byteBuffer41.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteBuffer41);
    }

    @Test
    public void test05756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05756");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ShortBuffer shortBuffer10 = byteBuffer1.asShortBuffer();
        java.nio.Buffer buffer12 = byteBuffer1.position((int) '#');
        java.lang.String str13 = byteBuffer1.toString();
        byte byte14 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer1.putFloat((float) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer1.putInt(1, 0);
        boolean boolean20 = byteBuffer1.isDirect();
        int int21 = byteBuffer1.capacity();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer1.putLong((long) 96);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer1.putInt(10);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]" + "'", str13, "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
    }

    @Test
    public void test05757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05757");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        int int2 = byteBuffer1.arrayOffset();
        int int3 = byteBuffer1.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test05758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05758");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        short short67 = byteBuffer63.getShort(0);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer63.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer70.put((int) (short) 10, (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer74 = byteBuffer61.put(byteBuffer73);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertTrue("'" + short67 + "' != '" + (short) 0 + "'", short67 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer73);
    }

    @Test
    public void test05759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05759");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        boolean boolean7 = response1.hasCookie("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test05760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05760");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.net.URL uRL7 = response1.url();
        int int8 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str11 = response10.charset;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(uRL7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test05761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05761");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        org.jsoup.Connection.Request request8 = response1.req;
        java.lang.String str9 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.Connection.Method method13 = response11.method();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(request8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test05762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05762");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response0);
        response2.statusMessage = "";
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response2);
        response2.executed = false;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.lang.String str10 = response2.getHeaderCaseInsensitive("java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]");
        java.lang.String str11 = response2.charset;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry13 = response2.scanHeaders("\\Q\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strEntry13);
    }

    @Test
    public void test05763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05763");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        response26.executed = true;
        java.lang.String str30 = response26.cookie("hi!");
        java.lang.String str31 = response26.statusMessage;
        org.jsoup.helper.HttpConnection.Response response32 = new org.jsoup.helper.HttpConnection.Response(response26);
        org.jsoup.helper.HttpConnection.Response response33 = new org.jsoup.helper.HttpConnection.Response(response26);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document34 = response26.parse();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test05764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05764");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        short short28 = byteBuffer26.getShort();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 0 + "'", short28 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer30);
    }

    @Test
    public void test05765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05765");
        java.nio.ByteBuffer byteBuffer2 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long3 = byteBuffer2.getLong();
        int int4 = byteBuffer2.position();
        float float6 = byteBuffer2.getFloat((int) (short) 10);
        boolean boolean7 = byteBuffer2.hasArray();
        double double8 = byteBuffer2.getDouble();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer2.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer12 = byteBuffer2.asCharBuffer();
        boolean boolean13 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]", (java.lang.CharSequence) charBuffer12);
        int int14 = charBuffer12.position();
        int int15 = charBuffer12.remaining();
        boolean boolean16 = charBuffer12.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 0.0f + "'", float6 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 42 + "'", int15 == 42);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05766");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer7.putFloat((float) (byte) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) 12);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer59.compact();
        java.nio.ByteBuffer byteBuffer64 = byteBuffer59.putFloat((float) ' ');
        java.nio.ByteBuffer byteBuffer66 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer66.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer70 = byteBuffer66.putInt(0);
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer74 = byteBuffer70.put(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer76.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer80 = byteBuffer76.putInt(0);
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer84 = byteBuffer80.put(byteArray83);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer70.get(byteArray83, 2, (int) (byte) 0);
        java.nio.IntBuffer intBuffer88 = byteBuffer87.asIntBuffer();
        int int89 = byteBuffer87.position();
        java.nio.ByteBuffer byteBuffer92 = byteBuffer87.putDouble(0, (double) 13376L);
        java.lang.String str93 = byteBuffer92.toString();
        java.nio.Buffer buffer94 = byteBuffer92.mark();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer95 = byteBuffer64.put(byteBuffer92);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(intBuffer88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 14 + "'", int89 == 14);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]" + "'", str93, "java.nio.DirectByteBuffer[pos=14 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(buffer94);
    }

    @Test
    public void test05767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05767");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.Buffer buffer7 = byteBuffer1.limit(32);
        short short8 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer1.slice();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        short short15 = byteBuffer11.getShort(0);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer11.putDouble((int) '\n', 2.57E-322d);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putInt((int) '#');
        byte byte28 = byteBuffer24.get(1);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer24.put(14, (byte) -1);
        java.nio.FloatBuffer floatBuffer32 = byteBuffer31.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer38.putInt((int) '#');
        float float42 = byteBuffer40.getFloat(4);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer54 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer54.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.putInt(0);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.put(byteArray61);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer48.get(byteArray61, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.putInt(0);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.put(byteArray74);
        java.nio.ByteBuffer byteBuffer77 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer77.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer81 = byteBuffer77.putInt(0);
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer85 = byteBuffer81.put(byteArray84);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer71.get(byteArray84, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer65.put(byteArray84);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer40.put(byteArray84);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer31.get(byteArray84);
        java.nio.ByteBuffer byteBuffer92 = java.nio.ByteBuffer.wrap(byteArray84);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer18.get(byteArray84);
        java.nio.ByteBuffer byteBuffer94 = byteBuffer9.get(byteArray84);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 0 + "'", byte28 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(floatBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 7.3E-44f + "'", float42 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
    }

    @Test
    public void test05768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05768");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        short short20 = byteBuffer16.getShort(0);
        int int21 = byteBuffer16.capacity();
        long long22 = byteBuffer16.getLong();
        short short23 = byteBuffer16.getShort();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer9.put(byteBuffer16);
        int int25 = byteBuffer9.remaining();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer27 = byteBuffer9.putDouble((double) '\000');
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 0 + "'", short20 == (short) 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test05769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05769");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        byte byte7 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        short short13 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer9.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(byteArray35);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer22.get(byteArray35, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer22.putDouble(100.0d);
        int int42 = byteBuffer16.compareTo(byteBuffer22);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteOrder byteOrder53 = byteBuffer52.order();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer22.order(byteOrder53);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer1.order(byteOrder53);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer1.putLong(4, (long) 8);
        int int59 = byteBuffer58.limit();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            byte byte62 = byteBuffer60.get((-18));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteOrder53);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(byteBuffer60);
    }

    @Test
    public void test05770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05770");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer17 = byteBuffer9.putShort(92, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer9.putFloat(85, (float) 128);
        long long21 = byteBuffer9.getLong();
        char char23 = byteBuffer9.getChar(0);
        int int24 = byteBuffer9.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '\000' + "'", char23 == '\000');
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test05771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05771");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        org.jsoup.helper.HttpConnection.Response response81 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response82 = new org.jsoup.helper.HttpConnection.Response(response81);
        org.jsoup.helper.HttpConnection.Response response83 = new org.jsoup.helper.HttpConnection.Response(response81);
        org.jsoup.helper.HttpConnection.Response response84 = new org.jsoup.helper.HttpConnection.Response(response81);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test05772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05772");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer61.putShort((short) (byte) 66);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer61.putFloat((float) 1117126656);
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.putInt(0);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer71.putInt((int) '#');
        float float75 = byteBuffer73.getFloat(4);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.putInt(10);
        java.nio.ByteOrder byteOrder78 = byteBuffer73.order();
        java.nio.ByteBuffer byteBuffer79 = byteBuffer61.order(byteOrder78);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer79.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 7.3E-44f + "'", float75 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteOrder78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
    }

    @Test
    public void test05773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05773");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int7 = response6.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response6.scanHeaders("Location");
        java.lang.String str10 = response6.charset;
        int int11 = response6.numRedirects;
        boolean boolean13 = response6.hasCookie("java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
        org.jsoup.Connection.Response response16 = response6.header("java.nio.DirectByteBufferR[pos=16 lim=100 cap=100]", "\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(response16);
    }

    @Test
    public void test05774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05774");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        java.lang.String str9 = response7.header("Location");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        int int12 = response7.statusCode;
        response7.statusCode = 79;
        boolean boolean17 = response7.hasHeaderWithValue("\\Qjava.nio.DirectByteBuffer[pos=15 lim=100 cap=100]\\E", "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05775");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        double double12 = byteBuffer11.getDouble();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.slice();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer13.slice();
        int int15 = byteBuffer13.remaining();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer18 = byteBuffer13.putLong(80, (long) 80);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.43230922487E-312d + "'", double12 == 5.43230922487E-312d);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 84 + "'", int15 == 84);
    }

    @Test
    public void test05776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05776");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket(inetAddress8, 74);
            org.junit.Assert.fail("Expected exception of type java.net.ConnectException; message: Connection refused (Connection refused)");
        } catch (java.net.ConnectException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05777");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        response1.statusMessage = "\\Qhi!\\E";
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int11 = response10.statusCode;
        java.lang.String str12 = response10.charset;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test05778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05778");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.DoubleBuffer doubleBuffer10 = byteBuffer5.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.put((byte) 0);
        java.nio.DoubleBuffer doubleBuffer13 = byteBuffer5.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(doubleBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
    }

    @Test
    public void test05779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05779");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        byte byte7 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        short short13 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer9.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.putInt(0);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.put(byteArray35);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer22.get(byteArray35, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer22.putDouble(100.0d);
        int int42 = byteBuffer16.compareTo(byteBuffer22);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteOrder byteOrder53 = byteBuffer52.order();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer22.order(byteOrder53);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer1.order(byteOrder53);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer1.putLong(4, (long) 8);
        int int59 = byteBuffer58.limit();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer63 = byteBuffer58.put((-99), (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -99");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteOrder53);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(byteBuffer60);
    }

    @Test
    public void test05780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05780");
        java.nio.ByteBuffer byteBuffer2 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer4 = byteBuffer2.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer6 = byteBuffer2.putInt(0);
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer10 = byteBuffer6.put(byteArray9);
        java.nio.CharBuffer charBuffer11 = byteBuffer6.asCharBuffer();
        boolean boolean12 = java.util.regex.Pattern.matches("\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E", (java.lang.CharSequence) charBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05781");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        long long9 = byteBuffer5.getLong((int) '4');
        java.nio.CharBuffer charBuffer10 = byteBuffer5.asCharBuffer();
        boolean boolean11 = byteBuffer5.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05782");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response13);
        int int17 = response16.statusCode();
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response16);
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response18);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test05783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05783");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response3 = new org.jsoup.helper.HttpConnection.Response(response1);
        response3.statusMessage = "";
        java.util.Map<java.lang.String, java.lang.String> strMap6 = response3.headers();
        org.jsoup.Connection.Response response9 = response3.header("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        java.lang.String str10 = response3.statusMessage;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response11 = org.jsoup.helper.HttpConnection.Response.execute(request0, response3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test05784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05784");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.Connection.Method method27 = response26.method();
        java.lang.String str28 = response26.statusMessage();
        response26.statusCode = 0;
        java.lang.String str32 = response26.cookie("\\Q\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test05785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05785");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer5.putDouble(10.0d);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar('\n');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.put(byteArray22);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer19.get(byteArray32, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer19.putDouble(100.0d);
        boolean boolean39 = byteBuffer5.equals((java.lang.Object) byteBuffer19);
        double double41 = byteBuffer5.getDouble(14);
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long44 = byteBuffer43.getLong();
        int int45 = byteBuffer43.position();
        float float47 = byteBuffer43.getFloat((int) (short) 10);
        boolean boolean48 = byteBuffer43.hasArray();
        double double49 = byteBuffer43.getDouble();
        short short51 = byteBuffer43.getShort(0);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer43.putDouble(100.0d);
        float float54 = byteBuffer43.getFloat();
        char char56 = byteBuffer43.getChar(1);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer66.putDouble(7.565251118924485E-307d);
        int int69 = byteBuffer43.compareTo(byteBuffer68);
        java.nio.DoubleBuffer doubleBuffer70 = byteBuffer43.asDoubleBuffer();
        int int71 = byteBuffer5.compareTo(byteBuffer43);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer5.putInt(0);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer5.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer76 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer77 = byteBuffer76.asReadOnlyBuffer();
        int int78 = byteBuffer77.limit();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer79 = byteBuffer77.compact();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + short51 + "' != '" + (short) 0 + "'", short51 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.0f + "'", float54 == 0.0f);
        org.junit.Assert.assertTrue("'" + char56 + "' != '" + '\000' + "'", char56 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-6) + "'", int69 == (-6));
        org.junit.Assert.assertNotNull(doubleBuffer70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
    }

    @Test
    public void test05786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05786");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Request request7 = response1.req;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str9 = response8.contentType;
        int int10 = response8.statusCode();
        response8.numRedirects = 83;
        java.lang.String str13 = response8.statusMessage();
        java.lang.String str15 = response8.getHeaderCaseInsensitive("\\Qjava.nio.DirectByteBuffer[pos=12 lim=100 cap=100]\\E");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(request7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test05787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05787");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int7 = response6.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response6.scanHeaders("Location");
        response6.numRedirects = (byte) 66;
        java.lang.String str12 = response6.charset();
        java.lang.String str14 = response6.cookie("\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test05788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05788");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        response4.executed = false;
        int int8 = response4.numRedirects;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test05789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05789");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        int int36 = byteBuffer35.limit();
        short short38 = byteBuffer35.getShort((int) 'a');
        boolean boolean39 = byteBuffer35.isDirect();
        java.nio.ByteBuffer byteBuffer40 = byteBuffer35.duplicate();
        java.nio.IntBuffer intBuffer41 = byteBuffer40.asIntBuffer();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer40.putDouble(3.23791E-318d);
        java.nio.IntBuffer intBuffer44 = byteBuffer43.asIntBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 0 + "'", short38 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(intBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(intBuffer44);
    }

    @Test
    public void test05790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05790");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        int int7 = byteBuffer5.capacity();
        byte byte8 = byteBuffer5.get();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putInt(128);
        java.lang.String str11 = byteBuffer5.toString();
        java.nio.FloatBuffer floatBuffer12 = byteBuffer5.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer18.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer18.putChar('a');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer23.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer23.putDouble(0.0d);
        boolean boolean27 = byteBuffer23.isReadOnly();
        java.nio.ByteOrder byteOrder28 = byteBuffer23.order();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer5.order(byteOrder28);
        byte[] byteArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer31 = byteBuffer5.get(byteArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.nio.DirectByteBuffer[pos=19 lim=100 cap=100]" + "'", str11, "java.nio.DirectByteBuffer[pos=19 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteOrder28);
        org.junit.Assert.assertNotNull(byteBuffer29);
    }

    @Test
    public void test05791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05791");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
    }

    @Test
    public void test05792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05792");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.lang.String str7 = response1.statusMessage;
        java.nio.ByteBuffer byteBuffer8 = response1.byteData;
        response1.numRedirects = (byte) 10;
        org.jsoup.Connection.Response response12 = response1.removeCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer13 = response1.byteData;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request15 = null;
        response1.req = request15;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Method method19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response20 = response18.method(method19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(byteBuffer13);
    }

    @Test
    public void test05793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05793");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        boolean boolean12 = byteBuffer5.isReadOnly();
        boolean boolean13 = byteBuffer5.isDirect();
        java.nio.LongBuffer longBuffer14 = byteBuffer5.asLongBuffer();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        byte byte19 = byteBuffer16.get((int) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer16.putInt((int) (short) 0);
        int int22 = byteBuffer5.compareTo(byteBuffer21);
        java.nio.Buffer buffer23 = byteBuffer21.clear();
        java.nio.ByteBuffer byteBuffer26 = byteBuffer21.putShort((int) 'a', (short) 0);
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer28.putLong((long) '4');
        int int32 = byteBuffer30.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer30.get(byteArray51);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putChar('\000');
        java.nio.Buffer buffer60 = byteBuffer58.limit((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer26.put(byteBuffer58);
        // The following exception was thrown during execution in test generation
        try {
            char char62 = byteBuffer58.getChar();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-2) + "'", int22 == (-2));
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(buffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
    }

    @Test
    public void test05794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05794");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = 97;
    }

    @Test
    public void test05795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05795");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer22.put(byteArray41);
        long long47 = byteBuffer22.getLong();
        java.nio.ByteBuffer byteBuffer49 = byteBuffer22.putChar('\n');
        java.nio.ByteOrder byteOrder50 = byteBuffer22.order();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer22.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer53 = byteBuffer22.putFloat(4.305E-42f);
        java.lang.String str54 = byteBuffer22.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteOrder50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.nio.DirectByteBuffer[pos=30 lim=100 cap=100]" + "'", str54, "java.nio.DirectByteBuffer[pos=30 lim=100 cap=100]");
    }

    @Test
    public void test05796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05796");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteOrder byteOrder45 = byteBuffer44.order();
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.order(byteOrder45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer14.asReadOnlyBuffer();
        int int48 = byteBuffer47.getInt();
        java.nio.Buffer buffer49 = byteBuffer47.rewind();
        double double50 = byteBuffer47.getDouble();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteOrder45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(buffer49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2.57E-322d + "'", double50 == 2.57E-322d);
    }

    @Test
    public void test05797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05797");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.function.Predicate<java.lang.String> strPredicate4 = null; // flaky: pattern2.asPredicate();
        java.lang.String str5 = null; // flaky: pattern2.pattern();
        java.util.regex.Pattern pattern9 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern12 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern13 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern13;
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer17 = byteBuffer16.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream18 = null; // flaky: pattern13.splitAsStream((java.lang.CharSequence) charBuffer17);
        java.util.regex.Matcher matcher19 = pattern12.matcher((java.lang.CharSequence) charBuffer17);
        java.util.regex.Matcher matcher20 = null; // flaky: pattern9.matcher((java.lang.CharSequence) charBuffer17);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer23 = byteBuffer22.asCharBuffer();
        java.util.regex.Matcher matcher24 = null; // flaky: pattern9.matcher((java.lang.CharSequence) charBuffer23);
        boolean boolean25 = java.util.regex.Pattern.matches("\\QLocation\\E", (java.lang.CharSequence) charBuffer23);
        java.lang.String[] strArray27 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer23, 1);
        int int28 = 0; // flaky: pattern2.flags();
        java.util.regex.Pattern pattern29 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern29;
        int int31 = 0; // flaky: pattern29.flags();
        java.util.regex.Pattern pattern34 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern34;
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        java.nio.FloatBuffer floatBuffer46 = byteBuffer41.asFloatBuffer();
        java.nio.CharBuffer charBuffer47 = byteBuffer41.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream48 = null; // flaky: pattern34.splitAsStream((java.lang.CharSequence) charBuffer47);
        java.util.stream.Stream<java.lang.String> strStream49 = null; // flaky: pattern29.splitAsStream((java.lang.CharSequence) charBuffer47);
        java.util.stream.Stream<java.lang.String> strStream50 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) charBuffer47);
        java.lang.String[] strArray52 = null; // flaky: pattern2.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=24 lim=84 cap=84]");
        java.lang.String str53 = null; // flaky: pattern2.pattern();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str5, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(pattern9);
// flaky:         org.junit.Assert.assertEquals(pattern9.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern12);
        org.junit.Assert.assertEquals(pattern12.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern13);
// flaky:         org.junit.Assert.assertEquals(pattern13.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
// flaky:         org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(matcher19);
        org.junit.Assert.assertEquals(matcher19.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher20);
// flaky:         org.junit.Assert.assertEquals(matcher20.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(charBuffer23);
// flaky:         org.junit.Assert.assertNotNull(matcher24);
// flaky:         org.junit.Assert.assertEquals(matcher24.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-24) + "'", int28 == (-24));
// flaky:         org.junit.Assert.assertNotNull(pattern29);
// flaky:         org.junit.Assert.assertEquals(pattern29.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-24) + "'", int31 == (-24));
// flaky:         org.junit.Assert.assertNotNull(pattern34);
// flaky:         org.junit.Assert.assertEquals(pattern34.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(floatBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
// flaky:         org.junit.Assert.assertNotNull(strStream48);
// flaky:         org.junit.Assert.assertNotNull(strStream49);
// flaky:         org.junit.Assert.assertNotNull(strStream50);
// flaky:         org.junit.Assert.assertNotNull(strArray52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str53, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
    }

    @Test
    public void test05798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05798");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry6 = response1.scanHeaders("\\QLocation\\E");
        response1.statusMessage = "\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        org.jsoup.Connection.Request request12 = null;
        response11.req = request12;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = response11.headers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry6);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test05799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05799");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("", 97);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qjava.nio.DirectByteBuffer[pos=10 lim=22 cap=22]\\E", (-75));
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "");
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test05800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05800");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt((int) (short) 1, (-24));
        java.nio.ByteBuffer byteBuffer33 = byteBuffer30.putFloat(88, (float) 58);
        org.jsoup.helper.HttpConnection.Response response34 = null;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response34);
        response35.contentType = "";
        java.lang.String str38 = response35.contentType;
        response35.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry42 = response35.scanHeaders("");
        java.lang.String str44 = response35.getHeaderCaseInsensitive("Location");
        java.lang.String str45 = response35.charset();
        response35.statusCode = 64;
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer50 = byteBuffer49.asShortBuffer();
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long53 = byteBuffer52.getLong();
        int int54 = byteBuffer52.position();
        float float56 = byteBuffer52.getFloat((int) (short) 10);
        boolean boolean57 = byteBuffer52.hasArray();
        double double58 = byteBuffer52.getDouble();
        short short60 = byteBuffer52.getShort(0);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer52.putDouble(100.0d);
        byte byte64 = byteBuffer62.get((int) (short) 0);
        java.nio.IntBuffer intBuffer65 = byteBuffer62.asIntBuffer();
        int int66 = byteBuffer49.compareTo(byteBuffer62);
        response35.byteData = byteBuffer49;
        java.nio.ByteOrder byteOrder68 = byteBuffer49.order();
        java.nio.ByteOrder byteOrder69 = byteBuffer49.order();
        java.nio.ByteBuffer byteBuffer70 = byteBuffer33.order(byteOrder69);
        java.nio.DoubleBuffer doubleBuffer71 = byteBuffer70.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer73 = byteBuffer70.put((byte) 66);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(strEntry42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(shortBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) 0 + "'", short60 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) 0 + "'", byte64 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-24) + "'", int66 == (-24));
        org.junit.Assert.assertNotNull(byteOrder68);
        org.junit.Assert.assertNotNull(byteOrder69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(doubleBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
    }

    @Test
    public void test05801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05801");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.nio.ByteBuffer byteBuffer8 = response7.byteData;
        java.lang.String str9 = response7.statusMessage;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(byteBuffer8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test05802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05802");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        int int2 = byteBuffer1.arrayOffset();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer4.putShort(16, (short) 1);
        char char8 = byteBuffer7.getChar();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.compact();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer12 = byteBuffer7.putChar((-1), '\u4120');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\000' + "'", char8 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer9);
    }

    @Test
    public void test05803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05803");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        int int8 = byteBuffer7.remaining();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putShort((short) 10);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long13 = byteBuffer12.getLong();
        int int14 = byteBuffer12.position();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.put((byte) 100);
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putInt((int) '#');
        byte byte26 = byteBuffer22.get(1);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer22.put(14, (byte) -1);
        java.nio.FloatBuffer floatBuffer30 = byteBuffer29.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putInt((int) '#');
        float float40 = byteBuffer38.getFloat(4);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.put(byteArray59);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer46.get(byteArray59, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer75 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer75.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer79 = byteBuffer75.putInt(0);
        byte[] byteArray82 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer83 = byteBuffer79.put(byteArray82);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer69.get(byteArray82, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer63.put(byteArray82);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer38.put(byteArray82);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer29.get(byteArray82);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer12.get(byteArray82);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer7.get(byteArray82);
        boolean boolean92 = byteBuffer7.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 80 + "'", int8 == 80);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) 0 + "'", byte26 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(floatBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 7.3E-44f + "'", float40 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test05804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05804");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.putChar('4');
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = null; // flaky: pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        boolean boolean17 = byteBuffer10.equals((java.lang.Object) strStream16);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer10.putShort((short) (byte) -1);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer19.putInt(83, 20);
        java.nio.Buffer buffer23 = byteBuffer22.rewind();
        java.nio.Buffer buffer24 = buffer23.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
// flaky:         org.junit.Assert.assertNotNull(pattern11);
// flaky:         org.junit.Assert.assertEquals(pattern11.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
// flaky:         org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(buffer24);
    }

    @Test
    public void test05805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05805");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.Connection.Method method20 = response1.method();
        response1.statusCode = '\000';
        java.lang.String str24 = response1.header("java.nio.DirectByteBuffer[pos=0 lim=16 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test05806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05806");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putFloat((float) (-24));
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        int int14 = byteBuffer12.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.put(byteArray33);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer20.get(byteArray33, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer12.get(byteArray33);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.wrap(byteArray33);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer1.put(byteArray33);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putFloat((float) 79);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer42.slice();
        java.nio.ByteBuffer byteBuffer45 = byteBuffer42.putLong((long) 86);
        java.nio.Buffer buffer47 = byteBuffer45.limit(37);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(buffer47);
    }

    @Test
    public void test05807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05807");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) (short) 0);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.duplicate();
        java.nio.ShortBuffer shortBuffer3 = byteBuffer1.asShortBuffer();
        java.nio.CharBuffer charBuffer4 = byteBuffer1.asCharBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer6 = byteBuffer1.limit(48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(charBuffer4);
    }

    @Test
    public void test05808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05808");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        java.nio.ByteBuffer byteBuffer3 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer3.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer7 = byteBuffer3.putInt(0);
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.put(byteArray10);
        java.nio.CharBuffer charBuffer12 = byteBuffer7.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream13 = pattern1.splitAsStream((java.lang.CharSequence) charBuffer12);
        java.util.function.Predicate<java.lang.String> strPredicate14 = pattern1.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate15 = pattern1.asPredicate();
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(strPredicate15);
    }

    @Test
    public void test05809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05809");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) '\uffff');
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test05810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05810");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        int int6 = response1.statusCode();
        response1.contentType = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        boolean boolean11 = response1.hasHeaderWithValue("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E", "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        org.jsoup.Connection.Request request12 = null;
        response1.req = request12;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request15 = null;
        response1.req = request15;
        java.net.URL uRL17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response18 = response1.url(uRL17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05811");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.Connection.Response response7 = response2.removeCookie("hi!");
        java.lang.String str8 = response2.statusMessage();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        boolean boolean19 = byteBuffer14.hasArray();
        response2.byteData = byteBuffer14;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response2);
        boolean boolean22 = response21.executed;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response21);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response21);
        boolean boolean26 = response24.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response24);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = response24.cookies();
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response24);
        java.lang.String str30 = response29.contentType();
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response29);
        org.jsoup.helper.HttpConnection.Response response32 = new org.jsoup.helper.HttpConnection.Response(response29);
        response29.charset = "";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response35 = org.jsoup.helper.HttpConnection.Response.execute(request0, response29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test05812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05812");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.duplicate();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer14.get(byteArray25);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer14.putShort((short) 10);
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long32 = byteBuffer31.getLong();
        int int33 = byteBuffer31.position();
        float float35 = byteBuffer31.getFloat((int) (short) 10);
        boolean boolean36 = byteBuffer31.hasArray();
        double double37 = byteBuffer31.getDouble();
        short short39 = byteBuffer31.getShort(0);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer31.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response42 = null;
        org.jsoup.helper.HttpConnection.Response response43 = new org.jsoup.helper.HttpConnection.Response(response42);
        java.lang.String str45 = response43.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = response43.cookies();
        org.jsoup.Connection.Response response48 = response43.removeCookie("hi!");
        java.lang.String str49 = response43.statusMessage();
        java.nio.ByteBuffer byteBuffer51 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer51.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer55 = byteBuffer51.putInt(0);
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.put(byteArray58);
        boolean boolean60 = byteBuffer55.hasArray();
        response43.byteData = byteBuffer55;
        int int62 = byteBuffer41.compareTo(byteBuffer55);
        java.nio.ByteBuffer byteBuffer64 = byteBuffer41.putLong((long) (byte) 10);
        int int65 = byteBuffer14.compareTo(byteBuffer41);
        java.nio.Buffer buffer66 = byteBuffer41.mark();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) 0 + "'", short39 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(response48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-10) + "'", int62 == (-10));
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertNotNull(buffer66);
    }

    @Test
    public void test05813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05813");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.net.URL uRL16 = response15.url();
        org.jsoup.Connection.Request request17 = response15.req;
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertNull(uRL16);
        org.junit.Assert.assertNull(request17);
    }

    @Test
    public void test05814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05814");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("\\Q\\Q\\E\\\\E\\Q\\E", (-6));
        java.lang.String str3 = null; // flaky: pattern2.pattern();
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putLong((long) '4');
        float float9 = byteBuffer7.getFloat(32);
        boolean boolean10 = byteBuffer7.isDirect();
        java.util.regex.Pattern pattern13 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate14 = pattern13.asPredicate();
        boolean boolean15 = byteBuffer7.equals((java.lang.Object) pattern13);
        java.util.regex.Pattern pattern19 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern19;
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.FloatBuffer floatBuffer31 = byteBuffer26.asFloatBuffer();
        java.nio.CharBuffer charBuffer32 = byteBuffer26.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream33 = null; // flaky: pattern19.splitAsStream((java.lang.CharSequence) charBuffer32);
        boolean boolean34 = java.util.regex.Pattern.matches("\\Q\\E", (java.lang.CharSequence) charBuffer32);
        java.lang.String[] strArray35 = pattern13.split((java.lang.CharSequence) "\\Q\\E");
        java.util.regex.Pattern pattern36 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern36;
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer40 = byteBuffer39.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream41 = null; // flaky: pattern36.splitAsStream((java.lang.CharSequence) charBuffer40);
        java.util.stream.Stream<java.lang.String> strStream42 = pattern13.splitAsStream((java.lang.CharSequence) charBuffer40);
        java.util.regex.Matcher matcher43 = null; // flaky: pattern2.matcher((java.lang.CharSequence) charBuffer40);
        java.util.function.Predicate<java.lang.String> strPredicate44 = null; // flaky: pattern2.asPredicate();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\Q\\E\\\\E\\Q\\E");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\\Q\\Q\\E\\\\E\\Q\\E" + "'", str3, "\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(pattern13);
        org.junit.Assert.assertEquals(pattern13.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertNotNull(pattern19);
// flaky:         org.junit.Assert.assertEquals(pattern19.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(floatBuffer31);
        org.junit.Assert.assertNotNull(charBuffer32);
// flaky:         org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray35);
// flaky:         org.junit.Assert.assertNotNull(pattern36);
// flaky:         org.junit.Assert.assertEquals(pattern36.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(charBuffer40);
// flaky:         org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNotNull(strStream42);
// flaky:         org.junit.Assert.assertNotNull(matcher43);
// flaky:         org.junit.Assert.assertEquals(matcher43.toString(), "java.util.regex.Matcher[pattern=\\Q\\Q\\E\\\\E\\Q\\E region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate44);
    }

    @Test
    public void test05815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05815");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar('a');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer10.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.put((byte) 0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer10.put(64, (byte) 100);
        short short18 = byteBuffer10.getShort(0);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putInt((int) '#');
        float float28 = byteBuffer26.getFloat(4);
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer26.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer26.compact();
        java.nio.ByteBuffer byteBuffer80 = byteBuffer77.putShort(8, (short) (byte) 1);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer77.duplicate();
        java.nio.ByteOrder byteOrder82 = byteBuffer77.order();
        java.nio.ByteBuffer byteBuffer83 = byteBuffer10.order(byteOrder82);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 63 + "'", short18 == (short) 63);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 7.3E-44f + "'", float28 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteOrder82);
        org.junit.Assert.assertNotNull(byteBuffer83);
    }

    @Test
    public void test05816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05816");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry11 = response1.scanHeaders("\\Q\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry11);
    }

    @Test
    public void test05817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05817");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        java.net.Socket socket8 = socketFactory0.createSocket(inetAddress6, 25);
        java.net.InetAddress inetAddress9 = null;
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = socketFactory0.createSocket(inetAddress9, (int) (short) 100, inetAddress11, 94);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
// flaky:         org.junit.Assert.assertEquals(socket8.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=35850]");
    }

    @Test
    public void test05818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05818");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        java.net.HttpURLConnection httpURLConnection15 = null;
        org.jsoup.helper.HttpConnection.Response response16 = null;
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response16);
        response17.contentType = "";
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response17);
        java.lang.String str22 = response20.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        response23.executed = true;
        org.jsoup.helper.HttpConnection.Response response26 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.Connection.Request request28 = response27.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry30 = response27.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response27);
        int int32 = response27.numRedirects;
        org.jsoup.Connection.Response response35 = response27.header("java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]", "\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E");
        java.net.URL uRL36 = response27.url();
        // The following exception was thrown during execution in test generation
        try {
            response14.setupFromConnection(httpURLConnection15, (org.jsoup.Connection.Response) response27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(request28);
        org.junit.Assert.assertNull(strEntry30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(response35);
        org.junit.Assert.assertNull(uRL36);
    }

    @Test
    public void test05819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05819");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        response1.executed = true;
        int int11 = response1.numRedirects;
        boolean boolean13 = response1.hasCookie("\\QLocation\\E");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        int int18 = byteBuffer16.position();
        float float20 = byteBuffer16.getFloat((int) (short) 10);
        boolean boolean21 = byteBuffer16.hasArray();
        double double22 = byteBuffer16.getDouble();
        short short24 = byteBuffer16.getShort(0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer16.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response27 = null;
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response27);
        java.lang.String str30 = response28.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = response28.cookies();
        org.jsoup.Connection.Response response33 = response28.removeCookie("hi!");
        java.lang.String str34 = response28.statusMessage();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        boolean boolean45 = byteBuffer40.hasArray();
        response28.byteData = byteBuffer40;
        int int47 = byteBuffer26.compareTo(byteBuffer40);
        java.lang.String str48 = byteBuffer26.toString();
        java.nio.ByteBuffer byteBuffer50 = byteBuffer26.put((byte) 10);
        int int51 = byteBuffer50.limit();
        short short53 = byteBuffer50.getShort((int) 'a');
        response14.byteData = byteBuffer50;
        org.jsoup.helper.HttpConnection.Response response55 = new org.jsoup.helper.HttpConnection.Response(response14);
        org.jsoup.helper.HttpConnection.Response response56 = new org.jsoup.helper.HttpConnection.Response(response55);
        org.jsoup.helper.HttpConnection.Response response57 = new org.jsoup.helper.HttpConnection.Response(response55);
        response55.numRedirects = 22;
        java.util.Map<java.lang.String, java.lang.String> strMap60 = response55.cookies();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 0 + "'", short24 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(response33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-10) + "'", int47 == (-10));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str48, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) 0 + "'", short53 == (short) 0);
        org.junit.Assert.assertNotNull(strMap60);
    }

    @Test
    public void test05820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05820");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str14 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response18 = response16.removeHeader("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response16);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = response19.cookies();
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response19);
        java.lang.String str22 = response19.contentType;
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response19);
        java.net.URL uRL24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response25 = response23.url(uRL24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URL must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test05821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05821");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        boolean boolean7 = response1.hasCookie("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = response8.cookies();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test05822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05822");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        int int6 = pattern2.flags();
        int int7 = pattern2.flags();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.function.Predicate<java.lang.String> strPredicate9 = pattern2.asPredicate();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(strPredicate9);
    }

    @Test
    public void test05823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05823");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        boolean boolean6 = response1.executed;
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int8 = response1.statusCode;
        java.lang.String str9 = response1.statusMessage;
        boolean boolean10 = response1.executed;
        java.lang.String str11 = response1.statusMessage;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test05824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05824");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean7 = response1.hasHeader("hi!");
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request9 = null;
        response8.req = request9;
        response8.statusCode = 24;
        org.jsoup.Connection.Method method13 = response8.method();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test05825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05825");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry6 = response1.scanHeaders("\\QLocation\\E");
        org.jsoup.Connection.Response response8 = response1.removeCookie("Location");
        java.lang.String str9 = response1.statusMessage();
        java.lang.String str10 = response1.statusMessage();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry6);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test05826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05826");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response5.contentType();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        response12.numRedirects = (-75);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test05827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05827");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        java.nio.IntBuffer intBuffer8 = byteBuffer1.asIntBuffer();
        float float9 = byteBuffer1.getFloat();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer12 = byteBuffer11.asShortBuffer();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long15 = byteBuffer14.getLong();
        int int16 = byteBuffer14.position();
        float float18 = byteBuffer14.getFloat((int) (short) 10);
        boolean boolean19 = byteBuffer14.hasArray();
        double double20 = byteBuffer14.getDouble();
        short short22 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer14.putDouble(100.0d);
        byte byte26 = byteBuffer24.get((int) (short) 0);
        java.nio.IntBuffer intBuffer27 = byteBuffer24.asIntBuffer();
        int int28 = byteBuffer11.compareTo(byteBuffer24);
        java.nio.ByteOrder byteOrder29 = byteBuffer24.order();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer24.slice();
        byte byte32 = byteBuffer24.get(0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer1.put(byteBuffer24);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer1.slice();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        short short41 = byteBuffer40.getShort();
        java.nio.IntBuffer intBuffer42 = byteBuffer40.asIntBuffer();
        int int43 = byteBuffer40.capacity();
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer49.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer49.putChar('a');
        double double56 = byteBuffer54.getDouble(12);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer68.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.putInt(0);
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer76 = byteBuffer72.put(byteArray75);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer62.get(byteArray75, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer54.put(byteArray75);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer40.get(byteArray75);
        java.nio.ByteBuffer byteBuffer82 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ByteBuffer byteBuffer83 = java.nio.ByteBuffer.wrap(byteArray75);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer34.get(byteArray75);
        java.nio.Buffer buffer85 = byteBuffer84.clear();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer8);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) 0 + "'", byte26 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-24) + "'", int28 == (-24));
        org.junit.Assert.assertNotNull(byteOrder29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 0 + "'", byte32 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 7.565251118924485E-307d + "'", double56 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(buffer85);
    }

    @Test
    public void test05828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05828");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        short short12 = byteBuffer9.getShort();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer9.put((byte) 10);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer9.asReadOnlyBuffer();
        java.nio.CharBuffer charBuffer16 = byteBuffer9.asCharBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(charBuffer16);
    }

    @Test
    public void test05829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05829");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        short short11 = byteBuffer7.getShort(0);
        int int12 = byteBuffer7.position();
        response1.byteData = byteBuffer7;
        long long15 = byteBuffer7.getLong(37);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 0 + "'", short11 == (short) 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test05830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05830");
        java.lang.String str1 = java.util.regex.Pattern.quote("\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\\Q\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E\\\\E\\Q\\E" + "'", str1, "\\Q\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E\\\\E\\Q\\E");
    }

    @Test
    public void test05831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05831");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.Connection.Response response9 = response1.removeHeader("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        int int10 = response1.statusCode;
        boolean boolean12 = response1.hasHeader("\\Q\\E");
        java.lang.String str14 = response1.header("java.nio.DirectByteBuffer[pos=0 lim=16 cap=100]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test05832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05832");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "\\Q\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E\\\\E\\Q\\E";
    }

    @Test
    public void test05833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05833");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket8 = socketFactory0.createSocket("\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E", (int) (short) 0, inetAddress6, (-100));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:-100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05834");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]", 23);
        java.lang.String[] strArray4 = pattern2.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=97 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test05835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05835");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        boolean boolean7 = byteBuffer1.equals((java.lang.Object) (byte) 0);
        boolean boolean8 = byteBuffer1.isDirect();
        long long9 = byteBuffer1.getLong();
        java.nio.DoubleBuffer doubleBuffer10 = byteBuffer1.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer16.get(byteArray29, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.wrap(byteArray29);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer1.put(byteArray29);
        java.nio.LongBuffer longBuffer36 = byteBuffer1.asLongBuffer();
        java.lang.String str37 = byteBuffer1.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(longBuffer36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]" + "'", str37, "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
    }

    @Test
    public void test05836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05836");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer15 = byteBuffer5.asDoubleBuffer();
        java.nio.Buffer buffer16 = doubleBuffer15.mark();
        boolean boolean17 = buffer16.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05837");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.FloatBuffer floatBuffer16 = byteBuffer9.asFloatBuffer();
        byte byte18 = byteBuffer9.get((int) (short) 1);
        int int19 = byteBuffer9.position();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer9.putShort((short) (byte) 66);
        int int22 = byteBuffer9.remaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 76 + "'", int22 == 76);
    }

    @Test
    public void test05838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05838");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.put((byte) 100);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putInt((int) '#');
        byte byte15 = byteBuffer11.get(1);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer11.put(14, (byte) -1);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer18.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putInt((int) '#');
        float float29 = byteBuffer27.getFloat(4);
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.putInt(0);
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.put(byteArray38);
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer41.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.putInt(0);
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.put(byteArray48);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer35.get(byteArray48, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer54 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer54.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.putInt(0);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.put(byteArray61);
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer64.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer68 = byteBuffer64.putInt(0);
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer72 = byteBuffer68.put(byteArray71);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer58.get(byteArray71, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer52.put(byteArray71);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer27.put(byteArray71);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer18.get(byteArray71);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer1.get(byteArray71);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer79.duplicate();
        int int81 = byteBuffer79.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 0 + "'", byte15 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 7.3E-44f + "'", float29 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 11 + "'", int81 == 11);
    }

    @Test
    public void test05839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05839");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E", 18);
        java.util.regex.Pattern pattern6 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern6;
        java.util.stream.Stream<java.lang.String> strStream9 = null; // flaky: pattern6.splitAsStream((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long13 = byteBuffer12.getLong();
        int int14 = byteBuffer12.position();
        float float16 = byteBuffer12.getFloat((int) (short) 10);
        boolean boolean17 = byteBuffer12.hasArray();
        double double18 = byteBuffer12.getDouble();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer12.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer22 = byteBuffer12.asCharBuffer();
        boolean boolean23 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]", (java.lang.CharSequence) charBuffer22);
        java.lang.String[] strArray25 = null; // flaky: pattern6.split((java.lang.CharSequence) charBuffer22, 12);
        boolean boolean26 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]", (java.lang.CharSequence) charBuffer22);
        java.lang.String[] strArray28 = pattern2.split((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]", (-90));
        int int29 = pattern2.flags();
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer31.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer35 = byteBuffer31.putInt(0);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer35.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer35.putChar(' ');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer40.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long46 = byteBuffer45.getLong();
        int int47 = byteBuffer45.position();
        float float49 = byteBuffer45.getFloat((int) (short) 10);
        boolean boolean50 = byteBuffer45.hasArray();
        double double51 = byteBuffer45.getDouble();
        short short53 = byteBuffer45.getShort(0);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer45.putDouble(100.0d);
        boolean boolean56 = byteBuffer45.isDirect();
        int int57 = byteBuffer43.compareTo(byteBuffer45);
        java.nio.DoubleBuffer doubleBuffer58 = byteBuffer45.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer45.slice();
        java.nio.ByteBuffer byteBuffer61 = byteBuffer45.put((byte) 10);
        java.nio.Buffer buffer63 = byteBuffer45.limit(48);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer45.putInt(14, 66);
        java.nio.CharBuffer charBuffer67 = byteBuffer45.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream68 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer67);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern6);
// flaky:         org.junit.Assert.assertEquals(pattern6.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 18 + "'", int29 == 18);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) 0 + "'", short53 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(doubleBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(buffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(charBuffer67);
        org.junit.Assert.assertNotNull(strStream68);
    }

    @Test
    public void test05840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05840");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        short short23 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer15.putDouble(100.0d);
        boolean boolean26 = byteBuffer15.isDirect();
        int int27 = byteBuffer13.compareTo(byteBuffer15);
        java.nio.DoubleBuffer doubleBuffer28 = byteBuffer15.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer29 = byteBuffer15.slice();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer15.put((byte) 10);
        java.nio.Buffer buffer33 = byteBuffer15.limit(48);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer15.putInt(14, 66);
        java.nio.ShortBuffer shortBuffer37 = byteBuffer15.asShortBuffer();
        java.lang.Class<?> wildcardClass38 = byteBuffer15.getClass();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(buffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(shortBuffer37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test05841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05841");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(30);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test05842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05842");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        int int9 = byteBuffer7.position();
        float float11 = byteBuffer7.getFloat((int) (short) 10);
        boolean boolean12 = byteBuffer7.hasArray();
        double double13 = byteBuffer7.getDouble();
        short short15 = byteBuffer7.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer7.compact();
        boolean boolean19 = byteBuffer18.isReadOnly();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.slice();
        byte byte21 = byteBuffer18.get();
        int int22 = byteBuffer18.getInt();
        boolean boolean23 = byteBuffer3.equals((java.lang.Object) byteBuffer18);
        java.nio.ShortBuffer shortBuffer24 = byteBuffer3.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 0 + "'", byte21 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(shortBuffer24);
    }

    @Test
    public void test05843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05843");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(10);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer7.putChar('a');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer7.putFloat((float) 0L);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putShort((short) (byte) 0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocate((int) '4');
        int int20 = byteBuffer19.arrayOffset();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer19.putLong((long) (short) 1);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer22.putShort(16, (short) 1);
        java.nio.Buffer buffer27 = byteBuffer25.position(27);
        int int28 = byteBuffer7.compareTo(byteBuffer25);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer7.putLong((long) (short) 256);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(buffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 47 + "'", int28 == 47);
        org.junit.Assert.assertNotNull(byteBuffer30);
    }

    @Test
    public void test05844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05844");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        response23.charset = "Location";
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response23);
        int int29 = response23.statusCode;
        java.lang.String str30 = response23.statusMessage;
        org.jsoup.helper.HttpConnection.Response response31 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response32 = new org.jsoup.helper.HttpConnection.Response(response31);
        org.jsoup.helper.HttpConnection.Response response33 = new org.jsoup.helper.HttpConnection.Response(response31);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test05845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05845");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response12 = response9.cookie("\\Qhi!\\E", "");
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.lang.String str14 = response9.statusMessage();
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response9);
        java.nio.ByteBuffer byteBuffer16 = response9.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = response9.headers();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(byteBuffer16);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test05846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05846");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern3 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer7 = byteBuffer6.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream8 = null; // flaky: pattern3.splitAsStream((java.lang.CharSequence) charBuffer7);
        java.util.regex.Matcher matcher9 = pattern2.matcher((java.lang.CharSequence) charBuffer7);
        java.util.regex.Matcher matcher11 = pattern2.matcher((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.util.function.Predicate<java.lang.String> strPredicate12 = pattern2.asPredicate();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.regex.Pattern pattern16 = null; // flaky: java.util.regex.Pattern.compile("\\Q\\Q\\E\\\\E\\Q\\E", (-6));
        java.lang.String str17 = null; // flaky: pattern16.pattern();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        float float23 = byteBuffer21.getFloat(32);
        boolean boolean24 = byteBuffer21.isDirect();
        java.util.regex.Pattern pattern27 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate28 = pattern27.asPredicate();
        boolean boolean29 = byteBuffer21.equals((java.lang.Object) pattern27);
        java.util.regex.Pattern pattern33 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern33;
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.FloatBuffer floatBuffer45 = byteBuffer40.asFloatBuffer();
        java.nio.CharBuffer charBuffer46 = byteBuffer40.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream47 = null; // flaky: pattern33.splitAsStream((java.lang.CharSequence) charBuffer46);
        boolean boolean48 = java.util.regex.Pattern.matches("\\Q\\E", (java.lang.CharSequence) charBuffer46);
        java.lang.String[] strArray49 = pattern27.split((java.lang.CharSequence) "\\Q\\E");
        java.util.regex.Pattern pattern50 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern50;
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer54 = byteBuffer53.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream55 = null; // flaky: pattern50.splitAsStream((java.lang.CharSequence) charBuffer54);
        java.util.stream.Stream<java.lang.String> strStream56 = pattern27.splitAsStream((java.lang.CharSequence) charBuffer54);
        java.util.regex.Matcher matcher57 = null; // flaky: pattern16.matcher((java.lang.CharSequence) charBuffer54);
        java.lang.String[] strArray59 = pattern2.split((java.lang.CharSequence) charBuffer54, 1117126656);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern3);
// flaky:         org.junit.Assert.assertEquals(pattern3.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
// flaky:         org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(matcher9);
        org.junit.Assert.assertEquals(matcher9.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher11);
        org.junit.Assert.assertEquals(matcher11.toString(), "java.util.regex.Matcher[pattern=hi! region=0,49 lastmatch=]");
        org.junit.Assert.assertNotNull(strPredicate12);
// flaky:         org.junit.Assert.assertNotNull(pattern16);
// flaky:         org.junit.Assert.assertEquals(pattern16.toString(), "\\Q\\Q\\E\\\\E\\Q\\E");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\\Q\\Q\\E\\\\E\\Q\\E" + "'", str17, "\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(pattern27);
        org.junit.Assert.assertEquals(pattern27.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNotNull(pattern33);
// flaky:         org.junit.Assert.assertEquals(pattern33.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(floatBuffer45);
        org.junit.Assert.assertNotNull(charBuffer46);
// flaky:         org.junit.Assert.assertNotNull(strStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray49);
// flaky:         org.junit.Assert.assertNotNull(pattern50);
// flaky:         org.junit.Assert.assertEquals(pattern50.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(charBuffer54);
// flaky:         org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertNotNull(strStream56);
// flaky:         org.junit.Assert.assertNotNull(matcher57);
// flaky:         org.junit.Assert.assertEquals(matcher57.toString(), "java.util.regex.Matcher[pattern=\\Q\\Q\\E\\\\E\\Q\\E region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray59);
    }

    @Test
    public void test05847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05847");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.Socket socket9 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress10 = null;
        java.net.InetAddress inetAddress12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket14 = socketFactory0.createSocket(inetAddress10, 32, inetAddress12, 1405091840);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:1405091840");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=35852]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket9);
        org.junit.Assert.assertEquals(socket9.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05848");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putDouble(7.565251118924485E-307d);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putInt(0);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer17.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer17.putChar(' ');
        float float23 = byteBuffer22.getFloat();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.FloatBuffer floatBuffer34 = byteBuffer29.asFloatBuffer();
        boolean boolean35 = byteBuffer29.isDirect();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        org.jsoup.helper.HttpConnection.Response response46 = null;
        org.jsoup.helper.HttpConnection.Response response47 = new org.jsoup.helper.HttpConnection.Response(response46);
        response47.contentType = "";
        boolean boolean50 = byteBuffer45.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer56 = byteBuffer52.putInt(0);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putInt((int) '#');
        int int59 = byteBuffer45.compareTo(byteBuffer56);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer29.put(byteBuffer56);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer22.put(byteBuffer29);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer22.compact();
        int int63 = byteBuffer9.compareTo(byteBuffer62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.putLong(24, (-1L));
        java.nio.ByteBuffer byteBuffer67 = byteBuffer66.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            int int68 = byteBuffer66.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 58 + "'", int63 == 58);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
    }

    @Test
    public void test05849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05849");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt((int) (short) 1, (-24));
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long33 = byteBuffer32.getLong();
        int int34 = byteBuffer32.position();
        float float36 = byteBuffer32.getFloat((int) (short) 10);
        boolean boolean37 = byteBuffer32.hasArray();
        double double38 = byteBuffer32.getDouble();
        short short40 = byteBuffer32.getShort(0);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer32.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer32.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer45.duplicate();
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.slice();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer49.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.putInt(0);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.put(byteArray56);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer45.get(byteArray56);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer26.put(byteArray56);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer59.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer63 = byteBuffer59.putChar((-20), 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
    }

    @Test
    public void test05850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05850");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response7 = response2.header("hi!", "");
        org.jsoup.Connection.Request request8 = null;
        response2.req = request8;
        response2.executed = true;
        int int12 = response2.numRedirects;
        boolean boolean14 = response2.hasCookie("\\QLocation\\E");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response2);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long18 = byteBuffer17.getLong();
        int int19 = byteBuffer17.position();
        float float21 = byteBuffer17.getFloat((int) (short) 10);
        boolean boolean22 = byteBuffer17.hasArray();
        double double23 = byteBuffer17.getDouble();
        short short25 = byteBuffer17.getShort(0);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer17.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response28 = null;
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response28);
        java.lang.String str31 = response29.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = response29.cookies();
        org.jsoup.Connection.Response response34 = response29.removeCookie("hi!");
        java.lang.String str35 = response29.statusMessage();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.putInt(0);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer45 = byteBuffer41.put(byteArray44);
        boolean boolean46 = byteBuffer41.hasArray();
        response29.byteData = byteBuffer41;
        int int48 = byteBuffer27.compareTo(byteBuffer41);
        java.lang.String str49 = byteBuffer27.toString();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer27.put((byte) 10);
        int int52 = byteBuffer51.limit();
        short short54 = byteBuffer51.getShort((int) 'a');
        response15.byteData = byteBuffer51;
        org.jsoup.helper.HttpConnection.Response response56 = new org.jsoup.helper.HttpConnection.Response(response15);
        org.jsoup.helper.HttpConnection.Response response57 = new org.jsoup.helper.HttpConnection.Response(response56);
        org.jsoup.helper.HttpConnection.Response response58 = new org.jsoup.helper.HttpConnection.Response(response56);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response59 = org.jsoup.helper.HttpConnection.Response.execute(request0, response56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 0 + "'", short25 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-10) + "'", int48 == (-10));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str49, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertTrue("'" + short54 + "' != '" + (short) 0 + "'", short54 == (short) 0);
    }

    @Test
    public void test05851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05851");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer7 = response6.byteData;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        boolean boolean10 = response6.hasHeader("\\Qjava.nio.DirectByteBuffer[pos=27 lim=100 cap=100]\\E");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05852");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer7.compact();
        int int9 = byteBuffer7.capacity();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.slice();
        org.jsoup.helper.HttpConnection.Response response11 = null;
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.lang.String str14 = response12.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = response12.cookies();
        org.jsoup.Connection.Response response17 = response12.removeCookie("hi!");
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry19 = response12.scanHeaders("hi!");
        java.lang.String str20 = response12.charset;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = response12.cookies();
        boolean boolean23 = byteBuffer10.equals((java.lang.Object) response12);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(response17);
        org.junit.Assert.assertNull(strEntry19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test05853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05853");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.Connection.Method method7 = response4.method();
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response4);
        response8.statusMessage = "java.nio.DirectByteBuffer[pos=16 lim=100 cap=100]";
        org.jsoup.Connection.Response response13 = response8.cookie("\\Qjava.nio.DirectByteBuffer[pos=19 lim=100 cap=100]\\E", "\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=22 cap=22]\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNotNull(response13);
    }

    @Test
    public void test05854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05854");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        response1.executed = false;
        java.lang.String str9 = response1.statusMessage();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.nio.ByteBuffer byteBuffer12 = response11.byteData;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.lang.String str15 = response11.contentType();
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(byteBuffer12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test05855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05855");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.nio.ByteBuffer byteBuffer9 = response5.byteData;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        response5.statusMessage = "\\QLocation\\E";
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response13);
        org.jsoup.Connection.Response response16 = response14.removeCookie("java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response14);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNotNull(response16);
    }

    @Test
    public void test05856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05856");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        java.util.regex.Pattern pattern2 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        int int4 = 0; // flaky: pattern2.flags();
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern10 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern11 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern11;
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer15 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream16 = null; // flaky: pattern11.splitAsStream((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher17 = pattern10.matcher((java.lang.CharSequence) charBuffer15);
        java.util.regex.Matcher matcher18 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer15);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer21 = byteBuffer20.asCharBuffer();
        java.util.regex.Matcher matcher22 = null; // flaky: pattern7.matcher((java.lang.CharSequence) charBuffer21);
        java.util.regex.Pattern pattern25 = java.util.regex.Pattern.compile("\\Q\\E", (int) '\n');
        java.util.regex.Pattern pattern28 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern31 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern32 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern32;
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer36 = byteBuffer35.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream37 = null; // flaky: pattern32.splitAsStream((java.lang.CharSequence) charBuffer36);
        java.util.regex.Matcher matcher38 = pattern31.matcher((java.lang.CharSequence) charBuffer36);
        java.util.regex.Matcher matcher39 = null; // flaky: pattern28.matcher((java.lang.CharSequence) charBuffer36);
        java.nio.ByteBuffer byteBuffer41 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer42 = byteBuffer41.asCharBuffer();
        java.util.regex.Matcher matcher43 = null; // flaky: pattern28.matcher((java.lang.CharSequence) charBuffer42);
        java.lang.String[] strArray45 = pattern25.split((java.lang.CharSequence) charBuffer42, 8);
        java.util.regex.Pattern pattern48 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern49 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern49;
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer53 = byteBuffer52.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream54 = pattern49.splitAsStream((java.lang.CharSequence) charBuffer53);
        java.util.regex.Matcher matcher55 = pattern48.matcher((java.lang.CharSequence) charBuffer53);
        java.lang.String[] strArray57 = pattern25.split((java.lang.CharSequence) charBuffer53, (-6));
        java.lang.String[] strArray59 = null; // flaky: pattern7.split((java.lang.CharSequence) charBuffer53, (int) (byte) 10);
        java.util.regex.Matcher matcher60 = pattern2.matcher((java.lang.CharSequence) charBuffer53);
        java.util.regex.Pattern pattern64 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray67 = pattern64.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        int int68 = pattern64.flags();
        java.util.regex.Pattern pattern69 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern69;
        java.util.function.Predicate<java.lang.String> strPredicate71 = pattern69.asPredicate();
        int int72 = pattern69.flags();
        java.util.regex.Pattern pattern73 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern73;
        java.nio.ByteBuffer byteBuffer76 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer77 = byteBuffer76.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream78 = pattern73.splitAsStream((java.lang.CharSequence) charBuffer77);
        java.lang.String[] strArray80 = pattern69.split((java.lang.CharSequence) charBuffer77, (int) (byte) 0);
        java.lang.String[] strArray81 = pattern64.split((java.lang.CharSequence) charBuffer77);
        boolean boolean82 = java.util.regex.Pattern.matches("", (java.lang.CharSequence) charBuffer77);
        java.util.stream.Stream<java.lang.String> strStream83 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer77);
        java.util.regex.Matcher matcher84 = pattern1.matcher((java.lang.CharSequence) charBuffer77);
        java.lang.String str85 = pattern1.pattern();
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern10);
        org.junit.Assert.assertEquals(pattern10.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern11);
        org.junit.Assert.assertEquals(pattern11.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
// flaky:         org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(matcher17);
        org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher18);
// flaky:         org.junit.Assert.assertEquals(matcher18.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
// flaky:         org.junit.Assert.assertNotNull(matcher22);
// flaky:         org.junit.Assert.assertEquals(matcher22.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern25);
        org.junit.Assert.assertEquals(pattern25.toString(), "\\Q\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern28);
// flaky:         org.junit.Assert.assertEquals(pattern28.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern31);
        org.junit.Assert.assertEquals(pattern31.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern32);
        org.junit.Assert.assertEquals(pattern32.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(charBuffer36);
// flaky:         org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(matcher38);
        org.junit.Assert.assertEquals(matcher38.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher39);
// flaky:         org.junit.Assert.assertEquals(matcher39.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
// flaky:         org.junit.Assert.assertNotNull(matcher43);
// flaky:         org.junit.Assert.assertEquals(matcher43.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(pattern48);
        org.junit.Assert.assertEquals(pattern48.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern49);
        org.junit.Assert.assertEquals(pattern49.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(charBuffer53);
        org.junit.Assert.assertNotNull(strStream54);
        org.junit.Assert.assertNotNull(matcher55);
        org.junit.Assert.assertEquals(matcher55.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray57);
// flaky:         org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(matcher60);
        org.junit.Assert.assertEquals(matcher60.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(pattern64);
        org.junit.Assert.assertEquals(pattern64.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(pattern69);
        org.junit.Assert.assertEquals(pattern69.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(pattern73);
        org.junit.Assert.assertEquals(pattern73.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(charBuffer77);
        org.junit.Assert.assertNotNull(strStream78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strStream83);
        org.junit.Assert.assertNotNull(matcher84);
        org.junit.Assert.assertEquals(matcher84.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=0 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]" + "'", str85, "java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
    }

    @Test
    public void test05857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05857");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response7 = response2.header("hi!", "");
        org.jsoup.Connection.Request request8 = null;
        response2.req = request8;
        java.lang.String str10 = response2.charset();
        response2.executed = true;
        response2.contentType = "\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response15 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test05858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05858");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        int int8 = byteBuffer7.remaining();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = byteBuffer7.getDouble((-11));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 80 + "'", int8 == 80);
    }

    @Test
    public void test05859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05859");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int5 = response1.numRedirects;
        int int6 = response1.statusCode();
        response1.contentType = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        boolean boolean11 = response1.hasHeaderWithValue("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E", "\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E");
        org.jsoup.Connection.Request request12 = null;
        response1.req = request12;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request15 = null;
        response1.req = request15;
        java.lang.String str18 = response1.getHeaderCaseInsensitive("\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        java.lang.String str20 = response1.getHeaderCaseInsensitive("\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test05860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05860");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        float float37 = byteBuffer11.getFloat(84);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer11.putFloat(0, (float) 1L);
        boolean boolean41 = byteBuffer11.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test05861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05861");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        boolean boolean25 = response23.hasCookie("java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        response23.charset = "Location";
        org.jsoup.helper.HttpConnection.Response response28 = new org.jsoup.helper.HttpConnection.Response(response23);
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response28);
        java.lang.String str30 = response28.charset;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test05862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05862");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.Connection.Request request10 = null;
        response8.req = request10;
        java.lang.String str12 = response8.contentType;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test05863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05863");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer10.putInt(0);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.put(byteArray17);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer20.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.putInt(0);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.put(byteArray27);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer14.get(byteArray27, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer14.putDouble(100.0d);
        int int34 = byteBuffer8.compareTo(byteBuffer14);
        java.nio.Buffer buffer36 = byteBuffer14.limit((int) (byte) 100);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer14.putLong(4, (long) (short) 10);
        int int40 = byteBuffer14.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(buffer36);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
    }

    @Test
    public void test05864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05864");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response4);
        boolean boolean8 = response6.hasHeader("java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        response6.statusCode = 0;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05865");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        boolean boolean4 = response1.executed;
        response1.charset = "";
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test05866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05866");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar(6, '\n');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer13.slice();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer13.putDouble((double) (-1));
        java.nio.ByteBuffer byteBuffer19 = byteBuffer13.put((int) '#', (byte) 64);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer19);
    }

    @Test
    public void test05867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05867");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = socketFactory0.createSocket(inetAddress9, (-67), inetAddress11, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=35854]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05868");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = 6;
    }

    @Test
    public void test05869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05869");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        int int8 = byteBuffer7.remaining();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer10.putLong((long) '4');
        short short14 = byteBuffer10.getShort(0);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer10.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.ByteBuffer byteBuffer40 = byteBuffer23.get(byteArray36, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer23.putDouble(100.0d);
        int int43 = byteBuffer17.compareTo(byteBuffer23);
        int int44 = byteBuffer17.remaining();
        java.nio.Buffer buffer45 = byteBuffer17.mark();
        java.lang.String str46 = byteBuffer17.toString();
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer48.putLong((long) '4');
        short short52 = byteBuffer48.getShort(0);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer48.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer57 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer57.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.putInt(0);
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer65 = byteBuffer61.put(byteArray64);
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.putInt(0);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer75 = byteBuffer71.put(byteArray74);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer61.get(byteArray74, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer61.putDouble(100.0d);
        int int81 = byteBuffer55.compareTo(byteBuffer61);
        java.nio.ByteBuffer byteBuffer83 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer83.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer87 = byteBuffer83.putInt(0);
        byte[] byteArray90 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer91 = byteBuffer87.put(byteArray90);
        java.nio.ByteOrder byteOrder92 = byteBuffer91.order();
        java.nio.ByteBuffer byteBuffer93 = byteBuffer61.order(byteOrder92);
        java.nio.ByteBuffer byteBuffer94 = byteBuffer17.order(byteOrder92);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer95 = byteBuffer7.put(byteBuffer94);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 80 + "'", int8 == 80);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 0 + "'", short14 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 92 + "'", int44 == 92);
        org.junit.Assert.assertNotNull(buffer45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]" + "'", str46, "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + short52 + "' != '" + (short) 0 + "'", short52 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 14 + "'", int81 == 14);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteOrder92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
    }

    @Test
    public void test05870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05870");
        org.jsoup.Connection.Request request0 = null;
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response.writePost(request0, outputStream1, "java.nio.DirectByteBuffer[pos=40 lim=100 cap=100]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test05871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05871");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        float float11 = byteBuffer10.getFloat();
        java.nio.DoubleBuffer doubleBuffer12 = byteBuffer10.asDoubleBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer13 = byteBuffer10.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(doubleBuffer12);
    }

    @Test
    public void test05872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05872");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        response1.charset = "\\Q\\E";
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.Connection.Method method13 = response12.method();
        org.jsoup.Connection.Response response16 = response12.header("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=0 lim=22 cap=100]");
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response12);
        org.jsoup.helper.HttpConnection.Response response18 = new org.jsoup.helper.HttpConnection.Response(response17);
        java.lang.String str19 = response18.contentType();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test05873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05873");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        java.nio.CharBuffer charBuffer58 = byteBuffer57.asCharBuffer();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer57.compact();
        java.nio.DoubleBuffer doubleBuffer60 = byteBuffer57.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(charBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(doubleBuffer60);
    }

    @Test
    public void test05874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05874");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=23 lim=100 cap=100]", 320);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=23 lim=100 cap=100]");
    }

    @Test
    public void test05875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05875");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        int int5 = byteBuffer3.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.put(byteArray24);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer11.get(byteArray24, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer3.get(byteArray24);
        java.nio.ShortBuffer shortBuffer30 = byteBuffer3.asShortBuffer();
        java.nio.ByteBuffer byteBuffer32 = byteBuffer3.putLong((long) 88);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer3.putChar(6, '\u4120');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer3.compact();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(shortBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
    }

    @Test
    public void test05876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05876");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        org.jsoup.Connection.Response response15 = response1.cookie("Location", "\\Q\\E");
        java.lang.String str17 = response1.header("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(response15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test05877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05877");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("hi!");
        java.nio.ByteBuffer byteBuffer9 = response1.byteData;
        response1.charset = "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]";
        org.jsoup.Connection.Response response13 = response1.removeHeader("\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int15 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNotNull(response13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test05878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05878");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response4.scanHeaders("\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E");
        int int10 = response4.statusCode();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test05879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05879");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.Connection.Response response9 = response1.removeHeader("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response12 = response10.removeCookie("java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]");
        org.jsoup.Connection.Response response15 = response10.header("\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E", "java.nio.HeapByteBuffer[pos=2 lim=64 cap=64]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNotNull(response15);
    }

    @Test
    public void test05880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05880");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putShort((short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putChar('#');
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long12 = byteBuffer11.getLong();
        int int13 = byteBuffer11.position();
        float float15 = byteBuffer11.getFloat((int) (short) 10);
        boolean boolean16 = byteBuffer11.hasArray();
        double double17 = byteBuffer11.getDouble();
        short short19 = byteBuffer11.getShort(0);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer11.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer11.compact();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer11.putLong((long) 128);
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putInt((int) '#');
        float float34 = byteBuffer32.getFloat(4);
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer40.get(byteArray53, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.putInt(0);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.put(byteArray66);
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.put(byteArray76);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer63.get(byteArray76, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer57.put(byteArray76);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer32.put(byteArray76);
        java.nio.ByteBuffer byteBuffer83 = java.nio.ByteBuffer.wrap(byteArray76);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer11.put(byteArray76);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer5.put(byteArray76);
        java.nio.ByteBuffer byteBuffer88 = byteBuffer5.put(48, (byte) 64);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.0f + "'", float15 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 7.3E-44f + "'", float34 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer88);
    }

    @Test
    public void test05881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05881");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str13 = response1.statusMessage;
        boolean boolean14 = response1.executed;
        response1.numRedirects = (-35);
        int int17 = response1.numRedirects;
        boolean boolean19 = response1.hasHeader("\\Qjava.nio.DirectByteBuffer[pos=15 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-35) + "'", int17 == (-35));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test05882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05882");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern3 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer7 = byteBuffer6.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream8 = null; // flaky: pattern3.splitAsStream((java.lang.CharSequence) charBuffer7);
        java.util.regex.Matcher matcher9 = pattern2.matcher((java.lang.CharSequence) charBuffer7);
        java.util.regex.Matcher matcher11 = pattern2.matcher((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        java.util.stream.Stream<java.lang.String> strStream13 = pattern2.splitAsStream((java.lang.CharSequence) "Location");
        java.util.regex.Pattern pattern16 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern19 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern20 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern20;
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer24 = byteBuffer23.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream25 = null; // flaky: pattern20.splitAsStream((java.lang.CharSequence) charBuffer24);
        java.util.regex.Matcher matcher26 = pattern19.matcher((java.lang.CharSequence) charBuffer24);
        java.util.regex.Matcher matcher27 = null; // flaky: pattern16.matcher((java.lang.CharSequence) charBuffer24);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long30 = byteBuffer29.getLong();
        int int31 = byteBuffer29.position();
        float float33 = byteBuffer29.getFloat((int) (short) 10);
        boolean boolean34 = byteBuffer29.hasArray();
        double double35 = byteBuffer29.getDouble();
        java.nio.ByteBuffer byteBuffer38 = byteBuffer29.putFloat(0, (float) (short) 10);
        java.nio.CharBuffer charBuffer39 = byteBuffer29.asCharBuffer();
        java.lang.String[] strArray41 = null; // flaky: pattern16.split((java.lang.CharSequence) charBuffer39, 12);
        java.lang.String[] strArray42 = pattern2.split((java.lang.CharSequence) charBuffer39);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.lang.String str44 = pattern2.pattern();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern3);
// flaky:         org.junit.Assert.assertEquals(pattern3.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
// flaky:         org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(matcher9);
        org.junit.Assert.assertEquals(matcher9.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(matcher11);
        org.junit.Assert.assertEquals(matcher11.toString(), "java.util.regex.Matcher[pattern=hi! region=0,49 lastmatch=]");
        org.junit.Assert.assertNotNull(strStream13);
// flaky:         org.junit.Assert.assertNotNull(pattern16);
// flaky:         org.junit.Assert.assertEquals(pattern16.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern19);
        org.junit.Assert.assertEquals(pattern19.toString(), "hi!");
        org.junit.Assert.assertNotNull(pattern20);
        org.junit.Assert.assertEquals(pattern20.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(charBuffer24);
// flaky:         org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertNotNull(matcher26);
        org.junit.Assert.assertEquals(matcher26.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher27);
// flaky:         org.junit.Assert.assertEquals(matcher27.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(charBuffer39);
// flaky:         org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
    }

    @Test
    public void test05883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05883");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        boolean boolean80 = byteBuffer25.hasArray();
        java.nio.DoubleBuffer doubleBuffer81 = byteBuffer25.asDoubleBuffer();
        boolean boolean82 = byteBuffer25.isDirect();
        java.nio.ByteBuffer byteBuffer84 = byteBuffer25.putChar('?');
        java.nio.ByteBuffer byteBuffer86 = byteBuffer25.putFloat((float) 18);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleBuffer81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer86);
    }

    @Test
    public void test05884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05884");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (int) 'a');
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.lang.String str4 = pattern2.pattern();
        java.lang.String str5 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str4, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str5, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
    }

    @Test
    public void test05885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05885");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putDouble(8, (double) 256);
        java.nio.DoubleBuffer doubleBuffer15 = byteBuffer11.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer11.putChar('\u2000');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
    }

    @Test
    public void test05886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05886");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        response1.executed = true;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("");
        java.lang.String str10 = response1.getHeaderCaseInsensitive("Location");
        java.lang.String str11 = response1.charset();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = response1.cookies();
        java.lang.String str14 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response17 = new org.jsoup.helper.HttpConnection.Response(response16);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        org.jsoup.helper.HttpConnection.Response response28 = null;
        org.jsoup.helper.HttpConnection.Response response29 = new org.jsoup.helper.HttpConnection.Response(response28);
        response29.contentType = "";
        boolean boolean32 = byteBuffer27.equals((java.lang.Object) "");
        java.nio.ByteBuffer byteBuffer35 = byteBuffer27.putShort(92, (short) (byte) 0);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        java.lang.String str39 = response37.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = response37.cookies();
        org.jsoup.helper.HttpConnection.Response response41 = new org.jsoup.helper.HttpConnection.Response(response37);
        org.jsoup.helper.HttpConnection.Response response42 = new org.jsoup.helper.HttpConnection.Response(response37);
        org.jsoup.helper.HttpConnection.Response response43 = new org.jsoup.helper.HttpConnection.Response(response42);
        org.jsoup.helper.HttpConnection.Response response44 = new org.jsoup.helper.HttpConnection.Response(response42);
        org.jsoup.Connection.Response response46 = response42.removeCookie("Location");
        org.jsoup.helper.HttpConnection.Response response47 = new org.jsoup.helper.HttpConnection.Response(response42);
        boolean boolean48 = byteBuffer27.equals((java.lang.Object) response47);
        response17.byteData = byteBuffer27;
        java.nio.ByteBuffer byteBuffer50 = byteBuffer27.duplicate();
        int int51 = byteBuffer50.getInt();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(response46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test05887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05887");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response6 = response1.header("hi!", "");
        org.jsoup.Connection.Request request7 = null;
        response1.req = request7;
        java.lang.String str9 = response1.charset();
        boolean boolean12 = response1.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", "Location");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request15 = response14.req;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(request15);
    }

    @Test
    public void test05888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05888");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Response response9 = response1.header("\\Q\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E\\\\E\\Q\\E", "\\Qhi!\\E");
        org.jsoup.Connection.Method method10 = response1.method();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNull(method10);
    }

    @Test
    public void test05889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05889");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        org.jsoup.Connection.Response response7 = response2.header("hi!", "");
        org.jsoup.Connection.Request request8 = null;
        response2.req = request8;
        response2.executed = true;
        int int12 = response2.numRedirects;
        int int13 = response2.statusCode;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response14 = org.jsoup.helper.HttpConnection.Response.execute(request0, response2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05890");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        java.nio.CharBuffer charBuffer11 = byteBuffer5.asCharBuffer();
        java.nio.Buffer buffer12 = byteBuffer5.flip();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putDouble((double) 6);
        int int15 = byteBuffer5.getInt();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test05891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05891");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer5.putDouble((double) 128);
        float float13 = byteBuffer5.getFloat();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
    }

    @Test
    public void test05892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05892");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        org.jsoup.helper.HttpConnection.Response response36 = null;
        org.jsoup.helper.HttpConnection.Response response37 = new org.jsoup.helper.HttpConnection.Response(response36);
        response37.contentType = "";
        java.lang.String str40 = response37.contentType;
        response37.executed = true;
        java.lang.String str43 = response37.statusMessage;
        java.nio.ByteBuffer byteBuffer44 = response37.byteData;
        boolean boolean45 = byteBuffer35.equals((java.lang.Object) response37);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer35.duplicate();
        java.nio.ByteBuffer byteBuffer49 = byteBuffer35.putLong(0, 1L);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer49.compact();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer50);
    }

    @Test
    public void test05893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05893");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        response4.executed = false;
        int int8 = response4.numRedirects;
        response4.statusCode = 0;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response4);
        boolean boolean13 = response11.hasHeader("java.nio.DirectByteBuffer[pos=12 lim=100 cap=100]");
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.DoubleBuffer doubleBuffer21 = byteBuffer15.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer15.putDouble((double) 10);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer15.slice();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer24.putLong(19, (long) 1117126656);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.slice();
        response11.byteData = byteBuffer24;
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer28);
    }

    @Test
    public void test05894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05894");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.CharBuffer charBuffer6 = byteBuffer1.asCharBuffer();
        java.nio.Buffer buffer8 = byteBuffer1.position((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putChar(79, '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer8);
    }

    @Test
    public void test05895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05895");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer5.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer15 = byteBuffer5.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putInt(0);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putInt((int) '#');
        byte byte25 = byteBuffer21.get(1);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer21.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer21.slice();
        int int30 = byteBuffer29.remaining();
        int int31 = byteBuffer5.compareTo(byteBuffer29);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long34 = byteBuffer33.getLong();
        int int35 = byteBuffer33.position();
        float float37 = byteBuffer33.getFloat((int) (short) 10);
        boolean boolean38 = byteBuffer33.hasArray();
        double double39 = byteBuffer33.getDouble();
        short short41 = byteBuffer33.getShort(0);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer33.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer33.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer46.duplicate();
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.slice();
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer46.get(byteArray57);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer29.get(byteArray57);
        java.nio.ByteBuffer byteBuffer61 = java.nio.ByteBuffer.wrap(byteArray57);
        java.nio.LongBuffer longBuffer62 = byteBuffer61.asLongBuffer();
        // The following exception was thrown during execution in test generation
        try {
            double double63 = byteBuffer61.getDouble();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 84 + "'", int30 == 84);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(longBuffer62);
    }

    @Test
    public void test05896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05896");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry7 = response5.scanHeaders("hi!");
        java.lang.String str8 = response5.statusMessage;
        org.jsoup.Connection.Request request9 = response5.req;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Response response14 = response12.removeHeader("\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E");
        boolean boolean16 = response12.hasCookie("java.nio.DirectByteBuffer[pos=91 lim=100 cap=100]");
        java.net.HttpURLConnection httpURLConnection17 = null;
        org.jsoup.helper.HttpConnection.Response response18 = null;
        org.jsoup.helper.HttpConnection.Response response19 = new org.jsoup.helper.HttpConnection.Response(response18);
        response19.contentType = "";
        java.lang.String str22 = response19.contentType;
        response19.executed = true;
        response19.executed = false;
        int int27 = response19.numRedirects;
        // The following exception was thrown during execution in test generation
        try {
            response12.setupFromConnection(httpURLConnection17, (org.jsoup.Connection.Response) response19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(strEntry7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(request9);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test05897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05897");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        boolean boolean6 = response1.hasHeader("hi!");
        boolean boolean8 = response1.hasHeader("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        java.lang.String str9 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int11 = response1.statusCode();
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test05898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05898");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.CharBuffer charBuffer12 = byteBuffer1.asCharBuffer();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long15 = byteBuffer14.getLong();
        int int16 = byteBuffer14.position();
        float float18 = byteBuffer14.getFloat((int) (short) 10);
        boolean boolean19 = byteBuffer14.hasArray();
        double double20 = byteBuffer14.getDouble();
        short short22 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer14.putDouble(100.0d);
        float float25 = byteBuffer14.getFloat();
        char char27 = byteBuffer14.getChar(1);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putDouble(7.565251118924485E-307d);
        int int40 = byteBuffer14.compareTo(byteBuffer39);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer14.putShort((short) (byte) -1);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 0 };
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.put(byteArray45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer1.put(byteArray45);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.wrap(byteArray45);
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.wrap(byteArray45);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.wrap(byteArray45);
        java.nio.Buffer buffer51 = byteBuffer50.flip();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-6) + "'", int40 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 0]");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(buffer51);
    }

    @Test
    public void test05899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05899");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(59);
        boolean boolean2 = byteBuffer1.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test05900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05900");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=0 lim=22 cap=100]");
        int int2 = pattern1.flags();
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "java.nio.DirectByteBuffer[pos=0 lim=22 cap=100]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test05901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05901");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        java.lang.String str81 = response1.statusMessage;
        org.jsoup.helper.HttpConnection.Response response82 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response85 = response82.header("\\Q\\Qjava.nio.DirectByteBuffer[pos=35 lim=100 cap=100]\\E\\\\E\\Q\\E", "\\Qhi!\\E");
        org.jsoup.helper.HttpConnection.Response response86 = new org.jsoup.helper.HttpConnection.Response(response82);
        org.jsoup.Connection.Method method87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.Connection.Response response88 = response86.method(method87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(response85);
    }

    @Test
    public void test05902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05902");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        int int7 = response6.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response6.scanHeaders("Location");
        java.lang.String str11 = response6.cookie("Location");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response6);
        java.lang.String str13 = response6.charset();
        java.lang.String str15 = response6.cookie("java.nio.DirectByteBuffer[pos=0 lim=84 cap=84]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test05903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05903");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (-65536));
        java.util.regex.Pattern pattern5 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(0);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.put(byteArray14);
        java.nio.CharBuffer charBuffer16 = byteBuffer11.asCharBuffer();
        java.util.regex.Matcher matcher17 = pattern5.matcher((java.lang.CharSequence) charBuffer16);
        java.util.stream.Stream<java.lang.String> strStream18 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) charBuffer16);
        java.util.regex.Pattern pattern22 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray25 = pattern22.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        int int26 = pattern22.flags();
        java.util.regex.Pattern pattern27 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern27;
        java.util.function.Predicate<java.lang.String> strPredicate29 = null; // flaky: pattern27.asPredicate();
        int int30 = pattern27.flags();
        java.util.regex.Pattern pattern31 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern31;
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer35 = byteBuffer34.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream36 = pattern31.splitAsStream((java.lang.CharSequence) charBuffer35);
        java.lang.String[] strArray38 = pattern27.split((java.lang.CharSequence) charBuffer35, (int) (byte) 0);
        java.lang.String[] strArray39 = pattern22.split((java.lang.CharSequence) charBuffer35);
        boolean boolean40 = java.util.regex.Pattern.matches("", (java.lang.CharSequence) charBuffer35);
        java.lang.String[] strArray42 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer35, (-2));
        int int43 = 0; // flaky: pattern2.flags();
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern5);
        org.junit.Assert.assertEquals(pattern5.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(matcher17);
        org.junit.Assert.assertEquals(matcher17.toString(), "java.util.regex.Matcher[pattern=\\Qhi!\\E region=0,43 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(pattern22);
        org.junit.Assert.assertEquals(pattern22.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(pattern27);
        org.junit.Assert.assertEquals(pattern27.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(strPredicate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(pattern31);
        org.junit.Assert.assertEquals(pattern31.toString(), "hi!");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(charBuffer35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-65536) + "'", int43 == (-65536));
    }

    @Test
    public void test05904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05904");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response4);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry9 = response4.scanHeaders("\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E");
        boolean boolean12 = response4.hasHeaderWithValue("\\Q\\Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\E\\\\E\\Q\\E", "\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strEntry9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05905");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer12 = byteBuffer1.compact();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.putLong((long) 128);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putInt(100, 70);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
    }

    @Test
    public void test05906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05906");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response9);
        boolean boolean12 = response9.hasCookie("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        response9.statusMessage = "\\Q\\Qjava.nio.DirectByteBuffer[pos=0 lim=100 cap=100]\\E\\\\E\\Q\\E";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05907");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.Connection.Request request7 = null;
        response5.req = request7;
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response5);
        java.lang.String str10 = response5.contentType();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        response5.executed = true;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response5);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test05908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05908");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        byte byte13 = byteBuffer11.get((int) (short) 0);
        java.nio.Buffer buffer14 = byteBuffer11.rewind();
        java.nio.Buffer buffer15 = byteBuffer11.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(buffer15);
    }

    @Test
    public void test05909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05909");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        java.lang.String str7 = response1.statusMessage();
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        java.lang.String str10 = response9.contentType;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test05910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05910");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response6);
        int int10 = response6.statusCode();
        response6.contentType = "\\Q\\E";
        java.net.URL uRL13 = response6.url();
        org.jsoup.Connection.Response response16 = response6.header("\\QLocation\\E", "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.jsoup.Connection.Response response19 = response6.header("java.nio.DirectByteBuffer[pos=0 lim=76 cap=76]", "\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=22 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = response6.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(uRL13);
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertNotNull(response19);
    }

    @Test
    public void test05911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05911");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        org.jsoup.helper.HttpConnection.Response response4 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str6 = response4.getHeaderCaseInsensitive("hi!");
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response4);
        response7.executed = true;
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response7);
        org.jsoup.Connection.Request request12 = response11.req;
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry14 = response11.scanHeaders("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response11);
        org.jsoup.helper.HttpConnection.Response response16 = new org.jsoup.helper.HttpConnection.Response(response15);
        boolean boolean19 = response16.hasHeaderWithValue("java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
        org.jsoup.Connection.Response response22 = response16.header("java.nio.DirectByteBuffer[pos=100 lim=100 cap=100]", "java.nio.DirectByteBuffer[pos=15 lim=100 cap=100]");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(request12);
        org.junit.Assert.assertNull(strEntry14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(response22);
    }

    @Test
    public void test05912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05912");
        org.jsoup.helper.HttpConnection.Response.LOCATION = "\\Qjava.nio.DirectByteBuffer[pos=12 lim=32 cap=100]\\E";
    }

    @Test
    public void test05913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05913");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        java.net.Socket socket8 = socketFactory0.createSocket(inetAddress6, 25);
        java.net.InetAddress inetAddress9 = null;
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = socketFactory0.createSocket(inetAddress9, 33, inetAddress11, 30);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
// flaky:         org.junit.Assert.assertEquals(socket8.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=35856]");
    }

    @Test
    public void test05914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05914");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = response1.headers();
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response9 = new org.jsoup.helper.HttpConnection.Response(response8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = response9.cookies();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response9);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response11);
        java.lang.String str14 = response12.getHeaderCaseInsensitive("\\Qjava.nio.DirectByteBuffer[pos=16 lim=100 cap=100]\\E");
        response12.charset = "\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E";
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test05915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05915");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.putLong(8, (long) (short) 1);
        java.nio.Buffer buffer10 = byteBuffer9.clear();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long14 = byteBuffer13.getLong();
        int int15 = byteBuffer13.position();
        float float17 = byteBuffer13.getFloat((int) (short) 10);
        boolean boolean18 = byteBuffer13.hasArray();
        double double19 = byteBuffer13.getDouble();
        short short21 = byteBuffer13.getShort(0);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer13.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response24 = null;
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response24);
        java.lang.String str27 = response25.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = response25.cookies();
        org.jsoup.Connection.Response response30 = response25.removeCookie("hi!");
        java.lang.String str31 = response25.statusMessage();
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.putInt(0);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer41 = byteBuffer37.put(byteArray40);
        boolean boolean42 = byteBuffer37.hasArray();
        response25.byteData = byteBuffer37;
        int int44 = byteBuffer23.compareTo(byteBuffer37);
        java.lang.String str45 = byteBuffer23.toString();
        java.nio.ByteBuffer byteBuffer47 = byteBuffer23.put((byte) 10);
        int int48 = byteBuffer47.limit();
        short short50 = byteBuffer47.getShort((int) 'a');
        java.nio.ByteBuffer byteBuffer52 = byteBuffer47.putInt((int) '\u4120');
        java.nio.ByteOrder byteOrder53 = byteBuffer52.order();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer11.order(byteOrder53);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 0 + "'", short21 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(response30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-10) + "'", int44 == (-10));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str45, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + short50 + "' != '" + (short) 0 + "'", short50 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteOrder53);
        org.junit.Assert.assertNotNull(byteBuffer54);
    }

    @Test
    public void test05916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05916");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.CharBuffer charBuffer11 = byteBuffer10.asCharBuffer();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putLong((long) '4');
        short short17 = byteBuffer13.getShort(0);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer13.putDouble((int) '\n', 2.57E-322d);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putInt((int) '#');
        byte byte30 = byteBuffer26.get(1);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer26.put(14, (byte) -1);
        java.nio.FloatBuffer floatBuffer34 = byteBuffer33.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putInt((int) '#');
        float float44 = byteBuffer42.getFloat(4);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer56.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer60 = byteBuffer56.putInt(0);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer64 = byteBuffer60.put(byteArray63);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer50.get(byteArray63, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.put(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer79.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer83 = byteBuffer79.putInt(0);
        byte[] byteArray86 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer87 = byteBuffer83.put(byteArray86);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer73.get(byteArray86, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer67.put(byteArray86);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer42.put(byteArray86);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer33.get(byteArray86);
        java.nio.ByteBuffer byteBuffer94 = java.nio.ByteBuffer.wrap(byteArray86);
        java.nio.ByteBuffer byteBuffer95 = byteBuffer20.get(byteArray86);
        java.nio.ByteBuffer byteBuffer96 = byteBuffer10.put(byteArray86);
        java.nio.ShortBuffer shortBuffer97 = byteBuffer10.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 0 + "'", byte30 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 7.3E-44f + "'", float44 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(byteBuffer95);
        org.junit.Assert.assertNotNull(byteBuffer96);
        org.junit.Assert.assertNotNull(shortBuffer97);
    }

    @Test
    public void test05917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05917");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry8 = response1.scanHeaders("hi!");
        java.nio.ByteBuffer byteBuffer9 = response1.byteData;
        java.lang.String str10 = response1.contentType();
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Response response13 = response11.removeCookie("java.nio.DirectByteBufferR[pos=12 lim=100 cap=100]");
        java.lang.String str14 = response11.statusMessage();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(strEntry8);
        org.junit.Assert.assertNull(byteBuffer9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(response13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test05918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05918");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer5.putDouble(100.0d);
        boolean boolean25 = byteBuffer5.isDirect();
        double double26 = byteBuffer5.getDouble();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer5.putDouble((double) 84);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer28);
    }

    @Test
    public void test05919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05919");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer1.putInt(88);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer1.putChar('\000');
        // The following exception was thrown during execution in test generation
        try {
            short short11 = byteBuffer1.getShort(256);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
    }

    @Test
    public void test05920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05920");
        java.util.regex.Pattern pattern3 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        java.util.stream.Stream<java.lang.String> strStream6 = null; // flaky: pattern3.splitAsStream((java.lang.CharSequence) "java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.lang.String str7 = null; // flaky: pattern3.pattern();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern3;
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.FloatBuffer floatBuffer21 = byteBuffer16.asFloatBuffer();
        java.nio.CharBuffer charBuffer22 = byteBuffer16.asCharBuffer();
        boolean boolean23 = java.util.regex.Pattern.matches("", (java.lang.CharSequence) charBuffer22);
        java.lang.String[] strArray24 = null; // flaky: pattern3.split((java.lang.CharSequence) charBuffer22);
        java.nio.Buffer buffer25 = charBuffer22.mark();
        boolean boolean26 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=24 lim=84 cap=84]", (java.lang.CharSequence) charBuffer22);
// flaky:         org.junit.Assert.assertNotNull(pattern3);
// flaky:         org.junit.Assert.assertEquals(pattern3.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strStream6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str7, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(floatBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test05921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05921");
        org.jsoup.Connection.Request request0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = null;
        org.jsoup.helper.HttpConnection.Response response2 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str4 = response2.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = response2.cookies();
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response2);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response2);
        int int8 = response7.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry10 = response7.scanHeaders("Location");
        java.lang.String str11 = response7.charset;
        int int12 = response7.numRedirects;
        boolean boolean14 = response7.hasCookie("java.nio.DirectByteBuffer[pos=32 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response7);
        java.net.URL uRL16 = response15.url();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response17 = org.jsoup.helper.HttpConnection.Response.execute(request0, response15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(strEntry10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(uRL16);
    }

    @Test
    public void test05922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05922");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.helper.HttpConnection.Response response20 = new org.jsoup.helper.HttpConnection.Response(response1);
        boolean boolean21 = response20.executed;
        org.jsoup.helper.HttpConnection.Response response22 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response23 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response24 = new org.jsoup.helper.HttpConnection.Response(response20);
        org.jsoup.helper.HttpConnection.Response response25 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.lang.String str26 = response25.statusMessage;
        org.jsoup.helper.HttpConnection.Response response27 = new org.jsoup.helper.HttpConnection.Response(response25);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long30 = byteBuffer29.getLong();
        int int31 = byteBuffer29.position();
        float float33 = byteBuffer29.getFloat((int) (short) 10);
        boolean boolean34 = byteBuffer29.hasArray();
        double double35 = byteBuffer29.getDouble();
        short short37 = byteBuffer29.getShort(0);
        java.nio.ShortBuffer shortBuffer38 = byteBuffer29.asShortBuffer();
        java.nio.Buffer buffer40 = byteBuffer29.position((int) '#');
        int int41 = byteBuffer29.capacity();
        response27.byteData = byteBuffer29;
        char char43 = byteBuffer29.getChar();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = byteBuffer29.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 0 + "'", short37 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer38);
        org.junit.Assert.assertNotNull(buffer40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + char43 + "' != '" + '\000' + "'", char43 == '\000');
    }

    @Test
    public void test05923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05923");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        org.jsoup.Connection.Request request8 = response1.req;
        java.net.URL uRL9 = response1.url();
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str16 = response14.getHeaderCaseInsensitive("\\Qjava.nio.DirectByteBuffer[pos=15 lim=100 cap=100]\\E");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = response14.cookies();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(request8);
        org.junit.Assert.assertNull(uRL9);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test05924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05924");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.IntBuffer intBuffer11 = byteBuffer5.asIntBuffer();
        char char13 = byteBuffer5.getChar((int) (short) 1);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        byte byte21 = byteBuffer15.get();
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer23.putLong((long) '4');
        short short27 = byteBuffer23.getShort(0);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer23.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer36.putDouble(100.0d);
        int int56 = byteBuffer30.compareTo(byteBuffer36);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteOrder byteOrder67 = byteBuffer66.order();
        java.nio.ByteBuffer byteBuffer68 = byteBuffer36.order(byteOrder67);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer15.order(byteOrder67);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer5.order(byteOrder67);
        java.nio.ByteBuffer byteBuffer72 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long73 = byteBuffer72.getLong();
        int int74 = byteBuffer72.position();
        float float76 = byteBuffer72.getFloat((int) (short) 10);
        boolean boolean77 = byteBuffer72.hasArray();
        double double78 = byteBuffer72.getDouble();
        short short80 = byteBuffer72.getShort(0);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer72.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer72.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer85.slice();
        java.nio.ByteOrder byteOrder87 = byteBuffer86.order();
        java.nio.ByteBuffer byteBuffer88 = byteBuffer70.put(byteBuffer86);
        java.nio.DoubleBuffer doubleBuffer89 = byteBuffer70.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + '\u3ff0' + "'", char13 == '\u3ff0');
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 0 + "'", byte21 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 14 + "'", int56 == 14);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteOrder67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 8 + "'", int74 == 8);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + 0.0f + "'", float76 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + short80 + "' != '" + (short) 0 + "'", short80 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteOrder87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(doubleBuffer89);
    }

    @Test
    public void test05925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05925");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str5 = response1.cookie("hi!");
        int int6 = response1.statusCode();
        org.jsoup.Connection.Request request7 = response1.req;
        org.jsoup.helper.HttpConnection.Response response8 = new org.jsoup.helper.HttpConnection.Response(response1);
        java.lang.String str9 = response8.contentType;
        java.lang.String str11 = response8.cookie("\\Q\\Q\\E\\\\E\\Q\\E");
        org.jsoup.helper.HttpConnection.Response response12 = new org.jsoup.helper.HttpConnection.Response(response8);
        java.lang.String str13 = response8.charset;
        org.jsoup.helper.HttpConnection.Response response14 = new org.jsoup.helper.HttpConnection.Response(response8);
        org.jsoup.helper.HttpConnection.Response response15 = new org.jsoup.helper.HttpConnection.Response(response14);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = response14.bodyAsBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request must be executed (with .execute(), .get(), or .post() before getting response body");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(request7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test05926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05926");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        int int5 = response1.numRedirects;
        org.jsoup.helper.HttpConnection.Response response6 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.helper.HttpConnection.Response response7 = new org.jsoup.helper.HttpConnection.Response(response6);
        response6.contentType = "\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E";
        org.jsoup.helper.HttpConnection.Response response10 = new org.jsoup.helper.HttpConnection.Response(response6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test05927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05927");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putInt(10);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer7.putChar('a');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer7.putFloat((float) 0L);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer7.putShort((short) (byte) 0);
        int int18 = byteBuffer17.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test05928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05928");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress6 = null;
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket(inetAddress6, 79, inetAddress8, 1405091840);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: port out of range:1405091840");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05929");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        org.jsoup.helper.HttpConnection.Response response5 = new org.jsoup.helper.HttpConnection.Response(response1);
        org.jsoup.Connection.Request request6 = null;
        response5.req = request6;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = response5.cookies();
        java.lang.String str10 = response5.getHeaderCaseInsensitive("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response5);
        int int12 = response5.numRedirects;
        java.lang.String str13 = response5.contentType;
        org.jsoup.Connection.Method method14 = response5.method();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(method14);
    }

    @Test
    public void test05930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05930");
        org.jsoup.helper.HttpConnection.Response.MAX_REDIRECTS = (-16);
    }

    @Test
    public void test05931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05931");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putInt((int) (short) 10);
        java.nio.ShortBuffer shortBuffer27 = byteBuffer26.asShortBuffer();
        long long29 = byteBuffer26.getLong((int) '?');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(shortBuffer27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test05932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05932");
        java.util.regex.Pattern pattern2 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.util.function.Predicate<java.lang.String> strPredicate4 = null; // flaky: pattern2.asPredicate();
        java.lang.String str5 = null; // flaky: pattern2.pattern();
        java.util.regex.Pattern pattern9 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern12 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern13 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern13;
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer17 = byteBuffer16.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream18 = null; // flaky: pattern13.splitAsStream((java.lang.CharSequence) charBuffer17);
        java.util.regex.Matcher matcher19 = pattern12.matcher((java.lang.CharSequence) charBuffer17);
        java.util.regex.Matcher matcher20 = null; // flaky: pattern9.matcher((java.lang.CharSequence) charBuffer17);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer23 = byteBuffer22.asCharBuffer();
        java.util.regex.Matcher matcher24 = null; // flaky: pattern9.matcher((java.lang.CharSequence) charBuffer23);
        boolean boolean25 = java.util.regex.Pattern.matches("\\QLocation\\E", (java.lang.CharSequence) charBuffer23);
        java.lang.String[] strArray27 = null; // flaky: pattern2.split((java.lang.CharSequence) charBuffer23, 1);
        int int28 = 0; // flaky: pattern2.flags();
        int int29 = 0; // flaky: pattern2.flags();
        java.lang.String str30 = null; // flaky: pattern2.pattern();
        java.util.stream.Stream<java.lang.String> strStream32 = null; // flaky: pattern2.splitAsStream((java.lang.CharSequence) "\\Qjava.nio.DirectByteBuffer[pos=0 lim=82 cap=82]\\E");
// flaky:         org.junit.Assert.assertNotNull(pattern2);
// flaky:         org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strPredicate4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str5, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(pattern9);
// flaky:         org.junit.Assert.assertEquals(pattern9.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern12);
        org.junit.Assert.assertEquals(pattern12.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern13);
// flaky:         org.junit.Assert.assertEquals(pattern13.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
// flaky:         org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(matcher19);
        org.junit.Assert.assertEquals(matcher19.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher20);
// flaky:         org.junit.Assert.assertEquals(matcher20.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(charBuffer23);
// flaky:         org.junit.Assert.assertNotNull(matcher24);
// flaky:         org.junit.Assert.assertEquals(matcher24.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertNotNull(strArray27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-24) + "'", int28 == (-24));
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-24) + "'", int29 == (-24));
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str30, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertNotNull(strStream32);
    }

    @Test
    public void test05933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05933");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer16.get(byteArray29, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer39.get(byteArray52, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer33.put(byteArray52);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer5.put(byteArray52);
        java.nio.ByteOrder byteOrder59 = null;
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.order(byteOrder59);
        java.nio.Buffer buffer61 = byteBuffer60.mark();
        // The following exception was thrown during execution in test generation
        try {
            float float63 = byteBuffer60.getFloat((int) '\uffff');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(buffer61);
    }

    @Test
    public void test05934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05934");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        double double13 = byteBuffer1.getDouble(20);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.slice();
        java.nio.IntBuffer intBuffer15 = byteBuffer14.asIntBuffer();
        byte byte17 = byteBuffer14.get(46);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long20 = byteBuffer19.getLong();
        int int21 = byteBuffer19.position();
        float float23 = byteBuffer19.getFloat((int) (short) 10);
        boolean boolean24 = byteBuffer19.hasArray();
        double double25 = byteBuffer19.getDouble();
        short short27 = byteBuffer19.getShort(0);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer19.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer19.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer32.duplicate();
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.duplicate();
        java.nio.ByteOrder byteOrder35 = byteBuffer34.order();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer14.order(byteOrder35);
        java.nio.Buffer buffer38 = byteBuffer14.position((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer39 = byteBuffer14.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(intBuffer15);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteOrder35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(buffer38);
    }

    @Test
    public void test05935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05935");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        double double16 = byteBuffer9.getDouble(0);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer9.putInt((int) '\000', 23);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putDouble((double) 28);
        java.nio.LongBuffer longBuffer22 = byteBuffer21.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.57E-322d + "'", double16 == 2.57E-322d);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(longBuffer22);
    }

    @Test
    public void test05936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05936");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(52);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putChar((int) (byte) -1, '\n');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test05937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05937");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        char char14 = byteBuffer1.getChar(1);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putInt(0);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer24 = byteBuffer20.put(byteArray23);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putDouble(7.565251118924485E-307d);
        int int27 = byteBuffer1.compareTo(byteBuffer26);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer1.putShort((short) (byte) -1);
        byte byte30 = byteBuffer1.get();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer1.putShort((int) '#', (short) -1);
        java.nio.ShortBuffer shortBuffer34 = byteBuffer1.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\000' + "'", char14 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-6) + "'", int27 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 0 + "'", byte30 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(shortBuffer34);
    }

    @Test
    public void test05938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05938");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer1.asReadOnlyBuffer();
        char char72 = byteBuffer1.getChar((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer1.slice();
        boolean boolean74 = byteBuffer1.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertTrue("'" + char72 + "' != '" + '\000' + "'", char72 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test05939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05939");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putFloat((int) ' ', (float) 4);
        java.nio.IntBuffer intBuffer12 = byteBuffer11.asIntBuffer();
        int int13 = intBuffer12.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
    }

    @Test
    public void test05940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05940");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.putShort(24, (short) (byte) -1);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer1.putInt(8);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer17.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer21 = byteBuffer18.putLong((-83), (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
    }

    @Test
    public void test05941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05941");
        java.util.regex.Pattern pattern0 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        java.util.function.Predicate<java.lang.String> strPredicate1 = null; // flaky: pattern0.asPredicate();
        int int2 = 0; // flaky: pattern0.flags();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        float float15 = byteBuffer4.getFloat();
        char char17 = byteBuffer4.getChar(1);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putDouble(7.565251118924485E-307d);
        int int30 = byteBuffer4.compareTo(byteBuffer29);
        java.nio.DoubleBuffer doubleBuffer31 = byteBuffer4.asDoubleBuffer();
        boolean boolean32 = byteBuffer4.hasRemaining();
        short short33 = byteBuffer4.getShort();
        double double35 = byteBuffer4.getDouble(0);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer4.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long39 = byteBuffer38.getLong();
        int int40 = byteBuffer38.position();
        float float42 = byteBuffer38.getFloat((int) (short) 10);
        boolean boolean43 = byteBuffer38.hasArray();
        double double44 = byteBuffer38.getDouble();
        short short46 = byteBuffer38.getShort(0);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer38.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer38.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer51.slice();
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putChar('\n');
        float float55 = byteBuffer52.getFloat();
        java.nio.ByteBuffer byteBuffer56 = byteBuffer4.put(byteBuffer52);
        java.nio.CharBuffer charBuffer57 = byteBuffer52.asCharBuffer();
        java.lang.String[] strArray58 = null; // flaky: pattern0.split((java.lang.CharSequence) charBuffer57);
// flaky:         org.junit.Assert.assertNotNull(pattern0);
// flaky:         org.junit.Assert.assertEquals(pattern0.toString(), "\\Qhi!\\E");
// flaky:         org.junit.Assert.assertNotNull(strPredicate1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.0f + "'", float15 == 0.0f);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-6) + "'", int30 == (-6));
        org.junit.Assert.assertNotNull(doubleBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 0 + "'", short33 == (short) 0);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) 0 + "'", short46 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 0.0f + "'", float55 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(charBuffer57);
// flaky:         org.junit.Assert.assertNotNull(strArray58);
    }

    @Test
    public void test05942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05942");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        boolean boolean25 = byteBuffer24.hasRemaining();
        java.nio.Buffer buffer26 = byteBuffer24.clear();
        boolean boolean27 = byteBuffer24.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test05943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05943");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocate(64);
        boolean boolean18 = byteBuffer17.isReadOnly();
        java.nio.Buffer buffer19 = byteBuffer17.mark();
        java.nio.ByteOrder byteOrder20 = byteBuffer17.order();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer17.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer9.put(byteArray62);
        java.nio.ByteBuffer byteBuffer70 = java.nio.ByteBuffer.wrap(byteArray62);
        java.nio.DoubleBuffer doubleBuffer71 = byteBuffer70.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(buffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(doubleBuffer71);
    }

    @Test
    public void test05944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05944");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        int int36 = byteBuffer35.limit();
        short short38 = byteBuffer35.getShort((int) 'a');
        boolean boolean39 = byteBuffer35.isDirect();
        long long41 = byteBuffer35.getLong(85);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer35.putChar(' ');
        // The following exception was thrown during execution in test generation
        try {
            int int44 = byteBuffer43.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 0 + "'", short38 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer43);
    }

    @Test
    public void test05945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05945");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putInt((int) (short) 10);
        java.nio.IntBuffer intBuffer27 = byteBuffer26.asIntBuffer();
        java.nio.Buffer buffer28 = byteBuffer26.mark();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer26.putLong(0, (long) (-18));
        char char32 = byteBuffer31.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(intBuffer27);
        org.junit.Assert.assertNotNull(buffer28);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '\000' + "'", char32 == '\000');
    }

    @Test
    public void test05946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05946");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.Socket socket2 = socketFactory0.createSocket();
        java.net.Socket socket3 = socketFactory0.createSocket();
        java.net.Socket socket4 = socketFactory0.createSocket();
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.Socket socket6 = socketFactory0.createSocket();
        java.net.Socket socket7 = socketFactory0.createSocket();
        java.net.Socket socket8 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress9 = null;
        java.net.InetAddress inetAddress11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket13 = socketFactory0.createSocket(inetAddress9, (int) '\000', inetAddress11, 320);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket2);
        org.junit.Assert.assertEquals(socket2.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket3);
        org.junit.Assert.assertEquals(socket3.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
        org.junit.Assert.assertEquals(socket4.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket6);
        org.junit.Assert.assertEquals(socket6.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket7);
        org.junit.Assert.assertEquals(socket7.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket8);
        org.junit.Assert.assertEquals(socket8.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05947");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer5.putDouble(10.0d);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar('\n');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.putInt(0);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.put(byteArray22);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer19.get(byteArray32, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer19.putDouble(100.0d);
        boolean boolean39 = byteBuffer5.equals((java.lang.Object) byteBuffer19);
        double double41 = byteBuffer5.getDouble(14);
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long44 = byteBuffer43.getLong();
        int int45 = byteBuffer43.position();
        float float47 = byteBuffer43.getFloat((int) (short) 10);
        boolean boolean48 = byteBuffer43.hasArray();
        double double49 = byteBuffer43.getDouble();
        short short51 = byteBuffer43.getShort(0);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer43.putDouble(100.0d);
        float float54 = byteBuffer43.getFloat();
        char char56 = byteBuffer43.getChar(1);
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer66.putDouble(7.565251118924485E-307d);
        int int69 = byteBuffer43.compareTo(byteBuffer68);
        java.nio.DoubleBuffer doubleBuffer70 = byteBuffer43.asDoubleBuffer();
        int int71 = byteBuffer5.compareTo(byteBuffer43);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer5.putInt(0);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer5.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer76 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer77 = byteBuffer76.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer78 = byteBuffer76.asDoubleBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + short51 + "' != '" + (short) 0 + "'", short51 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.0f + "'", float54 == 0.0f);
        org.junit.Assert.assertTrue("'" + char56 + "' != '" + '\000' + "'", char56 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-6) + "'", int69 == (-6));
        org.junit.Assert.assertNotNull(doubleBuffer70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(doubleBuffer78);
    }

    @Test
    public void test05948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05948");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.IntBuffer intBuffer7 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer9.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response20 = null;
        org.jsoup.helper.HttpConnection.Response response21 = new org.jsoup.helper.HttpConnection.Response(response20);
        java.lang.String str23 = response21.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = response21.cookies();
        org.jsoup.Connection.Response response26 = response21.removeCookie("hi!");
        java.lang.String str27 = response21.statusMessage();
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        boolean boolean38 = byteBuffer33.hasArray();
        response21.byteData = byteBuffer33;
        int int40 = byteBuffer19.compareTo(byteBuffer33);
        int int41 = byteBuffer5.compareTo(byteBuffer33);
        java.nio.Buffer buffer42 = byteBuffer33.rewind();
        boolean boolean43 = byteBuffer33.isDirect();
        byte byte44 = byteBuffer33.get();
        java.nio.ByteBuffer byteBuffer45 = byteBuffer33.compact();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(response26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-10) + "'", int40 == (-10));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(buffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + byte44 + "' != '" + (byte) 0 + "'", byte44 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer45);
    }

    @Test
    public void test05949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05949");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putDouble(8, (double) 256);
        java.nio.CharBuffer charBuffer15 = byteBuffer11.asCharBuffer();
        boolean boolean16 = byteBuffer11.isReadOnly();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer11.compact();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer17.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putShort((-66), (short) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
    }

    @Test
    public void test05950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05950");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        int int2 = byteBuffer1.arrayOffset();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) (short) 1);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer4.putShort(16, (short) 1);
        char char8 = byteBuffer7.getChar();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.compact();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = byteBuffer9.getLong((int) (short) 256);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\000' + "'", char8 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer9);
    }

    @Test
    public void test05951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05951");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate4 = pattern2.asPredicate();
        java.util.regex.Pattern pattern7 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate8 = pattern7.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate9 = pattern7.asPredicate();
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        java.nio.Buffer buffer17 = byteBuffer11.limit(32);
        java.nio.CharBuffer charBuffer18 = byteBuffer11.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream19 = pattern7.splitAsStream((java.lang.CharSequence) charBuffer18);
        java.util.stream.Stream<java.lang.String> strStream20 = pattern2.splitAsStream((java.lang.CharSequence) charBuffer18);
        java.util.regex.Pattern pattern23 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern23;
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer26.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.putInt(0);
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.put(byteArray33);
        java.nio.FloatBuffer floatBuffer35 = byteBuffer30.asFloatBuffer();
        java.nio.CharBuffer charBuffer36 = byteBuffer30.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream37 = null; // flaky: pattern23.splitAsStream((java.lang.CharSequence) charBuffer36);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putInt(0);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer47 = byteBuffer43.put(byteArray46);
        java.nio.FloatBuffer floatBuffer48 = byteBuffer43.asFloatBuffer();
        java.nio.CharBuffer charBuffer49 = byteBuffer43.asCharBuffer();
        java.lang.String[] strArray51 = null; // flaky: pattern23.split((java.lang.CharSequence) charBuffer49, (-65536));
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern23;
        java.lang.String str53 = null; // flaky: pattern23.pattern();
        java.lang.String str54 = null; // flaky: pattern23.pattern();
        java.util.regex.Pattern pattern57 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern58 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern58;
        java.nio.ByteBuffer byteBuffer61 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer62 = byteBuffer61.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream63 = null; // flaky: pattern58.splitAsStream((java.lang.CharSequence) charBuffer62);
        java.util.regex.Matcher matcher64 = pattern57.matcher((java.lang.CharSequence) charBuffer62);
        java.util.stream.Stream<java.lang.String> strStream65 = null; // flaky: pattern23.splitAsStream((java.lang.CharSequence) charBuffer62);
        java.util.regex.Pattern pattern69 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern72 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.regex.Pattern pattern73 = org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp;
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern73;
        java.nio.ByteBuffer byteBuffer76 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer77 = byteBuffer76.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream78 = null; // flaky: pattern73.splitAsStream((java.lang.CharSequence) charBuffer77);
        java.util.regex.Matcher matcher79 = pattern72.matcher((java.lang.CharSequence) charBuffer77);
        java.util.regex.Matcher matcher80 = null; // flaky: pattern69.matcher((java.lang.CharSequence) charBuffer77);
        java.nio.ByteBuffer byteBuffer82 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.CharBuffer charBuffer83 = byteBuffer82.asCharBuffer();
        java.util.regex.Matcher matcher84 = null; // flaky: pattern69.matcher((java.lang.CharSequence) charBuffer83);
        boolean boolean85 = java.util.regex.Pattern.matches("java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]", (java.lang.CharSequence) charBuffer83);
        java.util.regex.Matcher matcher86 = null; // flaky: pattern23.matcher((java.lang.CharSequence) charBuffer83);
        java.lang.String[] strArray88 = pattern2.split((java.lang.CharSequence) charBuffer83, 10);
        java.lang.String[] strArray90 = pattern2.split((java.lang.CharSequence) "\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E");
        java.lang.String str91 = pattern2.toString();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(pattern7);
        org.junit.Assert.assertEquals(pattern7.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate8);
        org.junit.Assert.assertNotNull(strPredicate9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(buffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(strStream20);
// flaky:         org.junit.Assert.assertNotNull(pattern23);
// flaky:         org.junit.Assert.assertEquals(pattern23.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(floatBuffer35);
        org.junit.Assert.assertNotNull(charBuffer36);
// flaky:         org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(floatBuffer48);
        org.junit.Assert.assertNotNull(charBuffer49);
// flaky:         org.junit.Assert.assertNotNull(strArray51);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str53, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]" + "'", str54, "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern57);
        org.junit.Assert.assertEquals(pattern57.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern58);
// flaky:         org.junit.Assert.assertEquals(pattern58.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(charBuffer62);
// flaky:         org.junit.Assert.assertNotNull(strStream63);
        org.junit.Assert.assertNotNull(matcher64);
        org.junit.Assert.assertEquals(matcher64.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(strStream65);
// flaky:         org.junit.Assert.assertNotNull(pattern69);
// flaky:         org.junit.Assert.assertEquals(pattern69.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern72);
        org.junit.Assert.assertEquals(pattern72.toString(), "hi!");
// flaky:         org.junit.Assert.assertNotNull(pattern73);
// flaky:         org.junit.Assert.assertEquals(pattern73.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(charBuffer77);
// flaky:         org.junit.Assert.assertNotNull(strStream78);
        org.junit.Assert.assertNotNull(matcher79);
        org.junit.Assert.assertEquals(matcher79.toString(), "java.util.regex.Matcher[pattern=hi! region=0,50 lastmatch=]");
// flaky:         org.junit.Assert.assertNotNull(matcher80);
// flaky:         org.junit.Assert.assertEquals(matcher80.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(charBuffer83);
// flaky:         org.junit.Assert.assertNotNull(matcher84);
// flaky:         org.junit.Assert.assertEquals(matcher84.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertNotNull(matcher86);
// flaky:         org.junit.Assert.assertEquals(matcher86.toString(), "java.util.regex.Matcher[pattern=java.nio.DirectByteBuffer[pos=10 lim=100 cap=100] region=0,50 lastmatch=]");
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
    }

    @Test
    public void test05952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05952");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        java.nio.DoubleBuffer doubleBuffer36 = byteBuffer35.asDoubleBuffer();
        java.nio.ShortBuffer shortBuffer37 = byteBuffer35.asShortBuffer();
        int int38 = shortBuffer37.remaining();
        int int39 = shortBuffer37.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(doubleBuffer36);
        org.junit.Assert.assertNotNull(shortBuffer37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 37 + "'", int38 == 37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 37 + "'", int39 == 37);
    }

    @Test
    public void test05953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05953");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(4);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putChar('\000');
        // The following exception was thrown during execution in test generation
        try {
            int int5 = byteBuffer1.getInt((-84));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
    }

    @Test
    public void test05954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05954");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        boolean boolean12 = byteBuffer1.isReadOnly();
        int int13 = byteBuffer1.getInt();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer1.putInt(75, 4);
        int int17 = byteBuffer16.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test05955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05955");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        java.nio.ByteBuffer byteBuffer79 = java.nio.ByteBuffer.wrap(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer82 = java.nio.ByteBuffer.wrap(byteArray70, 1493172140, (int) (byte) 64);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
    }

    @Test
    public void test05956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05956");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar(6, '\n');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer13.slice();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.put((byte) 66);
        java.lang.String str17 = byteBuffer16.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.nio.HeapByteBuffer[pos=1 lim=52 cap=52]" + "'", str17, "java.nio.HeapByteBuffer[pos=1 lim=52 cap=52]");
    }

    @Test
    public void test05957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05957");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        float float12 = byteBuffer1.getFloat();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer1.putShort(24, (short) (byte) -1);
        boolean boolean16 = byteBuffer15.isDirect();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test05958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05958");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) 'a');
        int int3 = byteBuffer1.getInt(20);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putFloat((float) (-6));
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long8 = byteBuffer7.getLong();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer10.asReadOnlyBuffer();
        boolean boolean12 = byteBuffer5.equals((java.lang.Object) byteBuffer10);
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocate(64);
        boolean boolean15 = byteBuffer14.isReadOnly();
        java.nio.Buffer buffer16 = byteBuffer14.mark();
        java.nio.ByteOrder byteOrder17 = byteBuffer14.order();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer5.order(byteOrder17);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertNotNull(byteOrder17);
        org.junit.Assert.assertNotNull(byteBuffer18);
    }

    @Test
    public void test05959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05959");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        short short6 = byteBuffer5.getShort();
        java.nio.IntBuffer intBuffer7 = byteBuffer5.asIntBuffer();
        double double8 = byteBuffer5.getDouble();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putFloat((float) (-1L));
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putLong(23, (long) 0);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer13.putChar('\000');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer13.slice();
        int int17 = byteBuffer16.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 72 + "'", int17 == 72);
    }

    @Test
    public void test05960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05960");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        short short5 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.put((int) (short) 10, (byte) 1);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer8.putChar('4');
        java.nio.Buffer buffer14 = byteBuffer13.rewind();
        boolean boolean16 = byteBuffer13.equals((java.lang.Object) (-11));
        byte byte17 = byteBuffer13.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 0 + "'", short5 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
    }

    @Test
    public void test05961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05961");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(20);
        boolean boolean2 = byteBuffer1.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test05962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05962");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        float float11 = byteBuffer10.getFloat();
        java.nio.DoubleBuffer doubleBuffer12 = byteBuffer10.asDoubleBuffer();
        java.lang.String str13 = byteBuffer10.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(doubleBuffer12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]" + "'", str13, "java.nio.DirectByteBuffer[pos=18 lim=100 cap=100]");
    }

    @Test
    public void test05963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05963");
        java.nio.ByteBuffer byteBuffer2 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer4 = byteBuffer2.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer6 = byteBuffer2.putInt(0);
        java.nio.ByteBuffer byteBuffer9 = byteBuffer6.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer6.putChar(' ');
        java.nio.ByteBuffer byteBuffer14 = byteBuffer11.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long17 = byteBuffer16.getLong();
        int int18 = byteBuffer16.position();
        float float20 = byteBuffer16.getFloat((int) (short) 10);
        boolean boolean21 = byteBuffer16.hasArray();
        double double22 = byteBuffer16.getDouble();
        short short24 = byteBuffer16.getShort(0);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer16.putDouble(100.0d);
        boolean boolean27 = byteBuffer16.isDirect();
        int int28 = byteBuffer14.compareTo(byteBuffer16);
        java.nio.DoubleBuffer doubleBuffer29 = byteBuffer16.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer16.slice();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer30.putChar((int) (short) 10, '4');
        org.jsoup.helper.HttpConnection.Response response34 = null;
        org.jsoup.helper.HttpConnection.Response response35 = new org.jsoup.helper.HttpConnection.Response(response34);
        response35.contentType = "";
        java.lang.String str38 = response35.contentType;
        java.lang.String str39 = response35.charset;
        java.nio.ByteBuffer byteBuffer40 = response35.byteData;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = response35.headers();
        org.jsoup.Connection.Response response43 = response35.removeHeader("java.nio.DirectByteBuffer[pos=8 lim=100 cap=100]");
        java.lang.String str45 = response35.cookie("java.nio.DirectByteBuffer[pos=0 lim=100 cap=100]");
        boolean boolean46 = byteBuffer33.equals((java.lang.Object) str45);
        java.nio.Buffer buffer47 = byteBuffer33.mark();
        java.nio.CharBuffer charBuffer48 = byteBuffer33.asCharBuffer();
        boolean boolean49 = java.util.regex.Pattern.matches("\\Q\\Q\\Q\\Qjava.nio.DirectByteBuffer[pos=10 lim=100 cap=100]\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\Q\\E\\\\E\\Q\\\\E\\\\E\\Q\\Q\\E\\\\E\\Q\\E", (java.lang.CharSequence) charBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 0 + "'", short24 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(doubleBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(byteBuffer40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(response43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(buffer47);
        org.junit.Assert.assertNotNull(charBuffer48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05964");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putInt((int) '#');
        float float9 = byteBuffer7.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer15.get(byteArray28, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer44.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.putInt(0);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.put(byteArray51);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer38.get(byteArray51, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer32.put(byteArray51);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer7.put(byteArray51);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer7.compact();
        java.nio.ByteBuffer byteBuffer61 = byteBuffer58.putChar((int) '#', '4');
        java.nio.Buffer buffer62 = byteBuffer61.flip();
        int int63 = byteBuffer61.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 7.3E-44f + "'", float9 == 7.3E-44f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(buffer62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
    }

    @Test
    public void test05965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05965");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        java.lang.String str81 = response1.contentType();
        response1.charset = "hi!";
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry85 = response1.scanHeaders("\\Qjava.nio.DirectByteBuffer[pos=14 lim=100 cap=100]\\E");
        java.lang.String str86 = response1.statusMessage();
        boolean boolean89 = response1.hasHeaderWithValue("\\Qjava.nio.DirectByteBuffer[pos=0 lim=76 cap=76]\\E", "java.nio.DirectByteBuffer[pos=35 lim=100 cap=100]");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(strEntry85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test05966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05966");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        boolean boolean20 = byteBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer26.get(byteArray39, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer66 = byteBuffer49.get(byteArray62, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer43.put(byteArray62);
        java.nio.ByteBuffer byteBuffer68 = byteBuffer15.put(byteArray62);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer1.get(byteArray62);
        java.nio.Buffer buffer70 = byteBuffer69.mark();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer69.put((byte) 100);
        float float74 = byteBuffer72.getFloat(50);
        java.nio.Buffer buffer75 = byteBuffer72.reset();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(buffer70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertNotNull(buffer75);
    }

    @Test
    public void test05967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05967");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]", 84);
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        int int4 = pattern2.flags();
        int int5 = pattern2.flags();
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "java.nio.HeapByteBuffer[pos=0 lim=52 cap=52]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 84 + "'", int4 == 84);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 84 + "'", int5 == 84);
    }

    @Test
    public void test05968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05968");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer1.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.duplicate();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.slice();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.put(byteArray25);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer14.get(byteArray25);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer14.putChar(52, '\uffff');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer30);
    }

    @Test
    public void test05969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05969");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        org.jsoup.Connection.Method method20 = response1.method();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.put((byte) 10);
        java.nio.Buffer buffer34 = byteBuffer30.position((int) ' ');
        java.nio.Buffer buffer35 = byteBuffer30.rewind();
        response1.byteData = byteBuffer30;
        response1.charset = "java.nio.DirectByteBuffer[pos=26 lim=100 cap=100]";
        java.lang.String str39 = response1.statusMessage;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(buffer34);
        org.junit.Assert.assertNotNull(buffer35);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test05970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05970");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar(6, '\n');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putFloat((float) 18);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putDouble(10, 10.0d);
        int int19 = byteBuffer18.capacity();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer20 = byteBuffer18.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test05971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05971");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        response1.contentType = "";
        java.lang.String str4 = response1.contentType;
        java.lang.String str5 = response1.charset;
        java.nio.ByteBuffer byteBuffer6 = response1.byteData;
        org.jsoup.Connection.Response response8 = response1.removeCookie("Location");
        int int9 = response1.statusCode();
        java.util.Map.Entry<java.lang.String, java.lang.String> strEntry11 = response1.scanHeaders("\\Qhi!\\E");
        java.lang.String str13 = response1.header("\\Qjava.nio.DirectByteBuffer[pos=24 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(byteBuffer6);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(strEntry11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test05972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05972");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.duplicate();
        char char12 = byteBuffer11.getChar();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.slice();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long16 = byteBuffer15.getLong();
        int int17 = byteBuffer15.position();
        float float19 = byteBuffer15.getFloat((int) (short) 10);
        boolean boolean20 = byteBuffer15.hasArray();
        double double21 = byteBuffer15.getDouble();
        short short23 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        boolean boolean34 = byteBuffer29.hasArray();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer36.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.putInt(0);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.put(byteArray43);
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer46.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.putInt(0);
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.put(byteArray53);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer40.get(byteArray53, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer59.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.putInt(0);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.put(byteArray66);
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer69.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.putInt(0);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.put(byteArray76);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer63.get(byteArray76, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer57.put(byteArray76);
        java.nio.ByteBuffer byteBuffer82 = byteBuffer29.put(byteArray76);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer15.get(byteArray76);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer13.put(byteArray76);
        byte byte86 = byteBuffer13.get(23);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\000' + "'", char12 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertTrue("'" + byte86 + "' != '" + (byte) 0 + "'", byte86 == (byte) 0);
    }

    @Test
    public void test05973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05973");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        long long6 = byteBuffer5.getLong();
        java.nio.Buffer buffer8 = byteBuffer5.position(24);
        // The following exception was thrown during execution in test generation
        try {
            short short10 = byteBuffer5.getShort((-16));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(buffer8);
    }

    @Test
    public void test05974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05974");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        double double3 = byteBuffer1.getDouble();
        byte byte5 = byteBuffer1.get(8);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer1.put((byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 0 + "'", byte5 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test05975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05975");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.InetAddress inetAddress5 = null;
        java.net.InetAddress inetAddress7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket9 = socketFactory0.createSocket(inetAddress5, 1117126656, inetAddress7, 48);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=35858]");
    }

    @Test
    public void test05976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05976");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteBuffer byteBuffer11 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer11.putInt(0);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.put(byteArray18);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer5.get(byteArray18, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putShort((short) -1);
        int int26 = byteBuffer22.getInt(0);
        int int27 = byteBuffer22.position();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer22.putInt(83, (int) (byte) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putFloat((float) 256);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer35 = byteBuffer34.slice();
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.put((byte) 64);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
    }

    @Test
    public void test05977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05977");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.FloatBuffer floatBuffer10 = byteBuffer5.asFloatBuffer();
        boolean boolean11 = byteBuffer5.isDirect();
        float float13 = byteBuffer5.getFloat(83);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putChar('\n');
        boolean boolean16 = byteBuffer5.hasRemaining();
        java.nio.Buffer buffer18 = byteBuffer5.position(46);
        double double20 = byteBuffer5.getDouble(18);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test05978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05978");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer11.putLong((long) (byte) 10);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer11.putShort(32, (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = byteBuffer37.getInt(373288960);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer37);
    }

    @Test
    public void test05979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05979");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer10.putInt((-24));
        java.nio.Buffer buffer16 = byteBuffer15.flip();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer25 = byteBuffer24.compact();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer24.put((byte) 10);
        char char28 = byteBuffer27.getChar();
        java.nio.ByteBuffer byteBuffer30 = byteBuffer27.putChar('#');
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.FloatBuffer floatBuffer41 = byteBuffer36.asFloatBuffer();
        boolean boolean42 = byteBuffer36.isDirect();
        java.nio.ByteBuffer byteBuffer45 = byteBuffer36.putShort((int) (byte) 10, (short) 100);
        java.nio.DoubleBuffer doubleBuffer46 = byteBuffer36.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer48.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer52 = byteBuffer48.putInt(0);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer52.putInt((int) '#');
        byte byte56 = byteBuffer52.get(1);
        java.nio.ByteBuffer byteBuffer59 = byteBuffer52.put(14, (byte) -1);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer52.slice();
        int int61 = byteBuffer60.remaining();
        int int62 = byteBuffer36.compareTo(byteBuffer60);
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long65 = byteBuffer64.getLong();
        int int66 = byteBuffer64.position();
        float float68 = byteBuffer64.getFloat((int) (short) 10);
        boolean boolean69 = byteBuffer64.hasArray();
        double double70 = byteBuffer64.getDouble();
        short short72 = byteBuffer64.getShort(0);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer64.putDouble(100.0d);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer64.put(32, (byte) 100);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer77.duplicate();
        java.nio.ByteBuffer byteBuffer79 = byteBuffer77.slice();
        java.nio.ByteBuffer byteBuffer81 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer81.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer85 = byteBuffer81.putInt(0);
        byte[] byteArray88 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer89 = byteBuffer85.put(byteArray88);
        java.nio.ByteBuffer byteBuffer90 = byteBuffer77.get(byteArray88);
        java.nio.ByteBuffer byteBuffer91 = byteBuffer60.get(byteArray88);
        java.nio.ByteBuffer byteBuffer92 = byteBuffer30.get(byteArray88);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer15.get(byteArray88);
        java.nio.ShortBuffer shortBuffer94 = byteBuffer15.asShortBuffer();
        java.nio.CharBuffer charBuffer95 = byteBuffer15.asCharBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + char28 + "' != '" + '\000' + "'", char28 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(floatBuffer41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(doubleBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 0 + "'", byte56 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 84 + "'", int61 == 84);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + short72 + "' != '" + (short) 0 + "'", short72 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 63]");
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(shortBuffer94);
        org.junit.Assert.assertNotNull(charBuffer95);
    }

    @Test
    public void test05980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05980");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long10 = byteBuffer9.getLong();
        int int11 = byteBuffer9.position();
        float float13 = byteBuffer9.getFloat((int) (short) 10);
        boolean boolean14 = byteBuffer9.hasArray();
        double double15 = byteBuffer9.getDouble();
        short short17 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putInt(0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.put(byteArray26);
        boolean boolean28 = byteBuffer23.hasArray();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer34 = byteBuffer30.putInt(0);
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.put(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer34.get(byteArray47, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer55 = byteBuffer53.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer57 = byteBuffer53.putInt(0);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer61 = byteBuffer57.put(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer57.get(byteArray70, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer51.put(byteArray70);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer23.put(byteArray70);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer9.get(byteArray70);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer5.put(byteArray70);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer78.compact();
        java.nio.ByteBuffer byteBuffer81 = byteBuffer78.putShort((short) (byte) -1);
        double double83 = byteBuffer78.getDouble(80);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer78.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer84);
    }

    @Test
    public void test05981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05981");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer3 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer3.putLong((long) '4');
        short short7 = byteBuffer3.getShort(0);
        int int9 = byteBuffer3.getInt((int) '4');
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer3);
        int int11 = byteBuffer3.capacity();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 0 + "'", short7 == (short) 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test05982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05982");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long5 = byteBuffer4.getLong();
        int int6 = byteBuffer4.position();
        float float8 = byteBuffer4.getFloat((int) (short) 10);
        boolean boolean9 = byteBuffer4.hasArray();
        double double10 = byteBuffer4.getDouble();
        short short12 = byteBuffer4.getShort(0);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer4.putDouble(100.0d);
        byte byte16 = byteBuffer14.get((int) (short) 0);
        java.nio.IntBuffer intBuffer17 = byteBuffer14.asIntBuffer();
        int int18 = byteBuffer1.compareTo(byteBuffer14);
        java.nio.FloatBuffer floatBuffer19 = byteBuffer14.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer14.put((byte) -1);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putShort(2, (short) (byte) 0);
        java.nio.FloatBuffer floatBuffer25 = byteBuffer24.asFloatBuffer();
        java.nio.Buffer buffer26 = byteBuffer24.flip();
        java.nio.ShortBuffer shortBuffer27 = byteBuffer24.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-24) + "'", int18 == (-24));
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertNotNull(shortBuffer27);
    }

    @Test
    public void test05983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05983");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response12 = null;
        org.jsoup.helper.HttpConnection.Response response13 = new org.jsoup.helper.HttpConnection.Response(response12);
        java.lang.String str15 = response13.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = response13.cookies();
        org.jsoup.Connection.Response response18 = response13.removeCookie("hi!");
        java.lang.String str19 = response13.statusMessage();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        response13.byteData = byteBuffer25;
        int int32 = byteBuffer11.compareTo(byteBuffer25);
        java.lang.String str33 = byteBuffer11.toString();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer11.put((byte) 10);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer11.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long39 = byteBuffer38.getLong();
        int int40 = byteBuffer38.position();
        float float42 = byteBuffer38.getFloat((int) (short) 10);
        boolean boolean43 = byteBuffer38.hasArray();
        double double44 = byteBuffer38.getDouble();
        short short46 = byteBuffer38.getShort(0);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer38.putDouble(100.0d);
        org.jsoup.helper.HttpConnection.Response response49 = null;
        org.jsoup.helper.HttpConnection.Response response50 = new org.jsoup.helper.HttpConnection.Response(response49);
        java.lang.String str52 = response50.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = response50.cookies();
        org.jsoup.Connection.Response response55 = response50.removeCookie("hi!");
        java.lang.String str56 = response50.statusMessage();
        java.nio.ByteBuffer byteBuffer58 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer62 = byteBuffer58.putInt(0);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer66 = byteBuffer62.put(byteArray65);
        boolean boolean67 = byteBuffer62.hasArray();
        response50.byteData = byteBuffer62;
        int int69 = byteBuffer48.compareTo(byteBuffer62);
        java.lang.String str70 = byteBuffer48.toString();
        java.nio.ByteBuffer byteBuffer72 = byteBuffer48.put((byte) 10);
        int int73 = byteBuffer72.limit();
        java.nio.ByteBuffer byteBuffer75 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer75.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer79 = byteBuffer75.putInt(0);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer79.putInt((int) '#');
        byte byte83 = byteBuffer79.get(1);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer79.put(14, (byte) -1);
        java.nio.ByteOrder byteOrder87 = byteBuffer86.order();
        java.nio.ByteBuffer byteBuffer88 = byteBuffer72.order(byteOrder87);
        java.nio.ByteBuffer byteBuffer89 = byteBuffer11.order(byteOrder87);
        long long91 = byteBuffer11.getLong(79);
        java.nio.DoubleBuffer doubleBuffer92 = byteBuffer11.asDoubleBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer93 = byteBuffer11.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-10) + "'", int32 == (-10));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str33, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) 0 + "'", short46 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(response55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-10) + "'", int69 == (-10));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]" + "'", str70, "java.nio.DirectByteBuffer[pos=24 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertTrue("'" + byte83 + "' != '" + (byte) 0 + "'", byte83 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteOrder87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(doubleBuffer92);
    }

    @Test
    public void test05984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05984");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        java.nio.ByteOrder byteOrder10 = byteBuffer9.order();
        byte byte12 = byteBuffer9.get((int) 'a');
        java.nio.DoubleBuffer doubleBuffer13 = byteBuffer9.asDoubleBuffer();
        java.nio.FloatBuffer floatBuffer14 = byteBuffer9.asFloatBuffer();
        java.nio.Buffer buffer15 = byteBuffer9.clear();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer9.putInt((-18));
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer19.putLong((long) '4');
        int int23 = byteBuffer21.getInt((int) (short) 1);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer27 = byteBuffer25.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.putInt(0);
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.put(byteArray32);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer29.get(byteArray42, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer21.get(byteArray42);
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.wrap(byteArray42);
        java.nio.ByteBuffer byteBuffer49 = byteBuffer17.put(byteArray42);
        int int51 = byteBuffer17.getInt(84);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test05985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05985");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E");
        java.lang.String str2 = pattern1.toString();
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E" + "'", str2, "\\Qjava.nio.DirectByteBuffer[pos=82 lim=100 cap=100]\\E");
    }

    @Test
    public void test05986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05986");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        double double7 = byteBuffer1.getDouble();
        short short9 = byteBuffer1.getShort(0);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.putDouble(100.0d);
        java.nio.CharBuffer charBuffer12 = byteBuffer1.asCharBuffer();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long15 = byteBuffer14.getLong();
        int int16 = byteBuffer14.position();
        float float18 = byteBuffer14.getFloat((int) (short) 10);
        boolean boolean19 = byteBuffer14.hasArray();
        double double20 = byteBuffer14.getDouble();
        short short22 = byteBuffer14.getShort(0);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer14.putDouble(100.0d);
        float float25 = byteBuffer14.getFloat();
        char char27 = byteBuffer14.getChar(1);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = byteBuffer37.putDouble(7.565251118924485E-307d);
        int int40 = byteBuffer14.compareTo(byteBuffer39);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer14.putShort((short) (byte) -1);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 0 };
        java.nio.ByteBuffer byteBuffer46 = byteBuffer14.put(byteArray45);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer1.put(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.wrap(byteArray45, 373288960, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + char27 + "' != '" + '\000' + "'", char27 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-6) + "'", int40 == (-6));
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 0]");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteBuffer47);
    }

    @Test
    public void test05987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05987");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.putInt(0);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.put(byteArray19);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer26 = byteBuffer22.putInt(0);
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer30 = byteBuffer26.put(byteArray29);
        java.nio.ByteBuffer byteBuffer33 = byteBuffer16.get(byteArray29, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer35 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer35.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer39 = byteBuffer35.putInt(0);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.put(byteArray42);
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer45.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer49 = byteBuffer45.putInt(0);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer53 = byteBuffer49.put(byteArray52);
        java.nio.ByteBuffer byteBuffer56 = byteBuffer39.get(byteArray52, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer33.put(byteArray52);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer5.put(byteArray52);
        java.nio.ByteOrder byteOrder59 = null;
        java.nio.ByteBuffer byteBuffer60 = byteBuffer58.order(byteOrder59);
        double double61 = byteBuffer58.getDouble();
        // The following exception was thrown during execution in test generation
        try {
            int int62 = byteBuffer58.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
    }

    @Test
    public void test05988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05988");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        boolean boolean80 = byteBuffer25.hasArray();
        java.nio.DoubleBuffer doubleBuffer81 = byteBuffer25.asDoubleBuffer();
        float float82 = byteBuffer25.getFloat();
        java.nio.ByteBuffer byteBuffer83 = byteBuffer25.slice();
        java.nio.ByteBuffer byteBuffer86 = byteBuffer25.put(6, (byte) 1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleBuffer81);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteBuffer86);
    }

    @Test
    public void test05989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05989");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Qhi!\\E", (int) (short) 100);
        java.lang.String[] strArray5 = pattern2.split((java.lang.CharSequence) "\\Qhi!\\E", 92);
        int int6 = pattern2.flags();
        org.jsoup.helper.HttpConnection.Response.xmlContentTypeRxp = pattern2;
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        short short13 = byteBuffer9.getShort(0);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer9.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer19 = byteBuffer16.put((int) (short) 10, (byte) 1);
        double double20 = byteBuffer19.getDouble();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer19.putDouble((int) '\n', (double) (byte) 66);
        char char25 = byteBuffer23.getChar(24);
        java.nio.CharBuffer charBuffer26 = byteBuffer23.asCharBuffer();
        java.lang.String[] strArray28 = pattern2.split((java.lang.CharSequence) charBuffer26, 85);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Qhi!\\E");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5.43230922487E-312d + "'", double20 == 5.43230922487E-312d);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + '\000' + "'", char25 == '\000');
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNotNull(strArray28);
    }

    @Test
    public void test05990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05990");
        javax.net.SocketFactory socketFactory0 = javax.net.ssl.SSLSocketFactory.getDefault();
        java.net.Socket socket1 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress2 = null;
        java.net.Socket socket4 = socketFactory0.createSocket(inetAddress2, 25);
        java.net.Socket socket5 = socketFactory0.createSocket();
        java.net.InetAddress inetAddress8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Socket socket10 = socketFactory0.createSocket("\\Q\\Qjava.nio.DirectByteBuffer[pos=16 lim=32 cap=100]\\E\\\\E\\Q\\E", 64, inetAddress8, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Permission denied (Bind failed)");
        } catch (java.net.BindException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(socketFactory0);
        org.junit.Assert.assertNotNull(socket1);
        org.junit.Assert.assertEquals(socket1.toString(), "Socket[unconnected]");
        org.junit.Assert.assertNotNull(socket4);
// flaky:         org.junit.Assert.assertEquals(socket4.toString(), "Socket[addr=inesserver2.windows.cin.ufpe.br/172.20.26.3,port=25,localport=35860]");
        org.junit.Assert.assertNotNull(socket5);
        org.junit.Assert.assertEquals(socket5.toString(), "Socket[unconnected]");
    }

    @Test
    public void test05991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05991");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(0);
        java.nio.ShortBuffer shortBuffer2 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer4 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer4.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer8 = byteBuffer4.putInt(0);
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.put(byteArray11);
        java.nio.FloatBuffer floatBuffer13 = byteBuffer8.asFloatBuffer();
        java.nio.CharBuffer charBuffer14 = byteBuffer8.asCharBuffer();
        boolean boolean15 = byteBuffer8.isReadOnly();
        boolean boolean16 = byteBuffer8.isDirect();
        java.nio.Buffer buffer17 = byteBuffer8.flip();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long20 = byteBuffer19.getLong();
        int int21 = byteBuffer19.position();
        float float23 = byteBuffer19.getFloat((int) (short) 10);
        boolean boolean24 = byteBuffer19.hasArray();
        double double25 = byteBuffer19.getDouble();
        short short27 = byteBuffer19.getShort(0);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer31 = byteBuffer29.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer33 = byteBuffer29.putInt(0);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer37 = byteBuffer33.put(byteArray36);
        boolean boolean38 = byteBuffer33.hasArray();
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer44.get(byteArray57, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer71 = byteBuffer67.put(byteArray70);
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer75 = byteBuffer73.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer77 = byteBuffer73.putInt(0);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer81 = byteBuffer77.put(byteArray80);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer67.get(byteArray80, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer85 = byteBuffer61.put(byteArray80);
        java.nio.ByteBuffer byteBuffer86 = byteBuffer33.put(byteArray80);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer19.get(byteArray80);
        java.nio.ByteOrder byteOrder88 = byteBuffer87.order();
        java.nio.ByteBuffer byteBuffer89 = byteBuffer8.order(byteOrder88);
        boolean boolean90 = byteBuffer1.equals((java.lang.Object) byteBuffer89);
        int int91 = byteBuffer1.capacity();
        java.nio.ShortBuffer shortBuffer92 = byteBuffer1.asShortBuffer();
        java.nio.ByteBuffer byteBuffer93 = byteBuffer1.slice();
        java.nio.ByteBuffer byteBuffer94 = byteBuffer1.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(floatBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(buffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteOrder88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(shortBuffer92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
    }

    @Test
    public void test05992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05992");
        java.util.regex.Pattern pattern2 = java.util.regex.Pattern.compile("\\Q\\Qhi!\\E\\\\E\\Q\\E", 97);
        java.util.function.Predicate<java.lang.String> strPredicate3 = pattern2.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate4 = pattern2.asPredicate();
        java.util.regex.Pattern pattern7 = null; // flaky: java.util.regex.Pattern.compile("java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]", (-24));
        java.util.regex.Pattern pattern10 = java.util.regex.Pattern.compile("hi!", (int) (short) 10);
        java.util.function.Predicate<java.lang.String> strPredicate11 = pattern10.asPredicate();
        java.util.function.Predicate<java.lang.String> strPredicate12 = pattern10.asPredicate();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer14.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putInt(0);
        java.nio.Buffer buffer20 = byteBuffer14.limit(32);
        java.nio.CharBuffer charBuffer21 = byteBuffer14.asCharBuffer();
        java.util.stream.Stream<java.lang.String> strStream22 = pattern10.splitAsStream((java.lang.CharSequence) charBuffer21);
        java.lang.String[] strArray23 = null; // flaky: pattern7.split((java.lang.CharSequence) charBuffer21);
        java.nio.Buffer buffer25 = charBuffer21.limit(0);
        java.lang.String[] strArray26 = pattern2.split((java.lang.CharSequence) charBuffer21);
        org.junit.Assert.assertNotNull(pattern2);
        org.junit.Assert.assertEquals(pattern2.toString(), "\\Q\\Qhi!\\E\\\\E\\Q\\E");
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
// flaky:         org.junit.Assert.assertNotNull(pattern7);
// flaky:         org.junit.Assert.assertEquals(pattern7.toString(), "java.nio.DirectByteBuffer[pos=10 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(pattern10);
        org.junit.Assert.assertEquals(pattern10.toString(), "hi!");
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(buffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(strStream22);
// flaky:         org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(strArray26);
    }

    @Test
    public void test05993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05993");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        org.jsoup.helper.HttpConnection.Response response10 = null;
        org.jsoup.helper.HttpConnection.Response response11 = new org.jsoup.helper.HttpConnection.Response(response10);
        response11.contentType = "";
        boolean boolean14 = byteBuffer9.equals((java.lang.Object) "");
        long long15 = byteBuffer9.getLong();
        java.nio.FloatBuffer floatBuffer16 = byteBuffer9.asFloatBuffer();
        java.nio.ByteBuffer byteBuffer18 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer18.putInt(0);
        short short23 = byteBuffer22.getShort();
        java.nio.IntBuffer intBuffer24 = byteBuffer22.asIntBuffer();
        int int25 = byteBuffer22.capacity();
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer27.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer31 = byteBuffer27.putInt(0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer31.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer31.putChar('a');
        double double38 = byteBuffer36.getDouble(12);
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer40.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer44 = byteBuffer40.putInt(0);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer48 = byteBuffer44.put(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer44.get(byteArray57, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer36.put(byteArray57);
        java.nio.ByteBuffer byteBuffer63 = byteBuffer22.get(byteArray57);
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.wrap(byteArray57);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer9.put(byteArray57);
        java.nio.LongBuffer longBuffer66 = byteBuffer9.asLongBuffer();
        java.nio.Buffer buffer67 = byteBuffer9.rewind();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(intBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 7.565251118924485E-307d + "'", double38 == 7.565251118924485E-307d);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(longBuffer66);
        org.junit.Assert.assertNotNull(buffer67);
    }

    @Test
    public void test05994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05994");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer9 = byteBuffer5.put(byteArray8);
        boolean boolean10 = byteBuffer5.hasArray();
        double double11 = byteBuffer5.getDouble();
        java.nio.IntBuffer intBuffer12 = byteBuffer5.asIntBuffer();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putShort(0, (short) (byte) 0);
        java.lang.String str16 = byteBuffer15.toString();
        java.nio.LongBuffer longBuffer17 = byteBuffer15.asLongBuffer();
        byte byte18 = byteBuffer15.get();
        int int19 = byteBuffer15.position();
        boolean boolean20 = byteBuffer15.isReadOnly();
        char char21 = byteBuffer15.getChar();
        int int22 = byteBuffer15.position();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]" + "'", str16, "java.nio.DirectByteBuffer[pos=22 lim=100 cap=100]");
        org.junit.Assert.assertNotNull(longBuffer17);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + char21 + "' != '" + '\000' + "'", char21 == '\000');
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 25 + "'", int22 == 25);
    }

    @Test
    public void test05995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05995");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putInt(0);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putDouble((int) (byte) 1, (double) 1L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer5.putChar(' ');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer10.putFloat(10, (float) (short) 100);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer15.putLong((long) '4');
        short short19 = byteBuffer15.getShort(0);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer15.putChar(1, '4');
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer26 = byteBuffer24.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer28 = byteBuffer24.putInt(0);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer32 = byteBuffer28.put(byteArray31);
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer36 = byteBuffer34.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer38 = byteBuffer34.putInt(0);
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer42 = byteBuffer38.put(byteArray41);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer28.get(byteArray41, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer28.putDouble(100.0d);
        int int48 = byteBuffer22.compareTo(byteBuffer28);
        java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer50.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer54 = byteBuffer50.putInt(0);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer58 = byteBuffer54.put(byteArray57);
        java.nio.ByteOrder byteOrder59 = byteBuffer58.order();
        java.nio.ByteBuffer byteBuffer60 = byteBuffer28.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer61 = byteBuffer10.order(byteOrder59);
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer63.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer67 = byteBuffer63.putInt(0);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer67.putDouble((double) 12);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer10.put(byteBuffer69);
        int int71 = byteBuffer10.limit();
        int int72 = byteBuffer10.position();
        float float73 = byteBuffer10.getFloat();
        java.nio.ByteBuffer byteBuffer74 = byteBuffer10.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 14 + "'", int48 == 14);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteOrder59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 94 + "'", int72 == 94);
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 0.0f + "'", float73 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer74);
    }

    @Test
    public void test05996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05996");
        org.jsoup.helper.HttpConnection.Response response0 = null;
        org.jsoup.helper.HttpConnection.Response response1 = new org.jsoup.helper.HttpConnection.Response(response0);
        java.lang.String str3 = response1.getHeaderCaseInsensitive("");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response1.cookies();
        org.jsoup.Connection.Response response6 = response1.removeCookie("hi!");
        java.lang.String str7 = response1.statusMessage();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer9.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putInt(0);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.put(byteArray16);
        boolean boolean18 = byteBuffer13.hasArray();
        response1.byteData = byteBuffer13;
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer25 = byteBuffer21.putInt(0);
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer29 = byteBuffer25.put(byteArray28);
        boolean boolean30 = byteBuffer25.hasArray();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer36 = byteBuffer32.putInt(0);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer40 = byteBuffer36.put(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer42.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer46 = byteBuffer42.putInt(0);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer50 = byteBuffer46.put(byteArray49);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer36.get(byteArray49, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer57 = byteBuffer55.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer59 = byteBuffer55.putInt(0);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer63 = byteBuffer59.put(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        java.nio.ByteBuffer byteBuffer67 = byteBuffer65.putLong((long) '4');
        java.nio.ByteBuffer byteBuffer69 = byteBuffer65.putInt(0);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 10 };
        java.nio.ByteBuffer byteBuffer73 = byteBuffer69.put(byteArray72);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer59.get(byteArray72, 2, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer53.put(byteArray72);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer25.put(byteArray72);
        response1.byteData = byteBuffer25;
        java.lang.String str80 = response1.charset();
        java.lang.String str81 = response1.statusMessage;
        response1.statusCode = (-72);
        int int84 = response1.numRedirects;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.helper.HttpConnection.Response response85 = new org.jsoup.helper.HttpConnection.Response(response1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Too many redirects occurred trying to load URL null");
        } catch (java.io.IOException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 10]");
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test05997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05997");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) '#');
        boolean boolean2 = byteBuffer1.isReadOnly();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteBuffer3);
    }

    @Test
    public void test05998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05998");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect((int) (short) 100);
        long long2 = byteBuffer1.getLong();
        int int3 = byteBuffer1.position();
        float float5 = byteBuffer1.getFloat((int) (short) 10);
        boolean boolean6 = byteBuffer1.hasArray();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putFloat((float) (-24));
        java.nio.DoubleBuffer doubleBuffer9 = byteBuffer8.asDoubleBuffer();
        int int10 = byteBuffer8.position();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer13 = byteBuffer8.putChar((-10), '\u2000');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(doubleBuffer9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
    }

    @Test
    public void test05999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05999");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) '4');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putShort(0, (short) -1);
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.duplicate();
        java.nio.ByteBuffer byteBuffer8 = byteBuffer5.putLong(0, 0L);
        int int10 = byteBuffer5.getInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer13 = byteBuffer5.putChar(6, '\n');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer5.putFloat((float) 18);
        java.nio.ByteBuffer byteBuffer16 = byteBuffer5.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = byteBuffer5.getDouble((int) '\u2000');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer16);
    }

    @Test
    public void test06000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test06000");
        java.util.regex.Pattern pattern1 = java.util.regex.Pattern.compile("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(pattern1);
        org.junit.Assert.assertEquals(pattern1.toString(), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
    }
}
