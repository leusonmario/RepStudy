/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 16:06:06 GMT 2021
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URL;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection$Response_ESTest extends HttpConnection$Response_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(string0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      String string1 = "set-cookie";
      List<String> list0 = hashMap0.put(string1, linkedList0);
      assertNull(list0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      List<String> list1 = hashMap0.put(string0, linkedList0);
      assertNull(list1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      String string2 = httpConnection_Response0.statusMessage();
      assertNull(string2);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "https";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      List<String> list0 = hashMap0.put(string0, linkedList0);
      assertNull(list0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = httpConnection_Response0.charset();
      assertNull(string1);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "+rl2yd3l7";
      String string1 = "";
      boolean boolean0 = linkedList0.add(string1);
      assertNotSame(string1, string0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(linkedList0.contains(string1));
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean1 = linkedList0.add(string0);
      assertNotSame(string0, string1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(string1));
      
      String string2 = "set-cookie";
      List<String> list0 = hashMap0.put(string2, linkedList0);
      assertNull(list0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, linkedList0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(linkedList0.contains(string1));
      assertFalse(linkedList0.contains(string2));
      
      String string3 = httpConnection_Response0.contentType();
      assertNull(string3);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      
      int int0 = httpConnection_Response0.statusCode();
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, int0);
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "et-o7ie";
      boolean boolean0 = linkedList0.offerFirst(string0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(string0));
      
      List<String> list0 = hashMap0.put(string0, linkedList0);
      assertNull(list0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(string0));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "set-clSkie";
      List<String> list0 = null;
      List<String> list1 = hashMap0.put(string0, list0);
      assertNull(list1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      String string0 = httpConnection_Response0.statusMessage();
      assertNull(string0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      int int0 = httpConnection_Response0.statusCode();
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "H)0";
      List<String> list0 = null;
      List<String> list1 = hashMap0.put(string0, list0);
      assertNull(list1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "selected";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean0 = linkedList0.add(string0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(string0));
      
      List<String> list0 = hashMap0.put(string0, linkedList0);
      assertNull(list0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(string0));
      
      List<String> list1 = hashMap0.put(string0, list0);
      assertNotNull(list1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertTrue(linkedList0.contains(string0));
      assertTrue(list1.contains(string0));
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(string0));
      
      String string1 = "GL!aDW";
      boolean boolean1 = linkedList1.add(string1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(string1, string0);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList1.contains(string1));
      assertFalse(linkedList1.contains(string0));
      
      boolean boolean2 = linkedList1.add(string0);
      assertNotSame(string0, string1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(2, linkedList1.size());
      assertTrue(boolean2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(linkedList1.contains(string1));
      
      Collection<List<String>> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(collection0.contains(list1));
      
      List<String> list2 = hashMap0.put(string0, linkedList1);
      assertNull(list2);
      assertNotSame(string0, string1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2, linkedList1.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList1.contains(string1));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response1);
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response2);
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNull(httpConnection_Response2.contentType());
      assertNull(httpConnection_Response2.statusMessage());
      assertNull(httpConnection_Response2.charset());
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response0));
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response1));
      
      Map<String, String> map0 = httpConnection_Response2.cookies;
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      httpConnection_Response0.cookies = map0;
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNull(httpConnection_Response2.contentType());
      assertNull(httpConnection_Response2.statusMessage());
      assertNull(httpConnection_Response2.charset());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, httpConnection_Response0.cookies.size());
      assertTrue(httpConnection_Response0.cookies.isEmpty());
      
      Map<String, String> map1 = httpConnection_Response1.cookies;
      assertNotNull(map1);
      assertNotSame(map1, map0);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(map1.equals((Object)map0));
      
      // Undeclared exception!
      try { 
        httpConnection_Response1.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      String string0 = httpConnection_Response0.contentType();
      assertNull(string0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      String string1 = httpConnection_Response0.statusMessage();
      assertNull(string1);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<String> list0 = null;
      List<String> list1 = hashMap0.put(string1, list0);
      assertNull(list1);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      List<String> list2 = hashMap0.put(string0, list0);
      assertNull(list2);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      Connection.Method connection_Method0 = Connection.Method.GET;
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.method(connection_Method0);
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      
      String string1 = "ycrb`uNOu:?*";
      List<String> list0 = hashMap0.put(string1, linkedList0);
      assertNull(list0);
      assertNotSame(string1, string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      assertFalse(linkedList0.contains(string1));
      
      List<String> list1 = hashMap0.put(string0, linkedList0);
      assertNull(list1);
      assertNotSame(string0, string1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(linkedList0.contains(string1));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      int int0 = httpConnection_Response0.statusCode();
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      Connection.Method connection_Method0 = Connection.Method.GET;
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.method(connection_Method0);
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      
      boolean boolean0 = linkedList0.add(string0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(string0));
      
      String string1 = "ycrb`uNOu:?*";
      List<String> list0 = hashMap0.put(string1, linkedList0);
      assertNull(list0);
      assertNotSame(string1, string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      assertTrue(linkedList0.contains(string0));
      assertFalse(linkedList0.contains(string1));
      
      List<String> list1 = hashMap0.put(string0, linkedList0);
      assertNull(list1);
      assertNotSame(string0, string1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertTrue(linkedList0.contains(string0));
      assertFalse(linkedList0.contains(string1));
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Response0.method = connection_Method0;
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      String string1 = "Iya";
      List<String> list0 = hashMap0.put(string0, linkedList0);
      assertNull(list0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      String string2 = "e_XXzr?Cb[Tol]w";
      String string3 = "set-cookie";
      List<String> list1 = hashMap0.put(string3, linkedList0);
      assertNull(list1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(linkedList0.contains(string1));
      
      boolean boolean0 = linkedList0.offerFirst(string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(linkedList0.contains(string1));
      assertTrue(linkedList0.contains(string2));
      
      List<String> list2 = hashMap0.put(string1, linkedList0);
      assertNull(list2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(linkedList0.contains(string1));
      assertTrue(linkedList0.contains(string2));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Response0.method = connection_Method0;
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      String string1 = "Iya";
      List<String> list0 = hashMap0.put(string0, linkedList0);
      assertNull(list0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      String string2 = "e_XXzr?Cb[T=9ol]w";
      String string3 = "set-cookie";
      URL uRL0 = null;
      httpConnection_Response0.url = uRL0;
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      List<String> list1 = hashMap0.put(string3, linkedList0);
      assertNull(list1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(linkedList0.contains(string2));
      
      boolean boolean0 = linkedList0.offerFirst(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertTrue(linkedList0.contains(string2));
      assertFalse(linkedList0.contains(string1));
      
      List<String> list2 = hashMap0.put(string1, linkedList0);
      assertNull(list2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertTrue(linkedList0.contains(string2));
      assertFalse(linkedList0.contains(string1));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      
      String string4 = httpConnection_Response0.statusMessage();
      assertNull(string4);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      int int0 = httpConnection_Response0.statusCode();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, int0);
      
      String string5 = httpConnection_Response0.charset();
      assertNull(string5);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Response0.method = connection_Method0;
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      boolean boolean0 = linkedList0.add(string0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      List<String> list0 = hashMap0.put(string0, linkedList0);
      assertNull(list0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, linkedList0.size());
      
      String string1 = "e_XXzr?Cb[T=9ol]w";
      String string2 = "set-cookie";
      URL uRL0 = null;
      httpConnection_Response0.url = uRL0;
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      List<String> list1 = hashMap0.put(string2, linkedList0);
      assertNull(list1);
      assertNotSame(string2, string1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(linkedList0.contains(string1));
      
      List<String> list2 = hashMap0.put(string0, linkedList0);
      assertNotNull(list2);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertFalse(linkedList0.contains(string1));
      assertFalse(list2.contains(string1));
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string3 = httpConnection_Response0.statusMessage();
      assertNull(string3);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      int int0 = httpConnection_Response0.statusCode();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, int0);
      
      String string4 = httpConnection_Response0.charset();
      assertNull(string4);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "Iya";
      String string1 = "e_XXzr?Cb[Tol]w";
      String string2 = "";
      boolean boolean0 = linkedList0.add(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(linkedList0.contains(string2));
      assertFalse(linkedList0.contains(string1));
      
      String string3 = "set-cookie";
      List<String> list0 = hashMap0.put(string3, linkedList0);
      assertNull(list0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(linkedList0.contains(string2));
      assertFalse(linkedList0.contains(string1));
      
      boolean boolean1 = linkedList0.offerFirst(string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(string2));
      assertFalse(linkedList0.contains(string0));
      
      List<String> list1 = new LinkedList<String>();
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(list1.contains(string2));
      
      int int0 = httpConnection_Response0.statusCode();
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals(0, int0);
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
