/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 22:07:05 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "qW@";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("qW@", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("qW@", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      int int0 = 0;
      textNode0.setParentNode(textNode0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("qW@", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("qW@", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string0 = textNode0.gettext();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNull(string0);
      
      int int0 = (-1963);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "marquee";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("marquee", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("marquee", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("marquee", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("marquee", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(attributes0);
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("marquee", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("marquee", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      
      StringBuilder stringBuilder0 = null;
      int int0 = 3719;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals("marquee", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("marquee", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "[_\\#80\"U2.7-*]";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      int int0 = (-173);
      textNode0.setSiblingIndex(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals((-173), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      
      TextNode textNode1 = (TextNode)textNode0.attr(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals((-173), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-173), textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = textNode0.absUrl(string0);
      assertEquals("", string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals((-173), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      
      String string2 = TextNode.stripLeadingWhitespace(string0);
      assertEquals("[_\\#80\"U2.7-*]", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      textNode0.settext(textNode0.TEXT_KEY);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals((-173), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.gettext());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(textNode0, textNode1);
      
      String string3 = textNode0.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string3);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals((-173), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 32;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      assertEquals(" ", stringBuilder0.toString());
      assertEquals(" ", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean0);
      assertEquals(" ", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertNotNull(textNode0);
      
      Document document0 = new Document(textNode0.TEXT_KEY);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("text", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prependChild(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("text", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[12];
      textNode0.outerHtmlHead(stringBuilder0, charArray0[6], document1.outputSettings);
      assertEquals(12, charArray0.length);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals("text", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("text", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", stringBuilder0.toString());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "52";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("52", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("52", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) textNode0.TEXT_KEY);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("52", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("52", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("52", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("52", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", stringBuilder0.toString());
      
      int int0 = 1;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("52", textNode0.baseUri());
      assertEquals("5", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("2", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("52", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      String string1 = textNode1.text();
      assertEquals("2", string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("52", textNode0.baseUri());
      assertEquals("5", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("2", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("52", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "W'Q3_$m[0-_yDG,=?";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.text);
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      document0.title(textNode0.text);
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.prependChild(textNode0);
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("W'Q3_$m[0-_yDG,=?", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(textNode0.text);
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode1.baseUri());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = document0.toString();
      assertEquals("W'Q3_$m[0-_yDG,=?\n<html>\n <head>\n  <title>W'Q3_$m[0-_yDG,=?</title>\n </head>\n <body></body>\n</html>", string1);
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertNotSame(string1, string0);
      
      Elements elements0 = document0.getElementsContainingOwnText(textNode0.text);
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(2, elements0.size());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(elements0);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(document0, document1);
      
      TextNode textNode2 = textNode0.text(textNode0.text);
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode2.gettext());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(textNode2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = textNode0.getTEXT_KEY();
      assertEquals("text", string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = textNode0.toString();
      assertEquals("", string2);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      StringBuilder stringBuilder0 = null;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertNotNull(document_OutputSettings0);
      
      textNode0.outerHtmlTail(stringBuilder0, document_OutputSettings0.indentAmount, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(document_OutputSettings0.indentAmount);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.baseUri());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "dt";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("dt", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("dt", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertNotNull(textNode0);
      
      String string1 = textNode0.getWholeText();
      assertEquals("", string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "cf^lY1gzAS_N~s1T";
      String string1 = "S4\\cRx6y*']]hV";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("S4\\cRx6y*']]hV", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("cf^lY1gzAS_N~s1T", textNode0.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = textNode0.hasAttr(string0);
      assertFalse(boolean0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("S4\\cRx6y*']]hV", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("cf^lY1gzAS_N~s1T", textNode0.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "}`SI<5$!P/vbP";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("}`SI<5$!P/vbP", textNode0.gettext());
      assertEquals("}`SI<5$!P/vbP", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text(string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("}`SI<5$!P/vbP", textNode0.gettext());
      assertEquals("}`SI<5$!P/vbP", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("}`SI<5$!P/vbP", textNode1.gettext());
      assertEquals("}`SI<5$!P/vbP", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      TextNode textNode2 = (TextNode)textNode1.attr(string0, textNode0.TEXT_KEY);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("}`SI<5$!P/vbP", textNode0.gettext());
      assertEquals("}`SI<5$!P/vbP", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("}`SI<5$!P/vbP", textNode1.gettext());
      assertEquals("}`SI<5$!P/vbP", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("}`SI<5$!P/vbP", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("}`SI<5$!P/vbP", textNode2.gettext());
      assertEquals(0, textNode2.childNodeSize());
      assertNotNull(textNode2);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      
      String string1 = "& !;0i#)";
      String string2 = textNode1.attr(string1);
      assertEquals("", string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("}`SI<5$!P/vbP", textNode0.gettext());
      assertEquals("}`SI<5$!P/vbP", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("}`SI<5$!P/vbP", textNode1.gettext());
      assertEquals("}`SI<5$!P/vbP", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      int int0 = 3962;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string0 = textNode0.getWholeText();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNull(string0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        textNode0.attr(string1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string0 = "-HiPBzl([&k\\V";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$Matches";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.gettext());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      String string1 = textNode0.text();
      assertEquals("", string1);
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      
      List<Node> list0 = textNode1.siblingNodes();
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(list0);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      textNode0.ensureAttributes();
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "org.jsoup.nodes.TextNode";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertEquals("org.jsoup.nodes.TextNode", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      int int0 = 3971;
      textNode0.setSiblingIndex(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(3971, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      
      TextNode textNode1 = new TextNode(textNode0.text, textNode0.TEXT_KEY);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(3971, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.baseUri());
      assertNull(textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      StringBuilder stringBuilder0 = null;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertNotNull(document_OutputSettings0);
      
      textNode0.setParentNode(textNode1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(3971, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.baseUri());
      assertNull(textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "Split offset must not be greater than current text length";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = null;
      TextNode textNode1 = textNode0.text(string2);
      assertNull(textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertNull(textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      // Undeclared exception!
      try { 
        textNode1.absUrl(textNode0.TEXT_KEY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      int int0 = (-575);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) string0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      boolean boolean0 = true;
      StringBuilder stringBuilder2 = stringBuilder1.append(boolean0);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertEquals("true", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      long long0 = 3876L;
      StringBuilder stringBuilder3 = stringBuilder2.append(long0);
      assertEquals("true3876", stringBuilder0.toString());
      assertEquals("true3876", stringBuilder1.toString());
      assertEquals("true3876", stringBuilder2.toString());
      assertEquals("true3876", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      
      int int0 = 0;
      float float0 = 0.0F;
      StringBuilder stringBuilder4 = stringBuilder0.append(float0);
      assertEquals("true38760.0", stringBuilder0.toString());
      assertEquals("true38760.0", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      
      char char0 = 's';
      StringBuilder stringBuilder5 = stringBuilder3.insert(int0, char0);
      assertEquals("strue38760.0", stringBuilder0.toString());
      assertEquals("strue38760.0", stringBuilder1.toString());
      assertEquals("strue38760.0", stringBuilder2.toString());
      assertEquals("strue38760.0", stringBuilder3.toString());
      assertEquals("strue38760.0", stringBuilder5.toString());
      assertNotNull(stringBuilder5);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder3);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder5);
      assertFalse(boolean1);
      assertEquals("strue38760.0", stringBuilder0.toString());
      assertEquals("strue38760.0", stringBuilder1.toString());
      assertEquals("strue38760.0", stringBuilder2.toString());
      assertEquals("strue38760.0", stringBuilder3.toString());
      assertEquals("strue38760.0", stringBuilder5.toString());
      assertFalse(boolean1 == boolean0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder3);
      
      TextNode textNode0 = new TextNode();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "/?j3Xzp){";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/?j3Xzp){", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("/?j3Xzp){", textNode0.gettext());
      assertNotNull(textNode0);
      
      String string1 = textNode0.gettext();
      assertEquals("/?j3Xzp){", string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/?j3Xzp){", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("/?j3Xzp){", textNode0.gettext());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "org.jsoup.nodes.TextNode";
      String string3 = TextNode.stripLeadingWhitespace(textNode0.text);
      assertEquals("/?j3Xzp){", string3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/?j3Xzp){", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("/?j3Xzp){", textNode0.gettext());
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      
      String string4 = TextNode.stripLeadingWhitespace(string2);
      assertEquals("org.jsoup.nodes.TextNode", string4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string4);
      assertSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      
      String string5 = textNode0.text();
      assertEquals("/?j3Xzp){", string5);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/?j3Xzp){", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("/?j3Xzp){", textNode0.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string5, string2);
      assertSame(string5, string1);
      assertNotSame(string5, string0);
      assertSame(string5, string3);
      assertNotSame(string5, string4);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "Qb;,kW";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertEquals("Qb;,kW", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string2 = textNode0.nodeName();
      assertEquals("#text", string2);
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "|";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("|", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("|", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = textNode0.toString();
      assertEquals("|", string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("|", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "/M!hArV7^(n^EX";
      String string1 = "Ghq'[~rmrz'*0?TI";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("/M!hArV7^(n^EX", textNode0.gettext());
      assertEquals("Ghq'[~rmrz'*0?TI", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string1);
      assertEquals("/M!hArV7^(n^EX", textNode0.gettext());
      assertEquals("Ghq'[~rmrz'*0?TI", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("Ghq'[~rmrz'*0?TI", textNode1.baseUri());
      assertEquals("/M!hArV7^(n^EX", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "text";
      String string1 = "8f|";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8f|", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      
      String string2 = "f82z";
      textNode0.settext(string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("f82z", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8f|", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "#text";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.gettext());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.gettext());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(attributes0);
      
      List<Attribute> list0 = attributes0.asList();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.gettext());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Node node0 = textNode0.previousSibling();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.gettext());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(node0);
      
      textNode0.attributes = attributes0;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.gettext());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      
      String string1 = "summary";
      textNode0.settext(string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("summary", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "";
      String string3 = TextNode.stripLeadingWhitespace(string2);
      assertEquals("", string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      
      String string4 = "z,b|twR._Vf";
      TextNode textNode1 = textNode0.text(string4);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("z,b|twR._Vf", textNode0.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("z,b|twR._Vf", textNode1.gettext());
      assertEquals("#text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(textNode1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(textNode0, textNode1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(textNode1, textNode0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string0 = ";Ax?8*ql+.";
      TextNode textNode1 = textNode0.text(string0);
      assertNull(textNode0.baseUri());
      assertEquals(";Ax?8*ql+.", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.baseUri());
      assertEquals(";Ax?8*ql+.", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = textNode1.getWholeText();
      assertEquals(";Ax?8*ql+.", string1);
      assertNull(textNode0.baseUri());
      assertEquals(";Ax?8*ql+.", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.baseUri());
      assertEquals(";Ax?8*ql+.", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(string1);
      assertSame(textNode0, textNode1);
      assertSame(string0, string1);
      assertSame(textNode1, textNode0);
      assertSame(string1, string0);
      
      String string2 = "-b*:Y][%";
      textNode1.ensureAttributes();
      assertNull(textNode0.baseUri());
      assertEquals(";Ax?8*ql+.", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.baseUri());
      assertEquals(";Ax?8*ql+.", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(string0.equals((Object)string2));
      assertSame(textNode0, textNode1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode1, textNode0);
      
      boolean boolean0 = textNode1.hasAttr(string2);
      assertFalse(boolean0);
      assertNull(textNode0.baseUri());
      assertEquals(";Ax?8*ql+.", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.baseUri());
      assertEquals(";Ax?8*ql+.", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(textNode0, textNode1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode1, textNode0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = textNode1.toString();
      assertEquals(";Ax?8*ql+.", string3);
      assertNull(textNode0.baseUri());
      assertEquals(";Ax?8*ql+.", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.baseUri());
      assertEquals(";Ax?8*ql+.", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(string0.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertSame(textNode0, textNode1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(textNode1, textNode0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "7?K+pxhR\"X>";
      String string1 = ">-_psm_^%,XyZC2|:";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(">-_psm_^%,XyZC2|:", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("7?K+pxhR\"X>", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      
      String string2 = "org.jsoup.select.Evaluator$Attribute";
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string2);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(">-_psm_^%,XyZC2|:", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("7?K+pxhR\"X>", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(">-_psm_^%,XyZC2|:", textNode1.baseUri());
      assertEquals("7?K+pxhR\"X>", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "#text";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.gettext());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = ";v%^e=6Q1Q";
      textNode0.settext(string1);
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(";v%^e=6Q1Q", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 10;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      int int0 = 57;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "[%s~=%s]";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[%s~=%s]", textNode0.baseUri());
      assertEquals("[%s~=%s]", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[%s~=%s]", textNode0.baseUri());
      assertEquals("[%s~=%s]", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      textNode0.ensureAttributes();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[%s~=%s]", textNode0.baseUri());
      assertEquals("[%s~=%s]", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      
      String string1 = textNode0.gettext();
      assertEquals("[%s~=%s]", string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[%s~=%s]", textNode0.baseUri());
      assertEquals("[%s~=%s]", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      List<Node> list1 = textNode0.childNodesCopy();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[%s~=%s]", textNode0.baseUri());
      assertEquals("[%s~=%s]", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertSame(string0, string1);
      
      String string2 = "Entities";
      String string3 = TextNode.normaliseWhitespace(string2);
      assertEquals("Entities", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      
      String string4 = "YHiuMJR&N[Z^MLA9";
      String string5 = textNode0.getWholeText();
      assertEquals("[%s~=%s]", string5);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[%s~=%s]", textNode0.baseUri());
      assertEquals("[%s~=%s]", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string0);
      assertNotSame(string5, string4);
      assertSame(string5, string1);
      assertNotSame(string5, string3);
      
      String string6 = textNode0.absUrl(string4);
      assertEquals("", string6);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[%s~=%s]", textNode0.baseUri());
      assertEquals("[%s~=%s]", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string6);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      
      String string7 = "";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        textNode0.attr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = textNode0.getTEXT_KEY();
      assertEquals("text", string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "org.jsoup.select.Collector$Accumulator";
      String string1 = null;
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("org.jsoup.select.Collector$Accumulator", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string2 = "h4";
      String string3 = "";
      TextNode textNode1 = (TextNode)textNode0.attr(string2, string3);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("org.jsoup.select.Collector$Accumulator", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("org.jsoup.select.Collector$Accumulator", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(textNode1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(textNode1, textNode0);
      
      textNode0.settext(string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(textNode0, textNode1);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.attributes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      String string0 = "Gl,&Me<I2-?$NOs";
      TextNode textNode1 = textNode0.text(string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Gl,&Me<I2-?$NOs", textNode0.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertEquals("Gl,&Me<I2-?$NOs", textNode1.gettext());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      int int0 = (-52);
      textNode1.setSiblingIndex(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-52), textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Gl,&Me<I2-?$NOs", textNode0.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals((-52), textNode1.siblingIndex());
      assertNull(textNode1.baseUri());
      assertEquals("Gl,&Me<I2-?$NOs", textNode1.gettext());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-52), textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Gl,&Me<I2-?$NOs", textNode0.gettext());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(textNode0, textNode1);
      
      textNode1.childNodes = list0;
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-52), textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Gl,&Me<I2-?$NOs", textNode0.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals((-52), textNode1.siblingIndex());
      assertNull(textNode1.baseUri());
      assertEquals("Gl,&Me<I2-?$NOs", textNode1.gettext());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, textNode1.childNodes.size());
      assertTrue(textNode1.childNodes.isEmpty());
      
      int int1 = 0;
      TextNode textNode2 = textNode1.splitText(int1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-52), textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals((-52), textNode1.siblingIndex());
      assertNull(textNode1.baseUri());
      assertEquals("", textNode1.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("Gl,&Me<I2-?$NOs", textNode2.gettext());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertNull(textNode2.baseUri());
      assertFalse(int1 == int0);
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode2);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      
      TextNode textNode3 = textNode1.text(textNode0.TEXT_KEY);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-52), textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", textNode0.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals((-52), textNode1.siblingIndex());
      assertNull(textNode1.baseUri());
      assertEquals("text", textNode3.gettext());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals((-52), textNode3.siblingIndex());
      assertNull(textNode3.baseUri());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.childNodeSize());
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode2));
      assertNotNull(textNode3);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode3);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode3);
      assertSame(textNode3, textNode0);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      
      String string1 = null;
      String string2 = "3JrJp!mTu";
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string1, string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      Node node0 = textNode0.previousSibling();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertNull(node0);
      
      String string0 = textNode0.getWholeText();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      String string0 = "0$,p4C<>C";
      TextNode textNode1 = textNode0.text(string0);
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("0$,p4C<>C", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("0$,p4C<>C", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      boolean boolean0 = textNode1.isBlank();
      assertFalse(boolean0);
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("0$,p4C<>C", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("0$,p4C<>C", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$Matches";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.gettext());
      assertNotNull(textNode0);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.text(string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode1.gettext());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = "org.jsoup.nodes.XmlDeclaration";
      String string2 = textNode1.absUrl(string1);
      assertEquals("", string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode1.gettext());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      textNode0.ensureAttributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      
      String string3 = textNode0.nodeName();
      assertEquals("#text", string3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("org.jsoup.select.Evaluator$Matches", textNode0.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string2 = textNode0.getWholeText();
      assertEquals("", string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      
      String string3 = "";
      // Undeclared exception!
      try { 
        textNode0.attr(string3, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      String string0 = "Split offset must not be greater than current text length";
      textNode0.text = string0;
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      
      String string1 = "De8D\\3Kmt%MX";
      TextNode textNode1 = textNode0.text(string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("De8D\\3Kmt%MX", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("De8D\\3Kmt%MX", textNode1.gettext());
      assertNull(textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      
      String string2 = textNode1.attr(textNode0.TEXT_KEY);
      assertEquals("De8D\\3Kmt%MX", string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("De8D\\3Kmt%MX", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("De8D\\3Kmt%MX", textNode1.gettext());
      assertNull(textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(textNode1, textNode0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = textNode1.attr(textNode0.TEXT_KEY);
      assertEquals("De8D\\3Kmt%MX", string3);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("De8D\\3Kmt%MX", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("De8D\\3Kmt%MX", textNode1.gettext());
      assertNull(textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertSame(string1, string2);
      assertSame(textNode1, textNode0);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      
      String string4 = "#text";
      String string5 = TextNode.stripLeadingWhitespace(string4);
      assertEquals("#text", string5);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string5);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertSame(string5, string4);
      assertNotSame(string5, string1);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "_cR*Y-NBn\\NQxRm";
      String string1 = "=cDf$PM:2gb";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("_cR*Y-NBn\\NQxRm", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("=cDf$PM:2gb", textNode0.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = textNode0.getWholeText();
      assertEquals("_cR*Y-NBn\\NQxRm", string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("_cR*Y-NBn\\NQxRm", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("=cDf$PM:2gb", textNode0.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = null;
      TextNode textNode1 = textNode0.text(string3);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("=cDf$PM:2gb", textNode0.baseUri());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("=cDf$PM:2gb", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNull(textNode1.gettext());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string4 = textNode0.getTEXT_KEY();
      assertEquals("text", string4);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("=cDf$PM:2gb", textNode0.baseUri());
      assertNull(textNode0.gettext());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(textNode0, textNode1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      
      boolean boolean0 = textNode0.isBlank();
      assertTrue(boolean0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("=cDf$PM:2gb", textNode0.baseUri());
      assertNull(textNode0.gettext());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(textNode0, textNode1);
      
      // Undeclared exception!
      try { 
        textNode1.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = (TextNode)textNode0.clone();
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertEquals("", textNode1.gettext());
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      TextNode textNode2 = textNode0.text(string0);
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.gettext());
      assertNull(textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotNull(textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      
      int int0 = 2338;
      String string2 = textNode2.outerHtml();
      assertEquals("", string2);
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.gettext());
      assertNull(textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(string2, string0);
      
      textNode2.siblingIndex = int0;
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2338, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(2338, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.gettext());
      assertNull(textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      
      String string3 = textNode2.toString();
      assertEquals("", string3);
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2338, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(2338, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.gettext());
      assertNull(textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertTrue(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      String string4 = textNode0.getWholeText();
      assertEquals("", string4);
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2338, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      
      String string5 = textNode0.gettext();
      assertEquals("", string5);
      assertEquals("", textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(2338, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string3);
      assertSame(string5, string0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(textNode2.siblingIndex, boolean0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2338
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "p\\?-s4 ozgo{a_/[";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertEquals("p\\?-s4 ozgo{a_/[", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.ensureAttributes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertNotNull(textNode0);
      
      int int0 = 0;
      textNode0.siblingIndex = int0;
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      
      String string1 = textNode0.toString();
      assertEquals("", string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = TextNode.normaliseWhitespace(string1);
      assertEquals("", string2);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = textNode0.getTEXT_KEY();
      assertEquals("text", string3);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      textNode0.settext(string3);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      String string4 = textNode1.getTEXT_KEY();
      assertEquals("text", string4);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertSame(string4, string3);
      assertNotSame(string4, string2);
      
      String string5 = textNode1.nodeName();
      assertEquals("#text", string5);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      
      String string6 = textNode1.attr(string0);
      assertEquals("", string6);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertSame(string6, string0);
      assertNotSame(string6, string5);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "f|E~QaRt>lk3G:TpYk";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("f|E~QaRt>lk3G:TpYk", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "xhpHkX_u!35I3kwE,v";
      int int0 = 1834;
      textNode0.setSiblingIndex(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(1834, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("f|E~QaRt>lk3G:TpYk", textNode0.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      TextNode textNode1 = textNode0.text(string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(1834, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("xhpHkX_u!35I3kwE,v", textNode0.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("xhpHkX_u!35I3kwE,v", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(1834, textNode1.siblingIndex());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(textNode1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(textNode1, textNode0);
      
      int int1 = (-4911);
      // Undeclared exception!
      try { 
        textNode1.splitText(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "\\Dj \" }h*";
      String string1 = "org.jsoup.nodes.DataNode";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("org.jsoup.nodes.DataNode", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("\\Dj \" }h*", textNode0.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string1);
      assertEquals("org.jsoup.nodes.DataNode", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("\\Dj \" }h*", textNode0.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("org.jsoup.nodes.DataNode", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("\\Dj \" }h*", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      List<Node> list0 = textNode0.childNodesCopy();
      assertEquals("org.jsoup.nodes.DataNode", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("\\Dj \" }h*", textNode0.gettext());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(list0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      
      TextNode textNode2 = (TextNode)textNode0.clone();
      assertEquals("org.jsoup.nodes.DataNode", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("\\Dj \" }h*", textNode0.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("org.jsoup.nodes.DataNode", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("\\Dj \" }h*", textNode2.gettext());
      assertEquals(0, textNode2.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotNull(textNode2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      
      int int0 = 1122;
      textNode0.setSiblingIndex(int0);
      assertEquals("org.jsoup.nodes.DataNode", textNode0.baseUri());
      assertEquals(1122, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("\\Dj \" }h*", textNode0.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode2));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      
      String string2 = textNode0.absUrl(string0);
      assertEquals("", string2);
      assertEquals("org.jsoup.nodes.DataNode", textNode0.baseUri());
      assertEquals(1122, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("\\Dj \" }h*", textNode0.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      textNode0.settext(string1);
      assertEquals("org.jsoup.nodes.DataNode", textNode0.baseUri());
      assertEquals(1122, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("org.jsoup.nodes.DataNode", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      
      String string3 = "org.jsoup.select.Evaluator$Class";
      String string4 = textNode0.attr(string3);
      assertEquals("", string4);
      assertEquals("org.jsoup.nodes.DataNode", textNode0.baseUri());
      assertEquals(1122, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("org.jsoup.nodes.DataNode", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      
      String string5 = "value";
      boolean boolean0 = textNode0.hasAttr(string5);
      assertFalse(boolean0);
      assertEquals("org.jsoup.nodes.DataNode", textNode0.baseUri());
      assertEquals(1122, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("org.jsoup.nodes.DataNode", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      
      String string6 = "2(n*&#G\\zrY";
      TextNode textNode3 = (TextNode)textNode0.removeAttr(string6);
      assertEquals("org.jsoup.nodes.DataNode", textNode0.baseUri());
      assertEquals(1122, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("org.jsoup.nodes.DataNode", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("org.jsoup.nodes.DataNode", textNode3.baseUri());
      assertEquals("org.jsoup.nodes.DataNode", textNode3.gettext());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals(1122, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(textNode3.equals((Object)textNode2));
      assertNotNull(textNode3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertSame(textNode3, textNode0);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "[_\\#80\"U2.7-*]";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(attributes0);
      
      Node node0 = textNode0.nextSibling();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(node0);
      
      String string1 = textNode0.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "/>";
      TextNode textNode1 = (TextNode)textNode0.attr(string2, string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(textNode1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(textNode1, textNode0);
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      
      String string3 = "";
      String string4 = TextNode.normaliseWhitespace(string3);
      assertEquals("", string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertNotSame(string3, string0);
      assertSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      
      String string5 = textNode0.absUrl(string0);
      assertEquals("", string5);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertSame(textNode0, textNode1);
      assertSame(string5, string3);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      
      textNode0.settext(string5);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertSame(textNode0, textNode1);
      assertSame(string5, string3);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      
      String string6 = "";
      boolean boolean1 = textNode0.hasAttr(string6);
      assertFalse(boolean1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertSame(textNode0, textNode1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertSame(string6, string4);
      assertNotSame(string6, string2);
      assertSame(string6, string3);
      assertSame(string6, string5);
      
      String string7 = "(v!>m>dB&$g82";
      String string8 = TextNode.stripLeadingWhitespace(string7);
      assertEquals("(v!>m>dB&$g82", string8);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertSame(string7, string8);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string2);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string6);
      
      String string9 = "style";
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string9);
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("", textNode2.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertNotNull(textNode2);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string3);
      assertNotSame(string9, string7);
      assertNotSame(string9, string1);
      assertNotSame(string9, string6);
      assertNotSame(string9, string0);
      assertNotSame(string9, string4);
      assertNotSame(string9, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string9);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      
      textNode0.settext(string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string5));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string9);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string9);
      assertNotSame(string1, string8);
      assertNotSame(string1, string7);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string5);
      
      String string10 = textNode0.getTEXT_KEY();
      assertEquals("text", string10);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string10);
      assertNotSame(string0, string5);
      assertNotSame(string0, string9);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string10, string5);
      assertNotSame(string10, string0);
      assertNotSame(string10, string7);
      assertNotSame(string10, string1);
      assertNotSame(string10, string9);
      assertNotSame(string10, string8);
      assertNotSame(string10, string3);
      assertNotSame(string10, string2);
      assertNotSame(string10, string4);
      assertNotSame(string10, string6);
      
      String string11 = textNode0.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string11);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string8));
      assertNotNull(string11);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string10);
      assertNotSame(string0, string5);
      assertNotSame(string0, string9);
      assertNotSame(string0, string4);
      assertNotSame(string0, string11);
      assertNotSame(string0, string6);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string11, string7);
      assertNotSame(string11, string4);
      assertNotSame(string11, string3);
      assertNotSame(string11, string5);
      assertNotSame(string11, string9);
      assertNotSame(string11, string0);
      assertNotSame(string11, string10);
      assertNotSame(string11, string1);
      assertNotSame(string11, string6);
      assertNotSame(string11, string2);
      assertNotSame(string11, string8);
      
      StringBuilder stringBuilder0 = null;
      int int0 = (-1355);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "^\\s+";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertEquals("^\\s+", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "q^U";
      int int0 = 0;
      TextNode textNode0 = new TextNode();
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string3 = textNode0.getTEXT_KEY();
      assertEquals("text", string3);
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertEquals("", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean1 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean1);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(boolean1 == boolean0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      int int1 = 290;
      document_OutputSettings1.setindentAmount(int1);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(290, document_OutputSettings0.indentAmount);
      assertEquals(290, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(290, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertEquals(290, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(290, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertEquals(290, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(boolean1 == boolean0);
      assertFalse(int1 == int0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(document_OutputSettings0.charset);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(290, document_OutputSettings0.indentAmount);
      assertEquals(290, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings2.prettyPrint);
      assertEquals(290, document_OutputSettings2.indentAmount);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(290, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertEquals(290, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(290, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertEquals(290, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertFalse(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(290, document_OutputSettings2.getindentAmount());
      assertEquals(290, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(boolean1 == boolean0);
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(290, document_OutputSettings0.indentAmount);
      assertEquals(290, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings2.prettyPrint);
      assertEquals(290, document_OutputSettings2.indentAmount);
      assertFalse(document_OutputSettings3.prettyPrint);
      assertEquals(290, document_OutputSettings3.indentAmount);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(290, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertEquals(290, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(290, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertEquals(290, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertFalse(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(290, document_OutputSettings2.getindentAmount());
      assertEquals(290, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(290, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.getprettyPrint());
      assertEquals(290, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertTrue(boolean1 == boolean0);
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertEquals(290, document_OutputSettings4.indentAmount);
      assertFalse(document_OutputSettings4.prettyPrint);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(290, document_OutputSettings0.indentAmount);
      assertEquals(290, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings2.prettyPrint);
      assertEquals(290, document_OutputSettings2.indentAmount);
      assertFalse(document_OutputSettings3.prettyPrint);
      assertEquals(290, document_OutputSettings3.indentAmount);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.getescapeMode());
      assertFalse(document_OutputSettings4.getprettyPrint());
      assertEquals(290, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(290, document_OutputSettings4.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(290, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertEquals(290, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(290, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertEquals(290, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertFalse(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(290, document_OutputSettings2.getindentAmount());
      assertEquals(290, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(290, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.getprettyPrint());
      assertEquals(290, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertTrue(boolean1 == boolean0);
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.xhtml;
      document_OutputSettings4.escapeMode = entities_EscapeMode1;
      assertFalse(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.getescapeMode());
      assertEquals(290, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(290, document_OutputSettings4.getindentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(290, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertEquals(290, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(290, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertEquals(290, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertFalse(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(290, document_OutputSettings2.getindentAmount());
      assertEquals(290, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(290, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.getprettyPrint());
      assertEquals(290, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      
      String string4 = "cU5U*Xd*";
      int int2 = 0;
      String string5 = "";
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "Qb\\;,kW";
      String string1 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = "";
      TextNode textNode1 = textNode0.text(string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNull(textNode1.baseUri());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = textNode1.toString();
      assertEquals("", string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNull(textNode1.baseUri());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string0, string1);
      assertSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      
      boolean boolean0 = textNode1.hasAttr(textNode1.TEXT_KEY);
      assertTrue(boolean0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNull(textNode1.baseUri());
      assertTrue(string0.equals((Object)string1));
      assertSame(textNode0, textNode1);
      assertNotSame(string0, string1);
      assertSame(textNode1, textNode0);
      
      String string2 = textNode1.gettext();
      assertEquals("", string2);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNull(textNode1.baseUri());
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertSame(textNode0, textNode1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode1, textNode0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      String string3 = "\"8o}*.K>i+O";
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string3);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertNull(textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("", textNode2.gettext());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      
      boolean boolean1 = textNode1.hasAttr(string2);
      assertFalse(boolean1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNull(textNode1.baseUri());
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      String string4 = TextNode.normaliseWhitespace(string2);
      assertEquals("", string4);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNull(textNode1.baseUri());
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(string2, string3);
      assertSame(string2, string4);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string4, string3);
      assertSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      
      String string5 = textNode0.toString();
      assertEquals("", string5);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      
      String string6 = textNode0.absUrl(string3);
      assertEquals("", string6);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string6, string5);
      assertSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertSame(string6, string4);
      assertSame(string6, string2);
      
      String string7 = "";
      textNode0.settext(string7);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(string7, string6);
      assertSame(string7, string0);
      assertSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertSame(string7, string2);
      
      String string8 = "k,vu$R";
      StringBuilder stringBuilder0 = new StringBuilder(string8);
      assertEquals("k,vu$R", stringBuilder0.toString());
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(stringBuilder0);
      
      int int0 = 0;
      char[] charArray0 = new char[1];
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("\u0000k,vu$R", stringBuilder1.toString());
      assertEquals("\u0000k,vu$R", stringBuilder0.toString());
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertSame(stringBuilder0, stringBuilder1);
      
      int int1 = (-5419);
      int int2 = (-1999);
      // Undeclared exception!
      try { 
        stringBuilder1.replace(int1, int2, string4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -5419
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "8[uiM\\bU*G`|FDzu";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string1 = "52GXKeRQWMR";
      TextNode textNode1 = (TextNode)textNode0.attr(string0, string1);
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode1.gettext());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      
      String string2 = "JOyvCF$9q";
      TextNode textNode2 = TextNode.createFromEncoded(textNode0.text, string2);
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("JOyvCF$9q", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode2.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      
      String string3 = textNode2.outerHtml();
      assertEquals("8[uiM\\bU*G`|FDzu", string3);
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("JOyvCF$9q", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode2.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      int int0 = 0;
      TextNode textNode3 = textNode0.splitText(int0);
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode3.gettext());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode3.baseUri());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertNotNull(textNode3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      
      String string4 = textNode3.text();
      assertEquals("8[uiM\\bU*G`|FDzu", string4);
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode3.gettext());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode3.baseUri());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertNotSame(string4, string3);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      
      textNode3.ensureAttributes();
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode3.gettext());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode3.baseUri());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      
      String string5 = "";
      String string6 = null;
      // Undeclared exception!
      try { 
        textNode1.text(string6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "[_\\#80\"U2.7-*]";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(attributes0);
      
      Node node0 = textNode0.nextSibling();
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(node0);
      
      String string1 = textNode0.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string1);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "/>";
      TextNode textNode1 = (TextNode)textNode0.attr(string2, string2);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(textNode1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(textNode1, textNode0);
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      
      String string3 = "";
      String string4 = TextNode.normaliseWhitespace(string3);
      assertEquals("", string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      
      String string5 = textNode0.absUrl(string0);
      assertEquals("", string5);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      
      textNode0.settext(string5);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      
      String string6 = "";
      boolean boolean1 = textNode0.hasAttr(string6);
      assertFalse(boolean1);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertSame(textNode0, textNode1);
      assertSame(string6, string3);
      assertSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertSame(string6, string5);
      
      String string7 = "(v!>m>dB&$g82";
      String string8 = TextNode.stripLeadingWhitespace(string7);
      assertEquals("(v!>m>dB&$g82", string8);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertSame(string7, string8);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertSame(string8, string7);
      assertNotSame(string8, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string2);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      
      String string9 = "style";
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string9);
      assertEquals("", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode2.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertNotNull(textNode2);
      assertNotSame(string9, string3);
      assertNotSame(string9, string8);
      assertNotSame(string9, string2);
      assertNotSame(string9, string6);
      assertNotSame(string9, string0);
      assertNotSame(string9, string4);
      assertNotSame(string9, string5);
      assertNotSame(string9, string1);
      assertNotSame(string9, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string9);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      
      textNode0.settext(string1);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertNotSame(string0, string8);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string9);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string7);
      assertNotSame(string1, string9);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string8);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      
      String string10 = textNode0.getTEXT_KEY();
      assertEquals("text", string10);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertNotNull(string10);
      assertNotSame(string0, string8);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string9);
      assertNotSame(string0, string10);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string10, string9);
      assertNotSame(string10, string3);
      assertNotSame(string10, string7);
      assertNotSame(string10, string5);
      assertNotSame(string10, string1);
      assertNotSame(string10, string0);
      assertNotSame(string10, string4);
      assertNotSame(string10, string6);
      assertNotSame(string10, string2);
      assertNotSame(string10, string8);
      
      String string11 = textNode0.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string11);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string10));
      assertNotNull(string11);
      assertNotSame(string0, string8);
      assertNotSame(string0, string11);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string9);
      assertNotSame(string0, string10);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string11, string3);
      assertNotSame(string11, string8);
      assertNotSame(string11, string2);
      assertNotSame(string11, string6);
      assertNotSame(string11, string0);
      assertNotSame(string11, string4);
      assertNotSame(string11, string5);
      assertNotSame(string11, string1);
      assertNotSame(string11, string7);
      assertNotSame(string11, string9);
      assertNotSame(string11, string10);
      
      StringBuilder stringBuilder0 = null;
      int int0 = (-1355);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      document_OutputSettings0.setprettyPrint(boolean1);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string11));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string0, string8);
      assertNotSame(string0, string11);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string9);
      assertNotSame(string0, string10);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(string6, string3);
      assertSame(string6, string4);
      assertNotSame(string6, string9);
      assertNotSame(string6, string1);
      assertNotSame(string6, string7);
      assertNotSame(string6, string10);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string8);
      assertNotSame(string6, string11);
      assertSame(string6, string5);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = "s";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertEquals("s", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string1);
      assertEquals("s", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, (float) int0);
      assertEquals("0.0s", stringBuilder0.toString());
      assertEquals("0.0s", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((float) int0);
      assertEquals("0.0s0.0", stringBuilder0.toString());
      assertEquals("0.0s0.0", stringBuilder1.toString());
      assertEquals("0.0s0.0", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      StringBuilder stringBuilder3 = stringBuilder2.append((double) int0);
      assertEquals("0.0s0.00.0", stringBuilder0.toString());
      assertEquals("0.0s0.00.0", stringBuilder1.toString());
      assertEquals("0.0s0.00.0", stringBuilder2.toString());
      assertEquals("0.0s0.00.0", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      
      boolean boolean0 = false;
      StringBuilder stringBuilder4 = stringBuilder1.appendCodePoint(int0);
      assertEquals("0.0s0.00.0\u0000", stringBuilder0.toString());
      assertEquals("0.0s0.00.0\u0000", stringBuilder1.toString());
      assertEquals("0.0s0.00.0\u0000", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder4);
      assertFalse(boolean1);
      assertEquals("0.0s0.00.0\u0000", stringBuilder0.toString());
      assertEquals("0.0s0.00.0\u0000", stringBuilder1.toString());
      assertEquals("0.0s0.00.0\u0000", stringBuilder4.toString());
      assertTrue(boolean1 == boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      
      String string2 = "";
      String string3 = "4.*x\"_WZ dJ";
      TextNode textNode0 = new TextNode(string2, string3);
      assertEquals("", textNode0.gettext());
      assertEquals("4.*x\"_WZ dJ", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("", textNode0.gettext());
      assertEquals("4.*x\"_WZ dJ", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(attributes0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      String string4 = TextNode.stripLeadingWhitespace(string0);
      assertEquals("s", string4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(string4, string1);
      assertSame(string4, string0);
      
      String string5 = "?sxC0t=b9/T;";
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string5);
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("4.*x\"_WZ dJ", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertEquals("4.*x\"_WZ dJ", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(textNode1);
      assertSame(textNode1, textNode0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "[_\\#80\"U2.7-*]";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertNotNull(attributes0);
      
      Node node0 = textNode0.nextSibling();
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertNull(node0);
      
      String string1 = textNode0.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string1);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "/>";
      TextNode textNode1 = (TextNode)textNode0.attr(string2, string2);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(textNode1, textNode0);
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      
      String string3 = "";
      String string4 = TextNode.normaliseWhitespace(string3);
      assertEquals("", string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      
      String string5 = textNode0.absUrl(string0);
      assertEquals("", string5);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(textNode0, textNode1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertSame(string5, string3);
      
      textNode0.settext(string5);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(textNode0, textNode1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertSame(string5, string3);
      
      String string6 = "";
      boolean boolean1 = textNode0.hasAttr(string6);
      assertFalse(boolean1);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertSame(textNode0, textNode1);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertSame(string6, string4);
      assertSame(string6, string5);
      assertNotSame(string6, string0);
      assertSame(string6, string3);
      
      String string7 = "(v!>m>dB&$g82";
      String string8 = TextNode.stripLeadingWhitespace(string7);
      assertEquals("(v!>m>dB&$g82", string8);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertNotSame(string7, string4);
      assertSame(string7, string8);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string5);
      assertSame(string8, string7);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      
      String string9 = "style";
      textNode0.ensureAttributes();
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode1);
      
      Node node1 = textNode1.nextSibling();
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string3));
      assertNull(node1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string7);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string9);
      assertNotSame(string2, string4);
      assertNotSame(string2, string8);
      assertNotSame(string2, string3);
      assertSame(textNode1, textNode0);
      
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string9);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("", textNode2.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode2.baseUri());
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertNotNull(textNode2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string3);
      assertNotSame(string9, string1);
      assertNotSame(string9, string2);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertNotSame(string9, string5);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      
      textNode0.settext(string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string9));
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string8);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string4);
      assertNotSame(string1, string9);
      
      String string10 = textNode0.getTEXT_KEY();
      assertEquals("text", string10);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertNotNull(string10);
      assertNotSame(string0, string5);
      assertNotSame(string0, string10);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string10, string5);
      assertNotSame(string10, string8);
      assertNotSame(string10, string1);
      assertNotSame(string10, string2);
      assertNotSame(string10, string4);
      assertNotSame(string10, string0);
      assertNotSame(string10, string6);
      assertNotSame(string10, string7);
      assertNotSame(string10, string3);
      assertNotSame(string10, string9);
      
      String string11 = textNode0.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string11);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string3));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertNotNull(string11);
      assertNotSame(string0, string5);
      assertNotSame(string0, string10);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string11);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string11, string1);
      assertNotSame(string11, string2);
      assertNotSame(string11, string4);
      assertNotSame(string11, string5);
      assertNotSame(string11, string10);
      assertNotSame(string11, string9);
      assertNotSame(string11, string7);
      assertNotSame(string11, string0);
      assertNotSame(string11, string6);
      assertNotSame(string11, string3);
      assertNotSame(string11, string8);
      
      StringBuilder stringBuilder0 = null;
      textNode0.setBaseUri(string11);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string3));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertNotSame(string0, string5);
      assertNotSame(string0, string10);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string11);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string11, string1);
      assertNotSame(string11, string2);
      assertNotSame(string11, string4);
      assertNotSame(string11, string5);
      assertNotSame(string11, string10);
      assertNotSame(string11, string9);
      assertNotSame(string11, string7);
      assertNotSame(string11, string0);
      assertNotSame(string11, string6);
      assertNotSame(string11, string3);
      assertNotSame(string11, string8);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertNotNull(document_OutputSettings0);
      
      TextNode textNode3 = (TextNode)textNode0.removeAttr(string7);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode3.baseUri());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode3.gettext());
      assertEquals(0, textNode3.siblingIndex());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string11));
      assertNotNull(textNode3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string10);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string11);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode3);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode3, textNode1);
      assertSame(textNode3, textNode0);
      assertSame(textNode3, textNode2);
      assertNotSame(string7, string4);
      assertSame(string7, string8);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string10);
      assertNotSame(string7, string0);
      assertNotSame(string7, string9);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string11);
      
      int int0 = 979;
      int int1 = 7;
      textNode0.outerHtmlTail(stringBuilder0, int1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertFalse(int1 == int0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string10);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string11);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode3);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "8[uiM\\bU*G`|FDzu";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = "52GXKeRQWMR";
      TextNode textNode1 = (TextNode)textNode0.attr(string0, string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      
      String string2 = "JOyvCF$9q";
      TextNode textNode2 = TextNode.createFromEncoded(textNode0.text, string2);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("JOyvCF$9q", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode2.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotNull(textNode2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      
      String string3 = textNode2.outerHtml();
      assertEquals("8[uiM\\bU*G`|FDzu", string3);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("JOyvCF$9q", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode2.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      
      int int0 = 0;
      textNode0.setParentNode(textNode2);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("JOyvCF$9q", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode2.gettext());
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = "55Wn]r[j85I";
      String string1 = "^\\s+";
      String string2 = "rP\\:AXO8";
      String string3 = "dC$\\n*orLdIjk9XUui-";
      TextNode textNode0 = new TextNode();
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string4 = textNode0.gettext();
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(string4);
      
      TextNode textNode1 = TextNode.createFromEncoded(string1, string0);
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("55Wn]r[j85I", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("^\\s+", textNode1.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(textNode1, textNode0);
      
      int int0 = 2838;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = "c||JYW$";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("c||JYW$", textNode0.baseUri());
      assertEquals("c||JYW$", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("c||JYW$", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("c||JYW$", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("c||JYW$", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      String string1 = TextNode.normaliseWhitespace(textNode1.text);
      assertEquals("c||JYW$", string1);
      assertEquals("c||JYW$", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("c||JYW$", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("c||JYW$", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      
      String string2 = "";
      textNode0.settext(string2);
      assertEquals("c||JYW$", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      TextNode textNode2 = textNode0.text(string1);
      assertEquals("c||JYW$", textNode0.baseUri());
      assertEquals("c||JYW$", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("c||JYW$", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("c||JYW$", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("c||JYW$", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("c||JYW$", textNode2.gettext());
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotNull(textNode2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      
      String string3 = "v3Si";
      String string4 = textNode2.absUrl(string3);
      assertEquals("", string4);
      assertEquals("c||JYW$", textNode0.baseUri());
      assertEquals("c||JYW$", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("c||JYW$", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("c||JYW$", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("c||JYW$", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("c||JYW$", textNode2.gettext());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)textNode2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertNotSame(string4, string3);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) textNode2.text);
      assertEquals("c||JYW$", textNode0.baseUri());
      assertEquals("c||JYW$", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("c||JYW$", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("c||JYW$", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("c||JYW$", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("c||JYW$", textNode2.gettext());
      assertEquals("c||JYW$", stringBuilder0.toString());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotNull(stringBuilder0);
      
      int int1 = 66;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      textNode2.outerHtmlHead(stringBuilder0, int1, document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals("c||JYW$", textNode0.baseUri());
      assertEquals("c||JYW$", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("c||JYW$", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("c||JYW$", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("c||JYW$", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("c||JYW$", textNode2.gettext());
      assertEquals("c||JYW$c||JYW$", stringBuilder0.toString());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int0 == int1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(int1 == int0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      String string5 = textNode1.toString();
      assertEquals("c||JYW$", string5);
      assertEquals("c||JYW$", textNode0.baseUri());
      assertEquals("c||JYW$", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("c||JYW$", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("c||JYW$", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int0 == int1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)textNode2));
      assertNotNull(string5);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      
      Node node0 = textNode0.previousSibling();
      assertEquals("c||JYW$", textNode0.baseUri());
      assertEquals("c||JYW$", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNull(node0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      
      String string6 = "text";
      TextNode textNode3 = textNode1.text(string6);
      assertEquals("c||JYW$", textNode0.baseUri());
      assertEquals("c||JYW$", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("text", textNode3.gettext());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals("c||JYW$", textNode3.baseUri());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("text", textNode1.gettext());
      assertEquals("c||JYW$", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)textNode2));
      assertNotNull(textNode3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(textNode3, textNode0);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode3);
      assertNotSame(textNode1, textNode2);
      
      Document document0 = new Document(string3);
      assertEquals("#document", document0.nodeName());
      assertEquals("v3Si", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(document0);
      
      String string7 = null;
      // Undeclared exception!
      try { 
        document0.text(string7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = "WXQ3+_$m$01S_yDG,=?";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = "KPke(Gjz9D'8_ u#~g\\";
      TextNode textNode1 = TextNode.createFromEncoded(string0, string1);
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("KPke(Gjz9D'8_ u#~g\\", textNode1.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(textNode1, textNode0);
      
      Document document0 = Document.createShell(textNode0.text);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(document0);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      
      Document document1 = (Document)document0.prependChild(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(document1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      String string2 = null;
      String string3 = document0.toString();
      assertEquals("WXQ3+_$m$01S_yDG,=?\n<html>\n <head></head>\n <body></body>\n</html>", string3);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      // Undeclared exception!
      try { 
        document0.hasClass(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = "[_\\#80\"U2.7-*]";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(attributes0);
      
      Node node0 = textNode0.nextSibling();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(node0);
      
      int int0 = (-181);
      textNode0.setSiblingIndex(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-181), textNode0.siblingIndex());
      
      String string1 = textNode0.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-181), textNode0.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "/>";
      TextNode textNode1 = (TextNode)textNode0.attr(string2, string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-181), textNode0.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals((-181), textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-181), textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      
      String string3 = "";
      String string4 = TextNode.normaliseWhitespace(string3);
      assertEquals("", string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      
      String string5 = textNode0.absUrl(string0);
      assertEquals("", string5);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-181), textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(textNode0, textNode1);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertSame(string5, string3);
      
      textNode0.settext(string5);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-181), textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(textNode0, textNode1);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertSame(string5, string3);
      
      String string6 = "";
      boolean boolean1 = textNode0.hasAttr(string6);
      assertFalse(boolean1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-181), textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(textNode0, textNode1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertSame(string6, string3);
      assertSame(string6, string5);
      assertSame(string6, string4);
      assertNotSame(string6, string0);
      
      String string7 = "(v!>m>dB&$g82";
      String string8 = TextNode.stripLeadingWhitespace(string7);
      assertEquals("(v!>m>dB&$g82", string8);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertSame(string7, string8);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string4);
      
      String string9 = "style";
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string9);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-181), textNode0.siblingIndex());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals((-181), textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("[_\\#80\"U2.7-*]", textNode2.baseUri());
      assertEquals("", textNode2.gettext());
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(textNode2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string9, string6);
      assertNotSame(string9, string0);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertNotSame(string9, string2);
      assertNotSame(string9, string1);
      assertNotSame(string9, string3);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      
      textNode0.settext(string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-181), textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string9);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string8);
      assertNotSame(string1, string4);
      assertNotSame(string1, string7);
      assertNotSame(string1, string2);
      assertNotSame(string1, string6);
      
      String string10 = textNode0.getTEXT_KEY();
      assertEquals("text", string10);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-181), textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertNotNull(string10);
      assertNotSame(string0, string6);
      assertNotSame(string0, string10);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string10, string9);
      assertNotSame(string10, string1);
      assertNotSame(string10, string3);
      assertNotSame(string10, string0);
      assertNotSame(string10, string5);
      assertNotSame(string10, string7);
      assertNotSame(string10, string4);
      assertNotSame(string10, string6);
      assertNotSame(string10, string8);
      assertNotSame(string10, string2);
      
      String string11 = textNode0.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string11);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-181), textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertNotNull(string11);
      assertNotSame(string0, string6);
      assertNotSame(string0, string10);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string11);
      assertNotSame(string0, string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string11, string6);
      assertNotSame(string11, string8);
      assertNotSame(string11, string2);
      assertNotSame(string11, string3);
      assertNotSame(string11, string0);
      assertNotSame(string11, string9);
      assertNotSame(string11, string1);
      assertNotSame(string11, string5);
      assertNotSame(string11, string7);
      assertNotSame(string11, string4);
      assertNotSame(string11, string10);
      
      String string12 = TextNode.normaliseWhitespace(textNode2.TEXT_KEY);
      assertEquals("text", string12);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-181), textNode0.siblingIndex());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode2.gettext());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals((-181), textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("[_\\#80\"U2.7-*]", textNode2.baseUri());
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string1));
      assertNotNull(string12);
      assertNotSame(string0, string6);
      assertNotSame(string0, string10);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string12);
      assertNotSame(string0, string11);
      assertNotSame(string0, string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string9, string11);
      assertNotSame(string9, string6);
      assertNotSame(string9, string0);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertNotSame(string9, string7);
      assertNotSame(string9, string12);
      assertNotSame(string9, string5);
      assertNotSame(string9, string2);
      assertNotSame(string9, string10);
      assertNotSame(string9, string1);
      assertNotSame(string9, string3);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertNotSame(string12, string11);
      assertNotSame(string12, string7);
      assertNotSame(string12, string4);
      assertNotSame(string12, string8);
      assertSame(string12, string10);
      assertNotSame(string12, string6);
      assertNotSame(string12, string3);
      assertNotSame(string12, string0);
      assertNotSame(string12, string2);
      assertNotSame(string12, string5);
      assertNotSame(string12, string9);
      assertNotSame(string12, string1);
      
      StringBuilder stringBuilder0 = null;
      int int1 = (-1355);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int1, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      String string0 = "WXQ3+_$m$01S_yDG,=?";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = "KPke(Gjz9D'8_ u#~g\\";
      TextNode textNode1 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode1.gettext());
      assertEquals("KPke(Gjz9D'8_ u#~g\\", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(textNode1, textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(attributes0);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      
      Document document0 = Document.createShell(textNode0.text);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(document0);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      
      Document document1 = (Document)document0.prependChild(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(document1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string2 = null;
      String string3 = "legend";
      Element element0 = (Element)textNode0.nextSibling();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals("html", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", element0.baseUri());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(element0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      
      Document document2 = (Document)document0.text(string3);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.getquirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(document2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string4 = "guUgn{9 RL1,@hnK";
      String string5 = textNode1.absUrl(string4);
      assertEquals("", string5);
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode1.gettext());
      assertEquals("KPke(Gjz9D'8_ u#~g\\", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      
      String string6 = document0.toString();
      assertEquals("WXQ3+_$m$01S_yDG,=?\n<html>\n <head></head>\n <body>\n  legend\n </body>\n</html>", string6);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      
      // Undeclared exception!
      try { 
        document0.hasClass(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = "[_\\#80\"U2.7-*]";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertNotNull(attributes0);
      
      Node node0 = textNode0.nextSibling();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertNull(node0);
      
      String string1 = textNode0.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "/>";
      TextNode textNode1 = (TextNode)textNode0.attr(string2, string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      
      String string3 = textNode1.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      
      textNode1.setParentNode(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.baseUri());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      
      String string4 = "";
      String string5 = TextNode.normaliseWhitespace(string4);
      assertEquals("", string5);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      
      String string6 = textNode0.absUrl(string0);
      assertEquals("", string6);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(textNode0, textNode1);
      assertSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertSame(string6, string4);
      assertNotSame(string6, string2);
      
      textNode0.settext(string6);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(textNode0, textNode1);
      assertSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertSame(string6, string4);
      assertNotSame(string6, string2);
      
      String string7 = "(v!>m>dB&$g82";
      String string8 = TextNode.stripLeadingWhitespace(string7);
      assertEquals("(v!>m>dB&$g82", string8);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string8, string6);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertSame(string8, string7);
      
      String string9 = "style";
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string9);
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("", textNode2.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string9));
      assertNotNull(textNode2);
      assertNotSame(string9, string5);
      assertNotSame(string9, string1);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertNotSame(string9, string6);
      assertNotSame(string9, string0);
      assertNotSame(string9, string7);
      assertNotSame(string9, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string9);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      
      textNode0.settext(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string9));
      assertTrue(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string9));
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string8);
      assertNotSame(string1, string2);
      assertNotSame(string1, string9);
      
      String string10 = textNode0.getTEXT_KEY();
      assertEquals("text", string10);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertNotNull(string10);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string10);
      assertNotSame(string0, string9);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string10, string1);
      assertNotSame(string10, string7);
      assertNotSame(string10, string5);
      assertNotSame(string10, string8);
      assertNotSame(string10, string2);
      assertNotSame(string10, string6);
      assertNotSame(string10, string0);
      assertNotSame(string10, string9);
      assertNotSame(string10, string3);
      assertNotSame(string10, string4);
      
      // Undeclared exception!
      textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = "Split offset must not be greater than current text length";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertNotNull(textNode0);
      
      String string1 = "I4";
      String string2 = textNode0.attr(string1);
      assertEquals("", string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "Split offset must not be greater than current text length";
      List<Node> list0 = textNode0.childNodes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(list0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Split offset must not be greater than current text length", textNode1.gettext());
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(textNode1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertSame(textNode1, textNode0);
      
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertEquals("Split offset must not be greater than current text length", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("Split offset must not be greater than current text length", textNode2.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNotNull(textNode2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      
      int int0 = 165;
      String string4 = textNode0.attr(string1);
      assertEquals("", string4);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(string4, string2);
      
      textNode0.setSiblingIndex(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(165, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      
      textNode0.text = string2;
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(165, textNode0.siblingIndex());
      
      String string5 = "";
      TextNode textNode3 = (TextNode)textNode0.attr(string0, string5);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(165, textNode0.siblingIndex());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals(165, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("Split offset must not be greater than current text length", textNode3.baseUri());
      assertEquals("", textNode3.gettext());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(textNode3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertNotSame(string5, string1);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertSame(string5, string2);
      assertNotSame(string5, string3);
      assertSame(textNode3, textNode1);
      assertSame(textNode3, textNode2);
      assertSame(textNode3, textNode0);
      
      String string6 = textNode0.attr(string2);
      assertEquals("", string6);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(165, textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string5);
      assertSame(string2, string6);
      assertNotSame(string2, string3);
      assertSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string4);
      assertSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertSame(string6, string4);
      assertNotSame(string6, string1);
      assertSame(string6, string5);
      
      String string7 = textNode0.absUrl(string3);
      assertEquals("", string7);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(165, textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string7);
      assertSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertSame(string7, string5);
      assertNotSame(string7, string3);
      assertSame(string7, string2);
      assertSame(string7, string6);
      assertSame(string7, string4);
      
      String string8 = textNode0.getTEXT_KEY();
      assertEquals("text", string8);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals(165, textNode0.siblingIndex());
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertNotNull(string8);
      assertNotSame(string8, string0);
      assertNotSame(string8, string4);
      assertNotSame(string8, string2);
      assertNotSame(string8, string1);
      assertNotSame(string8, string7);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string8);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string3);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      String string0 = "WXQ3+_$m$01S_yDG,=?";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = "KPke(Gjz9D'8_ u#~g\\";
      TextNode textNode1 = TextNode.createFromEncoded(string0, string1);
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode1.gettext());
      assertEquals("KPke(Gjz9D'8_ u#~g\\", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(textNode1, textNode0);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(list0);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      
      Document document0 = Document.createShell(textNode0.text);
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(document0);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      
      document0.title(textNode0.text);
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      
      Document document1 = (Document)document0.prependChild(textNode0);
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(document1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string2 = null;
      TextNode textNode2 = (TextNode)textNode0.before((Node) document1);
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(1, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode2.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotNull(textNode2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      
      Document document2 = (Document)textNode0.previousSibling();
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.getquirksMode());
      assertFalse(document2.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(document2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      TextNode textNode3 = textNode1.text(textNode0.text);
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode1.gettext());
      assertEquals("KPke(Gjz9D'8_ u#~g\\", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("KPke(Gjz9D'8_ u#~g\\", textNode3.baseUri());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode3.gettext());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode2));
      assertNotNull(textNode3);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode3);
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode2);
      assertSame(textNode3, textNode1);
      
      boolean boolean0 = document1.hasClass(textNode0.text);
      assertFalse(boolean0);
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      StringBuilder stringBuilder0 = null;
      int int0 = 300;
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document1.outputSettings);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "8[uiM\\bU*G`|FDzu";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertNotNull(textNode0);
      
      String string1 = "+ue|x9`<bRIznH";
      TextNode textNode1 = (TextNode)textNode0.attr(string0, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode1.baseUri());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode1.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      
      String string2 = textNode0.outerHtml();
      assertEquals("8[uiM\\bU*G`|FDzu", string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int0 = 0;
      List<Node> list0 = textNode0.childNodesCopy();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertNotNull(list0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      
      textNode0.childNodes = list0;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, textNode0.childNodes.size());
      assertTrue(textNode0.childNodes.isEmpty());
      
      textNode0.setParentNode(textNode1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode0.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode1.baseUri());
      assertEquals("8[uiM\\bU*G`|FDzu", textNode1.gettext());
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.text);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prependChild(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = null;
      String string2 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertSame(document0, document1);
      assertNotSame(string2, string0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[9];
      char char0 = '<';
      charArray0[0] = char0;
      char char1 = 'v';
      charArray0[1] = char1;
      char char2 = 'L';
      charArray0[2] = char2;
      char char3 = ')';
      charArray0[3] = char3;
      char char4 = '\\';
      charArray0[4] = char4;
      char char5 = '<';
      charArray0[5] = char5;
      char char6 = 'e';
      charArray0[6] = char6;
      char char7 = 'a';
      charArray0[7] = char7;
      char char8 = 'j';
      charArray0[8] = char8;
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'<', 'v', 'L', ')', '\\', '<', 'e', 'a', 'j'}, charArray0);
      assertEquals("<vL)\\<eaj", stringBuilder0.toString());
      assertEquals("<vL)\\<eaj", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      int int0 = 4;
      textNode0.outerHtmlHead(stringBuilder1, int0, document1.outputSettings);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'<', 'v', 'L', ')', '\\', '<', 'e', 'a', 'j'}, charArray0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("<vL)\\<eaj", stringBuilder0.toString());
      assertEquals("<vL)\\<eaj", stringBuilder1.toString());
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      int int0 = 3453;
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int1 = 32;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int1);
      assertEquals(" ", stringBuilder0.toString());
      assertEquals(" ", stringBuilder1.toString());
      assertFalse(int1 == int0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean0);
      assertEquals(" ", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "[_\\#80\"U2.7-*]";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertNotNull(textNode0);
      
      Node node0 = textNode0.nextSibling();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertNull(node0);
      
      String string1 = textNode0.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "/>";
      String string3 = "";
      String string4 = textNode0.absUrl(string0);
      assertEquals("", string4);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      
      boolean boolean0 = textNode0.hasAttr(string4);
      assertFalse(boolean0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      
      String string5 = "(v!>m>dB&$g82";
      String string6 = TextNode.stripLeadingWhitespace(string5);
      assertEquals("(v!>m>dB&$g82", string6);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertSame(string5, string6);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      
      String string7 = "style";
      textNode0.ensureAttributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string7);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.baseUri());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(textNode1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertSame(textNode0, textNode1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertSame(textNode1, textNode0);
      
      textNode0.settext(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      
      String string8 = textNode0.getTEXT_KEY();
      assertEquals("text", string8);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string5);
      assertSame(textNode0, textNode1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string1);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string7);
      
      String string9 = textNode0.toString();
      assertEquals("[_\\#80&quot;U2.7-*]", string9);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string1));
      assertNotNull(string9);
      assertNotSame(string0, string2);
      assertNotSame(string0, string9);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string5);
      assertSame(textNode0, textNode1);
      assertNotSame(string9, string3);
      assertNotSame(string9, string4);
      assertNotSame(string9, string8);
      assertNotSame(string9, string1);
      assertNotSame(string9, string0);
      assertNotSame(string9, string6);
      assertNotSame(string9, string5);
      assertNotSame(string9, string7);
      assertNotSame(string9, string2);
      
      StringBuilder stringBuilder0 = null;
      textNode0.setBaseUri(string9);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string9);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string5);
      assertSame(textNode0, textNode1);
      assertNotSame(string9, string3);
      assertNotSame(string9, string4);
      assertNotSame(string9, string8);
      assertNotSame(string9, string1);
      assertNotSame(string9, string0);
      assertNotSame(string9, string6);
      assertNotSame(string9, string5);
      assertNotSame(string9, string7);
      assertNotSame(string9, string2);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertNotNull(document_OutputSettings0);
      
      String string10 = textNode0.attr(string0);
      assertEquals("", string10);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.baseUri());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertNotNull(string10);
      assertNotSame(string0, string2);
      assertNotSame(string0, string9);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string10);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string5);
      assertSame(textNode0, textNode1);
      assertNotSame(string10, string1);
      assertNotSame(string10, string6);
      assertNotSame(string10, string7);
      assertNotSame(string10, string9);
      assertSame(string10, string3);
      assertSame(string10, string4);
      assertNotSame(string10, string0);
      assertNotSame(string10, string8);
      assertNotSame(string10, string5);
      assertNotSame(string10, string2);
      
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string5);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode2.gettext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(textNode2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string9);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string10);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string5);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertNotSame(string5, string10);
      assertNotSame(string5, string7);
      assertSame(string5, string6);
      assertNotSame(string5, string2);
      assertNotSame(string5, string8);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string9);
      assertNotSame(string5, string0);
      
      int int0 = 979;
      textNode0.outerHtmlTail(stringBuilder0, document_OutputSettings0.indentAmount, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80&quot;U2.7-*]", textNode0.baseUri());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string5));
      assertNotSame(string0, string2);
      assertNotSame(string0, string9);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string10);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string5);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      
      int int1 = 16;
      // Undeclared exception!
      try { 
        textNode2.splitText(int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = "c";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("c", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("c", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("c", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("c", textNode0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prependChild(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("c", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("c", textNode0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("c", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = null;
      String string2 = document0.toString();
      assertEquals("c\n<html>\n <head></head>\n <body></body>\n</html>", string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("c", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("c", textNode0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertSame(document0, document1);
      assertNotSame(string2, string0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[9];
      char char0 = 'v';
      charArray0[1] = char0;
      char char1 = 'L';
      charArray0[2] = char1;
      char char2 = ')';
      charArray0[3] = char2;
      char char3 = '\\';
      charArray0[4] = char3;
      char char4 = '<';
      charArray0[5] = char4;
      char char5 = 'e';
      charArray0[6] = char5;
      char char6 = 'a';
      charArray0[7] = char6;
      char char7 = 'j';
      charArray0[8] = char7;
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'v', 'L', ')', '\\', '<', 'e', 'a', 'j'}, charArray0);
      assertEquals("\u0000vL)\\<eaj", stringBuilder0.toString());
      assertEquals("\u0000vL)\\<eaj", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      int int0 = 4;
      textNode0.outerHtmlHead(stringBuilder1, int0, document1.outputSettings);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'v', 'L', ')', '\\', '<', 'e', 'a', 'j'}, charArray0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("c", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("c", textNode0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("c", document1.baseUri());
      assertEquals("\u0000vL)\\<eaj\n    c", stringBuilder0.toString());
      assertEquals("\u0000vL)\\<eaj\n    c", stringBuilder1.toString());
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      String string0 = "[_\\#80\"U2.7-*]";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertNotNull(textNode0);
      
      int int0 = (-211);
      textNode0.setSiblingIndex(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      
      TextNode textNode1 = new TextNode(textNode0.text, textNode0.text);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(textNode0, textNode1);
      
      String string1 = textNode0.absUrl(string0);
      assertEquals("", string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      
      textNode0.parentNode = (Node) textNode1;
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode0.parentNode.childNodeSize());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.parentNode.baseUri());
      
      String string2 = TextNode.stripLeadingWhitespace(string0);
      assertEquals("[_\\#80\"U2.7-*]", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      String string3 = "style";
      textNode0.settext(textNode0.TEXT_KEY);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("text", textNode0.gettext());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(textNode0, textNode1);
      
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -210
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      String string0 = "WXQ3+_$m$01S_yDG,=?";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = TextNode.createFromEncoded(string0, textNode0.TEXT_KEY);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode1.gettext());
      assertEquals("text", textNode1.baseUri());
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      Document document0 = Document.createShell(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(document0);
      assertNotSame(textNode0, textNode1);
      
      document0.title(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(textNode0, textNode1);
      
      Document document1 = (Document)document0.prependChild(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document1.baseUri());
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(document1);
      assertNotSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      TextNode textNode2 = (TextNode)textNode1.removeAttr(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode1.gettext());
      assertEquals("text", textNode1.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode2.gettext());
      assertEquals("text", textNode2.baseUri());
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      
      String string1 = document0.toString();
      assertEquals("WXQ3+_$m$01S_yDG,=?\n<html>\n <head>\n  <title>WXQ3+_$m$01S_yDG,=?</title>\n </head>\n <body></body>\n</html>", string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(document0, document1);
      assertNotSame(string1, string0);
      
      Elements elements0 = document0.getElementsContainingOwnText(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(2, elements0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertNotNull(elements0);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(document0, document1);
      
      TextNode textNode3 = textNode1.text(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode1.gettext());
      assertEquals("text", textNode1.baseUri());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("text", textNode3.baseUri());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode3.gettext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode0));
      assertNotNull(textNode3);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode3);
      assertSame(textNode3, textNode2);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode0);
      
      String string2 = textNode1.toString();
      assertEquals("WXQ3+_$m$01S_yDG,=?", string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode1.gettext());
      assertEquals("text", textNode1.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int0 = 17;
      TextNode textNode4 = textNode0.splitText(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("WXQ3+_$m$01S_yDG,", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode4.childNodeSize());
      assertEquals(1, textNode4.siblingIndex());
      assertEquals("WXQ3+_$m$01S_yDG,=?", textNode4.baseUri());
      assertEquals("=?", textNode4.gettext());
      assertEquals("#text", textNode4.nodeName());
      assertEquals("text", textNode4.getTEXT_KEY());
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode4.equals((Object)textNode0));
      assertFalse(textNode4.equals((Object)textNode2));
      assertFalse(textNode4.equals((Object)textNode3));
      assertFalse(textNode4.equals((Object)textNode1));
      assertNotNull(textNode4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode4);
      assertNotSame(textNode4, textNode0);
      assertNotSame(textNode4, textNode2);
      assertNotSame(textNode4, textNode3);
      assertNotSame(textNode4, textNode1);
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.text);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prependChild(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertSame(document0, document1);
      assertNotSame(string1, string0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[9];
      document0.parentNode = (Node) textNode0;
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.parentNode.baseUri());
      assertEquals(0, document0.parentNode.childNodeSize());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      char char0 = '\\';
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, charArray0[6], document1.outputSettings);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      String string0 = "[_\\#80\"U2.7-*]";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = (-211);
      textNode0.setSiblingIndex(int0);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      Document document0 = Document.createShell(textNode0.TEXT_KEY);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      String string1 = document0.text();
      assertEquals("", string1);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      textNode0.parentNode = (Node) document0;
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("text", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("text", textNode0.parentNode.baseUri());
      assertEquals(1, textNode0.parentNode.childNodeSize());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      
      String string2 = textNode0.absUrl(string0);
      assertEquals("", string2);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("[_\\#80\"U2.7-*]", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = TextNode.stripLeadingWhitespace(string0);
      assertEquals("[_\\#80\"U2.7-*]", string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      
      textNode0.settext(textNode0.TEXT_KEY);
      assertEquals("[_\\#80\"U2.7-*]", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-211), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      String string0 = "W'Q3_$m[0-_yDG,=?";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      document0.title(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.prependChild(textNode0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.getquirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = document0.toString();
      assertEquals("W'Q3_$m[0-_yDG,=?\n<html>\n <head>\n  <title>W'Q3_$m[0-_yDG,=?</title>\n </head>\n <body></body>\n</html>", string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertSame(document0, document1);
      assertNotSame(string1, string0);
      
      Elements elements0 = document0.getElementsContainingOwnText(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(elements0);
      assertNotSame(string0, string1);
      assertSame(document0, document1);
      
      TextNode textNode1 = textNode0.text(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode1.gettext());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(textNode1);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("W'Q3_$m[0-_yDG,=?\n<html>\n <head>\n  <title>W'Q3_$m[0-_yDG,=?</title>\n </head>\n <body></body>\n</html>", stringBuilder0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) textNode1.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode1.gettext());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(17, stringBuffer0.length());
      assertEquals("W'Q3_$m[0-_yDG,=?", stringBuffer0.toString());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode1.gettext());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("W'Q3_$m[0-_yDG,=?\n<html>\n <head>\n  <title>W'Q3_$m[0-_yDG,=?</title>\n </head>\n <body></body>\n</html>W'Q3_$m[0-_yDG,=?", stringBuilder0.toString());
      assertEquals(17, stringBuffer0.length());
      assertEquals("W'Q3_$m[0-_yDG,=?", stringBuffer0.toString());
      assertEquals("W'Q3_$m[0-_yDG,=?\n<html>\n <head>\n  <title>W'Q3_$m[0-_yDG,=?</title>\n </head>\n <body></body>\n</html>W'Q3_$m[0-_yDG,=?", stringBuilder1.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringBuilder1);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(document0, document1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      int int0 = (-683);
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings.clone();
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("W'Q3_$m[0-_yDG,=?", textNode0.gettext());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.getquirksMode());
      assertFalse(document0.isBlock());
      assertEquals("W'Q3_$m[0-_yDG,=?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(document_OutputSettings0);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder1, int0, document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = textNode0.toString();
      assertEquals("", string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = textNode0.nodeName();
      assertEquals("#text", string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertTrue(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "org.jsoup.parser.Token$TokenType";
      textNode0.text = string3;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.parser.Token$TokenType", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      
      String string4 = textNode0.nodeName();
      assertEquals("#text", string4);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.parser.Token$TokenType", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      textNode0.childNodes = (List<Node>) linkedList0;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.parser.Token$TokenType", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, linkedList0.size());
      assertEquals(0, textNode0.childNodes.size());
      assertTrue(textNode0.childNodes.isEmpty());
      
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) textNode0;
      String string5 = null;
      TextNode textNode1 = new TextNode(string5, string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.parser.Token$TokenType", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.gettext());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      nodeArray0[3] = (Node) textNode1;
      nodeArray0[4] = (Node) textNode0;
      nodeArray0[5] = (Node) textNode0;
      nodeArray0[6] = (Node) textNode0;
      nodeArray0[7] = (Node) textNode0;
      boolean boolean0 = linkedList0.add(nodeArray0[3]);
      assertEquals(9, nodeArray0.length);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      nodeArray0[8] = (Node) textNode0;
      textNode0.addChildren(nodeArray0);
      assertEquals(9, nodeArray0.length);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(3, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$TokenType", textNode0.gettext());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      
      textNode0.ensureAttributes();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(3, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$TokenType", textNode0.gettext());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(3, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$TokenType", textNode0.gettext());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(attributes0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      
      TextNode textNode2 = textNode0.text(string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(3, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode2.gettext());
      assertEquals("", textNode2.baseUri());
      assertEquals(3, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(2, textNode2.siblingIndex());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotNull(textNode2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      
      // Undeclared exception!
      try { 
        textNode1.absUrl(string3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
