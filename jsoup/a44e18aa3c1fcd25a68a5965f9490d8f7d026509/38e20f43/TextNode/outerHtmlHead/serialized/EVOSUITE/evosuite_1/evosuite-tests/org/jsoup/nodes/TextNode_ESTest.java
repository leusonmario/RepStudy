/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 01:44:30 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.SerializedObjectSupporter;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string0 = TextNode.stripLeadingWhitespace(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      String string1 = textNode0.gettext();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertSame(string1, string0);
      assertEquals("Two", string1);
      assertNotNull(string1);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder412();
      assertEquals("<table> \n <colgroup> \n  <col /> \n </colgroup>\n <colgroup> \n  <col /> \n  <col /> \n  <col /> \n </colgroup>\n <thead> \n  <tr> \n   <th> </th>\n   <th>2008 </th>\n   <th>2007 </th>\n   <th>2006 </th>\n  </tr>\n </thead>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Research and development </th>\n   <td> $ 1,109 </td>\n   <td> $ 782 </td>\n   <td> $ 712 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 3.4% </td>\n   <td> 3.3% </td>\n   <td> 3.7% </td>\n  </tr>\n </tbody>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Selling, general, and administrative </th>\n   <td> $ 3,761 </td>\n   <td> $ 2,963 </td>\n   <td> $ 2,433 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 11.6% </td>\n   <td>", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      double double0 = (-1.0);
      StringBuilder stringBuilder1 = stringBuilder0.append(double0);
      assertEquals("<table> \n <colgroup> \n  <col /> \n </colgroup>\n <colgroup> \n  <col /> \n  <col /> \n  <col /> \n </colgroup>\n <thead> \n  <tr> \n   <th> </th>\n   <th>2008 </th>\n   <th>2007 </th>\n   <th>2006 </th>\n  </tr>\n </thead>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Research and development </th>\n   <td> $ 1,109 </td>\n   <td> $ 782 </td>\n   <td> $ 712 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 3.4% </td>\n   <td> 3.3% </td>\n   <td> 3.7% </td>\n  </tr>\n </tbody>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Selling, general, and administrative </th>\n   <td> $ 3,761 </td>\n   <td> $ 2,963 </td>\n   <td> $ 2,433 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 11.6% </td>\n   <td>-1.0", stringBuilder0.toString());
      assertEquals("<table> \n <colgroup> \n  <col /> \n </colgroup>\n <colgroup> \n  <col /> \n  <col /> \n  <col /> \n </colgroup>\n <thead> \n  <tr> \n   <th> </th>\n   <th>2008 </th>\n   <th>2007 </th>\n   <th>2006 </th>\n  </tr>\n </thead>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Research and development </th>\n   <td> $ 1,109 </td>\n   <td> $ 782 </td>\n   <td> $ 712 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 3.4% </td>\n   <td> 3.3% </td>\n   <td> 3.7% </td>\n  </tr>\n </tbody>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Selling, general, and administrative </th>\n   <td> $ 3,761 </td>\n   <td> $ 2,963 </td>\n   <td> $ 2,433 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 11.6% </td>\n   <td>-1.0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("<table> \n <colgroup> \n  <col /> \n </colgroup>\n <colgroup> \n  <col /> \n  <col /> \n  <col /> \n </colgroup>\n <thead> \n  <tr> \n   <th> </th>\n   <th>2008 </th>\n   <th>2007 </th>\n   <th>2006 </th>\n  </tr>\n </thead>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Research and development </th>\n   <td> $ 1,109 </td>\n   <td> $ 782 </td>\n   <td> $ 712 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 3.4% </td>\n   <td> 3.3% </td>\n   <td> 3.7% </td>\n  </tr>\n </tbody>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Selling, general, and administrative </th>\n   <td> $ 3,761 </td>\n   <td> $ 2,963 </td>\n   <td> $ 2,433 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 11.6% </td>\n   <td>-1.0", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertFalse(boolean0);
      
      String string2 = textNode0.text();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("Two", string2);
      assertNotNull(string2);
      
      int int0 = 32;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("<table> \n <colgroup> \n  <col /> \n </colgroup>\n <colgroup> \n  <col /> \n  <col /> \n  <col /> \n </colgroup>\n <thead> \n  <tr> \n   <th> </th>\n   <th>2008 </th>\n   <th>2007 </th>\n   <th>2006 </th>\n  </tr>\n </thead>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Research and development </th>\n   <td> $ 1,109 </td>\n   <td> $ 782 </td>\n   <td> $ 712 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 3.4% </td>\n   <td> 3.3% </td>\n   <td> 3.7% </td>\n  </tr>\n </tbody>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Selling, general, and administrative </th>\n   <td> $ 3,761 </td>\n   <td> $ 2,963 </td>\n   <td> $ 2,433 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 11.6% </td>\n   <td>-1.0Two", stringBuilder0.toString());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      TextNode textNode1 = (TextNode)textNode0.attr(string2, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("Two", textNode1.gettext());
      assertSame(textNode0, textNode1);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      String string3 = textNode1.absUrl(string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("Two", textNode1.gettext());
      assertSame(textNode0, textNode1);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertSame(textNode1, textNode0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      boolean boolean1 = false;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(boolean1);
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertFalse(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertTrue(boolean1 == boolean0);
      assertNotNull(document_OutputSettings2);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertFalse(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      
      textNode0.outerHtmlHead(stringBuilder1, document_OutputSettings0.indentAmount, document_OutputSettings2);
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertFalse(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("<table> \n <colgroup> \n  <col /> \n </colgroup>\n <colgroup> \n  <col /> \n  <col /> \n  <col /> \n </colgroup>\n <thead> \n  <tr> \n   <th> </th>\n   <th>2008 </th>\n   <th>2007 </th>\n   <th>2006 </th>\n  </tr>\n </thead>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Research and development </th>\n   <td> $ 1,109 </td>\n   <td> $ 782 </td>\n   <td> $ 712 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 3.4% </td>\n   <td> 3.3% </td>\n   <td> 3.7% </td>\n  </tr>\n </tbody>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Selling, general, and administrative </th>\n   <td> $ 3,761 </td>\n   <td> $ 2,963 </td>\n   <td> $ 2,433 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 11.6% </td>\n   <td>-1.0TwoTwo", stringBuilder0.toString());
      assertEquals("<table> \n <colgroup> \n  <col /> \n </colgroup>\n <colgroup> \n  <col /> \n  <col /> \n  <col /> \n </colgroup>\n <thead> \n  <tr> \n   <th> </th>\n   <th>2008 </th>\n   <th>2007 </th>\n   <th>2006 </th>\n  </tr>\n </thead>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Research and development </th>\n   <td> $ 1,109 </td>\n   <td> $ 782 </td>\n   <td> $ 712 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 3.4% </td>\n   <td> 3.3% </td>\n   <td> 3.7% </td>\n  </tr>\n </tbody>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Selling, general, and administrative </th>\n   <td> $ 3,761 </td>\n   <td> $ 2,963 </td>\n   <td> $ 2,433 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 11.6% </td>\n   <td>-1.0TwoTwo", stringBuilder1.toString());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(textNode0, textNode1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertFalse(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      int int0 = 0;
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder192();
      assertEquals("<p>", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(int0);
      assertEquals("p>", stringBuilder0.toString());
      assertEquals("p>", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("p>", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = textNode0.toString();
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Two", textNode1.gettext());
      assertEquals(1, textNode1.siblingIndex());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      String string1 = textNode1.toString();
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Two", textNode1.gettext());
      assertEquals(1, textNode1.siblingIndex());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "1~0r";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("1~0r", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1~0r", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      textNode0.settext(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("1~0r", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1~0r", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      
      String string1 = textNode0.getTEXT_KEY();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("1~0r", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1~0r", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("text", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("1~0r", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1~0r", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(attributes0);
      
      int int0 = (-412);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertNotNull(textNode0);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(textNode0.TEXT_KEY);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      TextNode textNode2 = textNode1.text(textNode0.text);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("Two", textNode2.gettext());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(0, textNode2.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertNotNull(textNode2);
      
      boolean boolean0 = textNode1.isBlank();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "Split offset must b= not be negative";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Split offset must b= not be negative", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must b= not be negative", textNode0.baseUri());
      assertNotNull(textNode0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder143();
      assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p>", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string1 = textNode0.outerHtml();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Split offset must b= not be negative", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must b= not be negative", textNode0.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Split offset must b= not be negative", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      textNode0.outerHtmlTail(stringBuilder0, document_OutputSettings0.indentAmount, document_OutputSettings0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Split offset must b= not be negative", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must b= not be negative", textNode0.baseUri());
      assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p>", stringBuilder0.toString());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertNotSame(string0, string1);
      assertTrue(string0.equals((Object)string1));
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      textNode0.remove();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder192();
      assertEquals("<p>", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char char0 = ' ';
      StringBuilder stringBuilder1 = stringBuilder0.append(char0);
      assertEquals("<p> ", stringBuilder0.toString());
      assertEquals("<p> ", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder0.deleteCharAt(int0);
      assertEquals("p> ", stringBuilder0.toString());
      assertEquals("p> ", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("p> ", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder424();
      assertEquals("<html>\n <head></head>\n <body>\n  <table>\n   <tbody>\n    <tr>\n     <td>", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("<html>\n <head></head>\n <body>\n  <table>\n   <tbody>\n    <tr>\n     <td>", stringBuilder0.toString());
      assertFalse(boolean0);
      
      String string0 = "";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "class";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("class", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "lZ)DJ?";
      String string1 = "'-)";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("lZ)DJ?", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("'-)", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      
      String string2 = textNode0.toString();
      assertEquals("lZ)DJ?", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("'-)", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("lZ)DJ?", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      textNode0.ensureAttributes();
      assertEquals("lZ)DJ?", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("'-)", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      String string3 = "org.jsoup.nodes.TextNode";
      String string4 = null;
      // Undeclared exception!
      try { 
        textNode0.attr(string3, string4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "^\\s+";
      String string1 = "#text";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("^\\s+", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      
      String string2 = "Split offset must be not be negative";
      textNode0.text = string2;
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      
      String string3 = textNode0.getWholeText();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("Split offset must be not be negative", string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      textNode0.ensureAttributes();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      
      String string4 = "Split offset must not be greater than current text length";
      String string5 = "~QD\\eI%";
      String string6 = textNode0.attr(string5);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.baseUri());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertEquals("", string6);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        textNode0.before(string5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "zrB6*]lfL[\\_]>!KK";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("zrB6*]lfL[\\_]>!KK", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("zrB6*]lfL[\\_]>!KK", textNode0.gettext());
      assertNotNull(textNode0);
      
      String string1 = "f(A:IYfkd+\\";
      String string2 = null;
      TextNode textNode1 = TextNode.createFromEncoded(string1, string2);
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("f(A:IYfkd+\\", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertNotSame(string1, string0);
      assertNotSame(textNode1, textNode0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      int int0 = (-1263);
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      Node[] nodeArray0 = new Node[2];
      String string0 = textNode0.getWholeText();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) textNode0;
      textNode0.addChildren(nodeArray0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(1, textNode0.childNodeSize());
      assertEquals(2, nodeArray0.length);
      
      String string1 = "";
      boolean boolean0 = textNode0.hasAttr(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(1, textNode0.childNodeSize());
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      String string3 = textNode0.attr(string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(1, textNode0.childNodeSize());
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertSame(string2, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertSame(string3, string2);
      assertEquals("", string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "FdNpx}!i]Aa{8&e";
      String string1 = "&F@j!y+h0}";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("FdNpx}!i]Aa{8&e", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("&F@j!y+h0}", textNode0.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      
      String string2 = "TextNode356.xml";
      textNode0.setBaseUri(string2);
      assertEquals("TextNode356.xml", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("FdNpx}!i]Aa{8&e", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "Split offset must not be greater than current text length";
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string3);
      assertEquals("TextNode356.xml", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("FdNpx}!i]Aa{8&e", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("TextNode356.xml", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("FdNpx}!i]Aa{8&e", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(textNode1, textNode0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(textNode1);
      
      Node node0 = textNode0.nextSibling();
      assertEquals("TextNode356.xml", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("FdNpx}!i]Aa{8&e", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertNull(node0);
      
      TextNode textNode2 = TextNode.createFromEncoded(string3, string1);
      assertEquals("#text", textNode2.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode2.gettext());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("&F@j!y+h0}", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotNull(textNode2);
      
      // Undeclared exception!
      try { 
        textNode2.replaceWith(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "94TCNZvi3.kX*BVY";
      String string1 = "pp(+^ez'v";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("94TCNZvi3.kX*BVY", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("pp(+^ez'v", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        textNode0.attr(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = textNode0.serializedObjectSupporter;
      assertNull(serializedObjectSupporter0);
      
      int int0 = (-3097);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode0.addChildren(int0, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "1~0r";
      String string1 = "s0Z";
      String string2 = "R#'iW(K8;:g";
      TextNode textNode0 = TextNode.createFromEncoded(string1, string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("s0Z", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(textNode0);
      
      String string3 = "\\Kc]fi<";
      textNode0.settext(string3);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      TextNode textNode1 = (TextNode)textNode0.clone();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("\\Kc]fi<", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("R#'iW(K8;:g", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      String string4 = textNode0.getTEXT_KEY();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertEquals("text", string4);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = 49;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      boolean boolean0 = true;
      Attributes attributes0 = textNode0.attributes();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(textNode0, textNode1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(attributes0);
      
      String string5 = "AW=mVN);IO";
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "flaOs";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("flaOs", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = (-93);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(document_OutputSettings0.charset);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertFalse(document_OutputSettings2.getprettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertFalse(document_OutputSettings2.prettyPrint);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Node[] nodeArray0 = new Node[2];
      String string0 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", string0);
      assertNotNull(string0);
      
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) textNode0;
      textNode0.addChildren(nodeArray0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(1, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(2, nodeArray0.length);
      
      String string1 = "k";
      boolean boolean0 = textNode0.hasAttr(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(1, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "s";
      String string3 = TextNode.normaliseWhitespace(string2);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertEquals("s", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      long long0 = 313L;
      System.setCurrentTimeMillis(long0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = textNode0.nodeName();
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", string1);
      assertNotNull(string1);
      
      TextNode textNode1 = textNode0.text(string0);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNull(textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "1~0r";
      String string1 = "0Z";
      String string2 = "R#'iW(K8;:g";
      TextNode textNode0 = TextNode.createFromEncoded(string1, string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("0Z", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(textNode0);
      
      String string3 = "\\Kc]fi<";
      textNode0.settext(string3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      TextNode textNode1 = (TextNode)textNode0.clone();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("\\Kc]fi<", textNode1.gettext());
      assertEquals("R#'iW(K8;:g", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      String string4 = "=,";
      String string5 = textNode0.absUrl(string4);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertEquals("", string5);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = textNode0.getTEXT_KEY();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string6);
      assertNotSame(string2, string3);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertEquals("text", string6);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int0 = 49;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      boolean boolean0 = true;
      Attributes attributes0 = textNode0.attributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string6);
      assertNotSame(string2, string3);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(textNode0, textNode1);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(attributes0);
      
      String string7 = "AW=mVN);IO";
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertNull(textNode0.baseUri());
      assertNull(textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      document_OutputSettings1.charsetEncoder = document_OutputSettings0.charsetEncoder;
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(3.0F, document_OutputSettings1.charsetEncoder.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, document_OutputSettings1.charsetEncoder.averageBytesPerChar(), 0.01F);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(document_OutputSettings1.prettyPrint);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      
      String string1 = textNode0.getWholeText();
      assertNull(textNode0.baseUri());
      assertNull(textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(string1);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "1~0r";
      String string1 = "R#'iW(K8;:g";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("1~0r", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      
      String string2 = "\\Kc]fi<";
      textNode0.settext(string2);
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      TextNode textNode1 = (TextNode)textNode0.clone();
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode1.baseUri());
      assertEquals("\\Kc]fi<", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      String string3 = textNode0.getTEXT_KEY();
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertEquals("text", string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = 49;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      boolean boolean0 = true;
      Attributes attributes0 = textNode0.attributes();
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(attributes0);
      
      String string4 = "AW=mVN);IO";
      Attributes attributes1 = textNode0.attributes();
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertSame(attributes1, attributes0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(attributes1);
      
      String string5 = textNode1.gettext();
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode1.baseUri());
      assertEquals("\\Kc]fi<", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertEquals("\\Kc]fi<", string5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean1 = textNode1.hasAttr(string0);
      assertEquals("\\Kc]fi<", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode1.baseUri());
      assertEquals("\\Kc]fi<", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(boolean1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      boolean boolean0 = false;
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings0.setescapeMode(entities_EscapeMode0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      int int0 = 0;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(0, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.getescapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(0, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(0, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(0, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.indentAmount(int0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(0, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.getescapeMode());
      assertEquals(0, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertEquals(0, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(0, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.prettyPrint(boolean0);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(0, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.getescapeMode());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertEquals(0, document_OutputSettings3.getindentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotNull(document_OutputSettings3);
      assertEquals(0, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings3.prettyPrint);
      assertEquals(0, document_OutputSettings3.indentAmount);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset(document_OutputSettings0.charset);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(0, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.getescapeMode());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertEquals(0, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.getescapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals(0, document_OutputSettings4.getindentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.getprettyPrint());
      assertEquals(0, document_OutputSettings4.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotNull(document_OutputSettings4);
      assertEquals(0, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertFalse(document_OutputSettings3.prettyPrint);
      assertEquals(0, document_OutputSettings3.indentAmount);
      assertEquals(0, document_OutputSettings4.indentAmount);
      assertFalse(document_OutputSettings4.prettyPrint);
      
      // Undeclared exception!
      try { 
        textNode0.attributes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      String string1 = textNode0.nodeName();
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("#text", string1);
      assertNotNull(string1);
      
      TextNode textNode1 = textNode0.text(string0);
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertNull(textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode2 = serializedObjectSupporter0.deserializeObjectTextNode371();
      assertNull(textNode2);
      
      String string2 = "Split offset must not be greater than current text length";
      // Undeclared exception!
      try { 
        textNode0.absUrl(textNode1.TEXT_KEY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Node[] nodeArray0 = new Node[2];
      String string0 = textNode0.getWholeText();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      nodeArray0[0] = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode0.addChildren(nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertNull(textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = textNode0.nodeName();
      assertNull(textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", string1);
      assertNotNull(string1);
      
      TextNode textNode1 = textNode0.text(string0);
      assertNull(textNode0.gettext());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNull(textNode1.baseUri());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      int int0 = 16;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string1 = textNode0.nodeName();
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", string1);
      assertNotNull(string1);
      
      TextNode textNode1 = textNode0.text(string0);
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      int int0 = 16;
      textNode1.setSiblingIndex(int0);
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(16, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.gettext());
      assertEquals(16, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string2 = textNode0.gettext();
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(16, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertSame(textNode0, textNode1);
      assertNull(string2);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        textNode1.splitText(int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      String string1 = "M!Fkte[33u4";
      textNode0.settext(string1);
      assertEquals("M!Fkte[33u4", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      
      StringBuilder stringBuilder0 = null;
      int int0 = (-93);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      TextNode textNode1 = (TextNode)textNode0.traverse(nodeVisitor0);
      assertEquals("M!Fkte[33u4", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("M!Fkte[33u4", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertNull(textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      
      document_OutputSettings1.prettyPrint = document_OutputSettings0.prettyPrint;
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getprettyPrint());
      
      document_OutputSettings0.charset = document_OutputSettings1.charset;
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertEquals("UTF-8", document_OutputSettings0.charset.displayName());
      assertEquals("UTF-8", document_OutputSettings0.charset.name());
      assertTrue(document_OutputSettings0.charset.isRegistered());
      assertEquals("UTF-8", document_OutputSettings0.charset.toString());
      assertTrue(document_OutputSettings0.charset.canEncode());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(document_OutputSettings0.charset);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      assertFalse(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertNotNull(textNode0);
      
      int int0 = (-93);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertFalse(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertFalse(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertFalse(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertFalse(document_OutputSettings1.prettyPrint);
      
      String string1 = textNode0.nodeName();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("#text", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        textNode0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string0 = textNode0.toString();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      String string1 = textNode0.getWholeText();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      String string3 = textNode0.text();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals("Two", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Node[] nodeArray0 = new Node[2];
      int int0 = 5287;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = (-93);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Two", textNode0.gettext());
      assertNotNull(textNode0);
      
      int int0 = (-984);
      textNode0.siblingIndex = int0;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals((-984), textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Document document0 = serializedObjectSupporter0.deserializeObjectDocument289();
      assertNull(document0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string0 = "Hkm,9D(3V-zNpT2Ce";
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      String string1 = TextNode.TEXT_KEY;
      assertNotSame(string1, string0);
      assertEquals("text", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = textNode0.getWholeText();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("Two", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "";
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = (-93);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(document_OutputSettings0.prettyPrint);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(document_OutputSettings0.prettyPrint);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      
      textNode0.attributes = attributes0;
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.charset(document_OutputSettings0.charset);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotNull(document_OutputSettings3);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.getescapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings4);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings4.prettyPrint);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      Node[] nodeArray0 = new Node[2];
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder291();
      assertEquals("<!DOCTYPE html>\n<html>\n <head></head>\n <body>\n  OneTwoThree\n  <link />FourFive ", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = textNode0.getWholeText();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger320();
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      nodeArray0[0] = (Node) textNode0;
      boolean boolean0 = textNode0.isBlank();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertFalse(boolean0);
      
      int int0 = (-18);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Document document0 = serializedObjectSupporter0.deserializeObjectDocument289();
      assertNull(document0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = textNode0.toString();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      String string1 = textNode0.getWholeText();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Two", textNode1.gettext());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      int int0 = 500;
      textNode0.siblingIndex = int0;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(500, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      
      String string0 = textNode0.toString();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(500, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      String string1 = textNode0.getWholeText();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(500, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      String string3 = "";
      TextNode textNode1 = textNode0.text(string3);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(500, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(500, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertSame(textNode1, textNode0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(textNode1);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string0 = "";
      textNode0.settext(string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      
      String string1 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("text", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "";
      String string4 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = ":_\\\\,]S'L?koTGG%";
      String string6 = "16";
      TextNode textNode1 = TextNode.createFromEncoded(string5, string6);
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(":_\\\\,]S'L?koTGG%", textNode1.gettext());
      assertEquals("16", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(textNode1, textNode0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "";
      String string1 = "&$.y#7F&P+u0o";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.gettext());
      assertEquals("&$.y#7F&P+u0o", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      
      String string2 = "";
      String string3 = TextNode.stripLeadingWhitespace(string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertEquals("", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = null;
      // Undeclared exception!
      try { 
        textNode0.absUrl(string4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string0 = "";
      String string1 = textNode0.gettext();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(textNode0.TEXT_KEY);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      String string2 = textNode0.getTEXT_KEY();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("text", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = textNode1.isBlank();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertTrue(boolean0);
      
      String string3 = "";
      String string4 = TextNode.stripLeadingWhitespace(string3);
      assertSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertEquals("", string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "Split offset must be not be negative";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertNotNull(textNode0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder143();
      assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p>", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string1 = textNode0.outerHtml();
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Split offset must be not be negative", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 70;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p>Split offset must be not be negative", stringBuilder0.toString());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotSame(string0, string1);
      assertTrue(string0.equals((Object)string1));
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      String string2 = textNode0.nodeName();
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("#text", string2);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "nS@TaC9E'Lt|>=";
      TextNode textNode1 = TextNode.createFromEncoded(textNode0.text, string3);
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("Split offset must be not be negative", textNode1.gettext());
      assertEquals("nS@TaC9E'Lt|>=", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(textNode1, textNode0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      String string4 = "Lhop (p&]E/kk$y)UMq";
      String string5 = textNode0.attr(string4);
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertEquals("", string5);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int1 = (-829);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      textNode1.outerHtmlTail(stringBuilder0, int1, document_OutputSettings1);
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p>Split offset must be not be negative", stringBuilder0.toString());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("Split offset must be not be negative", textNode1.gettext());
      assertEquals("nS@TaC9E'Lt|>=", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertNotSame(textNode1, textNode0);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(int1 == int0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      int int2 = (-923);
      textNode1.outerHtmlTail(stringBuilder0, int2, document_OutputSettings0);
      assertEquals("Split offset must be not be negative", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p>Split offset must be not be negative", stringBuilder0.toString());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("Split offset must be not be negative", textNode1.gettext());
      assertEquals("nS@TaC9E'Lt|>=", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(textNode0, textNode1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertNotSame(textNode1, textNode0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertNotNull(textNode0);
      
      String string0 = textNode0.toString();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      String string1 = textNode0.getWholeText();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      String string3 = "Gaooiy<`p:/m";
      boolean boolean0 = textNode0.hasAttr(string3);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(boolean0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "TextNode78.xml";
      String string5 = textNode0.absUrl(string4);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertSame(string5, string2);
      assertNotSame(string5, string1);
      assertEquals("", string5);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string0 = "#text";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string1 = "I5@N]dWgJx\"_f?xU";
      TextNode textNode1 = (TextNode)textNode0.attr(string0, string1);
      assertEquals("#text", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("#text", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode1);
      
      String string2 = TextNode.normaliseWhitespace(string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("#text", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Document document0 = serializedObjectSupporter0.deserializeObjectDocument289();
      assertNull(document0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder142();
      assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = textNode0.toString();
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      StringBuilder stringBuilder1 = serializedObjectSupporter0.deserializeObjectStringBuilder81();
      assertEquals("<div>\n <div>\n  one\n </div>\n <div>\n  two\n </div>\n <p>Hello</p>\n <p>", stringBuilder1.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder1);
      
      String string1 = textNode0.getWholeText();
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Two", textNode1.gettext());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      String string3 = textNode1.attr(textNode0.TEXT_KEY);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Two", textNode1.gettext());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals("Two", string3);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = (-93);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      
      textNode0.attributes = attributes0;
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.charset(document_OutputSettings0.charset);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertNotNull(document_OutputSettings3);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      
      String string1 = textNode0.getWholeText();
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = 19;
      // Undeclared exception!
      try { 
        textNode0.splitText(int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = (-93);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(document_OutputSettings0.prettyPrint);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      
      textNode0.attributes = attributes0;
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.charset(document_OutputSettings0.charset);
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotNull(document_OutputSettings3);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      
      String string1 = "#text";
      String string2 = "";
      String string3 = textNode0.text();
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      attributes0.put(string1, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings4);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings4.prettyPrint);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Document document0 = serializedObjectSupporter0.deserializeObjectDocument289();
      assertNull(document0);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder59();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertNotNull(textNode0);
      
      String string0 = textNode0.toString();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      String string1 = textNode0.getWholeText();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = (-895);
      textNode0.setSiblingIndex(int0);
      assertEquals((-895), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      
      String string2 = "";
      int int1 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -894, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Document document0 = serializedObjectSupporter0.deserializeObjectDocument317();
      assertNull(document0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string0 = textNode0.toString();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      String string1 = textNode0.getWholeText();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      textNode0.ensureAttributes();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      
      String string2 = "";
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Two", textNode1.gettext());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      Integer integer0 = serializedObjectSupporter0.deserializeObjectInteger89();
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", string0);
      assertNotNull(string0);
      
      String string1 = textNode0.toString();
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = TextNode.stripLeadingWhitespace(string1);
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("Two", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "";
      String string4 = textNode0.gettext();
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertEquals("Two", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = textNode0.gettext();
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertEquals("Two", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = "";
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder412();
      assertEquals("<table> \n <colgroup> \n  <col /> \n </colgroup>\n <colgroup> \n  <col /> \n  <col /> \n  <col /> \n </colgroup>\n <thead> \n  <tr> \n   <th> </th>\n   <th>2008 </th>\n   <th>2007 </th>\n   <th>2006 </th>\n  </tr>\n </thead>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Research and development </th>\n   <td> $ 1,109 </td>\n   <td> $ 782 </td>\n   <td> $ 712 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 3.4% </td>\n   <td> 3.3% </td>\n   <td> 3.7% </td>\n  </tr>\n </tbody>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Selling, general, and administrative </th>\n   <td> $ 3,761 </td>\n   <td> $ 2,963 </td>\n   <td> $ 2,433 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 11.6% </td>\n   <td>", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = textNode0.hasAttr(textNode0.TEXT_KEY);
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertTrue(boolean0);
      
      int int0 = 27;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      int int1 = 1;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(int1 == int0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings1);
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("<table> \n <colgroup> \n  <col /> \n </colgroup>\n <colgroup> \n  <col /> \n  <col /> \n  <col /> \n </colgroup>\n <thead> \n  <tr> \n   <th> </th>\n   <th>2008 </th>\n   <th>2007 </th>\n   <th>2006 </th>\n  </tr>\n </thead>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Research and development </th>\n   <td> $ 1,109 </td>\n   <td> $ 782 </td>\n   <td> $ 712 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 3.4% </td>\n   <td> 3.3% </td>\n   <td> 3.7% </td>\n  </tr>\n </tbody>\n <tbody> \n  <tr> \n   <th scope=\"rowgroup\"> Selling, general, and administrative </th>\n   <td> $ 3,761 </td>\n   <td> $ 2,963 </td>\n   <td> $ 2,433 </td>\n  </tr>\n  <tr> \n   <th scope=\"row\"> Percentage of net sales </th>\n   <td> 11.6% </td>\n   <td>Two", stringBuilder0.toString());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      
      // Undeclared exception!
      try { 
        textNode0.absUrl(string6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Document document0 = serializedObjectSupporter0.deserializeObjectDocument10();
      assertNull(document0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertNotNull(textNode0);
      
      String string0 = textNode0.toString();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      TextNode textNode1 = (TextNode)textNode0.before(string0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Two", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      String string1 = textNode0.getWholeText();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      int int0 = 0;
      TextNode textNode2 = textNode0.splitText(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode2.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(2, textNode2.siblingIndex());
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotNull(textNode2);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string0 = "";
      String string1 = textNode0.gettext();
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(textNode0.TEXT_KEY);
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      TextNode textNode2 = textNode1.text(textNode0.text);
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("Two", textNode2.gettext());
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertNotNull(textNode2);
      
      String string2 = textNode0.getTEXT_KEY();
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("text", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = textNode1.isBlank();
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode1.gettext());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertFalse(boolean0);
      
      String string3 = "";
      String string4 = TextNode.normaliseWhitespace(string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string0, string4);
      assertSame(string4, string0);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertEquals("", string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "1~0r";
      String string1 = "R#'iW(K8;:g";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("1~0r", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(textNode0);
      
      String string2 = "Split offset must not be greater than current text length";
      textNode0.settext(string2);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      TextNode textNode1 = (TextNode)textNode0.clone();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode1.baseUri());
      assertEquals("Split offset must not be greater than current text length", textNode1.gettext());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      String string3 = textNode0.getTEXT_KEY();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals("text", string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = 49;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      boolean boolean0 = true;
      Attributes attributes0 = textNode0.attributes();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(textNode0, textNode1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotNull(attributes0);
      
      String string4 = "AW=mVN);IO";
      String string5 = "}FnE(?\"G%8<z$R3";
      String string6 = textNode1.absUrl(string5);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode1.baseUri());
      assertEquals("Split offset must not be greater than current text length", textNode1.gettext());
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertEquals("", string6);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = textNode1.toString();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode1.baseUri());
      assertEquals("Split offset must not be greater than current text length", textNode1.gettext());
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertEquals("Split offset must not be greater than current text length", string7);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      textNode1.ensureAttributes();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.gettext());
      assertEquals("R#'iW(K8;:g", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("R#'iW(K8;:g", textNode1.baseUri());
      assertEquals("Split offset must not be greater than current text length", textNode1.gettext());
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Document document0 = serializedObjectSupporter0.deserializeObjectDocument10();
      assertNull(document0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string0 = textNode0.toString();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      String string1 = textNode0.getWholeText();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.childNodeSize());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Two", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      String string3 = "com.thoughtworks.xstream.core.util.OrderRetainingMap$ArraySet";
      TextNode textNode2 = (TextNode)textNode1.removeAttr(string3);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Two", textNode1.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("Two", textNode2.gettext());
      assertEquals(1, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode2);
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = "1~0r";
      String string1 = "Split offset must not be greater than current text length";
      int int0 = 49;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      boolean boolean0 = true;
      String string2 = "AW=mVN);IO";
      String string3 = "Document259.xml";
      String string4 = "";
      String string5 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string4, string5);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertSame(string4, string5);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(textNode0);
      
      String string6 = textNode0.gettext();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.gettext());
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string6);
      assertNotSame(string4, string0);
      assertSame(string4, string5);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertSame(string5, string4);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertEquals("", string6);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Document document0 = serializedObjectSupporter0.deserializeObjectDocument289();
      assertNull(document0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Node node0 = textNode0.unwrap();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(node0);
      
      String string0 = textNode0.toString();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      String string1 = textNode0.getWholeText();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Two", textNode1.gettext());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      String string3 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = (-93);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      textNode0.siblingIndex = int0;
      assertEquals((-93), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings2.prettyPrint);
      assertEquals(1, document_OutputSettings2.indentAmount);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.clone();
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings3.getindentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings3);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertEquals(1, document_OutputSettings3.indentAmount);
      assertTrue(document_OutputSettings3.prettyPrint);
      
      textNode0.attributes = attributes0;
      assertEquals((-93), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings1.charset(document_OutputSettings0.charset);
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertNotNull(document_OutputSettings4);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertEquals(1, document_OutputSettings4.indentAmount);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.clone();
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.getindentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.getescapeMode());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertTrue(document_OutputSettings5.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(1, document_OutputSettings5.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.getescapeMode());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertNotNull(document_OutputSettings5);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      assertTrue(document_OutputSettings4.prettyPrint);
      assertEquals(1, document_OutputSettings4.indentAmount);
      assertTrue(document_OutputSettings5.prettyPrint);
      assertEquals(1, document_OutputSettings5.indentAmount);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = "";
      String string1 = textNode0.gettext();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotSame(string1, string0);
      assertEquals("Two", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = (-629);
      textNode0.siblingIndex = int0;
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-629), textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(textNode0.TEXT_KEY);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-629), textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals((-629), textNode1.siblingIndex());
      assertEquals("Two", textNode1.gettext());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      TextNode textNode2 = textNode1.text(textNode0.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-629), textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals((-629), textNode1.siblingIndex());
      assertEquals("Two", textNode1.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals((-629), textNode2.siblingIndex());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("Two", textNode2.gettext());
      assertEquals(0, textNode2.childNodeSize());
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertNotNull(textNode2);
      
      String string2 = textNode0.getTEXT_KEY();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-629), textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("text", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = textNode1.isBlank();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-629), textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals((-629), textNode1.siblingIndex());
      assertEquals("Two", textNode1.gettext());
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertFalse(boolean0);
      
      String string3 = "";
      String string4 = TextNode.normaliseWhitespace(string0);
      assertSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertSame(string4, string3);
      assertSame(string4, string0);
      assertEquals("", string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      TextNode textNode3 = textNode0.text(textNode2.text);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-629), textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals((-629), textNode1.siblingIndex());
      assertEquals("Two", textNode1.gettext());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals((-629), textNode2.siblingIndex());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("Two", textNode2.gettext());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("Two", textNode3.gettext());
      assertEquals((-629), textNode3.siblingIndex());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals("", textNode3.baseUri());
      assertEquals("text", textNode3.getTEXT_KEY());
      assertEquals("#text", textNode3.nodeName());
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode3);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode3);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode3);
      assertSame(textNode3, textNode1);
      assertSame(textNode3, textNode0);
      assertSame(textNode3, textNode2);
      assertNotNull(textNode3);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Document document0 = serializedObjectSupporter0.deserializeObjectDocument10();
      assertNull(document0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Two", textNode0.gettext());
      assertNotNull(textNode0);
      
      String string0 = textNode0.toString();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Two", textNode0.gettext());
      assertEquals("Two", string0);
      assertNotNull(string0);
      
      String string1 = TextNode.TEXT_KEY;
      assertNotSame(string1, string0);
      assertEquals("text", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder192();
      assertEquals("<p>", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = textNode1.isBlank();
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(boolean0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      
      String string3 = "# =58r&Bn";
      TextNode textNode2 = (TextNode)textNode1.attr(string1, string3);
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Two", textNode2.gettext());
      assertEquals(1, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotNull(textNode2);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = (-93);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      
      CharsetEncoder charsetEncoder0 = null;
      document_OutputSettings0.charsetEncoder = charsetEncoder0;
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.getindentAmount());
      assertTrue(document_OutputSettings1.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.getescapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings1.indentAmount);
      assertTrue(document_OutputSettings1.prettyPrint);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      
      textNode0.attributes = attributes0;
      assertNull(textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.charset(document_OutputSettings0.charset);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.getescapeMode());
      assertTrue(document_OutputSettings0.getprettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.getescapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.getprettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings2.getindentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint);
      assertEquals(1, document_OutputSettings0.indentAmount);
      assertEquals(1, document_OutputSettings2.indentAmount);
      assertTrue(document_OutputSettings2.prettyPrint);
      
      // Undeclared exception!
      try { 
        textNode0.text(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.gettext());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = (-93);
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertNotNull(textNode0);
      
      textNode0.remove();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.gettext());
      assertEquals("", textNode1.baseUri());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("#text", textNode1.nodeName());
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter0.deserializeObjectStringBuilder192();
      assertEquals("<p>", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      assertEquals("<p>\u0000", stringBuilder0.toString());
      assertEquals("<p>\u0000", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder0.deleteCharAt(int0);
      assertEquals("p>\u0000", stringBuilder0.toString());
      assertEquals("p>\u0000", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotNull(stringBuilder2);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("p>\u0000", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(textNode0.TEXT_KEY);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      TextNode textNode2 = textNode1.text(textNode0.text);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("Two", textNode2.gettext());
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertNotNull(textNode2);
      
      textNode2.setParentNode(textNode1);
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("Two", textNode2.gettext());
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      
      boolean boolean0 = textNode1.isBlank();
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("Two", textNode0.gettext());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode1.gettext());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text(textNode0.text);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      textNode1.baseUri = textNode0.TEXT_KEY;
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("Two", textNode1.gettext());
      assertEquals("text", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      
      boolean boolean0 = textNode0.isBlank();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("text", textNode0.baseUri());
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("#text", textNode0.nodeName());
      assertSame(textNode0, textNode1);
      assertFalse(boolean0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter1.deserializeObjectStringBuilder212();
      assertEquals("", stringBuilder0.toString());
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(stringBuilder0);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertFalse(boolean1);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TextNode textNode0 = serializedObjectSupporter0.deserializeObjectTextNode96();
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = (TextNode)textNode0.removeAttr(textNode0.TEXT_KEY);
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotNull(textNode1);
      
      TextNode textNode2 = textNode1.text(textNode0.text);
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("", textNode2.baseUri());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("Two", textNode2.gettext());
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertNotNull(textNode2);
      
      textNode2.baseUri = textNode0.TEXT_KEY;
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.baseUri());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("text", textNode2.getTEXT_KEY());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("Two", textNode2.gettext());
      assertEquals("text", textNode2.baseUri());
      
      boolean boolean0 = textNode1.isBlank();
      assertEquals("Two", textNode0.gettext());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.getTEXT_KEY());
      assertEquals("text", textNode0.baseUri());
      assertEquals("text", textNode1.getTEXT_KEY());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("text", textNode1.baseUri());
      assertEquals("Two", textNode1.gettext());
      assertEquals(0, textNode1.siblingIndex());
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertFalse(boolean0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      StringBuilder stringBuilder0 = serializedObjectSupporter1.deserializeObjectStringBuilder212();
      assertEquals("", stringBuilder0.toString());
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(stringBuilder0);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertFalse(boolean1);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertTrue(boolean1 == boolean0);
  }
}
