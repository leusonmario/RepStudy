/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 18:14:48 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "/Z~E.si?DqE$";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("/Z~E.si?DqE$", textNode0.baseUri());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = 3;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = new StringBuilder(int0);
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      textNode0.outerHtml(stringBuilder1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("/Z~E.si?DqE$", textNode0.baseUri());
      assertEquals("/Z~E.si?DqE$", stringBuilder1.toString());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertEquals("/Z~E.si?DqE$", stringBuilder1.toString());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("/Z~E.si?DqE$", textNode0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("/Z~E.si?DqE$", textNode0.baseUri());
      assertNotNull(attributes0);
      
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("/Z~E.si?DqE$", textNode0.baseUri());
      assertEquals("/Z~E.si?DqE$", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      textNode1.outerHtmlHead(stringBuilder1, int0, document_OutputSettings1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("/Z~E.si?DqE$", textNode0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals("/Z~E.si?DqE$E.si?DqE$", stringBuilder1.toString());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals("/Z~E.si?DqE$", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(boolean0 == boolean1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(textNode1, textNode0);
      
      Node node0 = textNode1.attr(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("/Z~E.si?DqE$", textNode0.baseUri());
      assertEquals("/Z~E.si?DqE$", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, node0.childNodeSize());
      assertEquals("/Z~E.si?DqE$", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertNotNull(node0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(node0.equals((Object)textNode0));
      assertNotSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode1, node0);
      assertNotSame(textNode1, textNode0);
      assertNotSame(node0, textNode0);
      assertSame(node0, textNode1);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      int int0 = 32;
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      assertEquals(" ", stringBuilder0.toString());
      assertEquals(" ", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals(" ", stringBuilder0.toString());
      assertTrue(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "Attributes incoretly resent on end tag";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Attributes incoretly resent on end tag", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document0 = new Document(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Attributes incoretly resent on end tag", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Attributes incoretly resent on end tag", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Attributes incoretly resent on end tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Attributes incoretly resent on end tag", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = textNode0.text();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Attributes incoretly resent on end tag", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Attributes incoretly resent on end tag", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = textNode0.absUrl(string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Attributes incoretly resent on end tag", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = textNode0.toString();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Attributes incoretly resent on end tag", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\nAttributes incoretly resent on end tag", string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document0 = new Document(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = textNode0.toString();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 202;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "Split offset must not be greater than current text length";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Split offset must not be greater than current text length", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      textNode0.parentNode = (Node) document0;
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Split offset must not be greater than current text length", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      assertEquals(1, textNode0.parentNode.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode0.parentNode.baseUri());
      
      int int0 = 1;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(1, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "E<ddB";
      String string1 = "";
      TextNode textNode0 = new TextNode(string1, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("E<ddB", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document document0 = Document.createShell(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("E<ddB", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("E<ddB", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("E<ddB", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("E<ddB", document1.baseUri());
      assertNotNull(document1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      textNode0.outerHtml(stringBuilder0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("E<ddB", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("", stringBuilder0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = TextNode.stripLeadingWhitespace(string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "sub";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("sub", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("sub", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Tag tag0 = Tag.valueOf(string0);
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertEquals("sub", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("sub", tag0.toString());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, string0);
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertEquals("sub", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("sub", tag0.toString());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("sub", element0.baseUri());
      assertEquals("sub", element0.nodeName());
      assertEquals("sub", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("sub", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertEquals("sub", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("sub", tag0.toString());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("sub", element0.baseUri());
      assertEquals("sub", element0.nodeName());
      assertEquals("sub", element0.tagName());
      assertEquals("sub", element1.nodeName());
      assertEquals("sub", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("sub", element1.baseUri());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      textNode0.outerHtml(stringBuilder0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("sub", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("subsub", stringBuilder0.toString());
      
      int int0 = (-2679);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = ":*YPAYg.l]N";
      Node node0 = textNode0.removeAttr(string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, node0.childNodeSize());
      assertEquals("", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(textNode0, node0);
      assertNotSame(string1, string0);
      assertSame(node0, textNode0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "XqCWhSl}!2S*`";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("XqCWhSl}!2S*`", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("XqCWhSl}!2S*`", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("XqCWhSl}!2S*`", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      boolean boolean0 = textNode1.hasAttr(string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("XqCWhSl}!2S*`", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("XqCWhSl}!2S*`", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(boolean0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = null;
      String string1 = "Split offset must be not be negative";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.attr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "^\\r68.%d[!eq<";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("^\\r68.%d[!eq<", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string1 = "1YjeS[PI";
      String string2 = textNode0.attr(string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("^\\r68.%d[!eq<", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "3w7Q\\Yo.z";
      String string1 = "IvdF";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("IvdF", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "data-";
      String string3 = textNode0.absUrl(string2);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("IvdF", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      String string1 = "u&pKb:1{e)8D5t<JO_L";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("u&pKb:1{e)8D5t<JO_L", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = (-628);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "6\\p}u'";
      String string1 = "QIG9Q<{{[ ";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("QIG9Q<{{[ ", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      TextNode textNode1 = textNode0.text(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("QIG9Q<{{[ ", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("QIG9Q<{{[ ", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string2 = "2)sK4Adw&Ge8` o";
      String string3 = textNode1.absUrl(string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("QIG9Q<{{[ ", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("QIG9Q<{{[ ", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "~WhSyZ";
      String string1 = "w=-i";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("w=-i", textNode0.baseUri());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = textNode0.toString();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("w=-i", textNode0.baseUri());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("~WhSyZ", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertNull(textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = "A^:";
      // Undeclared exception!
      try { 
        textNode0.attr(string1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "SiodS\"zfgr";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertNotNull(string1);
      assertEquals("SiodS\"zfgr", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "fQ4G1V8";
      TextNode textNode0 = new TextNode(string2, string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("fQ4G1V8", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      TextNode textNode1 = textNode0.text(string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("fQ4G1V8", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("fQ4G1V8", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string3 = "";
      String string4 = null;
      // Undeclared exception!
      try { 
        textNode1.attr(string3, string4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "f:\"[d'yB!A/MHmrs@";
      String string1 = "Split offset must be not be negative";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = textNode0.hasAttr(string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = textNode0.text();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("f:\"[d'yB!A/MHmrs@", string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "Fal,}svXXn!y/ng+";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      int int0 = 2464;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "Ut?Y";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertNotNull(string1);
      assertEquals("Ut?Y", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string2);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      assertSame(string0, string1);
      
      String string3 = "O6K9hAFT)ID]";
      boolean boolean0 = textNode0.hasAttr(string3);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      String string4 = textNode0.nodeName();
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("#text", string4);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      
      String string5 = textNode0.toString();
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Ut?Y", string5);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      
      TextNode textNode1 = TextNode.createFromEncoded(string1, string2);
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode1.equals((Object)textNode0));
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(textNode1, textNode0);
      
      String string6 = "";
      Node node0 = textNode1.attr(string4, string6);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, node0.childNodeSize());
      assertNull(node0.baseUri());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(node0.equals((Object)textNode0));
      assertNotSame(string0, string6);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string5);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string4, string6);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertSame(node0, textNode1);
      assertNotSame(node0, textNode0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "Insert position out of bounds.";
      String string1 = "Split offset must not be greater than current text length";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = textNode0.getWholeText();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Insert position out of bounds.", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string3);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Insert position out of bounds.", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      String string4 = "";
      String string5 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = 32;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = null;
      String string1 = "Split offset must not be greater than current text length";
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = " QI_Rx^@\\G%1~y`N";
      TextNode textNode0 = new TextNode(string2, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      List<Node> list0 = textNode0.childNodes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = textNode0.text();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" QI_Rx^@\\G%1~y`N", string3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "i-.Zrz@A";
      TextNode textNode0 = new TextNode(string1, string2);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("i-.Zrz@A", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string0.equals((Object)string2));
      
      int int0 = 2332;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      int int1 = 0;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int1);
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      assertFalse(int1 == int0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("i-.Zrz@A", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", stringBuilder0.toString());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "h6";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("h6", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("h6", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(attributes0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "Insert position out of bounds.";
      String string1 = "Split offset must not be greater than current text length";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = textNode0.toString();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Insert position out of bounds.", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "";
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "g]o2^";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertNotNull(string1);
      assertEquals("g]o2^", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "h[C";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("g]o2^", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = textNode0.text();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("g]o2^", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("h[C", string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "";
      String string1 = "org.jsoup.nodes.DocumentType";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("org.jsoup.nodes.DocumentType", textNode0.baseUri());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("org.jsoup.nodes.DocumentType", textNode0.baseUri());
      assertNotNull(attributes0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "#text";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      String string1 = textNode1.toString();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("#text", string1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      
      String string2 = "5NyXZt7aUu~!cfq";
      String string3 = TextNode.normaliseWhitespace(string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("5NyXZt7aUu~!cfq", string3);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string1 = "";
      String string2 = textNode0.attr(string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      
      boolean boolean0 = textNode0.hasAttr(string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      
      String string3 = textNode0.attr(string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string3);
      assertEquals("", string3);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertSame(string1, string2);
      assertSame(string3, string0);
      assertSame(string3, string2);
      assertSame(string3, string1);
      
      String string4 = textNode0.text();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string4);
      assertEquals("", string4);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string4);
      assertSame(string0, string3);
      assertSame(string4, string2);
      assertSame(string4, string1);
      assertSame(string4, string3);
      assertSame(string4, string0);
      
      String string5 = textNode0.toString();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string4);
      assertSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(attributes0);
      assertTrue(string0.equals((Object)string5));
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string4);
      assertSame(string0, string3);
      assertNotSame(string0, string5);
      
      String string6 = textNode0.nodeName();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string6);
      assertTrue(string0.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("#text", string6);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string6);
      assertSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      
      String string7 = ",Z~V*'\\^Y";
      String string8 = TextNode.normaliseWhitespace(string7);
      assertNotNull(string8);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertEquals(",Z~V*'\\^Y", string8);
      assertSame(string7, string8);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string8, string2);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "";
      String string1 = "1Li&l&'1)HKd4YU+";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1Li&l&'1)HKd4YU+", textNode0.baseUri());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1Li&l&'1)HKd4YU+", textNode0.baseUri());
      assertNotNull(nodeArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, nodeArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 4663;
      textNode0.addChildren(int0, nodeArray0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1Li&l&'1)HKd4YU+", textNode0.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, nodeArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "org.jsoup.nodes.TextNode";
      Node node0 = textNode0.removeAttr(string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1Li&l&'1)HKd4YU+", textNode0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, node0.childNodeSize());
      assertEquals("1Li&l&'1)HKd4YU+", node0.baseUri());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, node0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(node0, textNode0);
      
      String string3 = textNode0.getWholeText();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1Li&l&'1)HKd4YU+", textNode0.baseUri());
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, node0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      String string4 = "";
      String string5 = TextNode.normaliseWhitespace(string4);
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotSame(string4, string2);
      assertSame(string4, string5);
      assertNotSame(string4, string1);
      assertSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string5, string2);
      assertSame(string5, string0);
      assertNotSame(string5, string1);
      assertSame(string5, string4);
      assertNotSame(string5, string3);
      
      boolean boolean0 = textNode0.isBlank();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1Li&l&'1)HKd4YU+", textNode0.baseUri());
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean0);
      assertSame(string0, string4);
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, node0);
      
      String string6 = "";
      TextNode textNode1 = TextNode.createFromEncoded(string6, string3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("1Li&l&'1)HKd4YU+", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertNotNull(textNode1);
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string3.equals((Object)string5));
      assertTrue(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string4));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)node0));
      assertSame(string0, string4);
      assertSame(string0, string6);
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertSame(string6, string4);
      assertSame(string6, string0);
      assertSame(string6, string5);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "Split offset must be not be negative";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = textNode0.nodeName();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#text", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = (-1);
      String string2 = "=<DK@";
      Node node0 = textNode0.removeAttr(string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("", node0.baseUri());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, node0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(node0, textNode0);
      
      textNode0.siblingIndex = int0;
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      
      String string3 = "D]YLp'S?Tprh(k";
      TextNode textNode1 = textNode0.text(string3);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals((-1), textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      
      String string4 = textNode0.text();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("D]YLp'S?Tprh(k", string4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(string4, string3);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "PT";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "^\\s+";
      TextNode textNode1 = textNode0.text(string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      
      boolean boolean0 = textNode1.isBlank();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      assertSame(string0, string1);
      
      boolean boolean0 = textNode0.hasAttr(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      // Undeclared exception!
      try { 
        textNode0.absUrl(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      TextNode textNode0 = new TextNode(string0, string1);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text(string1);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      int int0 = 2005;
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        textNode1.attributes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "oJ<DZVAQXI";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertNotNull(string1);
      assertEquals("oJ<DZVAQXI", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = null;
      TextNode textNode0 = new TextNode(string2, string1);
      assertEquals("oJ<DZVAQXI", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string3 = null;
      // Undeclared exception!
      try { 
        textNode0.attr(string3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "ovGVDHg\\]VcLr+)";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("ovGVDHg\\]VcLr+)", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("ovGVDHg\\]VcLr+)", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("ovGVDHg\\]VcLr+)", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) int0);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, (double) int0);
      assertEquals("0.00.0", stringBuilder0.toString());
      assertEquals("0.00.0", stringBuilder1.toString());
      assertEquals("0.00.0", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuilder stringBuilder3 = stringBuilder2.insert(int0, int0);
      assertEquals("00.00.0", stringBuilder0.toString());
      assertEquals("00.00.0", stringBuilder1.toString());
      assertEquals("00.00.0", stringBuilder2.toString());
      assertEquals("00.00.0", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      
      StringBuilder stringBuilder4 = stringBuilder3.append((Object) stringBuilder0);
      assertEquals("00.00.000.00.0", stringBuilder0.toString());
      assertEquals("00.00.000.00.0", stringBuilder1.toString());
      assertEquals("00.00.000.00.0", stringBuilder2.toString());
      assertEquals("00.00.000.00.0", stringBuilder3.toString());
      assertEquals("00.00.000.00.0", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      String string1 = "UTF-8";
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(string1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(string1, string0);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Charset charset0 = Charset.forName(string1);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      assertFalse(string1.equals((Object)string0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(string1, string0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertNotNull(document_OutputSettings3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(string1, string0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings4);
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(string1, string0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      
      textNode1.outerHtmlTail(stringBuilder4, int0, document_OutputSettings4);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("ovGVDHg\\]VcLr+)", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("ovGVDHg\\]VcLr+)", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("00.00.000.00.0", stringBuilder0.toString());
      assertEquals("00.00.000.00.0", stringBuilder1.toString());
      assertEquals("00.00.000.00.0", stringBuilder2.toString());
      assertEquals("00.00.000.00.0", stringBuilder3.toString());
      assertEquals("00.00.000.00.0", stringBuilder4.toString());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(string1, string0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "J{Wh-OX4W v!~l";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertNotNull(string1);
      assertEquals("J{Wh-OX4W v!~l", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "P+ZpU} FQ;>sOk ";
      TextNode textNode0 = new TextNode(string1, string2);
      assertEquals("P+ZpU} FQ;>sOk ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "";
      boolean boolean0 = textNode0.hasAttr(string3);
      assertEquals("P+ZpU} FQ;>sOk ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      
      String string4 = textNode0.getWholeText();
      assertEquals("P+ZpU} FQ;>sOk ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("J{Wh-OX4W v!~l", string4);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string4);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertSame(string4, string1);
      assertNotSame(string4, string3);
      
      int int0 = 2;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("P+ZpU} FQ;>sOk ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("P+ZpU} FQ;>sOk ", textNode1.baseUri());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string4);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int1 = 52;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      int int2 = 2760;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(2760, document_OutputSettings0.indentAmount());
      assertEquals(2760, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      textNode1.outerHtmlTail(stringBuilder0, int1, document_OutputSettings1);
      assertEquals("P+ZpU} FQ;>sOk ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("P+ZpU} FQ;>sOk ", textNode1.baseUri());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(2760, document_OutputSettings0.indentAmount());
      assertEquals(2760, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string4);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      String string5 = textNode1.toString();
      assertEquals("P+ZpU} FQ;>sOk ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("P+ZpU} FQ;>sOk ", textNode1.baseUri());
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Wh-OX4W v!~l", string5);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string4);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      
      String string6 = textNode0.absUrl(string0);
      assertEquals("P+ZpU} FQ;>sOk ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(textNode0.equals((Object)textNode1));
      assertEquals("", string6);
      assertNotSame(string6, string4);
      assertSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string4);
      assertSame(string1, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(textNode0, textNode1);
      
      Attributes attributes0 = textNode1.attributes();
      assertEquals("P+ZpU} FQ;>sOk ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("P+ZpU} FQ;>sOk ", textNode1.baseUri());
      assertNotNull(attributes0);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string4);
      assertSame(string1, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      String string7 = "script";
      String string8 = textNode0.attr(string7);
      assertEquals("P+ZpU} FQ;>sOk ", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string8);
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertEquals("", string8);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string8);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string4);
      assertSame(string1, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string2, string8);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string2);
      assertNotSame(string8, string1);
      assertSame(string8, string6);
      assertNotSame(textNode0, textNode1);
      
      String string9 = ";iJ)v#Vq{gG:&ph\"e)";
      TextNode textNode2 = TextNode.createFromEncoded(string9, string3);
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertNotNull(textNode2);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotSame(string9, string5);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertNotSame(string9, string7);
      assertNotSame(string9, string6);
      assertNotSame(string9, string0);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
      assertNotSame(string9, string1);
      assertSame(string3, string8);
      assertNotSame(string3, string2);
      assertNotSame(string3, string9);
      assertNotSame(string3, string0);
      assertSame(string3, string6);
      assertNotSame(string3, string7);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "S";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      StringBuilder stringBuilder0 = null;
      int int0 = 4006;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(4006, document_OutputSettings0.indentAmount());
      assertEquals(4006, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.prettyPrint(boolean0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(4006, document_OutputSettings0.indentAmount());
      assertEquals(4006, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(4006, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(4006, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(4006, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "LPgP#r";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("LPgP#r", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = textNode0.text();
      assertEquals("LPgP#r", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string1);
      assertEquals("LPgP#r", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = textNode0.nodeName();
      assertEquals("LPgP#r", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#text", string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string2);
      assertEquals("LPgP#r", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = true;
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean0);
      assertEquals("LPgP#r", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#texttrue", stringBuilder0.toString());
      assertEquals("#texttrue", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      int int0 = 0;
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, string2);
      assertEquals("LPgP#r", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text#texttrue", stringBuilder0.toString());
      assertEquals("#text#texttrue", stringBuilder1.toString());
      assertEquals("#text#texttrue", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      int int1 = 0;
      StringBuilder stringBuilder3 = stringBuilder2.append((CharSequence) string1, int0, int1);
      assertEquals("LPgP#r", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text#texttrue", stringBuilder0.toString());
      assertEquals("#text#texttrue", stringBuilder1.toString());
      assertEquals("#text#texttrue", stringBuilder2.toString());
      assertEquals("#text#texttrue", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      
      String string3 = "^TE$ nJYnsWEatrjH";
      StringBuilder stringBuilder4 = stringBuilder3.append(string3);
      assertEquals("LPgP#r", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text#texttrue^TE$ nJYnsWEatrjH", stringBuilder0.toString());
      assertEquals("#text#texttrue^TE$ nJYnsWEatrjH", stringBuilder1.toString());
      assertEquals("#text#texttrue^TE$ nJYnsWEatrjH", stringBuilder2.toString());
      assertEquals("#text#texttrue^TE$ nJYnsWEatrjH", stringBuilder3.toString());
      assertEquals("#text#texttrue^TE$ nJYnsWEatrjH", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder4);
      assertEquals("LPgP#r", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text#texttrue^TE$ nJYnsWEatrjH", stringBuilder0.toString());
      assertEquals("#text#texttrue^TE$ nJYnsWEatrjH", stringBuilder1.toString());
      assertEquals("#text#texttrue^TE$ nJYnsWEatrjH", stringBuilder2.toString());
      assertEquals("#text#texttrue^TE$ nJYnsWEatrjH", stringBuilder3.toString());
      assertEquals("#text#texttrue^TE$ nJYnsWEatrjH", stringBuilder4.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "rt";
      String string1 = "footer";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("footer", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = null;
      TextNode textNode1 = textNode0.text(string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("footer", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("footer", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      // Undeclared exception!
      try { 
        textNode1.hasAttr(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "s$@)H";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("s$@)H", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string1 = "";
      int int0 = 486;
      textNode0.setSiblingIndex(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("s$@)H", textNode0.baseUri());
      assertEquals(486, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      Node[] nodeArray0 = new Node[0];
      textNode0.addChildren(nodeArray0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("s$@)H", textNode0.baseUri());
      assertEquals(486, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, nodeArray0.length);
      assertNotSame(string0, string1);
      
      String string2 = textNode0.getWholeText();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("s$@)H", textNode0.baseUri());
      assertEquals(486, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("s$@)H", string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      TextNode textNode1 = textNode0.text(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("s$@)H", textNode0.baseUri());
      assertEquals(486, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(486, textNode1.siblingIndex());
      assertEquals("s$@)H", textNode1.baseUri());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode1, textNode0);
      
      String string3 = textNode1.text();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("s$@)H", textNode0.baseUri());
      assertEquals(486, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(486, textNode1.siblingIndex());
      assertEquals("s$@)H", textNode1.baseUri());
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(textNode1, textNode0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      
      Node[] nodeArray1 = new Node[5];
      assertFalse(nodeArray1.equals((Object)nodeArray0));
      
      Comment comment0 = new Comment(string2, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("s$@)H", textNode0.baseUri());
      assertEquals(486, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, comment0.siblingIndex());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("s$@)H", comment0.baseUri());
      assertNotNull(comment0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      
      List<Node> list0 = comment0.childNodes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("s$@)H", textNode0.baseUri());
      assertEquals(486, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, comment0.siblingIndex());
      assertEquals(0, comment0.childNodeSize());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("s$@)H", comment0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      
      nodeArray1[0] = (Node) comment0;
      nodeArray1[1] = (Node) textNode0;
      nodeArray1[2] = (Node) textNode1;
      nodeArray1[3] = (Node) textNode1;
      nodeArray1[4] = (Node) textNode1;
      // Undeclared exception!
      try { 
        textNode1.addChildren(nodeArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "s";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertNotNull(string1);
      assertEquals("s", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string2);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "*feJh{t";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Node node0 = textNode0.nextSibling();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(node0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      textNode0.setBaseUri(string1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Node node1 = textNode0.nextSibling();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(node1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = textNode0.getWholeText();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("*feJh{t", string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      TextNode textNode1 = textNode0.text(string1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      Attributes attributes0 = textNode1.attributes();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(attributes0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string3 = null;
      textNode1.baseUri = string3;
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      
      String string4 = null;
      // Undeclared exception!
      try { 
        textNode1.text(string4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "org.jsoup.select.Elements";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("org.jsoup.select.Elements", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "R[TV{'\";";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = textNode0.text();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("R[TV{'\";", string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("R[TV{'&quot;;", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      int int0 = (-713);
      textNode0.setSiblingIndex(int0);
      assertEquals((-713), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      String string4 = " H-\\QvS0op1*~iy] ";
      textNode0.text = string4;
      assertEquals((-713), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      
      String string5 = "org.jsoup.nodes.TextNode";
      boolean boolean0 = textNode0.hasAttr(string5);
      assertEquals((-713), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      
      String string6 = "qAVVJ*ct \"B:}4I/";
      Node node0 = textNode0.attr(string6, string6);
      assertEquals((-713), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("", node0.baseUri());
      assertEquals((-713), node0.siblingIndex());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertSame(textNode0, node0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertSame(node0, textNode0);
      
      String string7 = "^\\s+";
      boolean boolean1 = textNode0.hasAttr(string7);
      assertEquals((-713), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertSame(textNode0, node0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      
      String string8 = "org.jsoup.nodes.Document$QuirksMode";
      TextNode textNode1 = textNode0.text(string8);
      assertEquals(0, textNode1.childNodeSize());
      assertEquals((-713), textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals((-713), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string1, string8);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      
      Node node1 = textNode1.clone();
      assertEquals(0, textNode1.childNodeSize());
      assertEquals((-713), textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("#text", node1.nodeName());
      assertEquals(0, node1.childNodeSize());
      assertEquals("", node1.baseUri());
      assertEquals(0, node1.siblingIndex());
      assertEquals((-713), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(node1);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(node1.equals((Object)textNode1));
      assertFalse(node1.equals((Object)textNode0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertNotSame(textNode1, node1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(node1, textNode1);
      assertNotSame(node1, textNode0);
      assertNotSame(node1, node0);
      assertNotSame(string1, string8);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, node1);
      assertSame(textNode0, node0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      
      String string9 = "abbr";
      TextNode textNode2 = TextNode.createFromEncoded(string9, string1);
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertNotNull(textNode2);
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(textNode2.equals((Object)node1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)node0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotSame(string1, string8);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string9);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string9, string4);
      assertNotSame(string9, string7);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string5);
      assertNotSame(string9, string1);
      assertNotSame(string9, string2);
      assertNotSame(string9, string3);
      assertNotSame(string9, string6);
      assertNotSame(textNode2, node1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, node0);
      assertNotSame(textNode2, textNode1);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = ":{\\VKTr]RQ0|u";
      TextNode textNode1 = textNode0.text(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      
      boolean boolean0 = textNode1.isBlank();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      
      TextNode textNode2 = textNode1.text(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      
      textNode2.setParentNode(textNode1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      
      int int0 = 2814;
      TextNode textNode3 = new TextNode(string1, string0);
      assertEquals("", textNode3.baseUri());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals(0, textNode3.childNodeSize());
      assertNotNull(textNode3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode2));
      
      String string2 = textNode3.outerHtml();
      assertEquals("", textNode3.baseUri());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals(0, textNode3.childNodeSize());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode2));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(":{\\VKTr]RQ0|u", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      boolean boolean1 = textNode1.isBlank();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode3));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode1, textNode3);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      
      String string3 = textNode1.absUrl(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode3));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode1, textNode3);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      
      // Undeclared exception!
      textNode1.toString();
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "oJ<DZVAQXI";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertNotNull(string1);
      assertEquals("oJ<DZVAQXI", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = null;
      TextNode textNode0 = new TextNode(string2, string1);
      assertEquals("oJ<DZVAQXI", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string3 = null;
      String string4 = TextNode.normaliseWhitespace(string1);
      assertNotNull(string4);
      assertEquals("oJ<DZVAQXI", string4);
      assertSame(string0, string1);
      assertSame(string0, string4);
      assertSame(string1, string4);
      assertSame(string1, string0);
      assertSame(string4, string1);
      assertSame(string4, string0);
      
      String string5 = textNode0.getWholeText();
      assertEquals("oJ<DZVAQXI", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNull(string5);
      assertSame(string0, string1);
      assertSame(string0, string4);
      assertSame(string1, string4);
      assertSame(string1, string0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = 810;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 49;
      char[] charArray0 = new char[7];
      char char0 = 'k';
      charArray0[0] = char0;
      char char1 = 'k';
      boolean boolean0 = textNode0.hasAttr(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      charArray0[1] = char1;
      charArray0[2] = charArray0[0];
      char char2 = 'u';
      charArray0[3] = char2;
      char char3 = '6';
      charArray0[4] = char3;
      char char4 = '>';
      charArray0[5] = char4;
      char char5 = 'm';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'u', '6', '>', '\u0000'}, charArray0);
      assertEquals("kkku6>\u0000", stringBuilder1.toString());
      assertEquals("kkku6>\u0000", stringBuilder0.toString());
      assertNotNull(stringBuilder1);
      assertEquals(7, charArray0.length);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'u', '6', '>', '\u0000'}, charArray0);
      assertEquals("kkku6>\u0000", stringBuilder1.toString());
      assertEquals("kkku6>\u0000", stringBuilder0.toString());
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      
      String string2 = textNode0.nodeName();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#text", string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "Split offset must be not be negative";
      String string4 = TextNode.stripLeadingWhitespace(string3);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Split offset must be not be negative", string4);
      assertNotSame(string3, string2);
      assertSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertSame(string4, string3);
      assertNotSame(string4, string2);
      
      String string5 = textNode0.nodeName();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("#text", string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertSame(string5, string2);
      
      TextNode textNode1 = textNode0.text(string4);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(textNode1, textNode0);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell(string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = Document.createShell(string0);
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      String string1 = "4,P5'#v";
      Document document2 = (Document)document1.val(string1);
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(string0, string1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(string1, string0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      nodeArray0[4] = (Node) document2;
      nodeArray0[5] = (Node) document1;
      nodeArray0[6] = (Node) textNode0;
      TextNode textNode1 = textNode0.text(string1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      
      nodeArray0[7] = (Node) textNode1;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertEquals(9, nodeArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      
      document0.replaceWith(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      
      Document document3 = document0.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(3, document3.childNodeSize());
      assertNotNull(document3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(string0, string1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      List<Node> list0 = document3.siblingNodes();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(3, document3.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(string0, string1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      textNode0.replaceWith(document3);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(3, document3.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      String string2 = "#text";
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string2);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, textNode0.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(2, textNode2.siblingIndex());
      assertEquals("", textNode2.baseUri());
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      
      String string3 = TextNode.normaliseWhitespace(string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("#text", string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "RE<dddB";
      String string1 = "";
      String string2 = "!Y<!^c8%,+'";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "\"Hlh$<%bIaL4m";
      StringBuilder stringBuilder0 = new StringBuilder(string3);
      assertEquals("\"Hlh$<%bIaL4m", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      char[] charArray0 = new char[4];
      char char0 = 'H';
      charArray0[0] = char0;
      char char1 = 'b';
      charArray0[1] = char1;
      char char2 = 'x';
      charArray0[2] = char2;
      Tag tag0 = Tag.valueOf(string3);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      Element element0 = new Element(tag0, string2);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertNotNull(element0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Element element1 = element0.appendChild(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("!Y<!^c8%,+'", element1.baseUri());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertNotNull(element1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Node node0 = textNode0.doClone(element1);
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, node0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", node0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("!Y<!^c8%,+'", element1.baseUri());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertNotNull(node0);
      assertFalse(node0.equals((Object)textNode0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(node0, textNode0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(textNode0, node0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Node node1 = textNode0.before(node0);
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, node0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", node0.baseUri());
      assertEquals("!Y<!^c8%,+'", node1.baseUri());
      assertEquals(0, node1.siblingIndex());
      assertEquals("#text", node1.nodeName());
      assertEquals(0, node1.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("!Y<!^c8%,+'", element1.baseUri());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertNotNull(node1);
      assertFalse(node0.equals((Object)textNode0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(node0, textNode0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertSame(node1, textNode0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(textNode0, node0);
      assertSame(textNode0, node1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      char char3 = 'u';
      charArray0[3] = char3;
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'H', 'b', 'x', 'u'}, charArray0);
      assertEquals("\"Hlh$<%bIaL4mHbxu", stringBuilder1.toString());
      assertEquals("\"Hlh$<%bIaL4mHbxu", stringBuilder0.toString());
      assertNotNull(stringBuilder1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, charArray0.length);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(stringBuilder0, stringBuilder1);
      
      textNode0.outerHtml(stringBuilder1);
      assertArrayEquals(new char[] {'H', 'b', 'x', 'u'}, charArray0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("\"Hlh$<%bIaL4mHbxu\n!Y&lt;!^c8%,+'", stringBuilder1.toString());
      assertEquals("\"Hlh$<%bIaL4mHbxu\n!Y&lt;!^c8%,+'", stringBuilder0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, charArray0.length);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(textNode0, node0);
      assertSame(textNode0, node1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(stringBuilder0, stringBuilder1);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(textNode0.equals((Object)node0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(textNode0, node0);
      assertSame(textNode0, node1);
      
      Node node2 = textNode0.previousSibling();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(node2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(textNode0.equals((Object)node0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(textNode0, node0);
      assertSame(textNode0, node1);
      
      int int0 = (-2413);
      String string4 = ",dgc2[y+r*or";
      String string5 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 49;
      StringBuilder stringBuilder1 = stringBuilder0.append(string0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(string0, string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      char[] charArray0 = new char[7];
      char char0 = 'k';
      charArray0[0] = char0;
      charArray0[1] = char0;
      char char1 = '*';
      charArray0[2] = char1;
      char char2 = 'u';
      charArray0[3] = char2;
      char char3 = '6';
      charArray0[4] = char3;
      char char4 = '>';
      charArray0[5] = char4;
      char char5 = 'm';
      charArray0[6] = char5;
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      String string2 = "Split offset must be not be negative";
      String string3 = TextNode.stripLeadingWhitespace(string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Split offset must be not be negative", string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "/|Z~.si*?DqE$";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = new StringBuilder(int0);
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      textNode0.outerHtml(stringBuilder1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("/|Z~.si*?DqE$", stringBuilder1.toString());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      boolean boolean1 = true;
      StringBuffer stringBuffer0 = null;
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      assertEquals("/|Z~.si*?DqE$null", stringBuilder1.toString());
      assertEquals("/|Z~.si*?DqE$null", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      
      Document.OutputSettings document_OutputSettings2 = new Document.OutputSettings();
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      
      boolean boolean2 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertEquals("/|Z~.si*?DqE$null", stringBuilder1.toString());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertSame(stringBuilder1, stringBuilder2);
      
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      
      String string1 = textNode0.toString();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("/|Z~.si*?DqE$", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "-),}";
      boolean boolean3 = textNode0.hasAttr(string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(attributes0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String string3 = "frame";
      String string4 = "{SwM?*zbOXi";
      TextNode textNode1 = (TextNode)textNode0.attr(string3, string4);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("/|Z~.si*?DqE$", textNode1.baseUri());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(textNode1, textNode0);
      
      String string5 = "";
      String string6 = textNode1.text();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("/|Z~.si*?DqE$", textNode1.baseUri());
      assertNotNull(string6);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("/|Z~.si*?DqE$", string6);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string6);
      assertSame(textNode1, textNode0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      
      boolean boolean4 = textNode0.hasAttr(string5);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string6));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      
      TextNode textNode2 = textNode0.splitText(int0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("/|Z~.si*?DqE$", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string6));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      
      String string7 = textNode2.outerHtml();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("/|Z~.si*?DqE$", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertNotNull(string7);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string6));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("/|Z~.si*?DqE$", string7);
      assertNotSame(string0, string7);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      
      textNode2.setParentNode(textNode1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("/|Z~.si*?DqE$", textNode1.baseUri());
      assertEquals("/|Z~.si*?DqE$", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertFalse(string0.equals((Object)string5));
      assertTrue(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string6));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string6));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotSame(string0, string7);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string4);
      assertNotSame(string3, string7);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string7);
      assertNotSame(string4, string1);
      assertNotSame(string4, string6);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      
      List<Node> list0 = textNode2.childNodesCopy();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("/|Z~.si*?DqE$", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(string0.equals((Object)string5));
      assertTrue(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string6));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotSame(string0, string7);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      
      String string8 = textNode0.toString();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(string8);
      assertFalse(string0.equals((Object)string5));
      assertTrue(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string6));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string6);
      assertNotSame(string0, string8);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string8, string4);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string7);
      assertNotSame(string8, string6);
      assertNotSame(string8, string1);
      
      int int1 = 7;
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int1, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "RE<dddB";
      String string1 = "";
      String string2 = "!Y<!^c8%,+'";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string2);
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = "\"Hlh$<%bIaL4m";
      StringBuilder stringBuilder0 = new StringBuilder(string3);
      assertEquals("\"Hlh$<%bIaL4m", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      char[] charArray0 = new char[4];
      char char0 = 'H';
      charArray0[0] = char0;
      char char1 = 'b';
      charArray0[1] = char1;
      char char2 = 'n';
      charArray0[2] = char2;
      Tag tag0 = Tag.valueOf(string3);
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      Document document0 = new Document(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("RE<dddB", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("RE<dddB", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("RE<dddB", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      TextNode textNode1 = new TextNode(string1, string1);
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      
      TextNode textNode2 = (TextNode)textNode0.before((Node) textNode1);
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals(1, textNode2.siblingIndex());
      assertEquals("!Y<!^c8%,+'", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode2);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      
      char char3 = 'u';
      charArray0[3] = char3;
      StringBuilder stringBuilder1 = stringBuilder0.append(string1);
      assertEquals("\"Hlh$<%bIaL4m", stringBuilder1.toString());
      assertEquals("\"Hlh$<%bIaL4m", stringBuilder0.toString());
      assertNotNull(stringBuilder1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(stringBuilder0, stringBuilder1);
      
      textNode0.outerHtml(stringBuilder1);
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("\"Hlh$<%bIaL4m!Y&lt;!^c8%,+'", stringBuilder1.toString());
      assertEquals("\"Hlh$<%bIaL4m!Y&lt;!^c8%,+'", stringBuilder0.toString());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(stringBuilder0, stringBuilder1);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      
      TextNode textNode3 = (TextNode)textNode0.previousSibling();
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals("", textNode3.baseUri());
      assertNotNull(textNode3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode3, textNode2);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode0);
      
      int int0 = (-2413);
      String string4 = ",dgc2[y+r*or";
      String string5 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "RE<dddB";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string1, string1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = "\"Hlh$<%bIaL4m";
      StringBuilder stringBuilder0 = new StringBuilder(string2);
      assertEquals("\"Hlh$<%bIaL4m", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[4];
      char char0 = 'H';
      charArray0[0] = char0;
      char char1 = 'b';
      charArray0[1] = char1;
      char char2 = 'x';
      charArray0[2] = char2;
      Tag tag0 = Tag.valueOf(string2);
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertNotNull(tag0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      Element element0 = new Element(tag0, string0);
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertEquals(0, element0.siblingIndex());
      assertEquals("RE<dddB", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertNotNull(element0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Element element1 = element0.appendChild(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("RE<dddB", element0.baseUri());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("RE<dddB", element1.baseUri());
      assertNotNull(element1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Node node0 = textNode0.doClone(element1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("RE<dddB", element0.baseUri());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("RE<dddB", element1.baseUri());
      assertEquals("", node0.baseUri());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(node0.equals((Object)textNode0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, node0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(node0, textNode0);
      
      Node node1 = textNode0.before(node0);
      assertEquals(0, node1.childNodeSize());
      assertEquals("", node1.baseUri());
      assertEquals("#text", node1.nodeName());
      assertEquals(0, node1.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("RE<dddB", element0.baseUri());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("RE<dddB", element1.baseUri());
      assertEquals("", node0.baseUri());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(node0.equals((Object)textNode0));
      assertSame(node1, textNode0);
      assertNotSame(node1, node0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, node0);
      assertSame(textNode0, node1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(node0, node1);
      assertNotSame(node0, textNode0);
      
      char char3 = 'u';
      charArray0[3] = char3;
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'H', 'b', 'x', 'u'}, charArray0);
      assertEquals("\"Hlh$<%bIaL4mHbxu", stringBuilder1.toString());
      assertEquals("\"Hlh$<%bIaL4mHbxu", stringBuilder0.toString());
      assertNotNull(stringBuilder1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, charArray0.length);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(stringBuilder0, stringBuilder1);
      
      textNode0.outerHtml(stringBuilder1);
      assertArrayEquals(new char[] {'H', 'b', 'x', 'u'}, charArray0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("\"Hlh$<%bIaL4mHbxu", stringBuilder1.toString());
      assertEquals("\"Hlh$<%bIaL4mHbxu", stringBuilder0.toString());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, charArray0.length);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, node0);
      assertSame(textNode0, node1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(stringBuilder0, stringBuilder1);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)node0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, node0);
      assertSame(textNode0, node1);
      
      Node node2 = textNode0.previousSibling();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNull(node2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)node0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, node0);
      assertSame(textNode0, node1);
      
      String string3 = ",dgc2[y+r*or";
      String string4 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "RE<dddB";
      String string1 = "";
      String string2 = "!Y<!^c8%,+'";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "\"Hlh$<%bIaL4m";
      StringBuilder stringBuilder0 = new StringBuilder(string3);
      assertEquals("\"Hlh$<%bIaL4m", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      char[] charArray0 = new char[4];
      char char0 = 'H';
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      textNode0.childNodes = (List<Node>) linkedList0;
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, linkedList0.size());
      assertEquals(0, textNode0.childNodes.size());
      assertTrue(textNode0.childNodes.isEmpty());
      
      charArray0[0] = char0;
      char char1 = 'b';
      charArray0[1] = char1;
      char char2 = 'x';
      charArray0[2] = char2;
      Tag tag0 = Tag.valueOf(string3);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertNotNull(tag0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      
      Element element0 = new Element(tag0, string2);
      assertEquals(0, element0.siblingIndex());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertNotNull(element0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Element element1 = element0.appendChild(textNode0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", element1.baseUri());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertNotNull(element1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      
      String string4 = element1.outerHtml();
      assertEquals(0, element0.siblingIndex());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", element1.baseUri());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("<\"hlh$<%bial4m>\n !Y&lt;!^c8%,+'\n</\"hlh$<%bial4m>", string4);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      
      Node node0 = textNode0.doClone(element1);
      assertEquals(0, element0.siblingIndex());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", element1.baseUri());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals("!Y<!^c8%,+'", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertNotNull(node0);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(node0.equals((Object)textNode0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(node0, textNode0);
      assertNotSame(textNode0, node0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      
      Node node1 = textNode0.before(node0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", element1.baseUri());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals("!Y<!^c8%,+'", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", node1.nodeName());
      assertEquals(0, node1.childNodeSize());
      assertEquals("!Y<!^c8%,+'", node1.baseUri());
      assertEquals(0, node1.siblingIndex());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertNotNull(node1);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(node0.equals((Object)textNode0));
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(node0, textNode0);
      assertNotSame(node0, node1);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, node0);
      assertSame(node1, textNode0);
      assertNotSame(node1, node0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      
      char char3 = 'u';
      charArray0[3] = char3;
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'H', 'b', 'x', 'u'}, charArray0);
      assertEquals("\"Hlh$<%bIaL4mHbxu", stringBuilder0.toString());
      assertEquals("\"Hlh$<%bIaL4mHbxu", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertEquals(4, charArray0.length);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      textNode0.outerHtml(stringBuilder1);
      assertArrayEquals(new char[] {'H', 'b', 'x', 'u'}, charArray0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("\"Hlh$<%bIaL4mHbxu\n!Y&lt;!^c8%,+'", stringBuilder0.toString());
      assertEquals("\"Hlh$<%bIaL4mHbxu\n!Y&lt;!^c8%,+'", stringBuilder1.toString());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertEquals(4, charArray0.length);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, node0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode0.equals((Object)node0));
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, node0);
      
      Node node2 = textNode0.previousSibling();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNull(node2);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode0.equals((Object)node0));
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, node0);
      
      int int0 = (-2413);
      String string5 = ",dgc2[y+r*or";
      String string6 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = "/|Z~.si*?DqE$";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = new StringBuilder(int0);
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      textNode0.outerHtml(stringBuilder1);
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", stringBuilder1.toString());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      boolean boolean1 = true;
      StringBuffer stringBuffer0 = null;
      Document.OutputSettings document_OutputSettings2 = new Document.OutputSettings();
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      
      boolean boolean2 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertEquals("/|Z~.si*?DqE$", stringBuilder1.toString());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      
      String string1 = textNode0.toString();
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("/|Z~.si*?DqE$", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "-),}";
      boolean boolean3 = textNode0.hasAttr(string2);
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(attributes0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String string3 = "frame";
      Node node0 = textNode0.attr(string3, string1);
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertNotNull(node0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, node0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(node0, textNode0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      boolean boolean4 = textNode0.hasAttr(string3);
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, node0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("/|Z~.si*?DqE$", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)node0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      
      String string4 = textNode1.outerHtml();
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("/|Z~.si*?DqE$", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string4);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)node0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("/|Z~.si*?DqE$", string4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      
      textNode1.setParentNode(node0);
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("/|Z~.si*?DqE$", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("/|Z~.si*?DqE$", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(node0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)node0));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string4));
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(node0, textNode0);
      assertNotSame(node0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      List<Node> list0 = textNode1.childNodesCopy();
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("/|Z~.si*?DqE$", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)node0));
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      
      String string5 = textNode0.toString();
      assertEquals("/|Z~.si*?DqE$", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string5);
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string4));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      
      String string6 = "org.jsoup.nodes.TextNode";
      String string7 = null;
      // Undeclared exception!
      try { 
        textNode1.attr(string6, string7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = ":{\\VKTr]RQ0|u";
      TextNode textNode1 = textNode0.text(string1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      
      boolean boolean0 = textNode1.isBlank();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode0);
      
      TextNode textNode2 = textNode1.text(string1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      
      textNode2.setParentNode(textNode1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      
      int int0 = 2814;
      TextNode textNode3 = new TextNode(string1, string0);
      assertEquals("#text", textNode3.nodeName());
      assertEquals("", textNode3.baseUri());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals(0, textNode3.siblingIndex());
      assertNotNull(textNode3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode2));
      
      String string2 = textNode3.outerHtml();
      assertEquals("#text", textNode3.nodeName());
      assertEquals("", textNode3.baseUri());
      assertEquals(0, textNode3.childNodeSize());
      assertEquals(0, textNode3.siblingIndex());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(":{\\VKTr]RQ0|u", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      boolean boolean1 = textNode1.isBlank();
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode3));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode3);
      
      String string3 = textNode1.absUrl(string1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode3));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode3);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      
      // Undeclared exception!
      textNode1.toString();
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      StringBuilder stringBuilder0 = null;
      String string2 = "Split offset must be not be negative";
      String string3 = TextNode.stripLeadingWhitespace(string2);
      assertNotNull(string3);
      assertEquals("Split offset must be not be negative", string3);
      assertSame(string2, string3);
      assertSame(string3, string2);
      
      int int0 = 810;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      String string4 = null;
      String string5 = "";
      TextNode textNode0 = new TextNode(string4, string5);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        textNode0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text(string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      int int0 = 3443;
      textNode1.setSiblingIndex(int0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(3443, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(3443, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = "org.jsoup.select.Evaluator$AttributeWithValueStarting";
      String string2 = "";
      Node node0 = textNode0.attr(string1, string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(3443, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, node0.childNodeSize());
      assertEquals("", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(3443, node0.siblingIndex());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(node0, textNode1);
      assertSame(node0, textNode0);
      
      Node node1 = textNode1.nextSibling();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(3443, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(3443, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNull(node1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      
      int int1 = 2814;
      // Undeclared exception!
      try { 
        textNode1.splitText(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = "RE<dddB";
      String string1 = "";
      String string2 = "!Y<!^c8%,+'";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertNotNull(textNode0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = "\"Hlh$<%bIaL4m";
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[10];
      char char0 = 'H';
      charArray0[0] = char0;
      char char1 = 'b';
      charArray0[1] = char1;
      char char2 = 'x';
      charArray0[2] = char2;
      Tag tag0 = Tag.valueOf(string3);
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      
      Element element0 = new Element(tag0, string2);
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Element element1 = element0.appendChild(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("!Y<!^c8%,+'", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertNotNull(element1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      TextNode textNode1 = textNode0.text(string1);
      assertEquals("!Y<!^c8%,+'", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertNotNull(textNode1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertSame(textNode1, textNode0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(textNode0, textNode1);
      
      Node node0 = textNode0.before((Node) textNode1);
      assertEquals("!Y<!^c8%,+'", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("!Y<!^c8%,+'", node0.baseUri());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertNotNull(node0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertSame(node0, textNode1);
      assertSame(node0, textNode0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      
      int int0 = (-524);
      node0.siblingIndex = int0;
      assertEquals("!Y<!^c8%,+'", textNode1.baseUri());
      assertEquals((-524), textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals((-524), node0.siblingIndex());
      assertEquals("!Y<!^c8%,+'", node0.baseUri());
      assertEquals(0, node0.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals((-524), textNode0.siblingIndex());
      
      char char3 = 'u';
      charArray0[3] = char3;
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'H', 'b', 'x', 'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("Hbxu\u0000\u0000\u0000\u0000\u0000\u0000", stringBuilder0.toString());
      assertEquals("Hbxu\u0000\u0000\u0000\u0000\u0000\u0000", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertEquals(10, charArray0.length);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtml(stringBuilder1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text(string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string2 = textNode1.getWholeText();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("", textNode1.baseUri());
      assertNull(string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      // Undeclared exception!
      try { 
        textNode1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = "RE<dddB";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string1, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = "\"Hlh$<%bIaL4m";
      StringBuilder stringBuilder0 = new StringBuilder(string2);
      assertEquals("\"Hlh$<%bIaL4m", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[4];
      char char0 = 'H';
      charArray0[0] = char0;
      char char1 = 'x';
      charArray0[2] = char1;
      Tag tag0 = Tag.valueOf(string2);
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      Element element0 = new Element(tag0, string1);
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals("", element0.baseUri());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Element element1 = element0.appendChild(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals("", element0.baseUri());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', 'x', '\u0000'}, charArray0);
      assertEquals("\"Hlh$<%bIaL4mH\u0000x\u0000", stringBuilder0.toString());
      assertEquals("\"Hlh$<%bIaL4mH\u0000x\u0000", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, charArray0.length);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      TextNode textNode1 = (TextNode)textNode0.doClone(element1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals("", element0.baseUri());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(textNode1, textNode0);
      
      TextNode textNode2 = (TextNode)textNode0.before((Node) textNode1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals("", element0.baseUri());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.childNodeSize());
      assertNotNull(textNode2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      
      char char2 = 'u';
      charArray0[3] = char2;
      StringBuilder stringBuilder2 = stringBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', 'x', 'u'}, charArray0);
      assertEquals("\"Hlh$<%bIaL4mH\u0000x\u0000H\u0000xu", stringBuilder2.toString());
      assertEquals("\"Hlh$<%bIaL4mH\u0000x\u0000H\u0000xu", stringBuilder0.toString());
      assertNotNull(stringBuilder2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, charArray0.length);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      
      textNode0.outerHtml(stringBuilder2);
      assertArrayEquals(new char[] {'H', '\u0000', 'x', 'u'}, charArray0);
      assertEquals("\"Hlh$<%bIaL4mH\u0000x\u0000H\u0000xu", stringBuilder2.toString());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("\"Hlh$<%bIaL4mH\u0000x\u0000H\u0000xu", stringBuilder0.toString());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, charArray0.length);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      
      Node node0 = textNode0.previousSibling();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNull(node0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      
      int int0 = (-2413);
      String string3 = ",dgc2[y+r*or";
      String string4 = null;
      String string5 = "org.jsoup.nodes.TextNode";
      TextNode textNode3 = textNode1.text(string5);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertEquals("", textNode3.baseUri());
      assertEquals(0, textNode3.childNodeSize());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("\"hlh$<%bial4m", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("\"hlh$<%bial4m", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals("", element0.baseUri());
      assertEquals("\"hlh$<%bial4m", element0.nodeName());
      assertEquals("\"hlh$<%bial4m", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("\"hlh$<%bial4m", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("\"hlh$<%bial4m", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(textNode1, textNode3);
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 0;
      boolean boolean1 = true;
      char[] charArray0 = new char[5];
      char char0 = 'n';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      char char2 = 'H';
      charArray0[3] = char2;
      char char3 = 'i';
      charArray0[4] = char3;
      int int1 = 2;
      int int2 = 0;
      int int3 = (-1);
      boolean boolean2 = true;
      int int4 = 32;
      String string0 = "Tag name must not be empty.";
      String string1 = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int4);
      assertEquals(" ", stringBuilder0.toString());
      assertEquals(" ", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      boolean boolean3 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals(" ", stringBuilder0.toString());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = "0)|=jn` ;WZ3LR #";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Tag tag0 = Tag.valueOf(string0);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals("0)|=jn` ;wz3lr #", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("0)|=jn` ;wz3lr #", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, string0);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals("0)|=jn` ;wz3lr #", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("0)|=jn` ;wz3lr #", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("0)|=jn` ;WZ3LR #", element0.baseUri());
      assertEquals("0)|=jn` ;wz3lr #", element0.nodeName());
      assertEquals("0)|=jn` ;wz3lr #", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      String string1 = "";
      Element element1 = element0.val(string1);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals("0)|=jn` ;wz3lr #", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("0)|=jn` ;wz3lr #", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("0)|=jn` ;WZ3LR #", element0.baseUri());
      assertEquals("0)|=jn` ;wz3lr #", element0.nodeName());
      assertEquals("0)|=jn` ;wz3lr #", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("0)|=jn` ;WZ3LR #", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("0)|=jn` ;wz3lr #", element1.nodeName());
      assertEquals("0)|=jn` ;wz3lr #", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(element0, element1);
      assertNotSame(string1, string0);
      assertSame(element1, element0);
      
      textNode0.parentNode = (Node) element1;
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.baseUri());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals("0)|=jn` ;wz3lr #", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("0)|=jn` ;wz3lr #", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("0)|=jn` ;WZ3LR #", element0.baseUri());
      assertEquals("0)|=jn` ;wz3lr #", element0.nodeName());
      assertEquals("0)|=jn` ;wz3lr #", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("0)|=jn` ;WZ3LR #", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("0)|=jn` ;wz3lr #", element1.nodeName());
      assertEquals("0)|=jn` ;wz3lr #", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, textNode0.parentNode.childNodeSize());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.parentNode.baseUri());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = "0)|=jn` ;WZ3LR #";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Tag tag0 = Tag.valueOf(string0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("0)|=jn` ;wz3lr #", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertEquals("0)|=jn` ;wz3lr #", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, string0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("0)|=jn` ;wz3lr #", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertEquals("0)|=jn` ;wz3lr #", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(element0.isBlock());
      assertEquals("0)|=jn` ;wz3lr #", element0.nodeName());
      assertEquals("0)|=jn` ;WZ3LR #", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("0)|=jn` ;wz3lr #", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(textNode0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.baseUri());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("0)|=jn` ;wz3lr #", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertEquals("0)|=jn` ;wz3lr #", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("0)|=jn` ;wz3lr #", element0.nodeName());
      assertEquals("0)|=jn` ;WZ3LR #", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("0)|=jn` ;wz3lr #", element0.tagName());
      assertEquals("0)|=jn` ;wz3lr #", element1.nodeName());
      assertEquals("0)|=jn` ;WZ3LR #", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("0)|=jn` ;wz3lr #", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      textNode0.parentNode = (Node) element0;
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.baseUri());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("0)|=jn` ;wz3lr #", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertEquals("0)|=jn` ;wz3lr #", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("0)|=jn` ;wz3lr #", element0.nodeName());
      assertEquals("0)|=jn` ;WZ3LR #", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("0)|=jn` ;wz3lr #", element0.tagName());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.parentNode.baseUri());
      assertEquals(1, textNode0.parentNode.childNodeSize());
      
      int int0 = 1;
      TextNode textNode1 = textNode0.splitText(int0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.baseUri());
      assertEquals("0)|=jn` ;WZ3LR #", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      String string1 = textNode0.nodeName();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.baseUri());
      assertNotNull(string1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("#text", string1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      String string0 = null;
      String string1 = "text";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertNotNull(textNode0);
      
      String string2 = "]aFKu+;~4$Np\\sp7r";
      TextNode textNode1 = textNode0.text(string2);
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertSame(textNode1, textNode0);
      
      Node node0 = textNode1.clone();
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals(0, node0.siblingIndex());
      assertEquals("text", node0.baseUri());
      assertNotNull(node0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(node0.equals((Object)textNode0));
      assertFalse(node0.equals((Object)textNode1));
      assertNotSame(string1, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, node0);
      assertNotSame(string2, string1);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      assertNotSame(node0, textNode0);
      assertNotSame(node0, textNode1);
      
      String string3 = textNode1.attr(string1);
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode1.equals((Object)node0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("]aFKu+;~4$Np\\sp7r", string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, node0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      
      String string4 = null;
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "RE<dddB";
      String string1 = "!Y<!^c8%,+'";
      TextNode textNode0 = TextNode.createFromEncoded(string1, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertNotNull(textNode0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("RE<dddB", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string0.equals((Object)string1));
      
      char[] charArray0 = new char[4];
      char char0 = 'H';
      char char1 = 'b';
      charArray0[1] = char1;
      char char2 = 'x';
      Tag tag0 = Tag.valueOf(string0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("re<dddb", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("re<dddb", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      Element element0 = new Element(tag0, string1);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("re<dddb", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("re<dddb", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertEquals("re<dddb", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("re<dddb", element0.tagName());
      assertNotNull(element0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Element element1 = element0.appendChild(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("re<dddb", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("re<dddb", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("!Y<!^c8%,+'", element0.baseUri());
      assertEquals("re<dddb", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("re<dddb", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("re<dddb", element1.nodeName());
      assertEquals("!Y<!^c8%,+'", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("re<dddb", element1.tagName());
      assertNotNull(element1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      textNode0.outerHtml(stringBuilder0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertEquals("RE<dddB\n!Y&lt;!^c8%,+'", stringBuilder0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      charArray0[3] = charArray0[1];
      List<Node> list0 = textNode0.childNodes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      Node node0 = textNode0.previousSibling();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertNull(node0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = TextNode.normaliseWhitespace(string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("RE<dddB", string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      
      String string3 = textNode0.attr(string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("!Y<!^c8%,+'", textNode0.baseUri());
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      int int0 = 128;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(int0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(128, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(128, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      // Undeclared exception!
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings2);
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "gm=Q1F*VjN4Ipt,0";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text(string0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string1 = "b";
      Node node0 = textNode1.attr(string1, string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, node0.childNodeSize());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals("gm=Q1F*VjN4Ipt,0", node0.baseUri());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      assertSame(node0, textNode0);
      assertSame(node0, textNode1);
      
      TextNode textNode2 = textNode1.text(string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertNotNull(textNode2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, node0);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertNotSame(string1, string0);
      assertSame(textNode2, node0);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      
      String string2 = "text";
      Node node1 = textNode2.removeAttr(string2);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", node1.nodeName());
      assertEquals(0, node1.childNodeSize());
      assertEquals(0, node1.siblingIndex());
      assertEquals("gm=Q1F*VjN4Ipt,0", node1.baseUri());
      assertNotNull(node1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, node1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, node0);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, node1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode2, node1);
      assertSame(textNode2, node0);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(node1, node0);
      assertSame(node1, textNode0);
      assertSame(node1, textNode2);
      assertSame(node1, textNode1);
      
      String string3 = textNode2.toString();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(textNode0, node1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, node0);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, node1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(textNode2, node1);
      assertSame(textNode2, node0);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      Node node2 = textNode1.clone();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", node2.nodeName());
      assertEquals(0, node2.childNodeSize());
      assertEquals("gm=Q1F*VjN4Ipt,0", node2.baseUri());
      assertEquals(0, node2.siblingIndex());
      assertNotNull(node2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(node2.equals((Object)textNode0));
      assertFalse(node2.equals((Object)textNode2));
      assertFalse(node2.equals((Object)textNode1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, node2);
      assertSame(textNode0, node1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, node0);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, node2);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, node1);
      assertNotSame(node2, textNode0);
      assertNotSame(node2, textNode2);
      assertNotSame(node2, textNode1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      
      String string4 = textNode2.nodeName();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals(0, textNode2.childNodeSize());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)node2));
      assertFalse(textNode1.equals((Object)node2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode2.equals((Object)node2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("#text", string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, node2);
      assertSame(textNode0, node1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, node0);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, node2);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, node1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(textNode2, node1);
      assertSame(textNode2, node0);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, node2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      
      String string5 = textNode1.toString();
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)node2));
      assertFalse(textNode1.equals((Object)node2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, node2);
      assertSame(textNode0, node1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode0, node0);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode1, node2);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, node1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      
      textNode0.parentNode = (Node) textNode1;
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("gm=Q1F*VjN4Ipt,0", textNode0.parentNode.baseUri());
      assertEquals(0, textNode0.parentNode.childNodeSize());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      String string0 = "wjhqQ3";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Node) textNode0);
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(1, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      textNode0.childNodes = (List<Node>) linkedList0;
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(1, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(1, linkedList0.size());
      assertFalse(textNode0.childNodes.isEmpty());
      assertEquals(1, textNode0.childNodes.size());
      
      TextNode textNode1 = textNode0.text(string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(1, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(1, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      boolean boolean1 = textNode1.isBlank();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(1, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(1, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string2 = textNode0.nodeName();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(1, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#text", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = " {w";
      String string4 = TextNode.normaliseWhitespace(string3);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" {w", string4);
      assertNotSame(string3, string0);
      assertSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      
      String string5 = textNode0.absUrl(string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(1, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertSame(string5, string1);
      
      String string6 = "frame";
      String string7 = "8C4m@n3H-3 !C=.";
      Node node0 = textNode0.attr(string6, string7);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(1, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals(1, node0.childNodeSize());
      assertEquals("", node0.baseUri());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string7);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string7);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertSame(node0, textNode1);
      assertSame(node0, textNode0);
      
      String string8 = "2k(+L_o6~";
      StringBuilder stringBuilder0 = new StringBuilder(string8);
      assertEquals("2k(+L_o6~", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      
      int int0 = 57;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      assertEquals("2k(+L_o6~9", stringBuilder0.toString());
      assertEquals("2k(+L_o6~9", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string2);
      assertNotSame(string8, string0);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string4);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(string7);
      assertEquals("2k(+L_o6~98C4m@n3H-3 !C=.", stringBuilder0.toString());
      assertEquals("2k(+L_o6~98C4m@n3H-3 !C=.", stringBuilder1.toString());
      assertEquals("2k(+L_o6~98C4m@n3H-3 !C=.", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string2);
      assertNotSame(string8, string0);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string4);
      
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      assertEquals(".=C! 3-H3n@m4C89~6o_L+(k2", stringBuilder0.toString());
      assertEquals(".=C! 3-H3n@m4C89~6o_L+(k2", stringBuilder1.toString());
      assertEquals(".=C! 3-H3n@m4C89~6o_L+(k2", stringBuilder2.toString());
      assertEquals(".=C! 3-H3n@m4C89~6o_L+(k2", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string2);
      assertNotSame(string8, string0);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string4);
      
      double double0 = 447.15629620229;
      StringBuilder stringBuilder4 = stringBuilder3.append(double0);
      assertEquals(".=C! 3-H3n@m4C89~6o_L+(k2447.15629620229", stringBuilder0.toString());
      assertEquals(".=C! 3-H3n@m4C89~6o_L+(k2447.15629620229", stringBuilder1.toString());
      assertEquals(".=C! 3-H3n@m4C89~6o_L+(k2447.15629620229", stringBuilder2.toString());
      assertEquals(".=C! 3-H3n@m4C89~6o_L+(k2447.15629620229", stringBuilder3.toString());
      assertEquals(".=C! 3-H3n@m4C89~6o_L+(k2447.15629620229", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string2);
      assertNotSame(string8, string0);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string4);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean2 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean2);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset(string7);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 8C4m@n3H-3 !C=.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "u6lo '*jF";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertNotNull(string1);
      assertEquals("u6lo '*jF", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "2?SQTO6PS`tBOc";
      TextNode textNode0 = new TextNode(string1, string2);
      assertEquals("2?SQTO6PS`tBOc", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "->,";
      String string4 = "";
      Node node0 = textNode0.attr(string3, string4);
      assertEquals("2?SQTO6PS`tBOc", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals("2?SQTO6PS`tBOc", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(textNode0, node0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(node0, textNode0);
      
      String string5 = "0I~BO";
      TextNode textNode1 = textNode0.text(string5);
      assertEquals("2?SQTO6PS`tBOc", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("2?SQTO6PS`tBOc", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      
      int int0 = (-1);
      textNode1.setSiblingIndex(int0);
      assertEquals("2?SQTO6PS`tBOc", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("2?SQTO6PS`tBOc", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals((-1), textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      
      List<Node> list0 = textNode1.siblingNodes();
      assertEquals("2?SQTO6PS`tBOc", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("2?SQTO6PS`tBOc", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals((-1), textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      
      String string6 = textNode0.toString();
      assertEquals("2?SQTO6PS`tBOc", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string6);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("0I~BO", string6);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string5);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      
      String string7 = ", currentElement=";
      Node node1 = node0.removeAttr(string7);
      assertEquals("2?SQTO6PS`tBOc", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals("2?SQTO6PS`tBOc", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals((-1), node0.siblingIndex());
      assertEquals(0, node1.childNodeSize());
      assertEquals("2?SQTO6PS`tBOc", node1.baseUri());
      assertEquals((-1), node1.siblingIndex());
      assertEquals("#text", node1.nodeName());
      assertNotNull(node1);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string7);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string7);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string7);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string6);
      assertSame(node0, node1);
      assertSame(node0, textNode0);
      assertSame(node0, textNode1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertSame(node1, textNode1);
      assertSame(node1, node0);
      assertSame(node1, textNode0);
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = "CharacterReferenceInRcdata";
      char[] charArray0 = new char[11];
      Tag tag0 = Tag.valueOf(string1);
      assertFalse(tag0.isSelfClosing());
      assertEquals("characterreferenceinrcdata", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals("characterreferenceinrcdata", tag0.toString());
      assertNotNull(tag0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      Element element0 = new Element(tag0, string0);
      assertFalse(tag0.isSelfClosing());
      assertEquals("characterreferenceinrcdata", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals("characterreferenceinrcdata", tag0.toString());
      assertEquals("characterreferenceinrcdata", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("characterreferenceinrcdata", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Element element1 = element0.appendChild(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(tag0.isSelfClosing());
      assertEquals("characterreferenceinrcdata", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.canContainBlock());
      assertEquals("characterreferenceinrcdata", tag0.toString());
      assertEquals("characterreferenceinrcdata", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("characterreferenceinrcdata", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("characterreferenceinrcdata", element1.nodeName());
      assertEquals("characterreferenceinrcdata", element1.tagName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Node node0 = textNode0.before((Node) textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.childNodeSize());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      
      TextNode textNode1 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)node0));
      assertNotSame(string0, string1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      
      int int0 = (-1181);
      textNode0.setSiblingIndex(int0);
      assertEquals("", textNode0.baseUri());
      assertEquals((-1181), textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertEquals("", textNode0.baseUri());
      assertEquals((-1181), textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      
      int int1 = 32;
      String string2 = ",dgc2[y+r*or";
      String string3 = TextNode.normaliseWhitespace(string0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      String string0 = "0)|=jn` ;WZ3LR #";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Tag tag0 = Tag.valueOf(string0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("0)|=jn` ;wz3lr #", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("0)|=jn` ;wz3lr #", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      
      textNode0.attributes = attributes0;
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      
      Element element0 = new Element(tag0, string0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("0)|=jn` ;wz3lr #", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("0)|=jn` ;wz3lr #", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("0)|=jn` ;wz3lr #", element0.nodeName());
      assertEquals("0)|=jn` ;wz3lr #", element0.tagName());
      assertEquals("0)|=jn` ;WZ3LR #", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.val(string0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("0)|=jn` ;wz3lr #", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("0)|=jn` ;wz3lr #", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("0)|=jn` ;wz3lr #", element0.nodeName());
      assertEquals("0)|=jn` ;wz3lr #", element0.tagName());
      assertEquals("0)|=jn` ;WZ3LR #", element0.baseUri());
      assertEquals("0)|=jn` ;wz3lr #", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("0)|=jn` ;WZ3LR #", element1.baseUri());
      assertEquals("0)|=jn` ;wz3lr #", element1.nodeName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      textNode0.parentNode = (Node) element0;
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("0)|=jn` ;wz3lr #", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("0)|=jn` ;wz3lr #", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("0)|=jn` ;wz3lr #", element0.nodeName());
      assertEquals("0)|=jn` ;wz3lr #", element0.tagName());
      assertEquals("0)|=jn` ;WZ3LR #", element0.baseUri());
      assertEquals("0)|=jn` ;WZ3LR #", textNode0.parentNode.baseUri());
      assertEquals(0, textNode0.parentNode.childNodeSize());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document0 = new Document(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      document0.setParentNode(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      String string0 = "sub";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("sub", textNode0.baseUri());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("sub", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Tag tag0 = Tag.valueOf(string0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertEquals("sub", tag0.toString());
      assertEquals("sub", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, string0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertEquals("sub", tag0.toString());
      assertEquals("sub", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertEquals("sub", element0.baseUri());
      assertEquals("sub", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("sub", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("sub", textNode0.baseUri());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertEquals("sub", tag0.toString());
      assertEquals("sub", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertEquals("sub", element0.baseUri());
      assertEquals("sub", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("sub", element0.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("sub", element1.baseUri());
      assertEquals("sub", element1.nodeName());
      assertEquals("sub", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      textNode0.outerHtml(stringBuilder0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("sub", textNode0.baseUri());
      assertEquals("subsub", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      String string0 = "t";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      textNode0.childNodes = (List<Node>) linkedList0;
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, linkedList0.size());
      assertTrue(textNode0.childNodes.isEmpty());
      assertEquals(0, textNode0.childNodes.size());
      
      TextNode textNode1 = textNode0.text(string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode0.childNodeSize());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      int int0 = 3957;
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) textNode1;
      nodeArray0[2] = (Node) textNode0;
      textNode1.addChildren(nodeArray0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode1.baseUri());
      assertEquals(1, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, nodeArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      String string2 = "?CoVM*{(<m\"wN+";
      Node node0 = textNode1.removeAttr(string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, textNode0.childNodeSize());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode1.baseUri());
      assertEquals(1, textNode1.childNodeSize());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals(1, node0.childNodeSize());
      assertNotNull(node0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(node0, textNode0);
      assertSame(node0, textNode1);
      
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
