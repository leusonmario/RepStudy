/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 18:20:19 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      int int0 = (-1334);
      String string0 = "y}~/<ii &&";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("y}~/<ii &&", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "Split offset must be not be negative";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      assertEquals("Split offset must be not be negative", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertNotNull(document_OutputSettings0);
      
      int int0 = 377;
      textNode0.indent(stringBuilder0, int0, document_OutputSettings0);
      assertEquals("Split offset must be not be negative\n                                                                                                                                                                                                                                                                                                                                                                                         ", stringBuilder0.toString());
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean0);
      assertEquals("Split offset must be not be negative\n                                                                                                                                                                                                                                                                                                                                                                                         ", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "prompt";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("prompt", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string1 = textNode0.text();
      assertTrue(string1.equals((Object)string0));
      assertEquals("prompt", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("prompt", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
      
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertEquals("prompt", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("prompt", stringBuilder0.toString());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Attributes attributes0 = textNode0.attributes();
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertEquals("prompt", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(attributes0);
      
      TextNode textNode1 = textNode0.splitText(int0);
      assertTrue(string0.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("prompt", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("prompt", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("prompt", stringBuilder0.toString());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "j3/2]+=PhjO`";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("j3/2]+=PhjO`", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Tag tag0 = Tag.valueOf(string0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("j3/2]+=phjo`", tag0.toString());
      assertEquals("j3/2]+=phjo`", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, string0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("j3/2]+=phjo`", tag0.toString());
      assertEquals("j3/2]+=phjo`", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("j3/2]+=PhjO`", element0.baseUri());
      assertEquals("j3/2]+=phjo`", element0.tagName());
      assertEquals("j3/2]+=phjo`", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(textNode0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("j3/2]+=PhjO`", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("j3/2]+=phjo`", tag0.toString());
      assertEquals("j3/2]+=phjo`", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("j3/2]+=PhjO`", element0.baseUri());
      assertEquals("j3/2]+=phjo`", element0.tagName());
      assertEquals("j3/2]+=phjo`", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("j3/2]+=phjo`", element1.tagName());
      assertEquals("j3/2]+=phjo`", element1.nodeName());
      assertEquals("j3/2]+=PhjO`", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) element1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("j3/2]+=PhjO`", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("<j3/2]+=phjo`>\n j3/2]+=PhjO`\n</j3/2]+=phjo`>", stringBuilder0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("j3/2]+=phjo`", tag0.toString());
      assertEquals("j3/2]+=phjo`", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("j3/2]+=PhjO`", element0.baseUri());
      assertEquals("j3/2]+=phjo`", element0.tagName());
      assertEquals("j3/2]+=phjo`", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("j3/2]+=phjo`", element1.tagName());
      assertEquals("j3/2]+=phjo`", element1.nodeName());
      assertEquals("j3/2]+=PhjO`", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("<j3/2]+=phjo`>\n j3/2]+=PhjO`\n</j3/2]+=phjo`>", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("j3/2]+=PhjO`", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("j3/2]+=PhjO`", textNode1.baseUri());
      assertNotNull(textNode1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(textNode1, textNode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertEquals("j3/2]+=PhjO`", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("<j3/2]+=phjo`>\n j3/2]+=PhjO`\n</j3/2]+=phjo`>\nj3/2]+=PhjO`", stringBuilder0.toString());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("j3/2]+=PhjO`", textNode1.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Elements elements0 = element1.getElementsMatchingOwnText(string0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(textNode0, textNode1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("j3/2]+=PhjO`", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("j3/2]+=phjo`", tag0.toString());
      assertEquals("j3/2]+=phjo`", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("j3/2]+=PhjO`", element0.baseUri());
      assertEquals("j3/2]+=phjo`", element0.tagName());
      assertEquals("j3/2]+=phjo`", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("j3/2]+=phjo`", element1.tagName());
      assertEquals("j3/2]+=phjo`", element1.nodeName());
      assertEquals("j3/2]+=PhjO`", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode1));
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertEquals("j3/2]+=PhjO`", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("j3/2]+=PhjO`", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertNotNull(textNode2);
      
      textNode2.outerHtmlHead(stringBuilder1, int0, document_OutputSettings0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode1));
      assertSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertEquals("j3/2]+=PhjO`", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("<j3/2]+=phjo`>\n j3/2]+=PhjO`\n</j3/2]+=phjo`>\nj3/2]+=PhjO`", stringBuilder0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("j3/2]+=phjo`", tag0.toString());
      assertEquals("j3/2]+=phjo`", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("j3/2]+=PhjO`", element0.baseUri());
      assertEquals("j3/2]+=phjo`", element0.tagName());
      assertEquals("j3/2]+=phjo`", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("j3/2]+=phjo`", element1.tagName());
      assertEquals("j3/2]+=phjo`", element1.nodeName());
      assertEquals("j3/2]+=PhjO`", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("<j3/2]+=phjo`>\n j3/2]+=PhjO`\n</j3/2]+=phjo`>\nj3/2]+=PhjO`", stringBuilder1.toString());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("j3/2]+=PhjO`", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "6<'";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("6<'", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = 59;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertNotNull(document_OutputSettings1);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      int int0 = 275;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "2cJGe%xKr%7/p";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("2cJGe%xKr%7/p", textNode0.baseUri());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = null;
      int int0 = (-1281);
      Document.OutputSettings document_OutputSettings0 = null;
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("2cJGe%xKr%7/p", textNode0.baseUri());
      
      Node node0 = textNode0.attr(string0, string0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("2cJGe%xKr%7/p", textNode0.baseUri());
      assertEquals("2cJGe%xKr%7/p", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "\"d<x`YOIw1UN";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string1 = "progress";
      Document document0 = new Document(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(document0.isBlock());
      assertEquals("\"d<x`YOIw1UN", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("\"d<x`YOIw1UN", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"d<x`YOIw1UN", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.tagName(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("progress", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("\"d<x`YOIw1UN", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("progress", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("\"d<x`YOIw1UN", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      String string2 = textNode0.absUrl(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string2);
      
      String string3 = TextNode.stripLeadingWhitespace(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string3);
      
      String string4 = textNode0.toString();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("&quot;d&lt;x`YOIw1UN", string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string4);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "thead";
      String string1 = "x//8pC/.W0@J2GWF";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("x//8pC/.W0@J2GWF", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "Entities";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(attributes0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      String string1 = "/CXSA3";
      TextNode textNode0 = new TextNode(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("/CXSA3", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string2 = "";
      String string3 = "nvIVm.Hn3OBL-\"`D%Z\"";
      // Undeclared exception!
      try { 
        textNode0.attr(string2, string3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "BWtUa?";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("BWtUa?", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = textNode0.getWholeText();
      assertTrue(string1.equals((Object)string0));
      assertEquals("BWtUa?", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("BWtUa?", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "Split offset must not be greater than current text length";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string1 = textNode0.attr(string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
      
      String string2 = textNode0.getWholeText();
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Split offset must not be greater than current text length", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string2);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "&#";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string2 = textNode0.toString();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("&amp;#", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string2);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string1 = textNode0.text();
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "[y$3";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertEquals("[y$3", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = "";
      TextNode textNode0 = new TextNode(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[y$3", textNode0.baseUri());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text(string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[y$3", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("[y$3", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      
      int int0 = 0;
      TextNode textNode2 = textNode1.splitText(int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[y$3", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("[y$3", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("[y$3", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertNotNull(textNode2);
      
      String string3 = textNode2.toString();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("[y$3", string3);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode1, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("[y$3", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("[y$3", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("[y$3", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertNotNull(string3);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "Kcjii-OZhI";
      String string1 = "4+y`1-gzGd";
      TextNode textNode0 = new TextNode(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("4+y`1-gzGd", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.hasAttr(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("4+y`1-gzGd", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = textNode0.getWholeText();
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertNull(string1);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        textNode0.attr(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "55Z`m74m<";
      String string1 = "~6O%}7`,P*1f8ft";
      TextNode textNode0 = new TextNode(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("~6O%}7`,P*1f8ft", textNode0.baseUri());
      assertNotNull(textNode0);
      
      int int0 = 1249;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "text";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Node node0 = textNode0.attr(string0, string0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      
      int int0 = 2613;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = 25;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      long long0 = 1095L;
      StringBuilder stringBuilder1 = stringBuilder0.append(long0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("1095", stringBuilder0.toString());
      assertEquals("1095", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("1095", stringBuilder0.toString());
      
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      TextNode textNode1 = textNode0.text(string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      
      int int1 = 0;
      StringBuilder stringBuilder2 = stringBuilder0.delete(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      String string1 = textNode1.getWholeText();
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(string1, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string1);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertFalse(int0 == int1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean1);
      assertFalse(int0 == int1);
      assertTrue(boolean1 == boolean0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      int int2 = (-2158);
      // Undeclared exception!
      try { 
        document_OutputSettings1.indentAmount(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "Split offset must be not be negative";
      String string1 = " \"";
      TextNode textNode0 = new TextNode(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(" \"", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string2 = "org.jsoup.nodes.TextNode";
      String string3 = textNode0.absUrl(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertEquals(" \"", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string3);
      
      String string4 = textNode0.nodeName();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("#text", string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertEquals(" \"", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string4);
      
      String string5 = "#%s";
      Node node0 = textNode0.removeAttr(string5);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(textNode0, node0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(node0, textNode0);
      assertEquals(" \"", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(" \"", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertNotNull(node0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "Error loading entities resource: ";
      String string1 = "=Z#~:'Qw9u";
      TextNode textNode0 = new TextNode(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("#text", textNode0.nodeName());
      assertEquals("=Z#~:'Qw9u", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = (-2891);
      Document.OutputSettings document_OutputSettings0 = null;
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "Split offset must be not be negative";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertEquals("Split offset must be not be negative", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = "Vx8vkZ%U/t#R;x@m`";
      String string3 = TextNode.normaliseWhitespace(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Vx8vkZ%U/t#R;x@m`", string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotNull(string3);
      
      String string4 = "n";
      TextNode textNode0 = new TextNode(string4, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string5 = textNode0.getWholeText();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("n", string5);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string5);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string5);
      
      String string6 = textNode0.absUrl(string5);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string4, string6);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string5);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string6);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string1 = "";
      String string2 = "wZZ 9=`M+_QC8";
      StringBuilder stringBuilder0 = new StringBuilder(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("wZZ 9=`M+_QC8", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("wZZ 9=`M+_QC8false", stringBuilder0.toString());
      assertEquals("wZZ 9=`M+_QC8false", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals("eslaf8CQ_+M`=9 ZZw", stringBuilder0.toString());
      assertEquals("eslaf8CQ_+M`=9 ZZw", stringBuilder1.toString());
      assertEquals("eslaf8CQ_+M`=9 ZZw", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.append((CharSequence) stringBuilder1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertEquals("eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder0.toString());
      assertEquals("eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder1.toString());
      assertEquals("eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder2.toString());
      assertEquals("eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      
      int int0 = 0;
      String string3 = "(sJsNCkx3";
      StringBuilder stringBuilder4 = stringBuilder3.insert(int0, string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertEquals("(sJsNCkx3eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder0.toString());
      assertEquals("(sJsNCkx3eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder1.toString());
      assertEquals("(sJsNCkx3eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder2.toString());
      assertEquals("(sJsNCkx3eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder3.toString());
      assertEquals("(sJsNCkx3eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder4);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertEquals("(sJsNCkx3eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder0.toString());
      assertEquals("(sJsNCkx3eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder1.toString());
      assertEquals("(sJsNCkx3eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder2.toString());
      assertEquals("(sJsNCkx3eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder3.toString());
      assertEquals("(sJsNCkx3eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder4.toString());
      
      boolean boolean2 = textNode0.hasAttr(string1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string4 = TextNode.stripLeadingWhitespace(string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string4, string1);
      assertSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotNull(string4);
      
      boolean boolean3 = textNode0.hasAttr(string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string5 = TextNode.normaliseWhitespace(string0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string5);
      assertSame(string5, string0);
      assertSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotNull(string5);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean4 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(boolean3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean4);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertNotNull(document_OutputSettings4);
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean4);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertSame(string0, string1);
      assertSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals("(sJsNCkx3eslaf8CQ_+M`=9 ZZweslaf8CQ_+M`=9 ZZw", stringBuilder0.toString());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertFalse(document_OutputSettings4.prettyPrint());
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "%68#r*##2~P8},9v|]5";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      int int0 = 2002;
      Node[] nodeArray0 = new Node[0];
      textNode0.addChildren(int0, nodeArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, nodeArray0.length);
      
      String string2 = "z7E5rz2owh4QW~0lPp";
      Node node0 = textNode0.removeAttr(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, node0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(node0, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      
      String string3 = textNode0.text();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("%68#r*##2~P8},9v|]5", string3);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, node0);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        textNode0.absUrl(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "|tVs";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("|tVs", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      int int0 = (-1283);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "}#_,70f<*b[ {p=C'";
      String string1 = null;
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string2 = null;
      List<Node> list0 = textNode0.siblingNodes();
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TextNode textNode1 = textNode0.text(string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.baseUri());
      assertNotNull(textNode1);
      
      Node node0 = textNode1.doClone(textNode0);
      assertFalse(node0.equals((Object)textNode1));
      assertFalse(node0.equals((Object)textNode0));
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, node0);
      assertNotSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertNotSame(node0, textNode1);
      assertNotSame(node0, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNull(textNode1.baseUri());
      assertNull(node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertNotNull(node0);
      
      String string3 = TextNode.stripLeadingWhitespace(string0);
      assertEquals("}#_,70f<*b[ {p=C'", string3);
      assertSame(string0, string3);
      assertSame(string3, string0);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        textNode1.attributes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "u";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string2 = "";
      TextNode textNode1 = textNode0.text(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      
      String string3 = textNode1.nodeName();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("#text", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals("", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string3);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "l}s1";
      String string1 = "#text";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("#text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      int int0 = 289;
      textNode0.siblingIndex = int0;
      assertEquals("#text", textNode0.baseUri());
      assertEquals(289, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string2 = textNode0.toString();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("l}s1", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("#text", textNode0.baseUri());
      assertEquals(289, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string2);
      
      String string3 = "\\B1^8y+";
      String string4 = "o]}k";
      boolean boolean1 = textNode0.hasAttr(string4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertEquals("#text", textNode0.baseUri());
      assertEquals(289, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      Node node0 = textNode0.removeAttr(string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, node0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertSame(node0, textNode0);
      assertEquals("#text", textNode0.baseUri());
      assertEquals(289, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(289, node0.siblingIndex());
      assertEquals("#text", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertNotNull(node0);
      
      Attributes attributes0 = textNode0.attributes();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, node0);
      assertEquals("#text", textNode0.baseUri());
      assertEquals(289, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(attributes0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = "";
      TextNode textNode1 = textNode0.text(string1);
      assertSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(string1, string0);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("", textNode1.baseUri());
      assertNotNull(textNode1);
      
      int int0 = 1761;
      String string2 = TextNode.stripLeadingWhitespace(string1);
      assertEquals("", string2);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
      
      String string3 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "Split offset must not be greater than current text length";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = textNode0.absUrl(string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string1);
      
      String string2 = "";
      TextNode textNode1 = textNode0.text(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(textNode1, textNode0);
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      assertNotNull(textNode1);
      
      int int0 = (-2601);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(nodeArray0);
      assertEquals(0, nodeArray0.length);
      
      boolean boolean0 = textNode0.hasAttr(string0);
      assertFalse(boolean0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      
      String string1 = textNode0.nodeName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("#text", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string1);
      
      String string2 = textNode0.nodeName();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#text", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string2);
      
      Attributes attributes0 = textNode0.attributes();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(attributes0);
      
      String string3 = textNode0.attr(string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string3);
      
      Attributes attributes1 = textNode0.attributes();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(attributes1, attributes0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(attributes1);
      
      boolean boolean1 = textNode0.isBlank();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      
      String string4 = textNode0.attr(string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertSame(string4, string3);
      assertNotSame(string4, string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string4);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "5DL{Mdg";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertEquals("5DL{Mdg", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = "";
      TextNode textNode0 = new TextNode(string1, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Node node0 = textNode0.removeAttr(string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals("", node0.baseUri());
      assertNotNull(node0);
      
      String string3 = textNode0.getWholeText();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("5DL{Mdg", string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(textNode0, node0);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string3);
      
      String string4 = "";
      TextNode textNode1 = textNode0.text(string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      
      String string5 = textNode0.toString();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertSame(string0, string3);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string2, string5);
      assertSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string5);
      
      boolean boolean0 = textNode0.isBlank();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string2.equals((Object)string5));
      assertTrue(boolean0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertSame(string0, string3);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string2, string5);
      assertSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      
      String string6 = textNode0.text();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string2.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertSame(string0, string3);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string2, string5);
      assertSame(string2, string4);
      assertSame(string2, string6);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertSame(string6, string4);
      assertSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string6);
      
      Node node1 = textNode0.removeAttr(string0);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string2.equals((Object)string5));
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertSame(string0, string3);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string2, string5);
      assertSame(string2, string4);
      assertSame(string2, string6);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(textNode0, node1);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(node1, textNode1);
      assertSame(node1, node0);
      assertSame(node1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, node1.siblingIndex());
      assertEquals("", node1.baseUri());
      assertEquals("#text", node1.nodeName());
      assertNotNull(node1);
      
      String string7 = "^7)oqZJet@}7K-^uG";
      String string8 = "r+'QVK'=-!L@H{o4_2S";
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "p>u(6jvm#e/WKPAF";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p>u(6jvm#e/WKPAF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = "dGFX[[oM,.r";
      Document document0 = Document.createShell(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("dGFX[[oM,.r", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("dGFX[[oM,.r", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("dGFX[[oM,.r", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertFalse(string1.equals((Object)string0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(string1, string0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("dGFX[[oM,.r", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("dGFX[[oM,.r", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("dGFX[[oM,.r", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(string1, string0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertEquals("dGFX[[oM,.r", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("dGFX[[oM,.r", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("dGFX[[oM,.r", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("dGFX[[oM,.r", document3.baseUri());
      assertNotNull(document3);
      
      Document document4 = document3.normalise();
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertNotSame(string1, string0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertEquals("dGFX[[oM,.r", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("dGFX[[oM,.r", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("dGFX[[oM,.r", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("dGFX[[oM,.r", document3.baseUri());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("dGFX[[oM,.r", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      
      String string2 = document4.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("dGFX[[oM,.r", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("dGFX[[oM,.r", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("dGFX[[oM,.r", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("dGFX[[oM,.r", document3.baseUri());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("dGFX[[oM,.r", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertNotNull(string2);
      
      Document document5 = (Document)document4.attr(string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertEquals("dGFX[[oM,.r", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("dGFX[[oM,.r", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("dGFX[[oM,.r", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("dGFX[[oM,.r", document3.baseUri());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("dGFX[[oM,.r", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals("dGFX[[oM,.r", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertNotNull(document5);
      
      textNode0.parentNode = (Node) document5;
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p>u(6jvm#e/WKPAF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("dGFX[[oM,.r", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("dGFX[[oM,.r", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("dGFX[[oM,.r", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("dGFX[[oM,.r", document3.baseUri());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("dGFX[[oM,.r", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals("dGFX[[oM,.r", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals("dGFX[[oM,.r", textNode0.parentNode.baseUri());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      
      Elements elements0 = document5.getElementsByAttributeStarting(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertEquals("dGFX[[oM,.r", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("dGFX[[oM,.r", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("dGFX[[oM,.r", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("dGFX[[oM,.r", document3.baseUri());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("dGFX[[oM,.r", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals("dGFX[[oM,.r", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string3 = "#text";
      TextNode textNode1 = textNode0.text(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(textNode1, textNode0);
      assertSame(textNode0, textNode1);
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("p>u(6jvm#e/WKPAF", textNode1.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p>u(6jvm#e/WKPAF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode1);
      
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("", stringBuilder0.toString());
      
      String string4 = textNode1.nodeName();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("#text", string4);
      assertSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(textNode1, textNode0);
      assertSame(textNode0, textNode1);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("p>u(6jvm#e/WKPAF", textNode1.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p>u(6jvm#e/WKPAF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string4);
      
      String string5 = TextNode.stripLeadingWhitespace(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("dGFX[[oM,.r", string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string5);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotNull(string5);
      
      TextNode textNode2 = textNode0.splitText(int0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p>u(6jvm#e/WKPAF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("p>u(6jvm#e/WKPAF", textNode2.baseUri());
      assertEquals(1, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertNotNull(textNode2);
      
      TextNode textNode3 = (TextNode)textNode0.attr(string3, string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(textNode3.equals((Object)textNode2));
      assertSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode3);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode3);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertSame(textNode3, textNode0);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("p>u(6jvm#e/WKPAF", textNode1.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p>u(6jvm#e/WKPAF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("p>u(6jvm#e/WKPAF", textNode3.baseUri());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(0, textNode3.siblingIndex());
      assertNotNull(textNode3);
      
      String string6 = textNode1.attr(string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(textNode1.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("#text", string6);
      assertSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertSame(string3, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode3);
      assertNotSame(textNode1, textNode2);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode3);
      assertSame(string4, string3);
      assertSame(string4, string6);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string6, string5);
      assertSame(string6, string3);
      assertSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("p>u(6jvm#e/WKPAF", textNode1.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p>u(6jvm#e/WKPAF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string6);
      
      String string7 = textNode2.nodeName();
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode3));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals("#text", string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string7);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode3);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode3);
      assertNotSame(textNode2, textNode1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertSame(string7, string4);
      assertSame(string7, string3);
      assertSame(string7, string6);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p>u(6jvm#e/WKPAF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("p>u(6jvm#e/WKPAF", textNode2.baseUri());
      assertEquals(1, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertNotNull(string7);
      
      String string8 = "'{7@+XpK";
      TextNode textNode4 = (TextNode)textNode2.removeAttr(string8);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode3));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(textNode4.equals((Object)textNode1));
      assertFalse(textNode4.equals((Object)textNode3));
      assertFalse(textNode4.equals((Object)textNode0));
      assertNotSame(string0, string4);
      assertNotSame(string0, string7);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(textNode0, textNode4);
      assertSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, textNode3);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, textNode4);
      assertNotSame(textNode2, textNode3);
      assertNotSame(textNode2, textNode1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string8, string0);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertSame(textNode4, textNode2);
      assertNotSame(textNode4, textNode1);
      assertNotSame(textNode4, textNode3);
      assertNotSame(textNode4, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p>u(6jvm#e/WKPAF", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("p>u(6jvm#e/WKPAF", textNode2.baseUri());
      assertEquals(1, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("#text", textNode4.nodeName());
      assertEquals(1, textNode4.siblingIndex());
      assertEquals("p>u(6jvm#e/WKPAF", textNode4.baseUri());
      assertNotNull(textNode4);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "j3/2`]+ =PhjO`F";
      String string1 = "+fZy.{M&CC{c>?H";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("j3/2`]+ =PhjO`F", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string2 = "Split offset must be not be negative";
      Tag tag0 = Tag.valueOf(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      String string3 = "progress";
      Element element0 = new Element(tag0, string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("split offset must be not be negative", element0.nodeName());
      assertEquals("progress", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("split offset must be not be negative", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("split offset must be not be negative", element0.nodeName());
      assertEquals("progress", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("split offset must be not be negative", element0.tagName());
      assertEquals("progress", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("split offset must be not be negative", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("split offset must be not be negative", element1.tagName());
      assertNotNull(element1);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) element1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>\n j3/2`]+ =PhjO`F\n</split offset must be not be negative>", stringBuilder0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("split offset must be not be negative", element0.nodeName());
      assertEquals("progress", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("split offset must be not be negative", element0.tagName());
      assertEquals("progress", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("split offset must be not be negative", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("split offset must be not be negative", element1.tagName());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>\n j3/2`]+ =PhjO`F\n</split offset must be not be negative>", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      int int0 = 1;
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) string3, int0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>\n j3/2`]+ =PhjO`F\n</split offset must be not be negative>", stringBuilder0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("split offset must be not be negative", element0.nodeName());
      assertEquals("progress", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("split offset must be not be negative", element0.tagName());
      assertEquals("progress", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("split offset must be not be negative", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("split offset must be not be negative", element1.tagName());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>\n j3/2`]+ =PhjO`F\n</split offset must be not be negative>", stringBuilder1.toString());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>\n j3/2`]+ =PhjO`F\n</split offset must be not be negative>", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      int int1 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.prettyPrint(boolean0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings3);
      
      textNode0.indent(stringBuilder2, int1, document_OutputSettings1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>\n j3/2`]+ =PhjO`F\n</split offset must be not be negative>\n", stringBuilder0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("split offset must be not be negative", element0.nodeName());
      assertEquals("progress", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("split offset must be not be negative", element0.tagName());
      assertEquals("progress", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("split offset must be not be negative", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("split offset must be not be negative", element1.tagName());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>\n j3/2`]+ =PhjO`F\n</split offset must be not be negative>\n", stringBuilder1.toString());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>\n j3/2`]+ =PhjO`F\n</split offset must be not be negative>\n", stringBuilder2.toString());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      
      int int2 = 0;
      TextNode textNode1 = textNode0.splitText(int2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int2 == int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("+fZy.{M&CC{c>?H", textNode1.baseUri());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      
      List<Node> list0 = textNode1.siblingNodes();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int2 == int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("+fZy.{M&CC{c>?H", textNode1.baseUri());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      String string4 = textNode1.absUrl(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int2 == int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("+fZy.{M&CC{c>?H", textNode1.baseUri());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string4);
      
      String string5 = "yXD136b(3h%Q_";
      String string6 = textNode0.absUrl(string5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertSame(string6, string4);
      assertNotSame(string6, string5);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertNotNull(string6);
      
      String string7 = TextNode.stripLeadingWhitespace(string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int2 == int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertSame(string4, string6);
      assertNotSame(string4, string5);
      assertSame(string4, string7);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string7, string5);
      assertSame(string7, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertSame(string7, string4);
      assertNotSame(string7, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("+fZy.{M&CC{c>?H", textNode1.baseUri());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string7);
      
      String string8 = "^\\s+";
      TextNode textNode2 = TextNode.createFromEncoded(string8, string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string7);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string8);
      assertNotSame(string8, string4);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string3);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertEquals("yXD136b(3h%Q_", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertNotNull(textNode2);
      
      Node node0 = textNode2.removeAttr(string1);
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(node0.equals((Object)textNode0));
      assertFalse(node0.equals((Object)textNode1));
      assertNotSame(string1, string8);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string7);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string8);
      assertNotSame(string8, string4);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string3);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, node0);
      assertNotSame(textNode2, textNode0);
      assertNotSame(node0, textNode0);
      assertNotSame(node0, textNode1);
      assertSame(node0, textNode2);
      assertEquals("yXD136b(3h%Q_", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals("yXD136b(3h%Q_", node0.baseUri());
      assertNotNull(node0);
      
      String string9 = null;
      // Undeclared exception!
      try { 
        textNode2.attr(string9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string1 = "#text";
      // Undeclared exception!
      try { 
        textNode0.attr(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "CUt-*/=N3$\"~";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("CUt-*/=N3$\"~", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("CUt-*/=N3$\"~", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(attributes0);
      
      String string1 = textNode0.attr(string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("CUt-*/=N3$\"~", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string1);
      
      String string2 = "org.jsoup.select.Evaluator$Tag";
      String string3 = textNode0.attr(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("CUt-*/=N3$\"~", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string3);
      
      StringBuilder stringBuilder0 = null;
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = null;
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("CUt-*/=N3$\"~", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      
      String string4 = TextNode.normaliseWhitespace(string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("CUt-*/=N3$\"~", string4);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotNull(string4);
      
      String string5 = textNode0.nodeName();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("#text", string5);
      assertSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("CUt-*/=N3$\"~", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string5);
      
      String string6 = textNode0.nodeName();
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("#text", string6);
      assertNotSame(string0, string6);
      assertSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string6, string2);
      assertSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("CUt-*/=N3$\"~", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string6);
      
      String string7 = textNode0.text();
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals("CUt-*/=N3$\"~", string7);
      assertNotSame(string0, string6);
      assertSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string7);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("CUt-*/=N3$\"~", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string7);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes;
      assertNull(attributes0);
      
      textNode0.attributes = attributes0;
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(textNode0.baseUri());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = ".Z";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertEquals(".Z", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = "";
      String string3 = "HN(L";
      TextNode textNode0 = new TextNode(string2, string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("HN(L", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string4 = textNode0.text();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotSame(string2, string0);
      assertSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(string4, string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("HN(L", textNode0.baseUri());
      assertNotNull(string4);
      
      String string5 = "^\\s+";
      textNode0.setBaseUri(string5);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotSame(string2, string0);
      assertSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertEquals("^\\s+", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string6 = "";
      TextNode textNode1 = textNode0.text(string6);
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotSame(string2, string6);
      assertSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string6);
      assertNotSame(string3, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertSame(textNode1, textNode0);
      assertEquals("^\\s+", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("^\\s+", textNode1.baseUri());
      assertNotNull(textNode1);
      
      String string7 = null;
      String string8 = "H.t!=so~z$>R3$";
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string7, string8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = textNode0.outerHtml();
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(string1);
      
      String string2 = null;
      TextNode textNode1 = textNode0.text(string2);
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertNotNull(textNode1);
      
      String string3 = "";
      // Undeclared exception!
      try { 
        textNode1.removeAttr(string3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(attributes0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "f";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      assertEquals("f", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      TextNode textNode0 = TextNode.createFromEncoded(string1, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("f", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = 0;
      textNode0.siblingIndex = int0;
      assertEquals("f", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      Node node0 = textNode0.attr(string1, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      assertEquals("f", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("f", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      
      String string2 = "H?S-f$;dG{a";
      Node node1 = textNode0.clone();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(node1.equals((Object)textNode0));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, node0);
      assertNotSame(textNode0, node1);
      assertNotSame(node1, textNode0);
      assertNotSame(node1, node0);
      assertEquals("f", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", node1.nodeName());
      assertEquals(0, node1.siblingIndex());
      assertEquals("f", node1.baseUri());
      assertNotNull(node1);
      
      boolean boolean0 = textNode0.hasAttr(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)node1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, node0);
      assertNotSame(textNode0, node1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("f", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      String string3 = null;
      // Undeclared exception!
      try { 
        textNode0.text(string3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "text";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = 1;
      TextNode textNode1 = textNode0.splitText(int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.baseUri());
      assertNotNull(textNode1);
      
      String string1 = textNode1.getWholeText();
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ext", string1);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      assertEquals("text", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("text", textNode1.baseUri());
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = "org.jsoup.select.Evaluator$Class";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("org.jsoup.select.Evaluator$Class", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = (-184);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string2 = "track";
      TextNode textNode1 = new TextNode(string1, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("#text", textNode1.nodeName());
      assertEquals("track", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      
      List<Node> list0 = textNode1.siblingNodes();
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode1.nodeName());
      assertEquals("track", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Node node0 = textNode0.doClone(textNode1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(node0.equals((Object)textNode0));
      assertFalse(node0.equals((Object)textNode1));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      assertNotSame(node0, textNode0);
      assertNotSame(node0, textNode1);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("track", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals("", node0.baseUri());
      assertNotNull(node0);
      
      String string3 = "^!s/W";
      Node node1 = textNode0.removeAttr(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode0.equals((Object)node0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)textNode1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(node1, textNode0);
      assertNotSame(node1, node0);
      assertNotSame(node1, textNode1);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, node1.siblingIndex());
      assertEquals("#text", node1.nodeName());
      assertEquals("", node1.baseUri());
      assertNotNull(node1);
      
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      TextNode textNode0 = new TextNode(string0, string1);
      assertNull(textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "Split offset must not be greater than current text length";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = null;
      String string2 = textNode0.outerHtml();
      assertTrue(string2.equals((Object)string0));
      assertEquals("Split offset must not be greater than current text length", string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string2);
      
      TextNode textNode1 = textNode0.text(string1);
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      
      Node[] nodeArray0 = textNode1.childNodesAsArray();
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(nodeArray0);
      assertEquals(0, nodeArray0.length);
      
      String string3 = textNode1.getWholeText();
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        textNode1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "rM";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertEquals("rM", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = "";
      TextNode textNode0 = new TextNode(string2, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = 51;
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = textNode0.traverse(nodeVisitor0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals("", node0.baseUri());
      assertNotNull(node0);
      
      textNode0.siblingIndex = int0;
      assertEquals(51, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      
      Attributes attributes0 = textNode0.attributes();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode0, node0);
      assertEquals(51, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(attributes0);
      
      TextNode textNode1 = textNode0.text(string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertEquals(51, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(51, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertNotNull(textNode1);
      
      List<Node> list0 = textNode1.siblingNodes();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertEquals(51, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(51, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string3 = "^\\s+";
      TextNode textNode2 = textNode1.text(string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, node0);
      assertSame(textNode2, node0);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertEquals(51, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(51, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(51, textNode2.siblingIndex());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertNotNull(textNode2);
      
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node1 = textNode2.traverse(nodeVisitor1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode0, node1);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, node1);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertSame(textNode1, node0);
      assertSame(textNode2, node0);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, node1);
      assertSame(node1, textNode1);
      assertSame(node1, textNode2);
      assertSame(node1, textNode0);
      assertSame(node1, node0);
      assertEquals(51, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(51, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(51, textNode2.siblingIndex());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("", node1.baseUri());
      assertEquals(51, node1.siblingIndex());
      assertEquals("#text", node1.nodeName());
      assertNotNull(node1);
      
      Node node2 = textNode1.doClone(node1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)textNode1));
      assertFalse(node2.equals((Object)textNode2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)textNode0));
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, node2);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, node1);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, node2);
      assertSame(textNode1, node0);
      assertSame(textNode2, node0);
      assertNotSame(textNode2, node2);
      assertSame(textNode2, textNode0);
      assertSame(textNode2, textNode1);
      assertSame(textNode2, node1);
      assertSame(node1, textNode1);
      assertSame(node1, textNode2);
      assertSame(node1, textNode0);
      assertSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, textNode1);
      assertNotSame(node2, textNode2);
      assertNotSame(node2, node0);
      assertNotSame(node2, textNode0);
      assertEquals(51, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(51, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      assertEquals(51, textNode2.siblingIndex());
      assertEquals("", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("", node1.baseUri());
      assertEquals(51, node1.siblingIndex());
      assertEquals("#text", node1.nodeName());
      assertEquals("#text", node2.nodeName());
      assertEquals(51, node2.siblingIndex());
      assertEquals("", node2.baseUri());
      assertNotNull(node2);
      
      Document document0 = new Document(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^\\s+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      document0.setParentNode(textNode1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(textNode0.equals((Object)node2));
      assertFalse(textNode1.equals((Object)node2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, node2);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode1, node1);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, node2);
      assertSame(textNode1, node0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^\\s+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(51, textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(51, textNode1.siblingIndex());
      assertEquals("", textNode1.baseUri());
      
      String string4 = null;
      // Undeclared exception!
      try { 
        document0.attr(string4, string4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "3C3";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("3C3", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      int int0 = 1769;
      textNode0.setSiblingIndex(int0);
      assertEquals(1769, textNode0.siblingIndex());
      assertEquals("3C3", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      
      String string1 = "#text";
      textNode0.setBaseUri(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(1769, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode0.baseUri());
      
      Node node0 = textNode0.attr(string0, string0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      assertEquals(1769, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals("#text", node0.baseUri());
      assertEquals(1769, node0.siblingIndex());
      assertNotNull(node0);
      
      String string2 = "O\"UC%^";
      Node node1 = textNode0.removeAttr(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, node1);
      assertSame(textNode0, node0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(node1, textNode0);
      assertSame(node1, node0);
      assertEquals(1769, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode0.baseUri());
      assertEquals("#text", node1.nodeName());
      assertEquals(1769, node1.siblingIndex());
      assertEquals("#text", node1.baseUri());
      assertNotNull(node1);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("#text", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int1 = 2715;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(int1, (double) int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2715
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "thead";
      String string1 = TextNode.normaliseWhitespace(string0);
      assertEquals("thead", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = "comment";
      TextNode textNode0 = new TextNode(string2, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string3 = textNode0.text();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("comment", string3);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string3);
      
      Node node0 = textNode0.nextSibling();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(node0);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("comment", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      
      String string4 = textNode1.getWholeText();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("comment", string4);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string4, string0);
      assertSame(string4, string3);
      assertSame(string4, string2);
      assertNotSame(string4, string1);
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("comment", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string4);
      
      int int1 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int1);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertNotNull(document_OutputSettings1);
      
      int int2 = 0;
      long long0 = 0L;
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node1 = textNode0.traverse(nodeVisitor0);
      assertFalse(node1.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertSame(node1, textNode0);
      assertNotSame(node1, textNode1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string4);
      assertNotSame(string2, string1);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, textNode1);
      assertEquals("comment", node1.baseUri());
      assertEquals("#text", node1.nodeName());
      assertEquals(0, node1.siblingIndex());
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(node1);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(int1, long0);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("0", stringBuilder1.toString());
      assertEquals("0", stringBuilder0.toString());
      assertNotNull(stringBuilder1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(int2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertNotNull(document_OutputSettings2);
      
      int int3 = 0;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(int3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertNotNull(document_OutputSettings3);
      
      textNode0.outerHtmlHead(stringBuilder0, int1, document_OutputSettings2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string4);
      assertNotSame(string2, string1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("0", stringBuilder0.toString());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      
      StringBuilder stringBuilder2 = new StringBuilder(stringBuilder1);
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertEquals("0", stringBuilder1.toString());
      assertEquals("0", stringBuilder2.toString());
      assertEquals("0", stringBuilder0.toString());
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.appendCodePoint(int1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder2));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertFalse(stringBuilder3.equals((Object)stringBuilder1));
      assertFalse(stringBuilder3.equals((Object)stringBuilder0));
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertNotSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotSame(stringBuilder3, stringBuilder0);
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("0", stringBuilder1.toString());
      assertEquals("0\u0000", stringBuilder2.toString());
      assertEquals("0\u0000", stringBuilder3.toString());
      assertEquals("0", stringBuilder0.toString());
      assertNotNull(stringBuilder3);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder2);
      assertFalse(stringBuilder1.equals((Object)stringBuilder2));
      assertFalse(stringBuilder1.equals((Object)stringBuilder3));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertFalse(boolean1 == boolean0);
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(stringBuilder0.equals((Object)stringBuilder3));
      assertFalse(boolean1);
      assertNotSame(stringBuilder1, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("0", stringBuilder1.toString());
      assertEquals("0\u0000", stringBuilder2.toString());
      assertEquals("0", stringBuilder0.toString());
      
      String string5 = textNode0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string5);
      
      Attributes attributes0 = textNode0.attributes();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, textNode1);
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(attributes0);
      
      String string6 = "B9Ch-5";
      String string7 = textNode1.absUrl(string6);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)node1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, node1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("comment", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string7);
      
      String string8 = "G-m@(e\"_]&*_[K.--";
      boolean boolean2 = textNode0.hasAttr(string8);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string8));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string8);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertNotSame(string8, string0);
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      Attributes attributes1 = textNode0.attributes();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string8));
      assertFalse(textNode0.equals((Object)textNode1));
      assertSame(attributes1, attributes0);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string8);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, textNode1);
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(attributes1);
      
      boolean boolean3 = textNode0.isBlank();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string8));
      assertFalse(textNode0.equals((Object)textNode1));
      assertTrue(boolean3);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string8);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, textNode1);
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      TextNode textNode2 = textNode1.splitText(int3);
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)node1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string8));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)node1));
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, node1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string8);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, textNode2);
      assertNotSame(textNode1, node1);
      assertEquals("comment", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("comment", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode2);
      
      textNode0.outerHtmlHead(stringBuilder0, int3, document_OutputSettings2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string8));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(stringBuilder0.equals((Object)stringBuilder3));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean3);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string8);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(textNode0, textNode2);
      assertSame(textNode0, node1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals("comment", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("0", stringBuilder0.toString());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "text";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string1 = "Split offset must be not be negative";
      StringBuilder stringBuilder0 = new StringBuilder(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Split offset must be not be negative", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[0];
      int int0 = 0;
      boolean boolean0 = true;
      int int1 = (-1);
      String string2 = null;
      int int2 = 700;
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Node node0 = textNode0.removeAttr(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(textNode0, node0);
      assertNotSame(string1, string0);
      assertSame(node0, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.baseUri());
      assertEquals("text", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertNotNull(node0);
      
      boolean boolean1 = textNode0.hasAttr(string0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(string0, string1);
      assertSame(textNode0, node0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.baseUri());
      
      Attributes attributes0 = textNode0.attributes();
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(textNode0, node0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.baseUri());
      assertNotNull(attributes0);
      
      String string3 = textNode0.text();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertEquals("text", string3);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(textNode0, node0);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("text", textNode0.baseUri());
      assertNotNull(string3);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "Split offset must be not be negative";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Node node0 = textNode0.nextSibling();
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNull(node0);
      
      TextNode textNode1 = textNode0.text(string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must be not be negative", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      
      int int0 = 0;
      textNode1.siblingIndex = int0;
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must be not be negative", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      
      textNode1.parentNode = (Node) textNode0;
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must be not be negative", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("Split offset must be not be negative", textNode1.parentNode.baseUri());
      assertEquals(0, textNode1.parentNode.siblingIndex());
      
      String string1 = textNode1.attr(string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must be not be negative", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(string1);
      
      int int1 = 1;
      StringBuilder stringBuilder0 = new StringBuilder(int1);
      assertFalse(int1 == int0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string2 = "";
      StringBuilder stringBuilder1 = stringBuilder0.append(string2);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) string2);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertEquals("", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder2);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertEquals("", stringBuilder2.toString());
      
      String string3 = TextNode.normaliseWhitespace(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertSame(string3, string2);
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must be not be negative", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(string3);
      
      // Undeclared exception!
      textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "7/.8j`UC9w'Eu\"";
      String string1 = "p{QZ%?*zZr";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p{QZ%?*zZr", textNode0.baseUri());
      assertNotNull(textNode0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      String string2 = "";
      TextNode textNode1 = textNode0.text(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(textNode1, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p{QZ%?*zZr", textNode0.baseUri());
      assertEquals("p{QZ%?*zZr", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      
      Node node0 = textNode0.traverse(nodeVisitor0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertSame(node0, textNode1);
      assertSame(node0, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p{QZ%?*zZr", textNode0.baseUri());
      assertEquals("p{QZ%?*zZr", node0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      
      TextNode textNode2 = TextNode.createFromEncoded(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)node0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, node0);
      assertNotSame(textNode2, textNode0);
      assertEquals("7/.8j`UC9w'Eu\"", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertNotNull(textNode2);
      
      int int0 = (-3099);
      textNode2.siblingIndex = int0;
      assertEquals((-3099), textNode2.siblingIndex());
      assertEquals("7/.8j`UC9w'Eu\"", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      
      String string3 = textNode0.text();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p{QZ%?*zZr", textNode0.baseUri());
      assertNotNull(string3);
      
      String string4 = textNode0.nodeName();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("#text", string4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p{QZ%?*zZr", textNode0.baseUri());
      assertNotNull(string4);
      
      String string5 = textNode0.absUrl(string4);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertNotSame(textNode0, textNode2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string5, string0);
      assertSame(string5, string2);
      assertNotSame(string5, string1);
      assertSame(string5, string3);
      assertNotSame(string5, string4);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("p{QZ%?*zZr", textNode0.baseUri());
      assertNotNull(string5);
      
      String string6 = "vp;d1d8KX*m#";
      List<Node> list0 = textNode2.siblingNodes();
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)node0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, node0);
      assertNotSame(textNode2, textNode0);
      assertEquals((-3099), textNode2.siblingIndex());
      assertEquals("7/.8j`UC9w'Eu\"", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string7 = "2JV3OJ^w5XAnu.$&";
      TextNode textNode3 = TextNode.createFromEncoded(string6, string7);
      assertFalse(textNode3.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)node0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertNotSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode3, textNode2);
      assertNotSame(textNode3, node0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertEquals("#text", textNode3.nodeName());
      assertEquals("2JV3OJ^w5XAnu.$&", textNode3.baseUri());
      assertEquals(0, textNode3.siblingIndex());
      assertNotNull(textNode3);
      
      String string8 = textNode2.toString();
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string7));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode3));
      assertFalse(textNode2.equals((Object)node0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertEquals("p{QZ%?*zZr", string8);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string7);
      assertNotSame(string0, string8);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string6);
      assertNotSame(string8, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string8);
      assertNotSame(string1, string7);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode3);
      assertNotSame(textNode2, node0);
      assertNotSame(textNode2, textNode0);
      assertEquals((-3099), textNode2.siblingIndex());
      assertEquals("7/.8j`UC9w'Eu\"", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertNotNull(string8);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "?k)})1$Lc:'Nc";
      String string1 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Attributes attributes0 = textNode0.attributes();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(attributes0);
      
      int int0 = (-1);
      textNode0.siblingIndex = int0;
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1), textNode0.siblingIndex());
      
      List<Node> list0 = textNode0.siblingNodes();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1), textNode0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string2 = textNode0.nodeName();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#text", string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1), textNode0.siblingIndex());
      assertNotNull(string2);
      
      String string3 = "org.jsoup.select.Collector$Accumulator";
      TextNode textNode1 = TextNode.createFromEncoded(string3, string2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(textNode1, textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.baseUri());
      assertNotNull(textNode1);
      
      String string4 = "w}avKJ}rj-'D*.w";
      Node node0 = textNode0.attr(string2, string4);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(node0.equals((Object)textNode1));
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(node0, textNode0);
      assertNotSame(node0, textNode1);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals((-1), node0.siblingIndex());
      assertEquals("", node0.baseUri());
      assertNotNull(node0);
      
      String string5 = textNode1.toString();
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(textNode1.equals((Object)node0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("org.jsoup.select.Collector$Accumulator", string5);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(textNode1, node0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.baseUri());
      assertNotNull(string5);
      
      String string6 = "";
      Attributes attributes1 = textNode0.attributes();
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(textNode0.equals((Object)textNode1));
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertSame(attributes1, attributes0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1), textNode0.siblingIndex());
      assertNotNull(attributes1);
      
      TextNode textNode2 = TextNode.createFromEncoded(string2, string6);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)node0));
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertSame(string6, string1);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, node0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertNotNull(textNode2);
      
      boolean boolean0 = textNode2.hasAttr(string6);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(textNode0.equals((Object)textNode2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)node0));
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(textNode0, textNode2);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertSame(string6, string1);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, node0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1), textNode0.siblingIndex());
      assertEquals("", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      
      String string7 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "j3/2`]+ =PhjO`F";
      String string1 = "+fZy.{M&CC{c>?H";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("j3/2`]+ =PhjO`F", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string2 = "Split offset must be not be negative";
      Tag tag0 = Tag.valueOf(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      String string3 = "progress";
      Element element0 = new Element(tag0, string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("split offset must be not be negative", element0.nodeName());
      assertEquals("progress", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("split offset must be not be negative", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(textNode0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("split offset must be not be negative", element0.nodeName());
      assertEquals("progress", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("split offset must be not be negative", element0.tagName());
      assertFalse(element1.isBlock());
      assertEquals("progress", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("split offset must be not be negative", element1.nodeName());
      assertEquals("split offset must be not be negative", element1.tagName());
      assertNotNull(element1);
      
      String string4 = "";
      Element element2 = element0.prependText(string4);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("split offset must be not be negative", element0.nodeName());
      assertEquals("progress", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("split offset must be not be negative", element0.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("split offset must be not be negative", element2.tagName());
      assertEquals("progress", element2.baseUri());
      assertEquals("split offset must be not be negative", element2.nodeName());
      assertNotNull(element2);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) element1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>j3/2`]+ =PhjO`F\n</split offset must be not be negative>", stringBuilder0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("split offset must be not be negative", element0.nodeName());
      assertEquals("progress", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("split offset must be not be negative", element0.tagName());
      assertFalse(element1.isBlock());
      assertEquals("progress", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("split offset must be not be negative", element1.nodeName());
      assertEquals("split offset must be not be negative", element1.tagName());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>j3/2`]+ =PhjO`F\n</split offset must be not be negative>", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      int int0 = 1;
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) string3, int0, int0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>j3/2`]+ =PhjO`F\n</split offset must be not be negative>", stringBuilder0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("split offset must be not be negative", element0.nodeName());
      assertEquals("progress", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("split offset must be not be negative", element0.tagName());
      assertFalse(element1.isBlock());
      assertEquals("progress", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("split offset must be not be negative", element1.nodeName());
      assertEquals("split offset must be not be negative", element1.tagName());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>j3/2`]+ =PhjO`F\n</split offset must be not be negative>", stringBuilder1.toString());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>j3/2`]+ =PhjO`F\n</split offset must be not be negative>", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      int int1 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings2);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.prettyPrint(boolean0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings3);
      
      textNode0.indent(stringBuilder2, int1, document_OutputSettings1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>j3/2`]+ =PhjO`F\n</split offset must be not be negative>\n", stringBuilder0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("split offset must be not be negative", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("split offset must be not be negative", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("split offset must be not be negative", element0.nodeName());
      assertEquals("progress", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("split offset must be not be negative", element0.tagName());
      assertFalse(element1.isBlock());
      assertEquals("progress", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("split offset must be not be negative", element1.nodeName());
      assertEquals("split offset must be not be negative", element1.tagName());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>j3/2`]+ =PhjO`F\n</split offset must be not be negative>\n", stringBuilder1.toString());
      assertEquals("j3/2`]+ =PhjO`F<split offset must be not be negative>j3/2`]+ =PhjO`F\n</split offset must be not be negative>\n", stringBuilder2.toString());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      
      int int2 = 0;
      TextNode textNode1 = textNode0.splitText(int2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int2 == int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("+fZy.{M&CC{c>?H", textNode1.baseUri());
      assertEquals(2, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      
      List<Node> list0 = textNode1.siblingNodes();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int2 == int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("+fZy.{M&CC{c>?H", textNode1.baseUri());
      assertEquals(2, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      String string5 = textNode1.absUrl(string1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int2 == int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertSame(string5, string4);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("+fZy.{M&CC{c>?H", textNode1.baseUri());
      assertEquals(2, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string5);
      
      String string6 = "yXD136b(3h%Q_";
      String string7 = textNode0.absUrl(string6);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string2);
      assertNotSame(string6, string7);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertSame(string7, string4);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertNotNull(string7);
      
      String string8 = TextNode.stripLeadingWhitespace(string5);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(int2 == int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string8);
      assertNotSame(string0, string4);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string8);
      assertNotSame(string1, string2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertSame(string5, string7);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string8);
      assertNotSame(string5, string3);
      assertSame(string5, string4);
      assertNotSame(string5, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string2);
      assertNotSame(string8, string1);
      assertSame(string8, string7);
      assertNotSame(string8, string3);
      assertSame(string8, string4);
      assertNotSame(string8, string6);
      assertSame(string8, string5);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("+fZy.{M&CC{c>?H", textNode1.baseUri());
      assertEquals(2, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(string8);
      
      String string9 = "^\\s+";
      TextNode textNode2 = TextNode.createFromEncoded(string9, string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string9);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string8);
      assertNotSame(string6, string2);
      assertNotSame(string6, string7);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string0);
      assertNotSame(string9, string6);
      assertNotSame(string9, string1);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertNotSame(string9, string2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertEquals("yXD136b(3h%Q_", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertNotNull(textNode2);
      
      Node node0 = textNode2.removeAttr(string1);
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(node0.equals((Object)textNode1));
      assertFalse(node0.equals((Object)textNode0));
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string9);
      assertNotSame(string1, string4);
      assertNotSame(string1, string8);
      assertNotSame(string1, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string9);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string8);
      assertNotSame(string6, string2);
      assertNotSame(string6, string7);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string0);
      assertNotSame(string9, string6);
      assertNotSame(string9, string1);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertNotSame(string9, string2);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertSame(textNode2, node0);
      assertNotSame(node0, textNode1);
      assertNotSame(node0, textNode0);
      assertSame(node0, textNode2);
      assertEquals("yXD136b(3h%Q_", textNode2.baseUri());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals("yXD136b(3h%Q_", node0.baseUri());
      assertNotNull(node0);
      
      String string10 = null;
      // Undeclared exception!
      try { 
        textNode2.attr(string10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "C RxRav=!";
      int int0 = 864;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      assertEquals("C RxRav=!", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string1 = "Split offset must be not be negative";
      String string2 = "";
      String string3 = null;
      TextNode textNode0 = new TextNode(string2, string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string4 = textNode0.absUrl(string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNull(textNode0.baseUri());
      assertNotNull(string4);
      
      String string5 = "^\\s+";
      TextNode textNode1 = TextNode.createFromEncoded(string0, string5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode1.nodeName());
      assertEquals("^\\s+", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      
      String string6 = "a<XKMKt$h";
      TextNode textNode2 = textNode1.text(string6);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertSame(textNode1, textNode2);
      assertNotSame(textNode1, textNode0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertSame(textNode2, textNode1);
      assertNotSame(textNode2, textNode0);
      assertEquals("#text", textNode1.nodeName());
      assertEquals("^\\s+", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("^\\s+", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertNotNull(textNode2);
      
      StringBuilder stringBuilder1 = null;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      // Undeclared exception!
      try { 
        textNode2.outerHtmlHead(stringBuilder1, int0, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = "n\\cR'$^";
      String string1 = "%";
      String string2 = "7{4ImxQE+";
      Document document0 = new Document(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("7{4ImxQE+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      String string3 = "_Ol}6";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("_Ol}6", textNode0.baseUri());
      assertNotNull(textNode0);
      
      int int0 = (-2058);
      textNode0.setSiblingIndex(int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("_Ol}6", textNode0.baseUri());
      assertEquals((-2058), textNode0.siblingIndex());
      
      Node node0 = textNode0.attr(string0, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("_Ol}6", textNode0.baseUri());
      assertEquals((-2058), textNode0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals("_Ol}6", node0.baseUri());
      assertEquals((-2058), node0.siblingIndex());
      assertNotNull(node0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      String string4 = "6)PQn;uF'GI";
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
      assertEquals("", stringBuilder0.toString());
      
      String string5 = node0.toString();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("n\\cR'$^", string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("_Ol}6", textNode0.baseUri());
      assertEquals((-2058), textNode0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals("_Ol}6", node0.baseUri());
      assertEquals((-2058), node0.siblingIndex());
      assertNotNull(string5);
      
      TextNode textNode1 = textNode0.text(string5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertTrue(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      assertSame(node0, textNode1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(textNode1, textNode0);
      assertSame(textNode1, node0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("_Ol}6", textNode0.baseUri());
      assertEquals((-2058), textNode0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals("_Ol}6", node0.baseUri());
      assertEquals((-2058), node0.siblingIndex());
      assertEquals("_Ol}6", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals((-2058), textNode1.siblingIndex());
      assertNotNull(textNode1);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "Split offset must not be greater than current text length";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = null;
      String string2 = textNode0.outerHtml();
      assertTrue(string2.equals((Object)string0));
      assertEquals("Split offset must not be greater than current text length", string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string2);
      
      TextNode textNode1 = textNode0.text(string1);
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      assertNotNull(textNode1);
      
      Node[] nodeArray0 = textNode1.childNodesAsArray();
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      assertNotNull(nodeArray0);
      assertEquals(0, nodeArray0.length);
      
      textNode1.setParentNode(textNode0);
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      
      String string3 = textNode1.getWholeText();
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string0, string2);
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      assertEquals("Split offset must not be greater than current text length", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must not be greater than current text length", textNode1.baseUri());
      assertNull(string3);
      
      // Undeclared exception!
      textNode1.toString();
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "k]=S.57qa.%}V`#a;xH";
      String string1 = "/>(";
      TextNode textNode0 = new TextNode(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("k]=S.57qa.%}V`#a;xH", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string2 = "";
      TextNode textNode1 = textNode0.text(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(textNode1, textNode0);
      assertEquals("k]=S.57qa.%}V`#a;xH", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("k]=S.57qa.%}V`#a;xH", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      
      int int0 = (-1045);
      textNode1.siblingIndex = int0;
      assertEquals("k]=S.57qa.%}V`#a;xH", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1045), textNode0.siblingIndex());
      assertEquals((-1045), textNode1.siblingIndex());
      assertEquals("k]=S.57qa.%}V`#a;xH", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      
      String string3 = "#text";
      Node node0 = textNode1.removeAttr(string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(textNode0, node0);
      assertSame(textNode0, textNode1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(textNode1, node0);
      assertSame(textNode1, textNode0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(node0, textNode0);
      assertSame(node0, textNode1);
      assertEquals("k]=S.57qa.%}V`#a;xH", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1045), textNode0.siblingIndex());
      assertEquals((-1045), textNode1.siblingIndex());
      assertEquals("k]=S.57qa.%}V`#a;xH", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("#text", node0.nodeName());
      assertEquals("k]=S.57qa.%}V`#a;xH", node0.baseUri());
      assertEquals((-1045), node0.siblingIndex());
      assertNotNull(node0);
      
      String string4 = "#text";
      TextNode textNode2 = TextNode.createFromEncoded(string4, string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)node0));
      assertFalse(textNode2.equals((Object)textNode0));
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(textNode2, node0);
      assertNotSame(textNode2, textNode0);
      assertEquals("#text", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertNotNull(textNode2);
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = "C RxRav=!";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      assertEquals("C RxRav=!", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string1 = "Split offset must be not be negative";
      String string2 = "";
      String string3 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string4 = "a<XKMKt$h";
      TextNode textNode1 = textNode0.text(string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertSame(textNode0, textNode1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(textNode1, textNode0);
      assertEquals("Split offset must be not be negative", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("Split offset must be not be negative", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertNotNull(textNode1);
      
      StringBuilder stringBuilder1 = null;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      TextNode textNode2 = TextNode.createFromEncoded(string0, string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("a<XKMKt$h", textNode2.baseUri());
      assertNotNull(textNode2);
      
      int int0 = 404;
      textNode2.indent(stringBuilder0, int0, document_OutputSettings1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertEquals("C RxRav=!\n                                                                                                                                                                                                                                                                                                                                                                                                                    ", stringBuilder0.toString());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("a<XKMKt$h", textNode2.baseUri());
      
      String string5 = textNode2.absUrl(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(textNode2.equals((Object)textNode0));
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertSame(string5, string2);
      assertEquals("#text", textNode2.nodeName());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("a<XKMKt$h", textNode2.baseUri());
      assertNotNull(string5);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertTrue(boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertEquals("C RxRav=!\n                                                                                                                                                                                                                                                                                                                                                                                                                    ", stringBuilder0.toString());
      
      boolean boolean2 = true;
      long long0 = (-1L);
      StringBuilder stringBuilder2 = stringBuilder0.append(long0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("C RxRav=!\n                                                                                                                                                                                                                                                                                                                                                                                                                    -1", stringBuilder0.toString());
      assertEquals("C RxRav=!\n                                                                                                                                                                                                                                                                                                                                                                                                                    -1", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      double double0 = 0.0;
      Document.OutputSettings document_OutputSettings2 = new Document.OutputSettings();
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      boolean boolean3 = true;
      Document.OutputSettings document_OutputSettings3 = new Document.OutputSettings();
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.forceAllElementAsBlock());
      assertNotNull(document_OutputSettings4);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings5);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings5.escapeMode());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertNotNull(document_OutputSettings5);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = "";
      String string1 = "+fZy.{M&CC{c>?H";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string2 = "|zciN\\KM7.6";
      Tag tag0 = Tag.valueOf(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("|zcin\\km7.6", tag0.toString());
      assertEquals("|zcin\\km7.6", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      String string3 = "progress";
      Document document0 = new Document(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, document0.siblingIndex());
      assertEquals("|zciN\\KM7.6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|zciN\\KM7.6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("|zciN\\KM7.6", document1.baseUri());
      assertNotNull(document1);
      
      String string4 = "";
      Document document2 = (Document)document0.tagName(string3);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("progress", document0.tagName());
      assertEquals("|zciN\\KM7.6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|zciN\\KM7.6", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("progress", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) document1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals("", stringBuilder0.toString());
      assertEquals(0, document0.siblingIndex());
      assertEquals("progress", document0.tagName());
      assertEquals("|zciN\\KM7.6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("progress", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("|zciN\\KM7.6", document1.baseUri());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      List<Node> list0 = textNode0.siblingNodes();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string5 = textNode0.absUrl(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string5, string3);
      assertSame(string5, string0);
      assertNotSame(string5, string1);
      assertSame(string5, string4);
      assertNotSame(string5, string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertNotNull(string5);
      
      String string6 = textNode0.absUrl(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertSame(string0, string6);
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string6, string4);
      assertSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertSame(string6, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertNotNull(string6);
      
      String string7 = TextNode.stripLeadingWhitespace(string5);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string7);
      assertSame(string7, string4);
      assertSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertSame(string7, string0);
      assertSame(string7, string5);
      assertSame(string0, string6);
      assertSame(string0, string5);
      assertNotSame(string0, string1);
      assertSame(string0, string7);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string7);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string5, string3);
      assertSame(string5, string0);
      assertNotSame(string5, string1);
      assertSame(string5, string6);
      assertSame(string5, string7);
      assertSame(string5, string4);
      assertNotSame(string5, string2);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("+fZy.{M&CC{c>?H", textNode0.baseUri());
      assertNotNull(string7);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = "^\\s+";
      String string1 = "Xwe";
      TextNode textNode0 = new TextNode(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Xwe", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      
      textNode0.attributes = attributes0;
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("Xwe", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = "thead";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("thead", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document0 = new Document(string0);
      assertEquals("thead", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      textNode0.parentNode = (Node) document0;
      assertEquals("thead", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("thead", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      assertEquals("thead", textNode0.parentNode.baseUri());
      
      String string1 = textNode0.text();
      assertEquals("thead", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("thead", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string1);
      
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      long long0 = 0L;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
      assertSame(string0, string1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertEquals("thead", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("\nthead", stringBuilder0.toString());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("\nthead\u0000", stringBuilder0.toString());
      assertEquals("\nthead\u0000", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("\nthead\u0000", stringBuilder0.toString());
      
      String string2 = textNode0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\nthead", string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("thead", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string2);
      
      int int1 = 94;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.indentAmount(int1);
      assertFalse(int1 == int0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(94, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(94, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertNotNull(document_OutputSettings2);
      
      String string3 = textNode0.absUrl(string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertEquals("thead", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(string3);
      
      Attributes attributes0 = textNode0.attributes();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertEquals("thead", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(attributes0);
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      String string0 = "j3/2`]+ =PhjO`F";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("j3/2`]+ =PhjO`F", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Tag tag0 = Tag.valueOf(string0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, string0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(textNode0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertEquals("j3/2`]+ =phjo`f", element1.tagName());
      assertEquals("j3/2`]+ =PhjO`F", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element1.nodeName());
      assertNotNull(element1);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) element1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertEquals("j3/2`]+ =phjo`f", element1.tagName());
      assertEquals("j3/2`]+ =PhjO`F", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element1.nodeName());
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", textNode1.baseUri());
      assertNotNull(textNode1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(int0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(0, document_OutputSettings4.indentAmount());
      assertNotNull(document_OutputSettings4);
      
      textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings4);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>\nj3/2`]+ =PhjO`F", stringBuilder0.toString());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", textNode1.baseUri());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(0, document_OutputSettings4.indentAmount());
      
      Node node0 = textNode0.removeAttr(string0);
      assertFalse(node0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(node0, textNode1);
      assertSame(node0, textNode0);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, node0);
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", node0.baseUri());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(node0);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = "j3/2`]+ =PhjO`F";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("j3/2`]+ =PhjO`F", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Tag tag0 = Tag.valueOf(string0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, string0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(textNode0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =PhjO`F", element1.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element1.tagName());
      assertEquals("j3/2`]+ =phjo`f", element1.nodeName());
      assertNotNull(element1);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) element1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =PhjO`F", element1.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element1.tagName());
      assertEquals("j3/2`]+ =phjo`f", element1.nodeName());
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode1.baseUri());
      assertNotNull(textNode1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertNotNull(document_OutputSettings3);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, string0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`Fj3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =PhjO`F", element1.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element1.tagName());
      assertEquals("j3/2`]+ =phjo`f", element1.nodeName());
      assertEquals("j3/2`]+ =PhjO`Fj3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder1.toString());
      assertEquals("j3/2`]+ =PhjO`Fj3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertNotNull(document_OutputSettings4);
      
      textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings4);
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(textNode1, textNode0);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.forceAllElementAsBlock());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`Fj3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>\nj3/2`]+ =PhjO`F", stringBuilder0.toString());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode1.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      
      Node node0 = textNode0.removeAttr(string0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(node0.equals((Object)textNode1));
      assertSame(textNode0, node0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(node0, textNode1);
      assertSame(node0, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", node0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", node0.baseUri());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings3.escapeMode(entities_EscapeMode1);
      assertFalse(entities_EscapeMode1.equals((Object)entities_EscapeMode0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(entities_EscapeMode0.equals((Object)entities_EscapeMode1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotSame(entities_EscapeMode1, entities_EscapeMode0);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(entities_EscapeMode0, entities_EscapeMode1);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings5.escapeMode());
      assertTrue(document_OutputSettings5.forceAllElementAsBlock());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings5);
      
      int int1 = 1114111;
      // Undeclared exception!
      textNode1.outerHtmlHead(stringBuilder1, int1, document_OutputSettings4);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = "j3/2`]+ =PhjO`F";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("j3/2`]+ =PhjO`F", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Tag tag0 = Tag.valueOf(string0);
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, string0);
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(textNode0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element1.tagName());
      assertEquals("j3/2`]+ =phjo`f", element1.nodeName());
      assertNotNull(element1);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) element1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder0.toString());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element1.tagName());
      assertEquals("j3/2`]+ =phjo`f", element1.nodeName());
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertNotNull(textNode1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(int0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      assertNotNull(document_OutputSettings3);
      
      textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings3);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(textNode1, textNode0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>\nj3/2`]+ =PhjO`F", stringBuilder0.toString());
      assertEquals("j3/2`]+ =PhjO`F", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
      
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string0);
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode2);
      
      TextNode textNode3 = (TextNode)textNode2.nextSibling();
      assertFalse(textNode2.equals((Object)textNode1));
      assertFalse(textNode3.equals((Object)textNode2));
      assertFalse(textNode3.equals((Object)textNode0));
      assertFalse(textNode0.equals((Object)textNode1));
      assertNotSame(textNode2, textNode3);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertSame(textNode3, textNode1);
      assertNotSame(textNode3, textNode2);
      assertNotSame(textNode3, textNode0);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode2);
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("#text", textNode3.nodeName());
      assertEquals(1, textNode3.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", textNode3.baseUri());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode3);
      
      String string1 = "a/";
      String string2 = TextNode.stripLeadingWhitespace(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("a/", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotNull(string2);
      
      textNode2.outerHtmlHead(stringBuilder1, int0, document_OutputSettings3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode0.equals((Object)textNode3));
      assertFalse(textNode2.equals((Object)textNode3));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotSame(textNode2, textNode3);
      assertNotSame(textNode2, textNode1);
      assertSame(textNode2, textNode0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode0, textNode3);
      assertSame(textNode0, textNode2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", textNode2.baseUri());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>\nj3/2`]+ =PhjO`F", stringBuilder0.toString());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element1.tagName());
      assertEquals("j3/2`]+ =phjo`f", element1.nodeName());
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>\nj3/2`]+ =PhjO`F", stringBuilder1.toString());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.forceAllElementAsBlock());
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      String string0 = "j3/2`]+ =PhjO`F";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("j3/2`]+ =PhjO`F", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Tag tag0 = Tag.valueOf(string0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, string0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(textNode0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element1.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", element1.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element1.tagName());
      assertNotNull(element1);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) element1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element1.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", element1.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element1.tagName());
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      int int0 = (-10);
      TextNode textNode1 = new TextNode(string0, string0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertEquals("j3/2`]+ =PhjO`F", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertNotNull(textNode1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Element element2 = (Element)element0.traverse(nodeVisitor0);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`F", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("j3/2`]+ =phjo`f", element2.tagName());
      assertNotNull(element2);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(textNode1, textNode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertEquals("j3/2`]+ =PhjO`F<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>j3/2`]+ =PhjO`F", stringBuilder0.toString());
      assertEquals("j3/2`]+ =PhjO`F", textNode1.baseUri());
      assertEquals(0, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      String string1 = "a/";
      String string2 = TextNode.normaliseWhitespace(string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("j3/2`]+ =PhjO`F", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder1, int0, document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "j3/2`]+ =PhjO`F";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Tag tag0 = Tag.valueOf(string0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, string0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(textNode0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =PhjO`F", element1.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element1.tagName());
      assertEquals("j3/2`]+ =phjo`f", element1.nodeName());
      assertNotNull(element1);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) element1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("j3/2`]+ =phjo`f", tag0.toString());
      assertEquals("j3/2`]+ =PhjO`F", element0.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element0.tagName());
      assertEquals("j3/2`]+ =phjo`f", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =PhjO`F", element1.baseUri());
      assertEquals("j3/2`]+ =phjo`f", element1.tagName());
      assertEquals("j3/2`]+ =phjo`f", element1.nodeName());
      assertEquals("<j3/2`]+ =phjo`f>\n j3/2`]+ =PhjO`F\n</j3/2`]+ =phjo`f>", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode1.baseUri());
      assertEquals(1, textNode1.siblingIndex());
      assertNotNull(textNode1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string0);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode2.equals((Object)textNode1));
      assertNotSame(textNode0, textNode1);
      assertSame(textNode0, textNode2);
      assertSame(textNode2, textNode0);
      assertNotSame(textNode2, textNode1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode2.baseUri());
      assertNotNull(textNode2);
      
      Tag tag1 = Tag.valueOf(string0);
      assertTrue(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isData());
      assertTrue(tag1.canContainBlock());
      assertEquals("j3/2`]+ =phjo`f", tag1.getName());
      assertEquals("j3/2`]+ =phjo`f", tag1.toString());
      assertTrue(tag1.isInline());
      assertFalse(tag1.preserveWhitespace());
      assertNotNull(tag1);
      
      String string1 = "a/";
      textNode2.parentNode = (Node) textNode0;
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals(0, textNode2.siblingIndex());
      assertEquals("#text", textNode2.nodeName());
      assertEquals("j3/2`]+ =PhjO`F", textNode2.baseUri());
      assertEquals("j3/2`]+ =PhjO`F", textNode2.parentNode.baseUri());
      assertEquals(0, textNode2.parentNode.siblingIndex());
      
      String string2 = TextNode.stripLeadingWhitespace(string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("a/", string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        textNode2.outerHtmlHead(stringBuilder1, int0, document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "dPU!HlcM\\6cY";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      assertEquals("dPU!HlcM\\6cY", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      long long0 = 0L;
      StringBuilder stringBuilder1 = stringBuilder0.append(long0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("dPU!HlcM\\6cY0", stringBuilder0.toString());
      assertEquals("dPU!HlcM\\6cY0", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertFalse(boolean0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("dPU!HlcM\\6cY0", stringBuilder0.toString());
      assertEquals("dPU!HlcM\\6cY0", stringBuilder1.toString());
      
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("dPU!HlcM\\6cY", textNode0.baseUri());
      assertNotNull(textNode0);
      
      int int0 = 0;
      Node node0 = textNode0.attr(string0, string0);
      assertSame(textNode0, node0);
      assertSame(node0, textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("dPU!HlcM\\6cY", textNode0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals("dPU!HlcM\\6cY", node0.baseUri());
      assertNotNull(node0);
      
      textNode0.parentNode = node0;
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("dPU!HlcM\\6cY", textNode0.baseUri());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals("dPU!HlcM\\6cY", node0.baseUri());
      assertEquals(0, textNode0.parentNode.siblingIndex());
      assertEquals("dPU!HlcM\\6cY", textNode0.parentNode.baseUri());
      
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      String string0 = "\"d<x`YOIw1UN";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = "progress";
      Document document0 = new Document(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("\"d<x`YOIw1UN", document0.baseUri());
      assertNotNull(document0);
      
      document0.setParentNode(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("\"d<x`YOIw1UN", document0.baseUri());
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("\"d<x`YOIw1UN", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("\"d<x`YOIw1UN", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.tagName(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("progress", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"d<x`YOIw1UN", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("progress", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("\"d<x`YOIw1UN", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      String string2 = textNode0.absUrl(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string2);
      
      String string3 = TextNode.stripLeadingWhitespace(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("#text", textNode0.nodeName());
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "j3/2`]+ =PhjO`";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`", textNode0.baseUri());
      assertNotNull(textNode0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Tag tag0 = Tag.valueOf(string0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("j3/2`]+ =phjo`", tag0.toString());
      assertEquals("j3/2`]+ =phjo`", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, string0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("j3/2`]+ =phjo`", tag0.toString());
      assertEquals("j3/2`]+ =phjo`", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("j3/2`]+ =phjo`", element0.nodeName());
      assertEquals("j3/2`]+ =PhjO`", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =phjo`", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(textNode0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`", textNode0.baseUri());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("j3/2`]+ =phjo`", tag0.toString());
      assertEquals("j3/2`]+ =phjo`", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("j3/2`]+ =phjo`", element0.nodeName());
      assertEquals("j3/2`]+ =PhjO`", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =phjo`", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =phjo`", element1.nodeName());
      assertEquals("j3/2`]+ =phjo`", element1.tagName());
      assertEquals("j3/2`]+ =PhjO`", element1.baseUri());
      assertNotNull(element1);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) element1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`", textNode0.baseUri());
      assertEquals("<j3/2`]+ =phjo`>\n j3/2`]+ =PhjO`\n</j3/2`]+ =phjo`>", stringBuilder0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("j3/2`]+ =phjo`", tag0.toString());
      assertEquals("j3/2`]+ =phjo`", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("j3/2`]+ =phjo`", element0.nodeName());
      assertEquals("j3/2`]+ =PhjO`", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =phjo`", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("j3/2`]+ =phjo`", element1.nodeName());
      assertEquals("j3/2`]+ =phjo`", element1.tagName());
      assertEquals("j3/2`]+ =PhjO`", element1.baseUri());
      assertEquals("<j3/2`]+ =phjo`>\n j3/2`]+ =PhjO`\n</j3/2`]+ =phjo`>", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotSame(textNode0, textNode1);
      assertNotSame(textNode1, textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`", textNode0.baseUri());
      assertEquals("j3/2`]+ =PhjO`", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertNotNull(textNode1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = true;
      element0.parentNode = (Node) textNode1;
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("j3/2`]+ =PhjO`", textNode0.baseUri());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("j3/2`]+ =phjo`", tag0.toString());
      assertEquals("j3/2`]+ =phjo`", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("j3/2`]+ =phjo`", element0.nodeName());
      assertEquals("j3/2`]+ =PhjO`", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("j3/2`]+ =phjo`", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`", textNode1.baseUri());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("j3/2`]+ =PhjO`", element0.parentNode.baseUri());
      assertEquals(1, element0.parentNode.siblingIndex());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.forceAllElementAsBlock(boolean0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.forceAllElementAsBlock());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.forceAllElementAsBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      // Undeclared exception!
      try { 
        textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = "\"d<x`YOIw1UN";
      TextNode textNode0 = new TextNode(string0, string0);
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string1 = "progress";
      Document document0 = new Document(string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("\"d<x`YOIw1UN", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("\"d<x`YOIw1UN", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("\"d<x`YOIw1UN", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.tagName(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("progress", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("\"d<x`YOIw1UN", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"d<x`YOIw1UN", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("progress", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      int int0 = (-1453);
      textNode0.setSiblingIndex(int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1453), textNode0.siblingIndex());
      
      String string2 = textNode0.absUrl(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1453), textNode0.siblingIndex());
      assertNotNull(string2);
      
      String string3 = TextNode.stripLeadingWhitespace(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("\"d<x`YOIw1UN", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals((-1453), textNode0.siblingIndex());
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
