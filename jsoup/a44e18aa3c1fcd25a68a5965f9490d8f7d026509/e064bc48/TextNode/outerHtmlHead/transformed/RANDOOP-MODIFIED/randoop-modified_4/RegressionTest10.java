import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean7 = outputSettings6.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings6.charset(charset12);
        boolean boolean14 = outputSettings13.getforceAllElementAsBlock();
        outputSettings13.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings13.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings13.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        outputSettings21.prettyPrint = false;
        java.nio.charset.Charset charset24 = outputSettings21.getcharset();
        outputSettings13.setcharset(charset24);
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings13.charset();
        boolean boolean28 = textNode2.equals((java.lang.Object) outputSettings13);
        outputSettings13.setforceAllElementAsBlock(true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        org.jsoup.nodes.TextNode textNode5 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str7 = textNode5.absUrl("#text");
        textNode5.ensureAttributes();
        org.jsoup.nodes.TextNode textNode10 = textNode5.text("#text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node11 = textNode2.before((org.jsoup.nodes.Node) textNode5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(textNode10);
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        outputSettings5.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings5.escapeMode;
        outputSettings2.setescapeMode(escapeMode10);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings2.prettyPrint(false);
        outputSettings2.setindentAmount((int) (short) -1);
        int int16 = outputSettings2.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings2.indentAmount(0);
        outputSettings2.prettyPrint = true;
        boolean boolean21 = outputSettings2.prettyPrint;
        outputSettings2.forceAllElementAsBlock = false;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.toString();
        java.lang.String str7 = textNode2.text;
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.siblingNodes();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("");
        textNode2.text = "#text";
        java.lang.String str13 = textNode2.text();
        boolean boolean14 = textNode2.isBlank();
        org.jsoup.nodes.Attributes attributes15 = textNode2.attributes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document18 = textNode2.ownerDocument();
        textNode2.text = "#text";
        java.lang.String str21 = textNode2.text();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertNull(document18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node1 = textNode0.clone();
        java.lang.String str2 = textNode0.getTEXT_KEY();
        boolean boolean3 = textNode0.isBlank();
        textNode0.settext("");
        java.lang.String str6 = textNode0.getTEXT_KEY();
        java.lang.String str7 = textNode0.outerHtml();
        org.jsoup.nodes.Node node8 = textNode0.parent();
        java.lang.String str9 = textNode0.baseUri();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "text" + "'", str2, "text");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings7.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings7.prettyPrint();
        boolean boolean10 = outputSettings7.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings7.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings16.clone();
        outputSettings16.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings12.escapeMode(escapeMode22);
        int int24 = outputSettings23.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.escapeMode;
        java.nio.charset.Charset charset29 = outputSettings27.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings27.clone();
        outputSettings27.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings27.escapeMode;
        int int34 = outputSettings27.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings27.prettyPrint(false);
        java.nio.charset.Charset charset37 = outputSettings27.charset();
        boolean boolean38 = outputSettings27.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings27.escapeMode;
        outputSettings23.escapeMode = escapeMode39;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings7.escapeMode(escapeMode39);
        boolean boolean42 = outputSettings7.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings7.indentAmount(52);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings44.clone();
        java.nio.charset.Charset charset46 = outputSettings45.getcharset();
        int int47 = outputSettings45.getindentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        outputSettings2.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset10 = outputSettings8.charset();
        outputSettings2.setcharset(charset10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings14.escapeMode;
        boolean boolean18 = outputSettings14.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings14.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings2.escapeMode(escapeMode22);
        boolean boolean25 = outputSettings2.forceAllElementAsBlock;
        boolean boolean26 = outputSettings2.prettyPrint();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        boolean boolean3 = textNode2.isBlank();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("text");
        textNode5.ensureAttributes();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        java.nio.charset.Charset charset13 = outputSettings11.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings11.escapeMode;
        boolean boolean15 = outputSettings11.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode;
        java.nio.charset.Charset charset20 = outputSettings18.charset();
        outputSettings18.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings18.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings11.escapeMode(escapeMode23);
        java.nio.charset.Charset charset25 = outputSettings11.charset;
        textNode5.outerHtmlTail(stringBuilder7, 1, outputSettings11);
        org.jsoup.nodes.Node node27 = textNode5.nextSibling();
        org.jsoup.nodes.TextNode textNode29 = textNode5.text("hi!");
        java.lang.String str30 = textNode29.gettext();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(textNode29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("#text");
        org.jsoup.nodes.Node node8 = textNode2.attr("hi!", "hi!");
        boolean boolean10 = textNode2.hasAttr("#text");
        boolean boolean11 = textNode2.isBlank();
        java.lang.String str12 = textNode2.text;
        java.lang.String str13 = textNode2.baseUri();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.toString();
        boolean boolean7 = textNode2.isBlank();
        boolean boolean9 = textNode2.hasAttr("");
        textNode2.settext("text");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        org.jsoup.nodes.Node node8 = textNode2.clone();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        outputSettings13.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings13.setcharset(charset21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings25.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings13.escapeMode(escapeMode33);
        boolean boolean36 = outputSettings35.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder9, (int) (byte) 0, outputSettings35);
        java.lang.String str38 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Document document39 = textNode2.ownerDocument();
        java.lang.String str40 = textNode2.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder41 = null;
        org.jsoup.nodes.TextNode textNode43 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node44 = textNode43.clone();
        java.lang.String str45 = textNode43.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder46 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings48.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings50.escapeMode;
        java.nio.charset.Charset charset52 = outputSettings50.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings50.clone();
        outputSettings53.indentAmount = 0;
        outputSettings53.setprettyPrint(false);
        outputSettings53.indentAmount = (short) 10;
        textNode43.outerHtmlTail(stringBuilder46, (int) '#', outputSettings53);
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = outputSettings53.getescapeMode();
        boolean boolean62 = outputSettings53.getforceAllElementAsBlock();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder41, (int) (byte) 100, outputSettings53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "text" + "'", str38, "text");
        org.junit.Assert.assertNull(document39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "text" + "'", str40, "text");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "text" + "'", str45, "text");
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode2.childNodes();
        java.lang.String str14 = textNode2.text;
        org.jsoup.nodes.Node node15 = textNode2.nextSibling();
        textNode2.setBaseUri("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        textNode2.text = "#text";
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        java.lang.String str10 = textNode9.getTEXT_KEY();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean12 = outputSettings11.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings11.charset(charset17);
        boolean boolean19 = outputSettings18.getforceAllElementAsBlock();
        boolean boolean20 = outputSettings18.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings23.escapeMode;
        boolean boolean27 = outputSettings23.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode;
        java.nio.charset.Charset charset32 = outputSettings30.charset();
        outputSettings30.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings30.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings23.escapeMode(escapeMode35);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount((int) 'a');
        java.nio.charset.Charset charset43 = outputSettings40.getcharset();
        outputSettings39.setcharset(charset43);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings47.escapeMode;
        java.nio.charset.Charset charset49 = outputSettings47.charset();
        outputSettings39.charset = charset49;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings23.charset(charset49);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings52.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings54.escapeMode;
        java.nio.charset.Charset charset56 = outputSettings54.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings54.escapeMode;
        boolean boolean58 = outputSettings54.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings59.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode;
        java.nio.charset.Charset charset63 = outputSettings61.charset();
        outputSettings61.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings61.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings54.escapeMode(escapeMode66);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings68.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings70.escapeMode;
        java.nio.charset.Charset charset72 = outputSettings70.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings70.escapeMode;
        boolean boolean74 = outputSettings70.prettyPrint;
        boolean boolean75 = outputSettings70.forceAllElementAsBlock;
        boolean boolean76 = outputSettings70.getforceAllElementAsBlock();
        boolean boolean77 = outputSettings70.getprettyPrint();
        java.nio.charset.Charset charset78 = outputSettings70.getcharset();
        outputSettings54.charset = charset78;
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings51.charset(charset78);
        outputSettings18.charset = charset78;
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings18.forceAllElementAsBlock(false);
        boolean boolean84 = textNode9.equals((java.lang.Object) false);
        java.lang.String str85 = textNode9.text;
        org.jsoup.nodes.TextNode textNode87 = textNode9.text("text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node88 = textNode87.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertNotNull(outputSettings83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(textNode87);
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset();
        outputSettings10.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings10.escapeMode;
        outputSettings10.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings10.charsetEncoder;
        outputSettings2.setcharsetEncoder(charsetEncoder18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings2.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings2.prettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings2.getcharsetEncoder();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        textNode2.settext("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.siblingNodes();
        java.lang.String str10 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.childNodes();
        org.jsoup.nodes.Attributes attributes12 = textNode2.attributes();
        java.lang.String str13 = textNode2.outerHtml();
        org.jsoup.nodes.Document document14 = textNode2.ownerDocument();
        java.lang.StringBuilder stringBuilder15 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode;
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings22.charset(charset28);
        outputSettings19.setcharset(charset28);
        boolean boolean31 = outputSettings19.prettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings19.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings35.escapeMode;
        outputSettings35.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings41.escapeMode;
        java.nio.charset.Charset charset43 = outputSettings41.charset();
        outputSettings35.setcharset(charset43);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings45.clone();
        outputSettings45.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings45.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings35.escapeMode(escapeMode51);
        outputSettings19.setescapeMode(escapeMode51);
        boolean boolean54 = outputSettings19.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder15, (int) (short) 100, outputSettings19);
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings19.escapeMode();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertNull(document14);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        textNode2.text = "#text";
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        java.lang.String str11 = textNode2.getTEXT_KEY();
        java.lang.String str12 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        textNode2.ensureAttributes();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        java.lang.String str5 = textNode2.getWholeText();
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings9.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.escapeMode(escapeMode14);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings15.clone();
        outputSettings15.indentAmount = (short) 1;
        boolean boolean19 = outputSettings15.prettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings15.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings15.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode;
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings26.clone();
        outputSettings26.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings26.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings22.escapeMode(escapeMode32);
        int int34 = outputSettings33.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings37.escapeMode;
        java.nio.charset.Charset charset39 = outputSettings37.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings37.clone();
        outputSettings37.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings37.escapeMode;
        int int44 = outputSettings37.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings37.prettyPrint(false);
        java.nio.charset.Charset charset47 = outputSettings37.charset();
        boolean boolean48 = outputSettings37.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings37.escapeMode;
        outputSettings33.escapeMode = escapeMode49;
        outputSettings33.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings53.clone();
        boolean boolean57 = outputSettings53.getforceAllElementAsBlock();
        outputSettings53.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder60 = outputSettings53.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings61.indentAmount((int) 'a');
        java.nio.charset.Charset charset64 = outputSettings61.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings53.charset(charset64);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings33.charset(charset64);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings15.charset(charset64);
        outputSettings15.prettyPrint = false;
        int int70 = outputSettings15.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings71.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings74.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode77 = outputSettings76.escapeMode;
        java.nio.charset.Charset charset78 = outputSettings76.charset();
        outputSettings76.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode81 = outputSettings76.escapeMode;
        outputSettings73.setescapeMode(escapeMode81);
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings73.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode85 = outputSettings73.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings86.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode89 = outputSettings88.escapeMode;
        java.nio.charset.Charset charset90 = outputSettings88.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings88.clone();
        outputSettings88.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode94 = outputSettings88.escapeMode;
        boolean boolean95 = outputSettings88.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode96 = outputSettings88.escapeMode();
        outputSettings73.escapeMode = escapeMode96;
        outputSettings15.setescapeMode(escapeMode96);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charsetEncoder60);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + escapeMode77 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode77.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertTrue("'" + escapeMode81 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode81.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertTrue("'" + escapeMode85 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode85.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertTrue("'" + escapeMode89 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode89.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset90);
        org.junit.Assert.assertNotNull(outputSettings91);
        org.junit.Assert.assertTrue("'" + escapeMode94 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode94.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + escapeMode96 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode96.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node1 = textNode0.clone();
        java.lang.String str2 = textNode0.getTEXT_KEY();
        boolean boolean3 = textNode0.isBlank();
        textNode0.settext("");
        org.jsoup.nodes.Node node6 = textNode0.clone();
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str11 = textNode9.absUrl("#text");
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings16.escapeMode;
        boolean boolean20 = outputSettings16.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        outputSettings23.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings23.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings16.escapeMode(escapeMode28);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings32.escapeMode;
        boolean boolean36 = outputSettings32.prettyPrint;
        boolean boolean37 = outputSettings32.forceAllElementAsBlock;
        boolean boolean38 = outputSettings32.getforceAllElementAsBlock();
        boolean boolean39 = outputSettings32.getprettyPrint();
        java.nio.charset.Charset charset40 = outputSettings32.getcharset();
        outputSettings16.charset = charset40;
        textNode9.outerHtmlTail(stringBuilder12, (int) (short) 1, outputSettings16);
        java.lang.String str44 = textNode9.absUrl("hi!");
        org.jsoup.nodes.Document document45 = textNode9.ownerDocument();
        org.jsoup.nodes.Node node46 = textNode9.previousSibling();
        org.jsoup.nodes.Node node49 = textNode9.attr("text", "text");
        // The following exception was thrown during execution in test generation
        try {
            textNode0.replaceWith(node49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "text" + "'", str2, "text");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(document45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.toString();
        java.lang.String str7 = textNode2.outerHtml();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings13.escapeMode;
        boolean boolean17 = outputSettings13.prettyPrint;
        boolean boolean18 = outputSettings13.forceAllElementAsBlock;
        boolean boolean19 = outputSettings13.getforceAllElementAsBlock();
        boolean boolean20 = outputSettings13.getprettyPrint();
        boolean boolean21 = outputSettings13.getprettyPrint();
        outputSettings13.setindentAmount(97);
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) 1, outputSettings13);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node26 = textNode2.before("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        org.jsoup.nodes.Node node8 = textNode2.clone();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        outputSettings13.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings13.setcharset(charset21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings25.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings13.escapeMode(escapeMode33);
        boolean boolean36 = outputSettings35.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder9, (int) (byte) 0, outputSettings35);
        java.lang.String str38 = textNode2.nodeName();
        java.lang.String str39 = textNode2.nodeName();
        boolean boolean41 = textNode2.hasAttr("text");
        org.jsoup.nodes.Node node42 = null;
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith(node42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "#text" + "'", str38, "#text");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "#text" + "'", str39, "#text");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        java.nio.charset.Charset charset3 = outputSettings0.getcharset();
        boolean boolean4 = outputSettings0.prettyPrint;
        java.nio.charset.Charset charset5 = outputSettings0.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings0.getescapeMode();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.charset("i!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: i!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        outputSettings2.indentAmount = '4';
        boolean boolean12 = outputSettings2.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.nodeName();
        boolean boolean13 = textNode2.hasAttr("hi!");
        java.lang.String str14 = textNode2.outerHtml();
        java.lang.String str15 = textNode2.toString();
        org.jsoup.nodes.Node node18 = textNode2.attr("text", "hi!");
        int int19 = textNode2.siblingIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        int int6 = outputSettings2.indentAmount;
        outputSettings2.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset9 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings12.escapeMode;
        java.nio.charset.Charset charset14 = outputSettings12.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings12.clone();
        outputSettings15.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset;
        outputSettings15.setcharset(charset22);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings15.forceAllElementAsBlock(false);
        outputSettings15.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings28.charset(charset34);
        outputSettings15.charset = charset34;
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings15.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings15.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings2.escapeMode(escapeMode38);
        outputSettings2.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings44.escapeMode;
        java.nio.charset.Charset charset46 = outputSettings44.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.clone();
        outputSettings44.forceAllElementAsBlock = true;
        outputSettings44.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings44.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings53.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode;
        java.nio.charset.Charset charset59 = outputSettings57.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings57.clone();
        outputSettings60.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings63.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.escapeMode;
        java.nio.charset.Charset charset67 = outputSettings65.charset;
        outputSettings60.setcharset(charset67);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings69.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings71.escapeMode;
        java.nio.charset.Charset charset73 = outputSettings71.charset();
        outputSettings71.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings71.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings77.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = outputSettings79.escapeMode;
        java.nio.charset.Charset charset81 = outputSettings79.charset();
        outputSettings79.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings79.escapeMode;
        outputSettings79.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder87 = outputSettings79.charsetEncoder;
        outputSettings71.setcharsetEncoder(charsetEncoder87);
        outputSettings60.setcharsetEncoder(charsetEncoder87);
        org.jsoup.nodes.Entities.EscapeMode escapeMode90 = outputSettings60.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings53.escapeMode(escapeMode90);
        int int92 = outputSettings91.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings94 = outputSettings91.indentAmount(52);
        java.nio.charset.Charset charset95 = outputSettings94.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings96 = outputSettings2.charset(charset95);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertTrue("'" + escapeMode80 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode80.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset81);
        org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder87);
        org.junit.Assert.assertTrue("'" + escapeMode90 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode90.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
        org.junit.Assert.assertNotNull(outputSettings94);
        org.junit.Assert.assertNotNull(charset95);
        org.junit.Assert.assertNotNull(outputSettings96);
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        org.jsoup.nodes.Node node19 = textNode2.nextSibling();
        java.lang.String str20 = textNode2.baseUri();
        java.lang.String str21 = textNode2.baseUri();
        java.lang.String str22 = textNode2.text;
        org.jsoup.nodes.Node node23 = textNode2.parent();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node25 = textNode2.before("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        org.jsoup.nodes.Node node8 = textNode2.clone();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        outputSettings13.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings13.setcharset(charset21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings25.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings13.escapeMode(escapeMode33);
        boolean boolean36 = outputSettings35.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder9, (int) (byte) 0, outputSettings35);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings40.escapeMode;
        java.nio.charset.Charset charset42 = outputSettings40.charset();
        outputSettings40.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings40.escapeMode;
        outputSettings35.escapeMode = escapeMode45;
        outputSettings35.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings51.escapeMode;
        java.nio.charset.Charset charset53 = outputSettings51.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings51.escapeMode;
        boolean boolean55 = outputSettings51.prettyPrint;
        boolean boolean56 = outputSettings51.forceAllElementAsBlock;
        boolean boolean57 = outputSettings51.getforceAllElementAsBlock();
        boolean boolean58 = outputSettings51.getprettyPrint();
        boolean boolean59 = outputSettings51.getprettyPrint();
        outputSettings51.setindentAmount(97);
        java.nio.charset.Charset charset62 = outputSettings51.charset;
        outputSettings35.setcharset(charset62);
        java.nio.charset.Charset charset64 = null;
        outputSettings35.setcharset(charset64);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(charset62);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings5.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        outputSettings8.setprettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings8.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings8.clone();
        boolean boolean14 = outputSettings8.prettyPrint;
        boolean boolean15 = outputSettings8.prettyPrint();
        outputSettings8.prettyPrint = false;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.setindentAmount((int) (short) 10);
        outputSettings5.setindentAmount(97);
        outputSettings5.setindentAmount((int) (byte) 10);
        boolean boolean12 = outputSettings5.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings5.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings16.escapeMode;
        int int20 = outputSettings16.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings16.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder22 = null;
        outputSettings16.charsetEncoder = charsetEncoder22;
        boolean boolean24 = outputSettings16.forceAllElementAsBlock;
        java.nio.charset.Charset charset25 = outputSettings16.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings5.charset(charset25);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(outputSettings26);
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.toString();
        java.lang.String str7 = textNode2.text;
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.siblingNodes();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("");
        org.jsoup.nodes.Node node11 = textNode2.nextSibling();
        org.jsoup.nodes.Node node12 = textNode2.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = node12.after("text");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str10 = textNode2.absUrl("text");
        java.lang.String str11 = textNode2.getWholeText();
        java.lang.String str13 = textNode2.attr("#text");
        org.jsoup.nodes.Node node14 = textNode2.parent();
        textNode2.setBaseUri("#");
        org.jsoup.select.NodeVisitor nodeVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode2.traverse(nodeVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        outputSettings5.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings5.escapeMode;
        outputSettings2.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings2.getprettyPrint();
        outputSettings2.indentAmount = 97;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings2.clone();
        outputSettings15.setindentAmount((int) (short) 1);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings15.prettyPrint(true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings19);
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.nodeName();
        java.lang.String str13 = textNode2.absUrl("#text");
        org.jsoup.nodes.Attributes attributes14 = textNode2.attributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode16 = textNode2.splitText((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(attributes14);
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings0.getprettyPrint();
        boolean boolean9 = outputSettings0.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings0.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.getcharsetEncoder();
        java.nio.charset.Charset charset12 = outputSettings0.charset();
        boolean boolean13 = outputSettings0.getprettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings5.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings5.charsetEncoder;
        java.nio.charset.Charset charset9 = outputSettings5.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings12.escapeMode;
        java.nio.charset.Charset charset14 = outputSettings12.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings12.escapeMode;
        boolean boolean16 = outputSettings12.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings19.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings19.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings12.escapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings28.escapeMode;
        java.nio.charset.Charset charset30 = outputSettings28.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings28.escapeMode;
        boolean boolean32 = outputSettings28.prettyPrint;
        boolean boolean33 = outputSettings28.forceAllElementAsBlock;
        boolean boolean34 = outputSettings28.getforceAllElementAsBlock();
        boolean boolean35 = outputSettings28.getprettyPrint();
        java.nio.charset.Charset charset36 = outputSettings28.getcharset();
        outputSettings12.charset = charset36;
        outputSettings5.charset = charset36;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings5.prettyPrint(true);
        outputSettings5.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings5.clone();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(outputSettings43);
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        java.lang.String str12 = textNode2.baseUri();
        java.lang.String str13 = textNode2.getTEXT_KEY();
        java.lang.String str15 = textNode2.absUrl("hi!");
        boolean boolean16 = textNode2.isBlank();
        java.lang.String str17 = textNode2.getWholeText();
        boolean boolean19 = textNode2.hasAttr("");
        java.lang.String str20 = textNode2.text();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings9.clone();
        outputSettings12.indentAmount = 10;
        textNode2.outerHtmlTail(stringBuilder7, 100, outputSettings12);
        org.jsoup.nodes.Node node16 = textNode2.nextSibling();
        org.jsoup.nodes.Attributes attributes17 = textNode2.attributes();
        java.lang.String str18 = textNode2.baseUri();
        java.lang.String str19 = textNode2.text;
        java.lang.String str21 = textNode2.absUrl("i!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        textNode2.settext("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.siblingNodes();
        java.lang.String str10 = textNode2.nodeName();
        java.lang.String str11 = textNode2.baseUri();
        java.lang.String str12 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("text");
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode14.childNodes();
        org.jsoup.nodes.Attributes attributes16 = textNode14.attributes();
        java.lang.String str18 = textNode14.absUrl("#");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        boolean boolean10 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings13.escapeMode;
        boolean boolean17 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        outputSettings20.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings20.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings13.escapeMode(escapeMode25);
        outputSettings2.setescapeMode(escapeMode25);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        java.nio.charset.Charset charset35 = outputSettings33.charset();
        outputSettings33.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings33.escapeMode;
        outputSettings30.setescapeMode(escapeMode38);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings30.prettyPrint(false);
        java.nio.charset.Charset charset42 = outputSettings41.getcharset();
        outputSettings2.charset = charset42;
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings2.escapeMode;
        int int45 = outputSettings2.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings2.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings48.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.indentAmount((int) 'a');
        java.nio.charset.Charset charset54 = outputSettings51.getcharset();
        outputSettings50.setcharset(charset54);
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode;
        java.nio.charset.Charset charset60 = outputSettings58.charset();
        outputSettings50.charset = charset60;
        boolean boolean62 = outputSettings50.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings50.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings2.escapeMode(escapeMode63);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings65.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings67.escapeMode;
        java.nio.charset.Charset charset69 = outputSettings67.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode70 = outputSettings67.escapeMode;
        boolean boolean71 = outputSettings67.prettyPrint;
        boolean boolean72 = outputSettings67.forceAllElementAsBlock;
        boolean boolean73 = outputSettings67.getforceAllElementAsBlock();
        boolean boolean74 = outputSettings67.getprettyPrint();
        java.nio.charset.Charset charset75 = outputSettings67.getcharset();
        outputSettings67.indentAmount = (short) -1;
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings67.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings80.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings83.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode86 = outputSettings85.escapeMode;
        java.nio.charset.Charset charset87 = outputSettings85.charset();
        outputSettings85.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode90 = outputSettings85.escapeMode;
        outputSettings82.setescapeMode(escapeMode90);
        org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings82.prettyPrint(false);
        java.nio.charset.Charset charset94 = outputSettings93.getcharset();
        outputSettings67.charset = charset94;
        outputSettings67.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder98 = outputSettings67.encoder();
        outputSettings64.setcharsetEncoder(charsetEncoder98);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertNotNull(outputSettings85);
        org.junit.Assert.assertTrue("'" + escapeMode86 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode86.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset87);
        org.junit.Assert.assertTrue("'" + escapeMode90 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode90.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings93);
        org.junit.Assert.assertNotNull(charset94);
        org.junit.Assert.assertNotNull(charsetEncoder98);
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("#text");
        org.jsoup.nodes.Node node8 = textNode2.attr("hi!", "hi!");
        boolean boolean10 = textNode2.hasAttr("#text");
        boolean boolean11 = textNode2.isBlank();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("");
        int int15 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node16 = textNode2.parent();
        java.lang.String str18 = textNode2.attr("hi!");
        org.jsoup.nodes.Attributes attributes19 = textNode2.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(attributes19);
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.gettext();
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str14 = textNode12.attr("text");
        boolean boolean15 = textNode2.equals((java.lang.Object) textNode12);
        java.lang.String str17 = textNode12.absUrl("text");
        org.jsoup.nodes.Node node18 = textNode12.previousSibling();
        org.jsoup.nodes.TextNode textNode20 = textNode12.text("");
        org.jsoup.nodes.TextNode textNode22 = textNode20.text("hi!");
        java.lang.StringBuilder stringBuilder23 = null;
        org.jsoup.nodes.TextNode textNode27 = new org.jsoup.nodes.TextNode("", "");
        java.lang.StringBuilder stringBuilder28 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings32.clone();
        outputSettings32.forceAllElementAsBlock = true;
        outputSettings32.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings32.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings41.escapeMode;
        textNode27.outerHtmlTail(stringBuilder28, (int) '4', outputSettings41);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings46.escapeMode;
        java.nio.charset.Charset charset48 = outputSettings46.charset();
        outputSettings46.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings46.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings46.indentAmount((int) (byte) 10);
        boolean boolean54 = outputSettings46.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode;
        java.nio.charset.Charset charset59 = outputSettings57.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings57.escapeMode;
        boolean boolean61 = outputSettings57.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings62.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = outputSettings64.escapeMode;
        java.nio.charset.Charset charset66 = outputSettings64.charset();
        outputSettings64.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings64.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings57.escapeMode(escapeMode69);
        outputSettings46.setescapeMode(escapeMode69);
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings72.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings75.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings77.escapeMode;
        java.nio.charset.Charset charset79 = outputSettings77.charset();
        outputSettings77.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode82 = outputSettings77.escapeMode;
        outputSettings74.setescapeMode(escapeMode82);
        org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings74.prettyPrint(false);
        java.nio.charset.Charset charset86 = outputSettings85.getcharset();
        outputSettings46.charset = charset86;
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings41.charset(charset86);
        // The following exception was thrown during execution in test generation
        try {
            textNode20.outerHtmlHead(stringBuilder23, (int) 'a', outputSettings88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset79);
        org.junit.Assert.assertTrue("'" + escapeMode82 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode82.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings85);
        org.junit.Assert.assertNotNull(charset86);
        org.junit.Assert.assertNotNull(outputSettings88);
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        boolean boolean3 = outputSettings2.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode;
        java.nio.charset.Charset charset8 = outputSettings6.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings6.escapeMode;
        boolean boolean10 = outputSettings6.prettyPrint;
        outputSettings6.setindentAmount(1);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        outputSettings15.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings15.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings15.indentAmount((int) (byte) 10);
        boolean boolean23 = outputSettings15.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode;
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        outputSettings26.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings26.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings26.indentAmount((int) (byte) 10);
        boolean boolean34 = outputSettings26.forceAllElementAsBlock;
        java.nio.charset.Charset charset35 = outputSettings26.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings15.charset(charset35);
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings15.encoder();
        outputSettings6.charsetEncoder = charsetEncoder37;
        outputSettings2.setcharsetEncoder(charsetEncoder37);
        boolean boolean40 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings2.getescapeMode();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        org.jsoup.nodes.Node node7 = textNode2.clone();
        java.lang.String str8 = textNode2.getWholeText();
        java.lang.String str10 = textNode2.absUrl("#text");
        java.lang.String str11 = textNode2.nodeName();
        java.lang.String str12 = textNode2.nodeName();
        java.lang.String str14 = textNode2.absUrl("#text");
        boolean boolean15 = textNode2.isBlank();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.siblingNodes();
        boolean boolean10 = textNode2.hasAttr("i!");
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.siblingNodes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeList11);
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node7 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        java.lang.String str10 = textNode2.absUrl("hi!");
        java.lang.String str11 = textNode2.baseUri();
        org.jsoup.nodes.Node node14 = textNode2.attr("#text", "");
        java.lang.StringBuilder stringBuilder15 = null;
        org.jsoup.nodes.TextNode textNode19 = new org.jsoup.nodes.TextNode("", "");
        java.lang.StringBuilder stringBuilder20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode;
        java.nio.charset.Charset charset26 = outputSettings24.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings24.clone();
        outputSettings24.forceAllElementAsBlock = true;
        outputSettings24.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings24.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        textNode19.outerHtmlTail(stringBuilder20, (int) '4', outputSettings33);
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings33.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings33.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings33.clone();
        java.nio.charset.Charset charset39 = outputSettings33.charset();
        textNode2.outerHtmlTail(stringBuilder15, (int) 'a', outputSettings33);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNotNull(charset39);
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings9.escapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings25.getprettyPrint();
        java.nio.charset.Charset charset33 = outputSettings25.getcharset();
        outputSettings9.charset = charset33;
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 1, outputSettings9);
        java.lang.String str36 = textNode2.getTEXT_KEY();
        java.util.List<org.jsoup.nodes.Node> nodeList37 = textNode2.siblingNodes();
        org.jsoup.nodes.TextNode textNode39 = textNode2.text("h");
        boolean boolean41 = textNode39.hasAttr("text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "text" + "'", str36, "text");
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertNotNull(textNode39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings0.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings9.clone();
        outputSettings9.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings9.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings9.clone();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings9.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        boolean boolean20 = outputSettings0.getforceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings0.charsetEncoder;
        outputSettings0.indentAmount = '4';
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charsetEncoder21);
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset;
        outputSettings5.setcharset(charset12);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings5.forceAllElementAsBlock(false);
        outputSettings5.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings20.clone();
        java.nio.charset.Charset charset24 = outputSettings20.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        java.nio.charset.Charset charset28 = outputSettings25.getcharset();
        boolean boolean29 = outputSettings25.prettyPrint();
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        outputSettings33.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        outputSettings33.setcharset(charset41);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings45.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings45.escapeMode;
        boolean boolean49 = outputSettings45.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings45.escapeMode(escapeMode53);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings33.escapeMode(escapeMode53);
        outputSettings25.setescapeMode(escapeMode53);
        outputSettings20.escapeMode = escapeMode53;
        java.nio.charset.Charset charset58 = outputSettings20.charset();
        outputSettings5.charset = charset58;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings5.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings60.forceAllElementAsBlock(false);
        int int63 = outputSettings62.indentAmount;
        java.nio.charset.Charset charset64 = outputSettings62.charset;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(charset64);
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        java.nio.charset.Charset charset6 = outputSettings3.getcharset();
        outputSettings2.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        outputSettings15.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings15.escapeMode;
        outputSettings12.setescapeMode(escapeMode20);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings12.prettyPrint(false);
        outputSettings12.setindentAmount((int) (short) -1);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings12.encoder();
        outputSettings9.charsetEncoder = charsetEncoder26;
        int int28 = outputSettings9.getindentAmount();
        boolean boolean29 = outputSettings9.forceAllElementAsBlock();
        outputSettings9.setforceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings9.getcharsetEncoder();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charsetEncoder32);
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        org.jsoup.nodes.Node node7 = textNode2.clone();
        java.lang.String str8 = textNode2.getWholeText();
        boolean boolean10 = textNode2.hasAttr("text");
        textNode2.text = "#";
        int int13 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node14 = textNode2.parent();
        java.lang.String str15 = textNode2.text;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#" + "'", str15, "#");
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        int int6 = outputSettings2.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings2.encoder();
        java.nio.charset.Charset charset8 = outputSettings2.charset;
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings2.charsetEncoder;
        outputSettings2.prettyPrint = true;
        boolean boolean12 = outputSettings2.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.clone();
        outputSettings15.forceAllElementAsBlock = true;
        outputSettings15.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings15.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode;
        outputSettings2.setescapeMode(escapeMode25);
        outputSettings2.setprettyPrint(false);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node16 = textNode2.after("i!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(textNode14);
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        org.jsoup.nodes.Node node16 = textNode2.attr("text", "");
        java.lang.String str17 = textNode2.gettext();
        java.lang.String str18 = textNode2.outerHtml();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#text" + "'", str17, "#text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.text();
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings14.clone();
        boolean boolean18 = outputSettings17.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings17.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.clone();
        textNode2.outerHtmlTail(stringBuilder10, (int) ' ', outputSettings20);
        outputSettings20.forceAllElementAsBlock = true;
        boolean boolean24 = outputSettings20.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.escapeMode;
        java.nio.charset.Charset charset29 = outputSettings27.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings27.clone();
        boolean boolean31 = outputSettings30.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings30.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings30.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings36.escapeMode;
        outputSettings36.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings42.escapeMode;
        java.nio.charset.Charset charset44 = outputSettings42.charset();
        outputSettings36.setcharset(charset44);
        outputSettings30.charset = charset44;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings20.charset(charset44);
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings47.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings47.escapeMode();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        outputSettings9.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings2.escapeMode(escapeMode14);
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.prettyPrint(false);
        outputSettings15.setindentAmount(0);
        java.nio.charset.Charset charset21 = outputSettings15.charset;
        java.nio.charset.Charset charset22 = outputSettings15.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings15.escapeMode;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        boolean boolean4 = outputSettings2.forceAllElementAsBlock();
        int int5 = outputSettings2.getindentAmount();
        outputSettings2.indentAmount = (-1);
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        textNode2.ensureAttributes();
        java.lang.String str21 = textNode2.nodeName();
        java.lang.String str22 = textNode2.text;
        java.lang.String str23 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode25 = textNode2.splitText(0);
        java.lang.String str27 = textNode2.absUrl("#text");
        textNode2.ensureAttributes();
        java.lang.String str29 = textNode2.nodeName();
        java.lang.StringBuilder stringBuilder30 = null;
        org.jsoup.nodes.TextNode textNode34 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str35 = textNode34.text;
        java.lang.String str36 = textNode34.outerHtml();
        java.lang.String str37 = textNode34.getTEXT_KEY();
        java.lang.String str38 = textNode34.nodeName();
        boolean boolean40 = textNode34.equals((java.lang.Object) (short) 1);
        textNode34.setBaseUri("#text");
        org.jsoup.nodes.Node node43 = textNode34.parent();
        java.lang.String str44 = textNode34.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList45 = textNode34.siblingNodes();
        textNode34.setBaseUri("#");
        java.lang.StringBuilder stringBuilder48 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        java.nio.charset.Charset charset54 = outputSettings52.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings52.clone();
        java.nio.charset.Charset charset56 = outputSettings52.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings57.indentAmount((int) 'a');
        java.nio.charset.Charset charset60 = outputSettings57.getcharset();
        boolean boolean61 = outputSettings57.prettyPrint();
        boolean boolean62 = outputSettings57.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings63.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.escapeMode;
        outputSettings65.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings69.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings71.escapeMode;
        java.nio.charset.Charset charset73 = outputSettings71.charset();
        outputSettings65.setcharset(charset73);
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings75.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings77.escapeMode;
        java.nio.charset.Charset charset79 = outputSettings77.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = outputSettings77.escapeMode;
        boolean boolean81 = outputSettings77.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings82.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode85 = outputSettings84.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings77.escapeMode(escapeMode85);
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings65.escapeMode(escapeMode85);
        outputSettings57.setescapeMode(escapeMode85);
        outputSettings52.escapeMode = escapeMode85;
        java.nio.charset.Charset charset90 = outputSettings52.charset();
        textNode34.outerHtmlTail(stringBuilder48, (int) ' ', outputSettings52);
        textNode2.outerHtmlTail(stringBuilder30, (int) (byte) 100, outputSettings52);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node94 = textNode2.wrap("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#text" + "'", str23, "#text");
        org.junit.Assert.assertNotNull(textNode25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "#text" + "'", str29, "#text");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "text" + "'", str37, "text");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "#text" + "'", str38, "#text");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset79);
        org.junit.Assert.assertTrue("'" + escapeMode80 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode80.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertTrue("'" + escapeMode85 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode85.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings86);
        org.junit.Assert.assertNotNull(outputSettings87);
        org.junit.Assert.assertNotNull(charset90);
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "#text");
        org.jsoup.nodes.TextNode textNode5 = new org.jsoup.nodes.TextNode("", "");
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings10.clone();
        outputSettings10.forceAllElementAsBlock = true;
        outputSettings10.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings10.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        textNode5.outerHtmlTail(stringBuilder6, (int) '4', outputSettings19);
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings19.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings19.clone();
        boolean boolean24 = textNode2.equals((java.lang.Object) outputSettings19);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node26 = textNode2.removeAttr("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        java.lang.String str12 = textNode2.baseUri();
        java.lang.String str13 = textNode2.getTEXT_KEY();
        java.lang.String str15 = textNode2.absUrl("hi!");
        org.jsoup.nodes.Node node16 = textNode2.previousSibling();
        java.lang.String str17 = textNode2.getWholeText();
        java.lang.String str18 = textNode2.text();
        java.lang.String str19 = textNode2.baseUri();
        textNode2.text = "hi!";
        int int22 = textNode2.siblingIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode2.childNode((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#text" + "'", str19, "#text");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean10 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings9.charset(charset15);
        boolean boolean17 = outputSettings9.getprettyPrint();
        boolean boolean18 = outputSettings9.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        outputSettings9.setescapeMode(escapeMode22);
        outputSettings2.setescapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings2.prettyPrint(false);
        java.nio.charset.Charset charset27 = outputSettings26.charset();
        boolean boolean28 = outputSettings26.getprettyPrint();
        boolean boolean29 = outputSettings26.prettyPrint();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings26.charset("h");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: h");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "");
        java.lang.String str3 = textNode2.outerHtml();
        java.lang.String str4 = textNode2.toString();
        org.jsoup.nodes.Node node5 = textNode2.clone();
        java.lang.String str6 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node8 = textNode2.before("h");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        textNode2.text = "#text";
        boolean boolean9 = textNode2.hasAttr("#");
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document11 = node10.ownerDocument();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings9.escapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings25.getprettyPrint();
        java.nio.charset.Charset charset33 = outputSettings25.getcharset();
        outputSettings9.charset = charset33;
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 1, outputSettings9);
        java.lang.String str37 = textNode2.absUrl("hi!");
        org.jsoup.nodes.Document document38 = textNode2.ownerDocument();
        java.lang.StringBuilder stringBuilder39 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings43.escapeMode;
        java.nio.charset.Charset charset45 = outputSettings43.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings43.clone();
        outputSettings46.indentAmount = 0;
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings46.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        java.nio.charset.Charset charset54 = outputSettings52.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings52.clone();
        boolean boolean56 = outputSettings55.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings55.escapeMode;
        java.nio.charset.Charset charset58 = outputSettings55.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings46.charset(charset58);
        int int60 = outputSettings46.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings46.charsetEncoder;
        textNode2.outerHtmlTail(stringBuilder39, (int) (short) 100, outputSettings46);
        int int63 = textNode2.siblingIndex();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(document38);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        int int6 = outputSettings2.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings2.encoder();
        java.nio.charset.Charset charset8 = outputSettings2.charset;
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings2.charsetEncoder;
        outputSettings2.prettyPrint = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings2.getescapeMode();
        int int13 = outputSettings2.indentAmount;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        org.jsoup.nodes.Node node16 = textNode2.attr("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList17 = node16.childNodes();
        java.lang.String str18 = node16.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList19 = node16.siblingNodes();
        org.jsoup.select.NodeVisitor nodeVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node21 = node16.traverse(nodeVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#text" + "'", str18, "#text");
        org.junit.Assert.assertNotNull(nodeList19);
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.prettyPrint = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings5.escapeMode;
        int int9 = outputSettings5.indentAmount;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "");
        org.jsoup.nodes.Node node5 = textNode2.attr("text", "hi!");
        org.jsoup.nodes.TextNode textNode8 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str9 = textNode8.text;
        java.lang.String str10 = textNode8.outerHtml();
        textNode8.setBaseUri("hi!");
        java.lang.String str13 = textNode8.text;
        org.jsoup.nodes.TextNode textNode15 = textNode8.text("hi!");
        org.jsoup.nodes.Node node16 = textNode8.clone();
        java.lang.String str18 = textNode8.attr("text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node19 = node5.after((org.jsoup.nodes.Node) textNode8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings5.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings5.charsetEncoder;
        outputSettings5.indentAmount = 10;
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings5.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings5.forceAllElementAsBlock(false);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(outputSettings13);
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        java.lang.String str12 = textNode2.baseUri();
        java.lang.String str13 = textNode2.getTEXT_KEY();
        java.lang.String str15 = textNode2.absUrl("hi!");
        textNode2.text = "#text";
        java.lang.String str18 = textNode2.toString();
        java.lang.String str19 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = textNode2.absUrl("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        textNode2.settext("#text");
        org.jsoup.nodes.Attributes attributes9 = textNode2.attributes();
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        java.lang.String str11 = textNode2.text();
        java.lang.String str12 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode16 = textNode14.splitText((int) (byte) 0);
        org.jsoup.nodes.Node node18 = textNode16.removeAttr("text");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        boolean boolean6 = textNode2.hasAttr("text");
        textNode2.settext("hi!");
        org.jsoup.nodes.Node node11 = textNode2.attr("#", "#text");
        org.jsoup.nodes.Document document12 = textNode2.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = document12.parent();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(document12);
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        java.lang.String str9 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        java.nio.charset.Charset charset14 = outputSettings11.getcharset();
        boolean boolean15 = outputSettings11.prettyPrint();
        boolean boolean16 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        outputSettings19.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        outputSettings19.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode;
        java.nio.charset.Charset charset33 = outputSettings31.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings31.escapeMode;
        boolean boolean35 = outputSettings31.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings31.escapeMode(escapeMode39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings19.escapeMode(escapeMode39);
        outputSettings11.setescapeMode(escapeMode39);
        boolean boolean43 = textNode2.equals((java.lang.Object) escapeMode39);
        textNode2.settext("hi!");
        java.lang.String str47 = textNode2.attr("");
        java.lang.String str48 = textNode2.getTEXT_KEY();
        textNode2.settext("#text");
        boolean boolean52 = textNode2.hasAttr("#");
        textNode2.settext("i!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "text" + "'", str48, "text");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node8 = textNode2.attr("hi!", "#text");
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("");
        java.lang.String str11 = textNode10.text();
        boolean boolean13 = textNode10.hasAttr("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = textNode10.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset;
        outputSettings5.setcharset(charset12);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings5.forceAllElementAsBlock(false);
        outputSettings5.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings20.clone();
        java.nio.charset.Charset charset24 = outputSettings20.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        java.nio.charset.Charset charset28 = outputSettings25.getcharset();
        boolean boolean29 = outputSettings25.prettyPrint();
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        outputSettings33.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        outputSettings33.setcharset(charset41);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings45.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings45.escapeMode;
        boolean boolean49 = outputSettings45.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings45.escapeMode(escapeMode53);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings33.escapeMode(escapeMode53);
        outputSettings25.setescapeMode(escapeMode53);
        outputSettings20.escapeMode = escapeMode53;
        java.nio.charset.Charset charset58 = outputSettings20.charset();
        outputSettings5.charset = charset58;
        outputSettings5.forceAllElementAsBlock = false;
        boolean boolean62 = outputSettings5.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.nodeName();
        boolean boolean13 = textNode2.hasAttr("hi!");
        java.lang.String str14 = textNode2.outerHtml();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode2.siblingNodes();
        java.lang.String str16 = textNode2.text();
        java.lang.String str17 = textNode2.getTEXT_KEY();
        java.lang.String str18 = textNode2.text();
        java.lang.String str19 = textNode2.outerHtml();
        java.lang.String str21 = textNode2.attr("");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node23 = textNode2.after("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        int int11 = textNode2.siblingIndex();
        java.lang.String str13 = textNode2.attr("#text");
        java.lang.String str14 = textNode2.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode16 = textNode2.splitText((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        boolean boolean10 = outputSettings2.forceAllElementAsBlock();
        outputSettings2.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.clone();
        outputSettings15.forceAllElementAsBlock = true;
        outputSettings15.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings15.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings24.charsetEncoder;
        outputSettings2.charsetEncoder = charsetEncoder25;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings29.escapeMode;
        java.nio.charset.Charset charset31 = outputSettings29.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings29.clone();
        boolean boolean33 = outputSettings32.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder34 = outputSettings32.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings32.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.escapeMode;
        java.nio.charset.Charset charset40 = outputSettings38.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings38.escapeMode;
        boolean boolean42 = outputSettings38.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings45.charset();
        outputSettings45.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings45.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings38.escapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings52.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings54.escapeMode;
        java.nio.charset.Charset charset56 = outputSettings54.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings54.escapeMode;
        boolean boolean58 = outputSettings54.prettyPrint;
        boolean boolean59 = outputSettings54.forceAllElementAsBlock;
        boolean boolean60 = outputSettings54.getforceAllElementAsBlock();
        boolean boolean61 = outputSettings54.getprettyPrint();
        java.nio.charset.Charset charset62 = outputSettings54.getcharset();
        outputSettings38.charset = charset62;
        outputSettings32.setcharset(charset62);
        outputSettings2.charset = charset62;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.indentAmount((int) 'a');
        outputSettings68.prettyPrint = false;
        int int71 = outputSettings68.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings68.forceAllElementAsBlock(false);
        outputSettings73.setindentAmount((int) (short) 0);
        outputSettings73.setforceAllElementAsBlock(true);
        outputSettings73.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = outputSettings73.escapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode81 = outputSettings73.escapeMode();
        outputSettings73.prettyPrint = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings73.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings2.escapeMode(escapeMode84);
        outputSettings85.forceAllElementAsBlock = false;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(charsetEncoder34);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + escapeMode80 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode80.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode81 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode81.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings85);
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings2.charset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("text", "#text");
        org.jsoup.nodes.Node node3 = textNode2.parent();
        java.lang.StringBuilder stringBuilder4 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = null;
        textNode2.outerHtmlTail(stringBuilder4, 0, outputSettings6);
        textNode2.settext("hi!");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text();
        textNode2.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.siblingNodes();
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("#");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("");
        int int10 = textNode9.siblingIndex();
        org.jsoup.nodes.Node node11 = textNode9.nextSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        java.nio.charset.Charset charset9 = outputSettings7.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings7.clone();
        outputSettings7.forceAllElementAsBlock = true;
        outputSettings7.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings7.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        textNode2.outerHtmlTail(stringBuilder3, (int) '4', outputSettings16);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings16.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        boolean boolean22 = outputSettings20.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings25.clone();
        boolean boolean29 = outputSettings28.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings28.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings28.charsetEncoder;
        java.nio.charset.Charset charset32 = outputSettings28.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings35.escapeMode;
        java.nio.charset.Charset charset37 = outputSettings35.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings35.escapeMode;
        boolean boolean39 = outputSettings35.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings42.escapeMode;
        java.nio.charset.Charset charset44 = outputSettings42.charset();
        outputSettings42.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings42.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings35.escapeMode(escapeMode47);
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings51.escapeMode;
        java.nio.charset.Charset charset53 = outputSettings51.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings51.escapeMode;
        boolean boolean55 = outputSettings51.prettyPrint;
        boolean boolean56 = outputSettings51.forceAllElementAsBlock;
        boolean boolean57 = outputSettings51.getforceAllElementAsBlock();
        boolean boolean58 = outputSettings51.getprettyPrint();
        java.nio.charset.Charset charset59 = outputSettings51.getcharset();
        outputSettings35.charset = charset59;
        outputSettings28.charset = charset59;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings20.charset(charset59);
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings63.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.escapeMode;
        outputSettings65.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings69.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings71.escapeMode;
        java.nio.charset.Charset charset73 = outputSettings71.charset();
        outputSettings65.setcharset(charset73);
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings75.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings75.clone();
        outputSettings75.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode81 = outputSettings75.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings65.escapeMode(escapeMode81);
        org.jsoup.nodes.Entities.EscapeMode escapeMode83 = outputSettings65.getescapeMode();
        outputSettings62.setescapeMode(escapeMode83);
        java.nio.charset.Charset charset85 = outputSettings62.getcharset();
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertTrue("'" + escapeMode81 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode81.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertTrue("'" + escapeMode83 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode83.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset85);
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("hi!");
        org.jsoup.nodes.Document document11 = textNode10.ownerDocument();
        java.lang.String str13 = textNode10.attr("hi!");
        java.lang.String str14 = textNode10.getWholeText();
        java.lang.String str15 = textNode10.getTEXT_KEY();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNull(document11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        java.lang.String str11 = textNode2.gettext();
        org.jsoup.nodes.Document document12 = textNode2.ownerDocument();
        int int13 = textNode2.siblingIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode15 = textNode2.splitText((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(document12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings5.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        java.nio.charset.Charset charset13 = outputSettings11.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings11.clone();
        boolean boolean15 = outputSettings14.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings14.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings5.charset(charset17);
        int int19 = outputSettings5.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings22.escapeMode;
        java.nio.charset.Charset charset24 = outputSettings22.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings22.escapeMode;
        boolean boolean26 = outputSettings22.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings29.escapeMode;
        java.nio.charset.Charset charset31 = outputSettings29.charset();
        outputSettings29.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings29.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings22.escapeMode(escapeMode34);
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings35.escapeMode;
        outputSettings5.escapeMode = escapeMode36;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings5.indentAmount((int) (byte) 10);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        org.jsoup.nodes.Node node19 = textNode2.nextSibling();
        java.lang.String str20 = textNode2.baseUri();
        textNode2.text = "";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings7.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings7.prettyPrint();
        boolean boolean10 = outputSettings7.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings7.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings17.charset(charset23);
        outputSettings14.setcharset(charset23);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings7.charset(charset23);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings7.clone();
        java.nio.charset.Charset charset28 = outputSettings7.getcharset();
        outputSettings7.setindentAmount((int) (byte) 10);
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings7.encoder();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charsetEncoder31);
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        outputSettings3.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings3.charsetEncoder;
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str10 = textNode9.text;
        java.lang.String str11 = textNode9.outerHtml();
        java.lang.String str12 = textNode9.getTEXT_KEY();
        java.lang.String str13 = textNode9.nodeName();
        textNode9.settext("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode9.siblingNodes();
        java.lang.String str17 = textNode9.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode9.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings21.clone();
        boolean boolean25 = outputSettings24.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings24.clone();
        boolean boolean28 = textNode9.equals((java.lang.Object) outputSettings27);
        java.lang.StringBuilder stringBuilder29 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        boolean boolean34 = outputSettings31.prettyPrint();
        int int35 = outputSettings31.indentAmount;
        textNode9.outerHtmlTail(stringBuilder29, 1, outputSettings31);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.clone();
        outputSettings42.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings47.escapeMode;
        java.nio.charset.Charset charset49 = outputSettings47.charset;
        outputSettings42.setcharset(charset49);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings42.forceAllElementAsBlock(false);
        outputSettings42.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings55.clone();
        boolean boolean59 = outputSettings55.getforceAllElementAsBlock();
        outputSettings55.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings62.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = outputSettings64.escapeMode;
        java.nio.charset.Charset charset66 = outputSettings64.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings64.escapeMode;
        boolean boolean68 = outputSettings64.prettyPrint;
        boolean boolean69 = outputSettings64.forceAllElementAsBlock;
        boolean boolean70 = outputSettings64.getforceAllElementAsBlock();
        boolean boolean71 = outputSettings64.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings72.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings75.indentAmount((int) 'a');
        java.nio.charset.Charset charset78 = outputSettings75.getcharset();
        outputSettings74.setcharset(charset78);
        outputSettings64.setcharset(charset78);
        outputSettings55.setcharset(charset78);
        outputSettings42.charset = charset78;
        outputSettings31.charset = charset78;
        outputSettings3.charset = charset78;
        java.nio.charset.CharsetEncoder charsetEncoder85 = outputSettings3.encoder();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(charsetEncoder85);
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("text");
        java.lang.String str14 = textNode2.baseUri();
        int int15 = textNode2.siblingIndex();
        boolean boolean16 = textNode2.isBlank();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("#text");
        java.lang.String str9 = textNode2.text();
        java.lang.String str10 = textNode2.toString();
        java.lang.String str11 = textNode2.getTEXT_KEY();
        textNode2.ensureAttributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean12 = textNode2.hasAttr("");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode2.childNodes();
        textNode2.ensureAttributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertNotNull(nodeList15);
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings9.escapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings25.getprettyPrint();
        java.nio.charset.Charset charset33 = outputSettings25.getcharset();
        outputSettings9.charset = charset33;
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 1, outputSettings9);
        java.lang.String str36 = textNode2.getTEXT_KEY();
        java.lang.String str37 = textNode2.baseUri();
        org.jsoup.nodes.Document document38 = textNode2.ownerDocument();
        java.lang.String str39 = textNode2.nodeName();
        textNode2.settext("");
        int int42 = textNode2.siblingIndex();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "text" + "'", str36, "text");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(document38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "#text" + "'", str39, "#text");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.gettext();
        java.lang.String str9 = textNode2.attr("");
        textNode2.settext("");
        java.lang.String str12 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode2.siblingNodes();
        java.lang.String str14 = textNode2.baseUri();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        boolean boolean10 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings13.escapeMode;
        boolean boolean17 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        outputSettings20.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings20.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings13.escapeMode(escapeMode25);
        outputSettings2.setescapeMode(escapeMode25);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        java.nio.charset.Charset charset35 = outputSettings33.charset();
        outputSettings33.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings33.escapeMode;
        outputSettings30.setescapeMode(escapeMode38);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings30.prettyPrint(false);
        java.nio.charset.Charset charset42 = outputSettings41.getcharset();
        outputSettings2.charset = charset42;
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings47.escapeMode;
        java.nio.charset.Charset charset49 = outputSettings47.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings47.escapeMode;
        boolean boolean51 = outputSettings47.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings52.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings54.escapeMode;
        java.nio.charset.Charset charset56 = outputSettings54.charset();
        outputSettings54.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings54.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings47.escapeMode(escapeMode59);
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings61.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings64.indentAmount((int) 'a');
        java.nio.charset.Charset charset67 = outputSettings64.getcharset();
        outputSettings63.setcharset(charset67);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings69.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings71.escapeMode;
        java.nio.charset.Charset charset73 = outputSettings71.charset();
        outputSettings63.charset = charset73;
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings47.charset(charset73);
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings2.charset(charset73);
        outputSettings76.prettyPrint = false;
        outputSettings76.indentAmount = 32;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertNotNull(outputSettings76);
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        org.jsoup.nodes.Node node15 = textNode2.parent();
        textNode2.settext("#text");
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        outputSettings23.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings23.escapeMode;
        outputSettings20.setescapeMode(escapeMode28);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings20.prettyPrint(false);
        outputSettings20.setindentAmount((int) (short) -1);
        int int34 = outputSettings20.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings20.indentAmount(0);
        boolean boolean37 = textNode2.equals((java.lang.Object) outputSettings20);
        org.jsoup.nodes.Node node40 = textNode2.attr("#", "hi!");
        org.jsoup.nodes.TextNode textNode42 = textNode2.text("#");
        textNode42.text = "text";
        java.util.List<org.jsoup.nodes.Node> nodeList45 = textNode42.siblingNodes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(textNode42);
        org.junit.Assert.assertNotNull(nodeList45);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        textNode2.text = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = textNode2.after("text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "i!");
        org.junit.Assert.assertNotNull(textNode2);
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        java.nio.charset.Charset charset6 = outputSettings3.getcharset();
        outputSettings2.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings9.prettyPrint(false);
        outputSettings9.indentAmount = '4';
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings12);
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Node node11 = textNode2.parent();
        java.lang.String str12 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode2.siblingNodes();
        textNode2.setBaseUri("#");
        org.jsoup.nodes.Attributes attributes16 = textNode2.attributes();
        java.lang.String str18 = textNode2.absUrl("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        textNode2.settext("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.siblingNodes();
        java.lang.String str10 = textNode2.nodeName();
        java.lang.String str11 = textNode2.baseUri();
        java.lang.String str12 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("text");
        org.jsoup.nodes.Node node15 = textNode14.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode14.siblingNodes();
        org.jsoup.nodes.TextNode textNode19 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str21 = textNode19.absUrl("#text");
        java.lang.StringBuilder stringBuilder22 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode;
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings26.escapeMode;
        boolean boolean30 = outputSettings26.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        java.nio.charset.Charset charset35 = outputSettings33.charset();
        outputSettings33.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings33.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings26.escapeMode(escapeMode38);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings42.escapeMode;
        java.nio.charset.Charset charset44 = outputSettings42.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings42.escapeMode;
        boolean boolean46 = outputSettings42.prettyPrint;
        boolean boolean47 = outputSettings42.forceAllElementAsBlock;
        boolean boolean48 = outputSettings42.getforceAllElementAsBlock();
        boolean boolean49 = outputSettings42.getprettyPrint();
        java.nio.charset.Charset charset50 = outputSettings42.getcharset();
        outputSettings26.charset = charset50;
        textNode19.outerHtmlTail(stringBuilder22, (int) (short) 1, outputSettings26);
        java.lang.String str53 = textNode19.getTEXT_KEY();
        org.jsoup.nodes.Attributes attributes54 = textNode19.attributes();
        textNode19.ensureAttributes();
        java.lang.String str57 = textNode19.attr("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node58 = textNode14.after((org.jsoup.nodes.Node) textNode19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "text" + "'", str53, "text");
        org.junit.Assert.assertNotNull(attributes54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        boolean boolean10 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings13.escapeMode;
        boolean boolean17 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        outputSettings20.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings20.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings13.escapeMode(escapeMode25);
        outputSettings2.setescapeMode(escapeMode25);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        java.nio.charset.Charset charset35 = outputSettings33.charset();
        outputSettings33.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings33.escapeMode;
        outputSettings30.setescapeMode(escapeMode38);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings30.prettyPrint(false);
        java.nio.charset.Charset charset42 = outputSettings41.getcharset();
        outputSettings2.charset = charset42;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings2.prettyPrint(true);
        int int46 = outputSettings2.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings2.getcharsetEncoder();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(charsetEncoder47);
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        java.lang.String str3 = textNode2.getWholeText();
        org.jsoup.nodes.Node node4 = textNode2.clone();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node6 = textNode2.nextSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        boolean boolean3 = textNode2.isBlank();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("text");
        textNode5.ensureAttributes();
        org.jsoup.nodes.Attributes attributes7 = textNode5.attributes();
        java.lang.String str9 = textNode5.attr("");
        org.jsoup.nodes.Document document10 = textNode5.ownerDocument();
        java.lang.String str11 = textNode5.baseUri();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        outputSettings5.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings5.escapeMode;
        outputSettings2.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings2.getprettyPrint();
        outputSettings2.setprettyPrint(false);
        int int15 = outputSettings2.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings2.indentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.clone();
        outputSettings18.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings18.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.escapeMode;
        java.nio.charset.Charset charset29 = outputSettings27.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings27.escapeMode;
        boolean boolean31 = outputSettings27.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings27.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings18.escapeMode(escapeMode32);
        outputSettings33.forceAllElementAsBlock = true;
        boolean boolean36 = outputSettings33.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.clone();
        boolean boolean43 = outputSettings42.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings42.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings42.clone();
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings42.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        java.nio.charset.Charset charset54 = outputSettings52.charset();
        outputSettings52.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings52.escapeMode;
        outputSettings49.setescapeMode(escapeMode57);
        boolean boolean59 = outputSettings49.getprettyPrint();
        outputSettings49.indentAmount = 97;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings49.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings49.escapeMode();
        outputSettings42.setescapeMode(escapeMode63);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings33.escapeMode(escapeMode63);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings17.escapeMode(escapeMode63);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.prettyPrint(true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(charsetEncoder46);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertNotNull(outputSettings68);
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("#text");
        java.lang.String str9 = textNode2.text();
        java.lang.String str10 = textNode2.toString();
        java.lang.Object obj11 = null;
        boolean boolean12 = textNode2.equals(obj11);
        java.lang.String str13 = textNode2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        textNode2.text = "#text";
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node14 = textNode13.clone();
        java.lang.String str15 = textNode13.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder16 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings20.clone();
        outputSettings23.indentAmount = 0;
        outputSettings23.setprettyPrint(false);
        outputSettings23.indentAmount = (short) 10;
        textNode13.outerHtmlTail(stringBuilder16, (int) '#', outputSettings23);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        java.nio.charset.Charset charset35 = outputSettings33.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings33.clone();
        boolean boolean37 = outputSettings36.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings36.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings23.escapeMode(escapeMode38);
        outputSettings23.setprettyPrint(true);
        java.nio.charset.Charset charset42 = outputSettings23.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings45.charset();
        outputSettings45.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings45.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings45.indentAmount((int) (byte) 10);
        boolean boolean53 = outputSettings45.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings54.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings56.escapeMode;
        java.nio.charset.Charset charset58 = outputSettings56.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings56.escapeMode;
        boolean boolean60 = outputSettings56.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings61.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings63.escapeMode;
        java.nio.charset.Charset charset65 = outputSettings63.charset();
        outputSettings63.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings63.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings56.escapeMode(escapeMode68);
        outputSettings45.setescapeMode(escapeMode68);
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings71.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings74.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode77 = outputSettings76.escapeMode;
        java.nio.charset.Charset charset78 = outputSettings76.charset();
        outputSettings76.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode81 = outputSettings76.escapeMode;
        outputSettings73.setescapeMode(escapeMode81);
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings73.prettyPrint(false);
        java.nio.charset.Charset charset85 = outputSettings84.getcharset();
        outputSettings45.charset = charset85;
        org.jsoup.nodes.Entities.EscapeMode escapeMode87 = outputSettings45.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings23.escapeMode(escapeMode87);
        textNode2.outerHtmlTail(stringBuilder11, (int) (short) 100, outputSettings88);
        outputSettings88.setforceAllElementAsBlock(true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + escapeMode77 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode77.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertTrue("'" + escapeMode81 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode81.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertNotNull(charset85);
        org.junit.Assert.assertTrue("'" + escapeMode87 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode87.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings88);
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings8.indentAmount(0);
        int int12 = outputSettings8.getindentAmount();
        boolean boolean13 = outputSettings8.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings8.prettyPrint(true);
        java.nio.charset.Charset charset16 = outputSettings15.charset;
        int int17 = outputSettings15.indentAmount;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.nodeName();
        boolean boolean13 = textNode2.hasAttr("hi!");
        java.lang.String str14 = textNode2.outerHtml();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode2.siblingNodes();
        java.lang.String str16 = textNode2.text();
        java.lang.String str17 = textNode2.getTEXT_KEY();
        java.lang.String str18 = textNode2.text();
        java.util.List<org.jsoup.nodes.Node> nodeList19 = textNode2.childNodes();
        org.jsoup.nodes.Node node20 = textNode2.nextSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode16 = textNode2.splitText((int) (short) 1);
        org.jsoup.nodes.Node node17 = textNode2.clone();
        org.jsoup.nodes.TextNode textNode19 = textNode2.text("");
        java.lang.StringBuilder stringBuilder20 = null;
        org.jsoup.nodes.TextNode textNode24 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str25 = textNode24.text;
        java.lang.String str26 = textNode24.outerHtml();
        java.lang.String str27 = textNode24.getTEXT_KEY();
        java.lang.String str28 = textNode24.text;
        java.lang.Object obj29 = null;
        boolean boolean30 = textNode24.equals(obj29);
        org.jsoup.nodes.Node node32 = textNode24.removeAttr("hi!");
        org.jsoup.nodes.Node node33 = textNode24.previousSibling();
        textNode24.ensureAttributes();
        java.lang.StringBuilder stringBuilder35 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.clone();
        outputSettings39.forceAllElementAsBlock = true;
        outputSettings39.forceAllElementAsBlock = false;
        textNode24.outerHtmlTail(stringBuilder35, (int) '4', outputSettings39);
        java.nio.charset.CharsetEncoder charsetEncoder48 = outputSettings39.encoder();
        java.nio.charset.Charset charset49 = outputSettings39.charset();
        java.nio.charset.CharsetEncoder charsetEncoder50 = outputSettings39.getcharsetEncoder();
        textNode2.outerHtmlTail(stringBuilder20, (int) (short) 1, outputSettings39);
        java.lang.String str52 = textNode2.toString();
        int int53 = textNode2.siblingIndex();
        boolean boolean55 = textNode2.hasAttr("text");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(textNode19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "text" + "'", str27, "text");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(charsetEncoder48);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(charsetEncoder50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        java.lang.String str15 = textNode2.outerHtml();
        textNode2.settext("");
        org.jsoup.nodes.Node node18 = textNode2.parent();
        java.lang.StringBuilder stringBuilder19 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = null;
        textNode2.outerHtmlTail(stringBuilder19, 10, outputSettings21);
        org.jsoup.nodes.Attributes attributes23 = textNode2.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(attributes23);
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings5.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        outputSettings8.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        outputSettings14.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings14.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings14.indentAmount((int) (byte) 10);
        boolean boolean22 = outputSettings14.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        outputSettings32.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings25.escapeMode(escapeMode37);
        outputSettings14.setescapeMode(escapeMode37);
        org.jsoup.nodes.TextNode textNode42 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str43 = textNode42.text;
        java.lang.String str44 = textNode42.outerHtml();
        java.lang.String str45 = textNode42.getTEXT_KEY();
        org.jsoup.nodes.Node node48 = textNode42.attr("hi!", "#text");
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings52.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings54.escapeMode;
        java.nio.charset.Charset charset56 = outputSettings54.charset();
        outputSettings54.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings54.escapeMode;
        outputSettings51.setescapeMode(escapeMode59);
        boolean boolean61 = node48.equals((java.lang.Object) escapeMode59);
        outputSettings14.setescapeMode(escapeMode59);
        outputSettings8.setescapeMode(escapeMode59);
        java.nio.charset.Charset charset64 = outputSettings8.charset;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "text" + "'", str45, "text");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(charset64);
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        boolean boolean3 = textNode2.isBlank();
        boolean boolean5 = textNode2.hasAttr("text");
        java.lang.StringBuilder stringBuilder6 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder12 = null;
        outputSettings10.charsetEncoder = charsetEncoder12;
        java.nio.charset.CharsetEncoder charsetEncoder14 = outputSettings10.getcharsetEncoder();
        outputSettings10.prettyPrint = true;
        textNode2.outerHtmlTail(stringBuilder6, (int) 'a', outputSettings10);
        textNode2.text = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node21 = textNode2.wrap("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNull(charsetEncoder14);
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        outputSettings5.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings5.escapeMode;
        outputSettings2.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings2.getprettyPrint();
        outputSettings2.setprettyPrint(false);
        int int15 = outputSettings2.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings2.indentAmount(0);
        int int18 = outputSettings17.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings17.getcharsetEncoder();
        outputSettings17.prettyPrint = true;
        boolean boolean22 = outputSettings17.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings17.charsetEncoder;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charsetEncoder23);
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("hi!");
        textNode2.setBaseUri("text");
        java.lang.String str13 = textNode2.text;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.childNode((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        boolean boolean8 = outputSettings5.getforceAllElementAsBlock();
        int int9 = outputSettings5.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings12.escapeMode;
        outputSettings12.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode;
        java.nio.charset.Charset charset20 = outputSettings18.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.clone();
        outputSettings18.forceAllElementAsBlock = true;
        outputSettings18.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset26 = outputSettings18.getcharset();
        outputSettings12.charset = charset26;
        java.nio.charset.Charset charset28 = outputSettings12.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings5.charset(charset28);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings29);
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        org.jsoup.nodes.Node node7 = textNode2.clone();
        java.lang.String str8 = textNode2.getWholeText();
        boolean boolean10 = textNode2.hasAttr("text");
        textNode2.text = "#";
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(textNode14);
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        textNode2.settext("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.siblingNodes();
        java.lang.String str10 = textNode2.nodeName();
        java.lang.String str11 = textNode2.baseUri();
        java.lang.String str12 = textNode2.getWholeText();
        org.jsoup.nodes.Attributes attributes13 = textNode2.attributes();
        org.jsoup.nodes.Node node14 = textNode2.nextSibling();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        outputSettings17.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.indentAmount((int) 'a');
        outputSettings22.prettyPrint = false;
        java.nio.charset.Charset charset25 = outputSettings22.getcharset();
        outputSettings17.charset = charset25;
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings17.encoder();
        boolean boolean28 = outputSettings17.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean30 = outputSettings29.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        java.nio.charset.Charset charset35 = outputSettings33.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings29.charset(charset35);
        boolean boolean37 = outputSettings36.getforceAllElementAsBlock();
        boolean boolean38 = outputSettings36.prettyPrint();
        boolean boolean39 = outputSettings36.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings36.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean42 = outputSettings41.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings45.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings45.clone();
        outputSettings45.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings45.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings41.escapeMode(escapeMode51);
        int int53 = outputSettings52.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings54.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings56.escapeMode;
        java.nio.charset.Charset charset58 = outputSettings56.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings56.clone();
        outputSettings56.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings56.escapeMode;
        int int63 = outputSettings56.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings56.prettyPrint(false);
        java.nio.charset.Charset charset66 = outputSettings56.charset();
        boolean boolean67 = outputSettings56.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings56.escapeMode;
        outputSettings52.escapeMode = escapeMode68;
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings36.escapeMode(escapeMode68);
        boolean boolean71 = outputSettings36.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings36.indentAmount(52);
        java.nio.charset.Charset charset74 = outputSettings73.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings17.charset(charset74);
        int int76 = outputSettings75.getindentAmount();
        boolean boolean77 = textNode2.equals((java.lang.Object) outputSettings75);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node79 = textNode2.wrap("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        outputSettings2.setindentAmount(1);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        java.nio.charset.Charset charset13 = outputSettings11.charset();
        outputSettings11.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings11.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings11.indentAmount((int) (byte) 10);
        boolean boolean19 = outputSettings11.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings22.escapeMode;
        java.nio.charset.Charset charset24 = outputSettings22.charset();
        outputSettings22.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings22.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings22.indentAmount((int) (byte) 10);
        boolean boolean30 = outputSettings22.forceAllElementAsBlock;
        java.nio.charset.Charset charset31 = outputSettings22.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings11.charset(charset31);
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings11.encoder();
        outputSettings2.charsetEncoder = charsetEncoder33;
        java.nio.charset.Charset charset35 = outputSettings2.charset;
        boolean boolean36 = outputSettings2.getforceAllElementAsBlock();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        org.jsoup.nodes.Node node8 = textNode2.clone();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        outputSettings13.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings13.setcharset(charset21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings25.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings13.escapeMode(escapeMode33);
        boolean boolean36 = outputSettings35.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder9, (int) (byte) 0, outputSettings35);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings40.escapeMode;
        java.nio.charset.Charset charset42 = outputSettings40.charset();
        outputSettings40.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings40.escapeMode;
        outputSettings35.escapeMode = escapeMode45;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings49.escapeMode;
        java.nio.charset.Charset charset51 = outputSettings49.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings49.escapeMode;
        boolean boolean53 = outputSettings49.prettyPrint;
        boolean boolean54 = outputSettings49.forceAllElementAsBlock;
        boolean boolean55 = outputSettings49.getforceAllElementAsBlock();
        boolean boolean56 = outputSettings49.getprettyPrint();
        boolean boolean57 = outputSettings49.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings49.escapeMode();
        outputSettings35.escapeMode = escapeMode58;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings60.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings62.escapeMode;
        outputSettings62.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings68.escapeMode;
        java.nio.charset.Charset charset70 = outputSettings68.charset();
        outputSettings62.setcharset(charset70);
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings35.charset(charset70);
        boolean boolean73 = outputSettings72.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings72.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings75.indentAmount((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings75.charset("hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertNotNull(outputSettings77);
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        boolean boolean10 = outputSettings2.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        outputSettings13.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings13.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings13.indentAmount((int) (byte) 10);
        boolean boolean21 = outputSettings13.forceAllElementAsBlock;
        java.nio.charset.Charset charset22 = outputSettings13.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings2.charset(charset22);
        java.nio.charset.Charset charset24 = outputSettings2.getcharset();
        int int25 = outputSettings2.getindentAmount();
        boolean boolean26 = outputSettings2.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings2.charsetEncoder;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charsetEncoder27);
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset();
        outputSettings10.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings10.escapeMode;
        outputSettings10.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings10.charsetEncoder;
        outputSettings2.setcharsetEncoder(charsetEncoder18);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings2.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings2.prettyPrint(false);
        java.nio.charset.Charset charset24 = outputSettings23.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.escapeMode;
        java.nio.charset.Charset charset29 = outputSettings27.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings27.clone();
        outputSettings27.forceAllElementAsBlock = true;
        outputSettings27.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings27.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset37 = outputSettings36.charset;
        int int38 = outputSettings36.indentAmount;
        java.nio.charset.Charset charset39 = outputSettings36.charset();
        outputSettings23.charset = charset39;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertNotNull(charset39);
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("i!", "#text");
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node1 = textNode0.clone();
        java.lang.String str2 = textNode0.baseUri();
        org.jsoup.nodes.Node node3 = textNode0.clone();
        java.lang.String str4 = textNode0.getTEXT_KEY();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode0.childNodes();
        java.lang.String str6 = textNode0.getTEXT_KEY();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "text" + "'", str4, "text");
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        int int20 = textNode2.siblingIndex();
        java.lang.String str22 = textNode2.attr("hi!");
        org.jsoup.nodes.TextNode textNode24 = textNode2.text("text");
        textNode2.settext("");
        java.lang.String str27 = textNode2.toString();
        java.lang.String str28 = textNode2.toString();
        java.lang.String str29 = textNode2.getWholeText();
        org.jsoup.nodes.Attributes attributes30 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode33 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str34 = textNode33.text;
        java.lang.String str35 = textNode33.outerHtml();
        java.lang.String str36 = textNode33.getTEXT_KEY();
        java.lang.String str37 = textNode33.nodeName();
        org.jsoup.nodes.Attributes attributes38 = textNode33.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList39 = textNode33.childNodes();
        java.lang.String str40 = textNode33.toString();
        java.lang.String str41 = textNode33.text();
        org.jsoup.nodes.TextNode textNode43 = textNode33.text("");
        org.jsoup.nodes.TextNode textNode45 = textNode33.text("");
        int int46 = textNode33.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList47 = textNode33.siblingNodes();
        java.lang.StringBuilder stringBuilder48 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = null;
        textNode33.outerHtmlTail(stringBuilder48, (int) (byte) 0, outputSettings50);
        textNode33.ensureAttributes();
        java.lang.String str53 = textNode33.toString();
        org.jsoup.nodes.Document document54 = textNode33.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) document54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(textNode24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "text" + "'", str27, "text");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "text" + "'", str28, "text");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "text" + "'", str29, "text");
        org.junit.Assert.assertNotNull(attributes30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "text" + "'", str36, "text");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "#text" + "'", str37, "#text");
        org.junit.Assert.assertNotNull(attributes38);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(textNode43);
        org.junit.Assert.assertNotNull(textNode45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(document54);
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node1 = textNode0.clone();
        java.lang.String str2 = textNode0.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        java.nio.charset.Charset charset9 = outputSettings7.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings7.clone();
        outputSettings10.indentAmount = 0;
        outputSettings10.setprettyPrint(false);
        outputSettings10.indentAmount = (short) 10;
        textNode0.outerHtmlTail(stringBuilder3, (int) '#', outputSettings10);
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings10.getescapeMode();
        boolean boolean19 = outputSettings10.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings22.escapeMode;
        java.nio.charset.Charset charset24 = outputSettings22.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings22.escapeMode;
        boolean boolean26 = outputSettings22.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings29.escapeMode;
        java.nio.charset.Charset charset31 = outputSettings29.charset();
        outputSettings29.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings29.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings22.escapeMode(escapeMode34);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.indentAmount((int) 'a');
        java.nio.charset.Charset charset42 = outputSettings39.getcharset();
        outputSettings38.setcharset(charset42);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings46.escapeMode;
        java.nio.charset.Charset charset48 = outputSettings46.charset();
        outputSettings38.charset = charset48;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings22.charset(charset48);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings53.escapeMode;
        java.nio.charset.Charset charset55 = outputSettings53.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings53.escapeMode;
        int int57 = outputSettings53.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings58.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = outputSettings60.escapeMode;
        java.nio.charset.Charset charset62 = outputSettings60.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings60.clone();
        outputSettings63.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings68.escapeMode;
        java.nio.charset.Charset charset70 = outputSettings68.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings68.escapeMode;
        int int72 = outputSettings68.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder73 = outputSettings68.encoder();
        outputSettings63.charsetEncoder = charsetEncoder73;
        java.nio.charset.CharsetEncoder charsetEncoder75 = outputSettings63.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings63.escapeMode();
        outputSettings53.setescapeMode(escapeMode76);
        outputSettings50.setescapeMode(escapeMode76);
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings10.escapeMode(escapeMode76);
        outputSettings79.setindentAmount((int) (short) -1);
        outputSettings79.setprettyPrint(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "text" + "'", str2, "text");
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 97 + "'", int72 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder73);
        org.junit.Assert.assertNotNull(charsetEncoder75);
        org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings79);
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text();
        textNode2.ensureAttributes();
        java.lang.String str5 = textNode2.outerHtml();
        java.lang.String str7 = textNode2.attr("#");
        java.lang.String str8 = textNode2.baseUri();
        java.lang.Class<?> wildcardClass9 = textNode2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        java.nio.charset.Charset charset8 = outputSettings2.charset();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        textNode2.text = "#text";
        boolean boolean9 = textNode2.hasAttr("#");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        outputSettings9.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings2.escapeMode(escapeMode14);
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.prettyPrint(false);
        outputSettings15.setindentAmount(0);
        java.nio.charset.Charset charset21 = outputSettings15.charset;
        org.jsoup.nodes.TextNode textNode24 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str26 = textNode24.absUrl("#text");
        java.lang.StringBuilder stringBuilder27 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode;
        java.nio.charset.Charset charset33 = outputSettings31.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings31.escapeMode;
        boolean boolean35 = outputSettings31.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.escapeMode;
        java.nio.charset.Charset charset40 = outputSettings38.charset();
        outputSettings38.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings38.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings31.escapeMode(escapeMode43);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings47.escapeMode;
        java.nio.charset.Charset charset49 = outputSettings47.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings47.escapeMode;
        boolean boolean51 = outputSettings47.prettyPrint;
        boolean boolean52 = outputSettings47.forceAllElementAsBlock;
        boolean boolean53 = outputSettings47.getforceAllElementAsBlock();
        boolean boolean54 = outputSettings47.getprettyPrint();
        java.nio.charset.Charset charset55 = outputSettings47.getcharset();
        outputSettings31.charset = charset55;
        textNode24.outerHtmlTail(stringBuilder27, (int) (short) 1, outputSettings31);
        int int58 = outputSettings31.indentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder59 = outputSettings31.getcharsetEncoder();
        outputSettings15.charsetEncoder = charsetEncoder59;
        outputSettings15.setprettyPrint(true);
        boolean boolean63 = outputSettings15.getforceAllElementAsBlock();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        outputSettings2.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.indentAmount((int) 'a');
        outputSettings7.prettyPrint = false;
        java.nio.charset.Charset charset10 = outputSettings7.getcharset();
        outputSettings2.charset = charset10;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings14.escapeMode;
        boolean boolean18 = outputSettings14.prettyPrint;
        boolean boolean19 = outputSettings14.forceAllElementAsBlock;
        boolean boolean20 = outputSettings14.getforceAllElementAsBlock();
        boolean boolean21 = outputSettings14.getprettyPrint();
        java.nio.charset.Charset charset22 = outputSettings14.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings2.charset(charset22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode;
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings26.escapeMode;
        int int30 = outputSettings26.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings26.encoder();
        outputSettings23.charsetEncoder = charsetEncoder31;
        outputSettings23.setprettyPrint(false);
        outputSettings23.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings23.clone();
        outputSettings23.indentAmount = (short) 100;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings23.forceAllElementAsBlock(true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(outputSettings41);
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        org.jsoup.nodes.Node node8 = textNode2.clone();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        outputSettings13.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings13.setcharset(charset21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings25.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings13.escapeMode(escapeMode33);
        boolean boolean36 = outputSettings35.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder9, (int) (byte) 0, outputSettings35);
        org.jsoup.nodes.Node node38 = textNode2.nextSibling();
        textNode2.setBaseUri("#");
        boolean boolean42 = textNode2.hasAttr("#text");
        java.lang.String str43 = textNode2.gettext();
        textNode2.ensureAttributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        outputSettings2.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings2.forceAllElementAsBlock(false);
        outputSettings2.setprettyPrint(false);
        outputSettings2.setprettyPrint(false);
        int int11 = outputSettings2.indentAmount();
        boolean boolean12 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings2.getescapeMode();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings9.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.escapeMode(escapeMode14);
        outputSettings15.forceAllElementAsBlock = true;
        boolean boolean18 = outputSettings15.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings21.clone();
        boolean boolean25 = outputSettings24.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings24.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings24.clone();
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode;
        java.nio.charset.Charset charset36 = outputSettings34.charset();
        outputSettings34.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings34.escapeMode;
        outputSettings31.setescapeMode(escapeMode39);
        boolean boolean41 = outputSettings31.getprettyPrint();
        outputSettings31.indentAmount = 97;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings31.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings31.escapeMode();
        outputSettings24.setescapeMode(escapeMode45);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings15.escapeMode(escapeMode45);
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings15.getescapeMode();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings2.forceAllElementAsBlock = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings10.escapeMode;
        boolean boolean14 = outputSettings10.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        outputSettings17.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings17.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings10.escapeMode(escapeMode22);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings2.escapeMode(escapeMode24);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings25.charsetEncoder;
        java.nio.charset.Charset charset27 = outputSettings25.getcharset();
        boolean boolean28 = outputSettings25.getforceAllElementAsBlock();
        outputSettings25.setindentAmount((int) '#');
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        org.jsoup.nodes.Node node19 = textNode2.nextSibling();
        java.lang.String str20 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList21 = textNode2.siblingNodes();
        java.lang.String str22 = textNode2.toString();
        org.jsoup.nodes.Node node23 = textNode2.clone();
        textNode2.settext("hi!");
        java.lang.String str26 = textNode2.getWholeText();
        org.jsoup.nodes.Node node28 = textNode2.removeAttr("#");
        boolean boolean30 = textNode2.hasAttr("text");
        boolean boolean31 = textNode2.isBlank();
        textNode2.setBaseUri("i!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
        org.junit.Assert.assertNotNull(nodeList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "text" + "'", str26, "text");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        textNode2.ensureAttributes();
        java.lang.String str21 = textNode2.nodeName();
        boolean boolean22 = textNode2.isBlank();
        org.jsoup.nodes.TextNode textNode24 = textNode2.text("");
        textNode2.ensureAttributes();
        java.lang.String str26 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode28 = textNode2.text("");
        textNode28.text = "hi!";
        boolean boolean31 = textNode28.isBlank();
        java.lang.String str32 = textNode28.getTEXT_KEY();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(textNode24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#text" + "'", str26, "#text");
        org.junit.Assert.assertNotNull(textNode28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "text" + "'", str32, "text");
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings2.escapeMode(escapeMode10);
        outputSettings11.setindentAmount(0);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings16.escapeMode;
        int int20 = outputSettings16.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings16.encoder();
        outputSettings11.charsetEncoder = charsetEncoder21;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings11.getescapeMode();
        java.nio.charset.Charset charset24 = outputSettings11.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode;
        java.nio.charset.Charset charset32 = outputSettings30.charset();
        outputSettings30.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings30.escapeMode;
        outputSettings27.setescapeMode(escapeMode35);
        boolean boolean37 = outputSettings27.getprettyPrint();
        outputSettings27.indentAmount = 97;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings27.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings40.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings11.escapeMode(escapeMode41);
        java.nio.charset.Charset charset43 = outputSettings11.charset;
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings11.encoder();
        boolean boolean45 = outputSettings11.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings2.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings2.escapeMode;
        int int9 = outputSettings2.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings2.prettyPrint(false);
        java.nio.charset.Charset charset12 = outputSettings2.charset();
        boolean boolean13 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings2.indentAmount((int) (short) 0);
        java.nio.charset.Charset charset17 = outputSettings2.charset();
        org.jsoup.nodes.TextNode textNode20 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str21 = textNode20.text;
        java.lang.String str22 = textNode20.outerHtml();
        java.lang.String str23 = textNode20.getTEXT_KEY();
        java.lang.String str24 = textNode20.text;
        java.lang.Object obj25 = null;
        boolean boolean26 = textNode20.equals(obj25);
        org.jsoup.nodes.Node node28 = textNode20.removeAttr("hi!");
        org.jsoup.nodes.Node node29 = textNode20.previousSibling();
        textNode20.ensureAttributes();
        java.lang.StringBuilder stringBuilder31 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings35.escapeMode;
        java.nio.charset.Charset charset37 = outputSettings35.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings35.clone();
        outputSettings35.forceAllElementAsBlock = true;
        outputSettings35.forceAllElementAsBlock = false;
        textNode20.outerHtmlTail(stringBuilder31, (int) '4', outputSettings35);
        boolean boolean44 = outputSettings35.forceAllElementAsBlock();
        int int45 = outputSettings35.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings35.escapeMode;
        outputSettings2.escapeMode = escapeMode46;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "text" + "'", str23, "text");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        boolean boolean10 = outputSettings2.forceAllElementAsBlock;
        java.nio.charset.Charset charset11 = outputSettings2.charset;
        boolean boolean12 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.clone();
        outputSettings18.setindentAmount((int) (short) 10);
        outputSettings18.setindentAmount(97);
        org.jsoup.nodes.TextNode textNode25 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str26 = textNode25.text;
        java.lang.String str27 = textNode25.outerHtml();
        java.lang.String str28 = textNode25.getTEXT_KEY();
        java.lang.String str29 = textNode25.text;
        java.lang.Object obj30 = null;
        boolean boolean31 = textNode25.equals(obj30);
        java.lang.String str32 = textNode25.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList33 = textNode25.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount((int) 'a');
        java.nio.charset.Charset charset37 = outputSettings34.getcharset();
        boolean boolean38 = outputSettings34.prettyPrint();
        boolean boolean39 = outputSettings34.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings42.escapeMode;
        outputSettings42.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings48.escapeMode;
        java.nio.charset.Charset charset50 = outputSettings48.charset();
        outputSettings42.setcharset(charset50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings52.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings54.escapeMode;
        java.nio.charset.Charset charset56 = outputSettings54.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings54.escapeMode;
        boolean boolean58 = outputSettings54.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings59.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings54.escapeMode(escapeMode62);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings42.escapeMode(escapeMode62);
        outputSettings34.setescapeMode(escapeMode62);
        boolean boolean66 = textNode25.equals((java.lang.Object) escapeMode62);
        outputSettings18.setescapeMode(escapeMode62);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings68.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings71.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode74 = outputSettings73.escapeMode;
        java.nio.charset.Charset charset75 = outputSettings73.charset();
        outputSettings73.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings73.escapeMode;
        outputSettings70.setescapeMode(escapeMode78);
        outputSettings18.escapeMode = escapeMode78;
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings2.escapeMode(escapeMode78);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "text" + "'", str28, "text");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + escapeMode74 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode74.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings81);
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        int int20 = textNode2.siblingIndex();
        java.lang.String str22 = textNode2.attr("hi!");
        java.lang.StringBuilder stringBuilder23 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings25.clone();
        boolean boolean29 = outputSettings25.getforceAllElementAsBlock();
        outputSettings25.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings25.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings25.encoder();
        textNode2.outerHtmlTail(stringBuilder23, 97, outputSettings25);
        java.lang.String str35 = textNode2.text;
        org.jsoup.nodes.TextNode textNode37 = textNode2.text("text");
        java.lang.String str38 = textNode37.gettext();
        org.jsoup.nodes.Node node41 = textNode37.attr("hi!", "text");
        java.lang.String str42 = textNode37.toString();
        org.jsoup.nodes.TextNode textNode45 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str46 = textNode45.text;
        java.lang.String str47 = textNode45.outerHtml();
        java.lang.String str48 = textNode45.getTEXT_KEY();
        java.lang.String str49 = textNode45.nodeName();
        boolean boolean50 = textNode45.isBlank();
        java.lang.String str51 = textNode45.toString();
        java.lang.String str52 = textNode45.text();
        java.lang.StringBuilder stringBuilder53 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode;
        java.nio.charset.Charset charset59 = outputSettings57.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings57.clone();
        boolean boolean61 = outputSettings60.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings60.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings60.clone();
        textNode45.outerHtmlTail(stringBuilder53, (int) ' ', outputSettings63);
        java.lang.String str65 = textNode45.nodeName();
        java.lang.String str67 = textNode45.attr("#text");
        org.jsoup.nodes.Node node68 = textNode45.previousSibling();
        org.jsoup.nodes.Node node69 = textNode45.nextSibling();
        boolean boolean70 = textNode37.equals((java.lang.Object) node69);
        java.lang.String str71 = textNode37.text();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charsetEncoder32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "text" + "'", str35, "text");
        org.junit.Assert.assertNotNull(textNode37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "text" + "'", str38, "text");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "text" + "'", str42, "text");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "text" + "'", str48, "text");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "#text" + "'", str49, "#text");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "#text" + "'", str65, "#text");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "text" + "'", str71, "text");
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.gettext();
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.Document document11 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.siblingNodes();
        boolean boolean16 = textNode2.hasAttr("");
        java.lang.String str17 = textNode2.getWholeText();
        java.lang.String str18 = textNode2.baseUri();
        java.lang.StringBuilder stringBuilder19 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode;
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        outputSettings26.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings26.escapeMode;
        outputSettings23.setescapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings23.prettyPrint(false);
        int int35 = outputSettings34.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings34.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings34.getcharsetEncoder();
        textNode2.outerHtmlTail(stringBuilder19, (int) 'a', outputSettings34);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNull(document11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(charsetEncoder38);
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings0.getprettyPrint();
        boolean boolean9 = outputSettings0.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings0.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings0.clone();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(outputSettings12);
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        java.lang.String str12 = textNode2.baseUri();
        org.jsoup.nodes.Node node15 = textNode2.attr("hi!", "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        org.jsoup.nodes.Node node8 = textNode2.clone();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        outputSettings13.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings13.setcharset(charset21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings25.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings13.escapeMode(escapeMode33);
        boolean boolean36 = outputSettings35.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder9, (int) (byte) 0, outputSettings35);
        org.jsoup.nodes.Attributes attributes38 = textNode2.attributes();
        org.jsoup.nodes.Attributes attributes39 = textNode2.attributes();
        java.lang.String str40 = textNode2.text();
        org.jsoup.nodes.Node node43 = textNode2.attr("#text", "");
        int int44 = textNode2.siblingIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(attributes38);
        org.junit.Assert.assertNotNull(attributes39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean12 = textNode2.hasAttr("");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("");
        textNode14.setBaseUri("#text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode14.after("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(textNode14);
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.outerHtml();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings16.clone();
        outputSettings19.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode;
        java.nio.charset.Charset charset26 = outputSettings24.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings24.escapeMode;
        int int28 = outputSettings24.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings24.encoder();
        outputSettings19.charsetEncoder = charsetEncoder29;
        outputSettings11.setcharsetEncoder(charsetEncoder29);
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) 100, outputSettings11);
        boolean boolean33 = textNode2.isBlank();
        java.lang.StringBuilder stringBuilder34 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings36.clone();
        boolean boolean40 = outputSettings36.getforceAllElementAsBlock();
        outputSettings36.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings36.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.indentAmount((int) 'a');
        java.nio.charset.Charset charset47 = outputSettings44.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings36.charset(charset47);
        textNode2.outerHtmlTail(stringBuilder34, (int) (short) 100, outputSettings48);
        java.lang.StringBuilder stringBuilder50 = null;
        org.jsoup.nodes.TextNode textNode54 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str55 = textNode54.text;
        java.lang.String str56 = textNode54.outerHtml();
        java.lang.String str57 = textNode54.getTEXT_KEY();
        java.lang.String str58 = textNode54.nodeName();
        boolean boolean59 = textNode54.isBlank();
        java.lang.String str60 = textNode54.toString();
        java.lang.String str61 = textNode54.text();
        java.lang.StringBuilder stringBuilder62 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings64.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings66.escapeMode;
        java.nio.charset.Charset charset68 = outputSettings66.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings66.clone();
        boolean boolean70 = outputSettings69.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings69.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings69.clone();
        textNode54.outerHtmlTail(stringBuilder62, (int) ' ', outputSettings72);
        outputSettings72.forceAllElementAsBlock = true;
        boolean boolean76 = outputSettings72.forceAllElementAsBlock();
        boolean boolean77 = outputSettings72.forceAllElementAsBlock;
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder50, (int) (byte) 10, outputSettings72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "text" + "'", str57, "text");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "#text" + "'", str58, "#text");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        java.nio.charset.Charset charset3 = outputSettings0.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean5 = outputSettings4.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset10 = outputSettings8.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings4.charset(charset10);
        boolean boolean12 = outputSettings11.getforceAllElementAsBlock();
        boolean boolean13 = outputSettings11.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings19.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings19.escapeMode;
        outputSettings16.setescapeMode(escapeMode24);
        outputSettings11.setescapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings0.escapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode;
        java.nio.charset.Charset charset32 = outputSettings30.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings30.clone();
        outputSettings30.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings30.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        boolean boolean40 = outputSettings39.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings39.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.clone();
        outputSettings44.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings44.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings53.escapeMode;
        java.nio.charset.Charset charset55 = outputSettings53.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings53.escapeMode;
        boolean boolean57 = outputSettings53.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings53.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings44.escapeMode(escapeMode58);
        outputSettings43.escapeMode = escapeMode58;
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings30.escapeMode(escapeMode58);
        outputSettings27.escapeMode = escapeMode58;
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings27.indentAmount((int) (byte) 100);
        outputSettings64.prettyPrint = false;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings64);
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset8 = outputSettings5.getcharset();
        int int9 = outputSettings5.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        outputSettings15.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings15.escapeMode;
        outputSettings12.setescapeMode(escapeMode20);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings12.prettyPrint(false);
        java.nio.charset.Charset charset24 = outputSettings23.charset();
        outputSettings5.charset = charset24;
        int int26 = outputSettings5.getindentAmount();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        outputSettings5.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings5.escapeMode;
        outputSettings2.setescapeMode(escapeMode10);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings2.indentAmount(10);
        boolean boolean14 = outputSettings2.prettyPrint;
        boolean boolean15 = outputSettings2.forceAllElementAsBlock();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset;
        outputSettings5.setcharset(charset12);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings5.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset16 = outputSettings5.charset();
        outputSettings5.setforceAllElementAsBlock(true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset16);
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode12 = textNode10.text("#text");
        java.lang.String str13 = textNode10.text;
        textNode10.settext("");
        org.jsoup.select.NodeVisitor nodeVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node17 = textNode10.traverse(nodeVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "#text");
        int int3 = textNode2.siblingIndex();
        textNode2.settext("");
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode2.childNodes();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("");
        // The following exception was thrown during execution in test generation
        try {
            textNode8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeList6);
        org.junit.Assert.assertNotNull(textNode8);
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        int int20 = textNode2.siblingIndex();
        java.lang.String str21 = textNode2.text;
        java.lang.String str22 = textNode2.getWholeText();
        java.lang.String str23 = textNode2.baseUri();
        java.lang.String str24 = textNode2.toString();
        org.jsoup.nodes.TextNode textNode26 = textNode2.text("text");
        java.lang.String str27 = textNode26.text;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#text" + "'", str23, "#text");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "text" + "'", str24, "text");
        org.junit.Assert.assertNotNull(textNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "text" + "'", str27, "text");
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#", "");
        boolean boolean4 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("#");
        java.lang.String str7 = textNode2.toString();
        textNode2.settext("");
        java.lang.String str10 = textNode2.text();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node11 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#" + "'", str7, "#");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#" + "'", str10, "#");
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        outputSettings2.setindentAmount(1);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.clone();
        java.nio.charset.Charset charset10 = outputSettings2.getcharset();
        outputSettings2.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings2.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.escapeMode(escapeMode15);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings16.prettyPrint(false);
        java.nio.charset.Charset charset20 = outputSettings19.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings23.clone();
        outputSettings26.setindentAmount((int) (short) 10);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode;
        java.nio.charset.Charset charset33 = outputSettings31.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings31.clone();
        boolean boolean35 = outputSettings34.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder36 = outputSettings34.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings34.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings40.escapeMode;
        java.nio.charset.Charset charset42 = outputSettings40.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings40.clone();
        java.nio.charset.Charset charset44 = outputSettings40.charset;
        outputSettings37.charset = charset44;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings48.escapeMode;
        outputSettings37.escapeMode = escapeMode49;
        outputSettings26.setescapeMode(escapeMode49);
        outputSettings19.escapeMode = escapeMode49;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNull(escapeMode17);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        java.lang.String str12 = textNode2.baseUri();
        java.lang.String str13 = textNode2.getTEXT_KEY();
        java.lang.String str15 = textNode2.absUrl("hi!");
        org.jsoup.nodes.Node node16 = textNode2.previousSibling();
        org.jsoup.nodes.Node node19 = textNode2.attr("text", "text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node20 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode2.childNodes();
        org.jsoup.nodes.Node node10 = textNode2.attr("hi!", "#text");
        java.lang.String str11 = textNode2.gettext();
        textNode2.settext("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        org.jsoup.nodes.Attributes attributes10 = textNode2.attributes();
        java.lang.String str11 = textNode2.getTEXT_KEY();
        java.lang.String str13 = textNode2.attr("#");
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str17 = textNode16.text;
        java.lang.String str18 = textNode16.outerHtml();
        java.lang.String str19 = textNode16.getTEXT_KEY();
        java.lang.String str20 = textNode16.nodeName();
        boolean boolean22 = textNode16.equals((java.lang.Object) (short) 1);
        textNode16.setBaseUri("#text");
        boolean boolean25 = textNode16.isBlank();
        textNode16.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList28 = textNode16.childNodes();
        org.jsoup.nodes.Node node29 = textNode16.parent();
        textNode16.settext("#text");
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings37.escapeMode;
        java.nio.charset.Charset charset39 = outputSettings37.charset();
        outputSettings37.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings37.escapeMode;
        outputSettings34.setescapeMode(escapeMode42);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings34.prettyPrint(false);
        outputSettings34.setindentAmount((int) (short) -1);
        int int48 = outputSettings34.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings34.indentAmount(0);
        boolean boolean51 = textNode16.equals((java.lang.Object) outputSettings34);
        org.jsoup.nodes.Node node54 = textNode16.attr("#", "hi!");
        org.jsoup.nodes.TextNode textNode56 = textNode16.text("#");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node57 = textNode2.before((org.jsoup.nodes.Node) textNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(textNode56);
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "#text");
        int int3 = textNode2.siblingIndex();
        textNode2.text = "#";
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str10 = textNode9.text;
        java.lang.String str11 = textNode9.outerHtml();
        java.lang.String str12 = textNode9.getTEXT_KEY();
        java.lang.String str13 = textNode9.nodeName();
        textNode9.settext("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode9.siblingNodes();
        java.lang.String str17 = textNode9.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode9.childNodes();
        org.jsoup.nodes.Attributes attributes19 = textNode9.attributes();
        java.lang.String str20 = textNode9.outerHtml();
        boolean boolean22 = textNode9.hasAttr("text");
        java.lang.String str23 = textNode9.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList24 = textNode9.siblingNodes();
        java.lang.String str25 = textNode9.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node26 = textNode2.before((org.jsoup.nodes.Node) textNode9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "#text" + "'", str25, "#text");
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node10 = textNode2.clone();
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings15.escapeMode;
        boolean boolean19 = outputSettings15.prettyPrint;
        boolean boolean20 = outputSettings15.forceAllElementAsBlock;
        boolean boolean21 = outputSettings15.getforceAllElementAsBlock();
        boolean boolean22 = outputSettings15.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        outputSettings25.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings25.escapeMode;
        outputSettings15.escapeMode = escapeMode30;
        textNode2.outerHtmlTail(stringBuilder11, (int) (short) -1, outputSettings15);
        java.lang.String str33 = textNode2.gettext();
        org.jsoup.nodes.Node node34 = textNode2.clone();
        org.jsoup.nodes.Node node35 = node34.nextSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#", "");
        boolean boolean4 = textNode2.hasAttr("hi!");
        java.lang.String str5 = textNode2.text;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node7 = textNode2.after("h");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#" + "'", str5, "#");
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        boolean boolean10 = textNode2.hasAttr("text");
        textNode2.settext("");
        org.jsoup.nodes.Node node13 = textNode2.clone();
        java.lang.String str14 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("#text");
        boolean boolean15 = textNode13.hasAttr("");
        boolean boolean16 = textNode13.isBlank();
        java.lang.String str17 = textNode13.gettext();
        textNode13.text = "#text";
        boolean boolean20 = textNode13.isBlank();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node22 = textNode13.childNode((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#text" + "'", str17, "#text");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("#text");
        textNode2.setBaseUri("#text");
        textNode2.settext("text");
        java.lang.String str16 = textNode2.nodeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#text" + "'", str16, "#text");
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        boolean boolean10 = textNode2.hasAttr("text");
        textNode2.settext("text");
        java.lang.String str13 = textNode2.nodeName();
        java.lang.String str15 = textNode2.attr("hi!");
        java.lang.String str17 = textNode2.attr("text");
        org.jsoup.nodes.TextNode textNode19 = textNode2.text("");
        org.jsoup.nodes.Node node20 = textNode19.parent();
        // The following exception was thrown during execution in test generation
        try {
            node20.setBaseUri("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(textNode19);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        org.jsoup.nodes.Node node4 = textNode2.removeAttr("text");
        org.jsoup.nodes.Node node5 = node4.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset10 = outputSettings8.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings8.clone();
        outputSettings11.indentAmount = 0;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings11.getescapeMode();
        boolean boolean15 = node4.equals((java.lang.Object) outputSettings11);
        node4.setBaseUri("text");
        java.lang.Class<?> wildcardClass18 = node4.getClass();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str12 = textNode11.text;
        java.lang.String str13 = textNode11.outerHtml();
        java.lang.String str14 = textNode11.getTEXT_KEY();
        java.lang.String str15 = textNode11.nodeName();
        boolean boolean16 = textNode11.isBlank();
        java.lang.String str17 = textNode11.toString();
        java.lang.String str18 = textNode11.gettext();
        org.jsoup.nodes.TextNode textNode20 = textNode11.text("hi!");
        java.lang.String str21 = textNode11.outerHtml();
        java.lang.String str23 = textNode11.attr("text");
        java.lang.StringBuilder stringBuilder24 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings28.escapeMode;
        java.nio.charset.Charset charset30 = outputSettings28.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings28.escapeMode;
        boolean boolean32 = outputSettings28.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings35.escapeMode;
        java.nio.charset.Charset charset37 = outputSettings35.charset();
        outputSettings35.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings35.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings28.escapeMode(escapeMode40);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.indentAmount((int) 'a');
        java.nio.charset.Charset charset48 = outputSettings45.getcharset();
        outputSettings44.setcharset(charset48);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        java.nio.charset.Charset charset54 = outputSettings52.charset();
        outputSettings44.charset = charset54;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings28.charset(charset54);
        textNode11.outerHtmlTail(stringBuilder24, 0, outputSettings28);
        textNode2.outerHtmlTail(stringBuilder7, (-1), outputSettings28);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings59.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode;
        java.nio.charset.Charset charset63 = outputSettings61.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings61.escapeMode;
        boolean boolean65 = outputSettings61.prettyPrint;
        boolean boolean66 = outputSettings61.forceAllElementAsBlock;
        boolean boolean67 = outputSettings61.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean69 = outputSettings68.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings70.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings72.escapeMode;
        java.nio.charset.Charset charset74 = outputSettings72.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings68.charset(charset74);
        boolean boolean76 = outputSettings68.getprettyPrint();
        boolean boolean77 = outputSettings68.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings78.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode81 = outputSettings80.escapeMode;
        outputSettings68.setescapeMode(escapeMode81);
        outputSettings61.setescapeMode(escapeMode81);
        org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings61.prettyPrint(false);
        java.nio.charset.Charset charset86 = outputSettings85.charset();
        outputSettings28.charset = charset86;
        outputSettings28.indentAmount = 0;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertTrue("'" + escapeMode81 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode81.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings85);
        org.junit.Assert.assertNotNull(charset86);
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        java.nio.charset.Charset charset6 = outputSettings3.getcharset();
        outputSettings2.setcharset(charset6);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.getescapeMode();
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings14.clone();
        boolean boolean18 = outputSettings17.getprettyPrint();
        boolean boolean19 = outputSettings17.prettyPrint;
        outputSettings17.prettyPrint = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings17.getescapeMode();
        outputSettings9.setescapeMode(escapeMode22);
        java.nio.charset.CharsetEncoder charsetEncoder24 = null;
        outputSettings9.charsetEncoder = charsetEncoder24;
        outputSettings9.setindentAmount((int) (byte) 100);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings9.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings29.clone();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings30);
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings5.charsetEncoder;
        boolean boolean10 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node12 = textNode11.clone();
        java.lang.String str13 = textNode11.baseUri();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings16.clone();
        outputSettings16.forceAllElementAsBlock = true;
        outputSettings16.forceAllElementAsBlock = false;
        boolean boolean24 = outputSettings16.prettyPrint;
        boolean boolean25 = textNode11.equals((java.lang.Object) outputSettings16);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings16.encoder();
        outputSettings5.setcharsetEncoder(charsetEncoder26);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings5.prettyPrint(false);
        outputSettings29.setindentAmount(10);
        outputSettings29.setindentAmount((int) '#');
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount((int) 'a');
        outputSettings36.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings36.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset41 = outputSettings40.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings44.escapeMode;
        java.nio.charset.Charset charset46 = outputSettings44.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.clone();
        outputSettings44.forceAllElementAsBlock = true;
        outputSettings44.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings44.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings53.charsetEncoder;
        outputSettings40.charsetEncoder = charsetEncoder54;
        outputSettings40.prettyPrint = true;
        boolean boolean58 = outputSettings40.prettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings40.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings60.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings62.escapeMode;
        java.nio.charset.Charset charset64 = outputSettings62.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings62.clone();
        outputSettings65.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings68.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings70.escapeMode;
        java.nio.charset.Charset charset72 = outputSettings70.charset;
        outputSettings65.setcharset(charset72);
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings65.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset76 = outputSettings65.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode77 = outputSettings65.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings40.escapeMode(escapeMode77);
        outputSettings29.setescapeMode(escapeMode77);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertNotNull(charset76);
        org.junit.Assert.assertTrue("'" + escapeMode77 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode77.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings78);
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node6 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#", "h");
        org.jsoup.nodes.Node node3 = textNode2.nextSibling();
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        org.jsoup.nodes.Node node5 = textNode2.attr("hi!", "text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node6 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "");
        org.jsoup.nodes.Node node5 = textNode2.attr("text", "hi!");
        org.jsoup.nodes.Node node6 = textNode2.previousSibling();
        java.lang.String str8 = textNode2.attr("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode2.after("i!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.nodeName();
        java.lang.String str12 = textNode2.outerHtml();
        java.lang.String str14 = textNode2.absUrl("hi!");
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str18 = textNode17.getTEXT_KEY();
        java.lang.String str19 = textNode17.getTEXT_KEY();
        java.lang.String str20 = textNode17.text;
        java.lang.String str22 = textNode17.absUrl("#text");
        java.lang.String str23 = textNode17.nodeName();
        org.jsoup.nodes.Node node24 = textNode17.previousSibling();
        java.lang.String str25 = textNode17.getWholeText();
        org.jsoup.nodes.TextNode textNode27 = textNode17.text("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node28 = textNode2.before((org.jsoup.nodes.Node) textNode27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "text" + "'", str18, "text");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#text" + "'", str23, "#text");
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "text" + "'", str25, "text");
        org.junit.Assert.assertNotNull(textNode27);
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        java.lang.String str3 = textNode2.nodeName();
        java.lang.String str4 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode7 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str8 = textNode7.text;
        java.lang.String str9 = textNode7.outerHtml();
        java.lang.String str10 = textNode7.getTEXT_KEY();
        java.lang.String str11 = textNode7.nodeName();
        boolean boolean13 = textNode7.equals((java.lang.Object) (short) 1);
        textNode7.setBaseUri("#text");
        boolean boolean16 = textNode7.isBlank();
        java.lang.String str17 = textNode7.baseUri();
        java.lang.String str18 = textNode7.toString();
        java.lang.String str20 = textNode7.absUrl("text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node21 = textNode2.before((org.jsoup.nodes.Node) textNode7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#text" + "'", str17, "#text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        boolean boolean10 = outputSettings2.forceAllElementAsBlock();
        outputSettings2.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.clone();
        outputSettings15.forceAllElementAsBlock = true;
        outputSettings15.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings15.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings24.charsetEncoder;
        outputSettings2.charsetEncoder = charsetEncoder25;
        java.nio.charset.Charset charset27 = outputSettings2.getcharset();
        java.nio.charset.Charset charset28 = outputSettings2.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings32.clone();
        outputSettings32.forceAllElementAsBlock = true;
        outputSettings32.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset40 = outputSettings32.getcharset();
        outputSettings2.charset = charset40;
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings47.escapeMode;
        java.nio.charset.Charset charset49 = outputSettings47.charset();
        outputSettings47.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings47.escapeMode;
        outputSettings44.setescapeMode(escapeMode52);
        boolean boolean54 = outputSettings44.getprettyPrint();
        outputSettings44.indentAmount = 97;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings57.indentAmount((int) 'a');
        java.nio.charset.Charset charset60 = outputSettings57.getcharset();
        boolean boolean61 = outputSettings57.prettyPrint();
        boolean boolean62 = outputSettings57.forceAllElementAsBlock;
        outputSettings57.indentAmount = (byte) 100;
        int int65 = outputSettings57.indentAmount;
        java.nio.charset.Charset charset66 = outputSettings57.getcharset();
        outputSettings44.setcharset(charset66);
        outputSettings2.setcharset(charset66);
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings70.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings70.clone();
        outputSettings70.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode76 = outputSettings70.escapeMode;
        java.nio.charset.Charset charset77 = outputSettings70.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings70.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings78.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = outputSettings78.getescapeMode();
        outputSettings69.setescapeMode(escapeMode80);
        java.nio.charset.CharsetEncoder charsetEncoder82 = outputSettings69.getcharsetEncoder();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + escapeMode76 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode76.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode80 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode80.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder82);
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.outerHtml();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings16.clone();
        outputSettings19.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode;
        java.nio.charset.Charset charset26 = outputSettings24.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings24.escapeMode;
        int int28 = outputSettings24.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings24.encoder();
        outputSettings19.charsetEncoder = charsetEncoder29;
        outputSettings11.setcharsetEncoder(charsetEncoder29);
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) 100, outputSettings11);
        org.jsoup.nodes.Node node33 = textNode2.nextSibling();
        java.lang.String str34 = textNode2.toString();
        java.lang.StringBuilder stringBuilder35 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset;
        textNode2.outerHtmlTail(stringBuilder35, (int) (byte) 10, outputSettings39);
        java.util.List<org.jsoup.nodes.Node> nodeList43 = textNode2.childNodes();
        org.jsoup.nodes.Node node45 = textNode2.removeAttr("text");
        org.jsoup.nodes.Node node46 = textNode2.previousSibling();
        org.jsoup.select.NodeVisitor nodeVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node48 = textNode2.traverse(nodeVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        java.nio.charset.Charset charset9 = outputSettings7.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings7.clone();
        outputSettings7.forceAllElementAsBlock = true;
        outputSettings7.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings7.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        textNode2.outerHtmlTail(stringBuilder3, (int) '4', outputSettings16);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        outputSettings21.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings21.indentAmount((int) (byte) 10);
        boolean boolean29 = outputSettings21.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings32.escapeMode;
        boolean boolean36 = outputSettings32.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        outputSettings39.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings39.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings32.escapeMode(escapeMode44);
        outputSettings21.setescapeMode(escapeMode44);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        java.nio.charset.Charset charset54 = outputSettings52.charset();
        outputSettings52.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings52.escapeMode;
        outputSettings49.setescapeMode(escapeMode57);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings49.prettyPrint(false);
        java.nio.charset.Charset charset61 = outputSettings60.getcharset();
        outputSettings21.charset = charset61;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings16.charset(charset61);
        int int64 = outputSettings16.indentAmount;
        outputSettings16.setindentAmount(0);
        java.nio.charset.Charset charset67 = outputSettings16.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings16.prettyPrint(true);
        boolean boolean70 = outputSettings69.prettyPrint();
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        textNode2.text = "#text";
        org.jsoup.nodes.Node node8 = textNode2.clone();
        org.jsoup.nodes.Node node9 = textNode2.nextSibling();
        org.jsoup.nodes.Node node10 = textNode2.parent();
        // The following exception was thrown during execution in test generation
        try {
            node10.setBaseUri("h");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.gettext();
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str14 = textNode12.attr("text");
        boolean boolean15 = textNode2.equals((java.lang.Object) textNode12);
        java.lang.String str16 = textNode2.nodeName();
        org.jsoup.nodes.Node node17 = textNode2.clone();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#text" + "'", str16, "#text");
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("#text");
        boolean boolean15 = textNode13.hasAttr("");
        org.jsoup.nodes.Attributes attributes16 = textNode13.attributes();
        org.jsoup.select.NodeVisitor nodeVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode13.traverse(nodeVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(attributes16);
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        outputSettings2.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset10 = outputSettings8.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings8.clone();
        outputSettings8.forceAllElementAsBlock = true;
        outputSettings8.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset16 = outputSettings8.getcharset();
        outputSettings2.charset = charset16;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings20.escapeMode;
        boolean boolean24 = outputSettings20.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.escapeMode;
        outputSettings20.setescapeMode(escapeMode28);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings2.escapeMode(escapeMode28);
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings2.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings2.indentAmount(0);
        outputSettings2.prettyPrint = true;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertNotNull(outputSettings33);
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        textNode2.setBaseUri("text");
        java.lang.String str21 = textNode2.toString();
        textNode2.ensureAttributes();
        org.jsoup.nodes.Attributes attributes23 = textNode2.attributes();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean25 = outputSettings24.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings24.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings24.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.forceAllElementAsBlock(false);
        int int32 = outputSettings29.getindentAmount();
        boolean boolean33 = textNode2.equals((java.lang.Object) int32);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node35 = textNode2.before("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertNotNull(attributes23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        textNode2.text = "#text";
        org.jsoup.nodes.Node node8 = textNode2.clone();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        outputSettings13.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings13.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings13.indentAmount((int) (byte) 10);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        outputSettings25.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings25.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings25.indentAmount((int) (byte) 10);
        boolean boolean33 = outputSettings25.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings25.getescapeMode();
        boolean boolean35 = outputSettings25.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.escapeMode;
        outputSettings38.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings44.escapeMode;
        java.nio.charset.Charset charset46 = outputSettings44.charset();
        outputSettings38.setcharset(charset46);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings48.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings50.escapeMode;
        java.nio.charset.Charset charset52 = outputSettings50.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings50.escapeMode;
        boolean boolean54 = outputSettings50.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings50.escapeMode(escapeMode58);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings38.escapeMode(escapeMode58);
        boolean boolean61 = outputSettings60.getforceAllElementAsBlock();
        java.nio.charset.Charset charset62 = outputSettings60.charset;
        outputSettings25.charset = charset62;
        outputSettings20.charset = charset62;
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) -1, outputSettings20);
        org.jsoup.nodes.TextNode textNode67 = textNode2.splitText(0);
        textNode67.ensureAttributes();
        boolean boolean70 = textNode67.hasAttr("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(textNode67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        java.lang.String str9 = textNode2.baseUri();
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("#");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node12 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        int int10 = outputSettings9.indentAmount;
        int int11 = outputSettings9.getindentAmount();
        boolean boolean12 = outputSettings9.getforceAllElementAsBlock();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        outputSettings2.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings2.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        outputSettings17.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings17.escapeMode;
        outputSettings14.setescapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings14.prettyPrint(false);
        outputSettings14.setindentAmount((int) (short) -1);
        int int28 = outputSettings14.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings14.indentAmount(0);
        outputSettings14.prettyPrint = true;
        java.nio.charset.Charset charset33 = outputSettings14.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings2.charset(charset33);
        int int35 = outputSettings34.getindentAmount();
        outputSettings34.setforceAllElementAsBlock(false);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        outputSettings8.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings13.escapeMode;
        int int17 = outputSettings13.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings13.encoder();
        outputSettings8.charsetEncoder = charsetEncoder18;
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings0.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.prettyPrint(false);
        int int26 = outputSettings25.getindentAmount();
        int int27 = outputSettings25.getindentAmount();
        boolean boolean28 = outputSettings25.prettyPrint;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        org.jsoup.nodes.Node node13 = textNode2.attr("text", "hi!");
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str17 = textNode16.text;
        java.lang.String str18 = textNode16.outerHtml();
        java.lang.String str19 = textNode16.getTEXT_KEY();
        java.lang.String str20 = textNode16.nodeName();
        boolean boolean22 = textNode16.equals((java.lang.Object) (short) 1);
        textNode16.setBaseUri("#text");
        boolean boolean25 = textNode16.isBlank();
        textNode16.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList28 = textNode16.childNodes();
        textNode16.settext("text");
        org.jsoup.nodes.Document document31 = textNode16.ownerDocument();
        org.jsoup.nodes.Attributes attributes32 = textNode16.attributes();
        java.lang.String str33 = textNode16.getTEXT_KEY();
        int int34 = textNode16.siblingIndex();
        java.lang.String str36 = textNode16.attr("hi!");
        java.lang.StringBuilder stringBuilder37 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.clone();
        boolean boolean43 = outputSettings39.getforceAllElementAsBlock();
        outputSettings39.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings39.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings39.encoder();
        textNode16.outerHtmlTail(stringBuilder37, 97, outputSettings39);
        boolean boolean49 = textNode2.equals((java.lang.Object) outputSettings39);
        org.jsoup.nodes.Node node50 = textNode2.nextSibling();
        textNode2.ensureAttributes();
        java.lang.String str52 = textNode2.text;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNull(document31);
        org.junit.Assert.assertNotNull(attributes32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "text" + "'", str33, "text");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charsetEncoder46);
        org.junit.Assert.assertNotNull(charsetEncoder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings0.getprettyPrint();
        boolean boolean9 = outputSettings0.getprettyPrint();
        boolean boolean10 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings13.escapeMode;
        boolean boolean17 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        outputSettings13.setescapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings25.getprettyPrint();
        boolean boolean33 = outputSettings25.forceAllElementAsBlock();
        outputSettings25.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings25.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.clone();
        outputSettings39.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings39.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean47 = outputSettings46.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings48.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings50.escapeMode;
        java.nio.charset.Charset charset52 = outputSettings50.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings46.charset(charset52);
        outputSettings39.charset = charset52;
        outputSettings25.setcharset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings13.charset(charset52);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings0.charset(charset52);
        int int58 = outputSettings0.getindentAmount();
        outputSettings0.forceAllElementAsBlock = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("hi!");
        org.jsoup.nodes.Node node13 = textNode10.attr("hi!", "#text");
        org.jsoup.nodes.Node node14 = textNode10.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = node14.outerHtml();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.outerHtml();
        org.jsoup.nodes.Node node11 = textNode2.removeAttr("#text");
        org.jsoup.nodes.Node node13 = textNode2.removeAttr("text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = node13.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings4.clone();
        outputSettings4.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings4.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings0.escapeMode(escapeMode10);
        int int12 = outputSettings11.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.clone();
        outputSettings15.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings15.escapeMode;
        int int22 = outputSettings15.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings15.prettyPrint(false);
        java.nio.charset.Charset charset25 = outputSettings15.charset();
        boolean boolean26 = outputSettings15.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings15.escapeMode;
        outputSettings11.escapeMode = escapeMode27;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings11.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings31.clone();
        boolean boolean35 = outputSettings31.getforceAllElementAsBlock();
        outputSettings31.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder38 = outputSettings31.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings31.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings31.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.indentAmount((int) 'a');
        outputSettings43.prettyPrint = false;
        int int46 = outputSettings43.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings43.forceAllElementAsBlock(false);
        outputSettings48.setindentAmount((int) (short) 0);
        java.nio.charset.Charset charset51 = outputSettings48.charset();
        outputSettings31.charset = charset51;
        outputSettings30.charset = charset51;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertNotNull(charset51);
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.text = "text";
        textNode2.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.siblingNodes();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("#");
        java.lang.String str11 = textNode10.getWholeText();
        java.lang.String str12 = textNode10.toString();
        java.lang.String str13 = textNode10.getTEXT_KEY();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#" + "'", str11, "#");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#" + "'", str12, "#");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.gettext();
        java.lang.String str9 = textNode2.attr("#text");
        java.lang.String str10 = textNode2.text;
        java.lang.String str11 = textNode2.outerHtml();
        textNode2.text = "i!";
        java.lang.StringBuilder stringBuilder14 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode;
        java.nio.charset.Charset charset20 = outputSettings18.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings18.escapeMode;
        boolean boolean22 = outputSettings18.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings18.escapeMode(escapeMode26);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode;
        java.nio.charset.Charset charset32 = outputSettings30.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings30.escapeMode;
        outputSettings27.escapeMode = escapeMode33;
        boolean boolean35 = outputSettings27.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings27.getescapeMode();
        boolean boolean37 = outputSettings27.prettyPrint();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder14, (int) (byte) 10, outputSettings27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        outputSettings2.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset10 = outputSettings8.charset();
        outputSettings2.setcharset(charset10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings14.escapeMode;
        boolean boolean18 = outputSettings14.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings14.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings2.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.forceAllElementAsBlock(false);
        outputSettings26.forceAllElementAsBlock = true;
        outputSettings26.indentAmount = (short) 100;
        int int31 = outputSettings26.indentAmount();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder4 = null;
        outputSettings2.charsetEncoder = charsetEncoder4;
        java.nio.charset.CharsetEncoder charsetEncoder6 = outputSettings2.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings2.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = null;
        outputSettings2.escapeMode = escapeMode8;
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings2.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings2.indentAmount(1);
        outputSettings12.indentAmount = 32;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNull(charsetEncoder6);
        org.junit.Assert.assertNull(charsetEncoder7);
        org.junit.Assert.assertNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(outputSettings12);
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("text", "hi!");
        java.lang.String str3 = textNode2.baseUri();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node4 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node1 = textNode0.clone();
        java.lang.String str2 = textNode0.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        java.nio.charset.Charset charset9 = outputSettings7.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings7.clone();
        outputSettings10.indentAmount = 0;
        outputSettings10.setprettyPrint(false);
        outputSettings10.indentAmount = (short) 10;
        textNode0.outerHtmlTail(stringBuilder3, (int) '#', outputSettings10);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings20.clone();
        boolean boolean24 = outputSettings23.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings23.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings10.escapeMode(escapeMode25);
        java.nio.charset.CharsetEncoder charsetEncoder27 = null;
        outputSettings26.setcharsetEncoder(charsetEncoder27);
        outputSettings26.prettyPrint = true;
        boolean boolean31 = outputSettings26.prettyPrint();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "text" + "'", str2, "text");
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        int int8 = outputSettings7.getindentAmount();
        boolean boolean9 = outputSettings7.prettyPrint;
        boolean boolean10 = outputSettings7.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings13.clone();
        outputSettings16.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset;
        outputSettings16.setcharset(charset23);
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.escapeMode;
        java.nio.charset.Charset charset29 = outputSettings27.charset();
        outputSettings27.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings27.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings35.escapeMode;
        java.nio.charset.Charset charset37 = outputSettings35.charset();
        outputSettings35.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings35.escapeMode;
        outputSettings35.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings35.charsetEncoder;
        outputSettings27.setcharsetEncoder(charsetEncoder43);
        outputSettings16.setcharsetEncoder(charsetEncoder43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings16.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings7.escapeMode(escapeMode46);
        boolean boolean48 = outputSettings7.getprettyPrint();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings9.escapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings25.getprettyPrint();
        java.nio.charset.Charset charset33 = outputSettings25.getcharset();
        outputSettings9.charset = charset33;
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 1, outputSettings9);
        org.jsoup.nodes.TextNode textNode37 = textNode2.text("text");
        boolean boolean38 = textNode37.isBlank();
        java.lang.StringBuilder stringBuilder39 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings43.escapeMode;
        java.nio.charset.Charset charset45 = outputSettings43.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings43.clone();
        outputSettings43.forceAllElementAsBlock = true;
        outputSettings43.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings43.prettyPrint(true);
        textNode37.outerHtmlTail(stringBuilder39, 0, outputSettings43);
        boolean boolean54 = outputSettings43.forceAllElementAsBlock();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(textNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings7.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings7.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        outputSettings15.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings15.escapeMode;
        outputSettings12.setescapeMode(escapeMode20);
        outputSettings7.setescapeMode(escapeMode20);
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings7.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings7.prettyPrint(false);
        boolean boolean26 = outputSettings7.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings7.prettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(outputSettings28);
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        java.lang.String str12 = textNode2.nodeName();
        java.lang.String str14 = textNode2.attr("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings10.escapeMode;
        int int14 = outputSettings10.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings10.encoder();
        outputSettings5.charsetEncoder = charsetEncoder15;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings17.charset(charset23);
        outputSettings5.charset = charset23;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings5.getcharsetEncoder();
        boolean boolean27 = outputSettings5.forceAllElementAsBlock();
        int int28 = outputSettings5.getindentAmount();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings5.charset("#text");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: #text");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.lang.String str8 = textNode2.text();
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.childNodes();
        java.lang.String str10 = textNode2.nodeName();
        textNode2.text = "#";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node13 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        outputSettings2.indentAmount = '4';
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        java.nio.charset.Charset charset15 = outputSettings12.getcharset();
        boolean boolean16 = outputSettings12.prettyPrint();
        boolean boolean17 = outputSettings12.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        outputSettings20.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode;
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        outputSettings20.setcharset(charset28);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings32.escapeMode;
        boolean boolean36 = outputSettings32.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings32.escapeMode(escapeMode40);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings20.escapeMode(escapeMode40);
        outputSettings12.setescapeMode(escapeMode40);
        boolean boolean44 = outputSettings12.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings12.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings12.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings2.escapeMode(escapeMode46);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings2.charset("text");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: text");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings47);
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("#text");
        java.lang.String str9 = textNode2.outerHtml();
        java.lang.String str10 = textNode2.gettext();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.siblingNodes();
        textNode2.settext("text");
        java.lang.String str14 = textNode2.gettext();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings2.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings2.escapeMode;
        boolean boolean9 = outputSettings2.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings2.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings2.getcharsetEncoder();
        boolean boolean12 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean14 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings13.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings19.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings19.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.escapeMode;
        java.nio.charset.Charset charset29 = outputSettings27.charset();
        outputSettings27.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings27.escapeMode;
        outputSettings27.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder35 = outputSettings27.charsetEncoder;
        outputSettings19.setcharsetEncoder(charsetEncoder35);
        outputSettings13.charsetEncoder = charsetEncoder35;
        outputSettings2.setcharsetEncoder(charsetEncoder35);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings43.escapeMode;
        java.nio.charset.Charset charset45 = outputSettings43.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings39.charset(charset45);
        java.nio.charset.CharsetEncoder charsetEncoder47 = outputSettings46.getcharsetEncoder();
        boolean boolean48 = outputSettings46.getprettyPrint();
        java.nio.charset.Charset charset49 = outputSettings46.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings2.charset(charset49);
        org.jsoup.nodes.TextNode textNode53 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str54 = textNode53.text;
        java.lang.String str55 = textNode53.outerHtml();
        java.lang.String str56 = textNode53.getTEXT_KEY();
        java.lang.String str57 = textNode53.nodeName();
        org.jsoup.nodes.Attributes attributes58 = textNode53.attributes();
        java.lang.String str59 = textNode53.toString();
        java.lang.String str60 = textNode53.outerHtml();
        int int61 = textNode53.siblingIndex();
        java.lang.String str62 = textNode53.gettext();
        java.lang.StringBuilder stringBuilder63 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings65.indentAmount((int) 'a');
        outputSettings67.prettyPrint = false;
        int int70 = outputSettings67.indentAmount;
        java.nio.charset.Charset charset71 = outputSettings67.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings72.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings72.clone();
        outputSettings72.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings72.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings67.escapeMode(escapeMode78);
        textNode53.outerHtmlTail(stringBuilder63, (int) (byte) 100, outputSettings67);
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings67.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode83 = outputSettings67.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings2.escapeMode(escapeMode83);
        int int85 = outputSettings2.getindentAmount();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(charsetEncoder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "text" + "'", str56, "text");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "#text" + "'", str57, "#text");
        org.junit.Assert.assertNotNull(attributes58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertNotNull(charset71);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertTrue("'" + escapeMode83 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode83.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97 + "'", int85 == 97);
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        outputSettings8.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings14.escapeMode;
        boolean boolean18 = outputSettings14.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings14.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings22.escapeMode;
        java.nio.charset.Charset charset24 = outputSettings22.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings22.escapeMode;
        int int26 = outputSettings22.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings22.encoder();
        outputSettings14.charsetEncoder = charsetEncoder27;
        outputSettings8.charsetEncoder = charsetEncoder27;
        boolean boolean30 = outputSettings8.forceAllElementAsBlock();
        java.nio.charset.Charset charset31 = outputSettings8.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.indentAmount((int) 'a');
        outputSettings34.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings34.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings34.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings34.indentAmount(10);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) 'a');
        outputSettings44.prettyPrint = false;
        int int47 = outputSettings44.indentAmount;
        java.nio.charset.Charset charset48 = outputSettings44.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings49.clone();
        outputSettings49.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings49.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings44.escapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings34.escapeMode(escapeMode55);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings8.escapeMode(escapeMode55);
        int int59 = outputSettings8.indentAmount;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings8.charset("#");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: #");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNotNull(charsetEncoder39);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node1 = textNode0.clone();
        org.jsoup.nodes.Document document2 = textNode0.ownerDocument();
        boolean boolean3 = textNode0.isBlank();
        org.jsoup.nodes.Node node4 = textNode0.clone();
        org.jsoup.nodes.Document document5 = textNode0.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = textNode0.hasAttr("#text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(document2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(document5);
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        outputSettings2.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings2.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings2.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount(10);
        boolean boolean10 = outputSettings2.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        outputSettings13.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings13.forceAllElementAsBlock(false);
        boolean boolean18 = outputSettings13.getforceAllElementAsBlock();
        boolean boolean19 = outputSettings13.prettyPrint();
        java.nio.charset.Charset charset20 = outputSettings13.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings23.escapeMode;
        boolean boolean27 = outputSettings23.prettyPrint;
        outputSettings23.setindentAmount(1);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        outputSettings32.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings32.indentAmount((int) (byte) 10);
        boolean boolean40 = outputSettings32.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings43.escapeMode;
        java.nio.charset.Charset charset45 = outputSettings43.charset();
        outputSettings43.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings43.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings43.indentAmount((int) (byte) 10);
        boolean boolean51 = outputSettings43.forceAllElementAsBlock;
        java.nio.charset.Charset charset52 = outputSettings43.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings32.charset(charset52);
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings32.encoder();
        outputSettings23.charsetEncoder = charsetEncoder54;
        outputSettings13.setcharsetEncoder(charsetEncoder54);
        outputSettings2.charsetEncoder = charsetEncoder54;
        java.nio.charset.CharsetEncoder charsetEncoder58 = outputSettings2.encoder();
        outputSettings2.indentAmount = 52;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertNotNull(charsetEncoder58);
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        int int5 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes6 = textNode2.attributes();
        java.lang.String str7 = textNode2.text();
        org.jsoup.nodes.TextNode textNode10 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str11 = textNode10.text;
        java.lang.String str12 = textNode10.outerHtml();
        java.lang.String str13 = textNode10.getTEXT_KEY();
        java.lang.String str14 = textNode10.text;
        java.lang.String str15 = textNode10.gettext();
        java.lang.String str17 = textNode10.attr("");
        textNode10.settext("");
        java.lang.String str20 = textNode10.getWholeText();
        java.lang.String str21 = textNode10.getTEXT_KEY();
        java.lang.String str22 = textNode10.nodeName();
        org.jsoup.nodes.Attributes attributes23 = textNode10.attributes();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#text" + "'", str22, "#text");
        org.junit.Assert.assertNotNull(attributes23);
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        textNode2.ensureAttributes();
        int int4 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node6 = textNode2.removeAttr("text");
        java.lang.String str7 = textNode2.text();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node8 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        outputSettings5.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings5.escapeMode;
        outputSettings2.setescapeMode(escapeMode10);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings2.prettyPrint(false);
        int int14 = outputSettings13.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings13.forceAllElementAsBlock(true);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.charset("text");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: text");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(outputSettings16);
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode6 = textNode2.splitText((int) (byte) 0);
        textNode2.ensureAttributes();
        java.lang.String str8 = textNode2.baseUri();
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str12 = textNode11.text;
        java.lang.String str13 = textNode11.outerHtml();
        java.lang.String str14 = textNode11.getTEXT_KEY();
        java.lang.String str15 = textNode11.nodeName();
        org.jsoup.nodes.Attributes attributes16 = textNode11.attributes();
        java.lang.String str17 = textNode11.text();
        java.util.List<org.jsoup.nodes.Node> nodeList18 = textNode11.childNodes();
        textNode11.settext("#");
        java.lang.String str21 = textNode11.getWholeText();
        textNode11.ensureAttributes();
        boolean boolean24 = textNode11.hasAttr("#text");
        boolean boolean25 = textNode11.isBlank();
        textNode11.ensureAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node27 = textNode2.after((org.jsoup.nodes.Node) textNode11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        org.jsoup.nodes.Node node4 = textNode2.removeAttr("text");
        org.jsoup.nodes.Node node5 = node4.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset10 = outputSettings8.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings8.clone();
        outputSettings11.indentAmount = 0;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings11.getescapeMode();
        boolean boolean15 = node4.equals((java.lang.Object) outputSettings11);
        node4.setBaseUri("text");
        org.jsoup.nodes.Node node18 = node4.previousSibling();
        org.jsoup.select.NodeVisitor nodeVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node20 = node4.traverse(nodeVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("h", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node4 = textNode2.after("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "text");
        org.jsoup.nodes.Node node3 = textNode2.clone();
        org.jsoup.nodes.Document document4 = textNode2.ownerDocument();
        java.lang.String str5 = textNode2.gettext();
        java.lang.String str6 = textNode2.toString();
        java.lang.String str7 = textNode2.text();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        outputSettings17.indentAmount = (byte) 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings17.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount((int) 'a');
        java.nio.charset.Charset charset27 = outputSettings24.getcharset();
        boolean boolean28 = outputSettings24.prettyPrint();
        boolean boolean29 = outputSettings24.forceAllElementAsBlock;
        outputSettings24.indentAmount = (byte) 100;
        int int32 = outputSettings24.indentAmount;
        java.nio.charset.Charset charset33 = outputSettings24.getcharset();
        outputSettings17.charset = charset33;
        boolean boolean35 = textNode14.equals((java.lang.Object) outputSettings17);
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean37 = outputSettings36.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings40.escapeMode;
        java.nio.charset.Charset charset42 = outputSettings40.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings36.charset(charset42);
        boolean boolean44 = outputSettings36.getforceAllElementAsBlock();
        boolean boolean45 = outputSettings36.getforceAllElementAsBlock();
        java.nio.charset.Charset charset46 = outputSettings36.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings17.charset(charset46);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings47);
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("hi!");
        org.jsoup.nodes.Node node13 = textNode10.attr("hi!", "#text");
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings19.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings19.escapeMode;
        outputSettings16.setescapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings16.prettyPrint(false);
        boolean boolean28 = textNode10.equals((java.lang.Object) outputSettings16);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode;
        java.nio.charset.Charset charset33 = outputSettings31.charset();
        outputSettings31.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings31.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings31.indentAmount((int) (byte) 10);
        boolean boolean39 = outputSettings31.getforceAllElementAsBlock();
        outputSettings31.setindentAmount((int) (short) 10);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings44.escapeMode;
        java.nio.charset.Charset charset46 = outputSettings44.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings44.escapeMode;
        boolean boolean48 = outputSettings44.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings51.escapeMode;
        java.nio.charset.Charset charset53 = outputSettings51.charset();
        outputSettings51.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings51.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings44.escapeMode(escapeMode56);
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode;
        outputSettings31.escapeMode = escapeMode58;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings60.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings62.escapeMode;
        java.nio.charset.Charset charset64 = outputSettings62.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = outputSettings62.escapeMode;
        int int66 = outputSettings62.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings62.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings62.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings31.escapeMode(escapeMode68);
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean71 = outputSettings70.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings72.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode75 = outputSettings74.escapeMode;
        java.nio.charset.Charset charset76 = outputSettings74.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings70.charset(charset76);
        boolean boolean78 = outputSettings77.getforceAllElementAsBlock();
        outputSettings77.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder81 = outputSettings77.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder82 = outputSettings77.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings83.indentAmount((int) 'a');
        outputSettings85.prettyPrint = false;
        java.nio.charset.Charset charset88 = outputSettings85.getcharset();
        outputSettings77.setcharset(charset88);
        org.jsoup.nodes.Entities.EscapeMode escapeMode90 = outputSettings77.escapeMode;
        int int91 = outputSettings77.indentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode92 = outputSettings77.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings69.escapeMode(escapeMode92);
        outputSettings16.escapeMode = escapeMode92;
        org.jsoup.nodes.Document.OutputSettings outputSettings95 = outputSettings16.clone();
        int int96 = outputSettings95.indentAmount();
        boolean boolean97 = outputSettings95.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode98 = outputSettings95.escapeMode();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertTrue("'" + escapeMode75 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode75.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset76);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(charsetEncoder81);
        org.junit.Assert.assertNotNull(charsetEncoder82);
        org.junit.Assert.assertNotNull(outputSettings85);
        org.junit.Assert.assertNotNull(charset88);
        org.junit.Assert.assertTrue("'" + escapeMode90 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode90.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + escapeMode92 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode92.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings93);
        org.junit.Assert.assertNotNull(outputSettings95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 97 + "'", int96 == 97);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + escapeMode98 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode98.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("hi!");
        org.jsoup.nodes.TextNode textNode16 = textNode2.text("hi!");
        java.lang.String str17 = textNode16.nodeName();
        org.jsoup.nodes.Node node18 = textNode16.parent();
        java.lang.String str19 = textNode16.nodeName();
        org.jsoup.nodes.Attributes attributes20 = textNode16.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#text" + "'", str17, "#text");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#text" + "'", str19, "#text");
        org.junit.Assert.assertNotNull(attributes20);
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.toString();
        textNode2.ensureAttributes();
        java.lang.String str8 = textNode2.getTEXT_KEY();
        boolean boolean9 = textNode2.isBlank();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        textNode2.settext("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.siblingNodes();
        java.lang.String str10 = textNode2.baseUri();
        org.jsoup.nodes.Node node12 = textNode2.removeAttr("#text");
        org.jsoup.nodes.Attributes attributes13 = textNode2.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(attributes13);
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("hi!");
        java.lang.String str9 = textNode2.text;
        java.lang.String str10 = textNode2.toString();
        org.jsoup.nodes.Node node11 = textNode2.clone();
        java.lang.String str12 = textNode2.text;
        java.lang.String str13 = textNode2.nodeName();
        org.jsoup.select.NodeVisitor nodeVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.traverse(nodeVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.lang.String str8 = textNode2.text();
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.childNodes();
        java.lang.String str10 = textNode2.nodeName();
        textNode2.text = "#text";
        org.jsoup.nodes.Attributes attributes13 = textNode2.attributes();
        org.jsoup.nodes.Node node14 = textNode2.previousSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.prettyPrint(true);
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.prettyPrint(true);
        boolean boolean7 = outputSettings0.prettyPrint;
        int int8 = outputSettings0.indentAmount;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings0.charset("text");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: text");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        java.nio.charset.Charset charset3 = outputSettings0.getcharset();
        boolean boolean4 = outputSettings0.prettyPrint();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (byte) 100;
        int int8 = outputSettings0.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings9.clone();
        outputSettings9.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode;
        java.nio.charset.Charset charset20 = outputSettings18.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings18.escapeMode;
        boolean boolean22 = outputSettings18.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings18.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings9.escapeMode(escapeMode23);
        java.nio.charset.Charset charset25 = outputSettings9.getcharset();
        outputSettings0.setcharset(charset25);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings0.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode;
        java.nio.charset.Charset charset36 = outputSettings34.charset();
        outputSettings34.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings34.escapeMode;
        outputSettings31.setescapeMode(escapeMode39);
        boolean boolean41 = outputSettings31.prettyPrint();
        boolean boolean42 = outputSettings31.prettyPrint();
        java.nio.charset.Charset charset43 = outputSettings31.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings28.charset(charset43);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings47.escapeMode;
        java.nio.charset.Charset charset49 = outputSettings47.charset();
        outputSettings28.setcharset(charset49);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings53.escapeMode;
        java.nio.charset.Charset charset55 = outputSettings53.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings53.escapeMode;
        boolean boolean57 = outputSettings53.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings58.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = outputSettings60.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings53.escapeMode(escapeMode61);
        outputSettings53.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings65.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings67.escapeMode;
        java.nio.charset.Charset charset69 = outputSettings67.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings67.clone();
        outputSettings67.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings67.escapeMode;
        int int74 = outputSettings67.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings67.prettyPrint(false);
        java.nio.charset.Charset charset77 = outputSettings67.charset();
        boolean boolean78 = outputSettings67.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings67.escapeMode;
        outputSettings67.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings67.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings83.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings53.escapeMode(escapeMode84);
        outputSettings28.escapeMode = escapeMode84;
        int int87 = outputSettings28.indentAmount;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings83);
        org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        textNode2.text = "#text";
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.TextNode textNode13 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node14 = textNode13.clone();
        java.lang.String str15 = textNode13.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder16 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings20.clone();
        outputSettings23.indentAmount = 0;
        outputSettings23.setprettyPrint(false);
        outputSettings23.indentAmount = (short) 10;
        textNode13.outerHtmlTail(stringBuilder16, (int) '#', outputSettings23);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        java.nio.charset.Charset charset35 = outputSettings33.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings33.clone();
        boolean boolean37 = outputSettings36.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings36.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings23.escapeMode(escapeMode38);
        outputSettings23.setprettyPrint(true);
        java.nio.charset.Charset charset42 = outputSettings23.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings45.charset();
        outputSettings45.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings45.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings45.indentAmount((int) (byte) 10);
        boolean boolean53 = outputSettings45.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings54.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings56.escapeMode;
        java.nio.charset.Charset charset58 = outputSettings56.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings56.escapeMode;
        boolean boolean60 = outputSettings56.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings61.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings63.escapeMode;
        java.nio.charset.Charset charset65 = outputSettings63.charset();
        outputSettings63.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings63.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings56.escapeMode(escapeMode68);
        outputSettings45.setescapeMode(escapeMode68);
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings71.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings74.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode77 = outputSettings76.escapeMode;
        java.nio.charset.Charset charset78 = outputSettings76.charset();
        outputSettings76.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode81 = outputSettings76.escapeMode;
        outputSettings73.setescapeMode(escapeMode81);
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = outputSettings73.prettyPrint(false);
        java.nio.charset.Charset charset85 = outputSettings84.getcharset();
        outputSettings45.charset = charset85;
        org.jsoup.nodes.Entities.EscapeMode escapeMode87 = outputSettings45.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings23.escapeMode(escapeMode87);
        textNode2.outerHtmlTail(stringBuilder11, (int) (short) 100, outputSettings88);
        java.lang.String str90 = textNode2.text;
        org.jsoup.nodes.Node node91 = textNode2.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            node91.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "text" + "'", str15, "text");
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + escapeMode77 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode77.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertTrue("'" + escapeMode81 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode81.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings84);
        org.junit.Assert.assertNotNull(charset85);
        org.junit.Assert.assertTrue("'" + escapeMode87 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode87.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
        org.junit.Assert.assertNull(node91);
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.Node node4 = textNode2.nextSibling();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Attributes attributes6 = textNode2.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertNotNull(attributes6);
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        int int20 = textNode2.siblingIndex();
        java.lang.String str21 = textNode2.text;
        java.lang.String str22 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode2.after("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "text" + "'", str22, "text");
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        java.lang.String str12 = textNode2.baseUri();
        java.lang.String str13 = textNode2.toString();
        java.lang.String str15 = textNode2.absUrl("text");
        java.lang.String str16 = textNode2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode16 = textNode14.text("");
        org.jsoup.nodes.Attributes attributes17 = textNode16.attributes();
        org.jsoup.nodes.Node node18 = textNode16.previousSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        outputSettings5.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings5.escapeMode;
        outputSettings2.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings2.getprettyPrint();
        outputSettings2.indentAmount = 97;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings2.prettyPrint(false);
        boolean boolean18 = outputSettings2.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings2.prettyPrint(false);
        outputSettings20.prettyPrint = false;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(outputSettings20);
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        outputSettings2.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset10 = outputSettings8.charset();
        outputSettings2.setcharset(charset10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings14.escapeMode;
        boolean boolean18 = outputSettings14.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings14.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings2.escapeMode(escapeMode22);
        boolean boolean25 = outputSettings2.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings2.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode;
        java.nio.charset.Charset charset32 = outputSettings30.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings30.clone();
        boolean boolean34 = outputSettings33.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings33.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings33.clone();
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings33.encoder();
        outputSettings2.charsetEncoder = charsetEncoder37;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        boolean boolean20 = textNode2.isBlank();
        java.lang.String str21 = textNode2.baseUri();
        org.jsoup.nodes.Document document22 = textNode2.ownerDocument();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
        org.junit.Assert.assertNull(document22);
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "");
        boolean boolean4 = textNode2.hasAttr("#text");
        textNode2.text = "#text";
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode10 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str11 = textNode10.text;
        boolean boolean13 = textNode10.hasAttr("hi!");
        org.jsoup.nodes.Node node14 = textNode10.parent();
        textNode10.settext("hi!");
        org.jsoup.nodes.Document document17 = textNode10.ownerDocument();
        java.lang.String str19 = textNode10.attr("");
        org.jsoup.nodes.Node node20 = textNode10.parent();
        org.jsoup.nodes.TextNode textNode22 = textNode10.text("hi!");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(textNode22);
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        java.lang.String str12 = textNode2.baseUri();
        java.lang.String str13 = textNode2.getTEXT_KEY();
        java.lang.String str15 = textNode2.absUrl("hi!");
        org.jsoup.nodes.Node node16 = textNode2.nextSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode2.childNode((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        boolean boolean3 = textNode2.isBlank();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("text");
        textNode5.ensureAttributes();
        java.lang.StringBuilder stringBuilder7 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        java.nio.charset.Charset charset13 = outputSettings11.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings11.escapeMode;
        boolean boolean15 = outputSettings11.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode;
        java.nio.charset.Charset charset20 = outputSettings18.charset();
        outputSettings18.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings18.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings11.escapeMode(escapeMode23);
        java.nio.charset.Charset charset25 = outputSettings11.charset;
        textNode5.outerHtmlTail(stringBuilder7, 1, outputSettings11);
        boolean boolean27 = outputSettings11.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings11.forceAllElementAsBlock(true);
        int int30 = outputSettings11.getindentAmount();
        boolean boolean31 = outputSettings11.prettyPrint();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        textNode2.settext("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.siblingNodes();
        java.lang.String str10 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings14.clone();
        boolean boolean18 = outputSettings17.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings17.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.clone();
        boolean boolean21 = textNode2.equals((java.lang.Object) outputSettings20);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings20.escapeMode();
        java.nio.charset.Charset charset23 = outputSettings20.charset();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        java.nio.charset.Charset charset3 = outputSettings0.getcharset();
        boolean boolean4 = outputSettings0.prettyPrint();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        outputSettings0.indentAmount = (short) 1;
        outputSettings0.prettyPrint = true;
        outputSettings0.forceAllElementAsBlock = false;
        outputSettings0.setprettyPrint(false);
        outputSettings0.indentAmount = '#';
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings0.charset("hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "#text");
        int int3 = textNode2.siblingIndex();
        textNode2.settext("#text");
        org.jsoup.nodes.Document document6 = textNode2.ownerDocument();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(document6);
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        java.lang.StringBuilder stringBuilder4 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        outputSettings8.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        outputSettings8.setcharset(charset16);
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings20.escapeMode;
        boolean boolean24 = outputSettings20.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings20.escapeMode(escapeMode28);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings8.escapeMode(escapeMode28);
        boolean boolean31 = outputSettings30.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder4, (int) (short) 100, outputSettings30);
        org.jsoup.nodes.Attributes attributes33 = textNode2.attributes();
        boolean boolean35 = textNode2.hasAttr("#");
        org.jsoup.nodes.Node node36 = textNode2.parent();
        // The following exception was thrown during execution in test generation
        try {
            node36.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(attributes33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Node node11 = textNode2.parent();
        org.jsoup.nodes.Attributes attributes12 = textNode2.attributes();
        java.lang.String str13 = textNode2.text();
        textNode2.text = "text";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#", "#");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("hi!");
        org.jsoup.select.NodeVisitor nodeVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node6 = textNode4.traverse(nodeVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(textNode4);
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.gettext();
        org.jsoup.nodes.Attributes attributes10 = textNode2.attributes();
        textNode2.settext("");
        java.lang.String str13 = textNode2.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.after("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        boolean boolean10 = textNode2.hasAttr("text");
        textNode2.settext("text");
        java.lang.String str13 = textNode2.nodeName();
        java.lang.String str15 = textNode2.attr("hi!");
        java.lang.String str17 = textNode2.attr("text");
        org.jsoup.nodes.TextNode textNode19 = textNode2.text("");
        org.jsoup.nodes.Node node20 = textNode2.previousSibling();
        java.lang.StringBuilder stringBuilder21 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings23.clone();
        outputSettings23.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings23.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings32.escapeMode;
        boolean boolean36 = outputSettings32.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings32.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings23.escapeMode(escapeMode37);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings38.clone();
        outputSettings38.indentAmount = (short) 1;
        boolean boolean42 = outputSettings38.prettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings38.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings38.clone();
        boolean boolean45 = outputSettings38.prettyPrint();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder21, 0, outputSettings38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(textNode19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        boolean boolean10 = outputSettings2.forceAllElementAsBlock();
        outputSettings2.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings2.escapeMode();
        boolean boolean14 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings2.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings17.charset(charset23);
        boolean boolean25 = outputSettings24.getforceAllElementAsBlock();
        outputSettings24.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings24.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings24.getcharsetEncoder();
        outputSettings2.charsetEncoder = charsetEncoder29;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.indentAmount((int) 'a');
        outputSettings34.prettyPrint = false;
        int int37 = outputSettings34.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings40.escapeMode;
        java.nio.charset.Charset charset42 = outputSettings40.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings40.clone();
        outputSettings40.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings40.escapeMode;
        int int47 = outputSettings40.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings40.prettyPrint(false);
        java.nio.charset.Charset charset50 = outputSettings40.charset();
        outputSettings34.charset = charset50;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings31.charset(charset50);
        outputSettings31.prettyPrint = true;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(outputSettings52);
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str10 = textNode2.absUrl("text");
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        outputSettings15.prettyPrint = false;
        int int18 = outputSettings15.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings15.forceAllElementAsBlock(false);
        outputSettings15.forceAllElementAsBlock = true;
        textNode2.outerHtmlTail(stringBuilder11, (int) (short) 10, outputSettings15);
        java.lang.String str24 = textNode2.getTEXT_KEY();
        java.lang.String str25 = textNode2.text;
        java.lang.String str26 = textNode2.outerHtml();
        org.jsoup.nodes.TextNode textNode29 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str30 = textNode29.text;
        java.lang.String str31 = textNode29.outerHtml();
        java.lang.String str32 = textNode29.getTEXT_KEY();
        java.lang.String str33 = textNode29.nodeName();
        textNode29.settext("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList36 = textNode29.siblingNodes();
        java.lang.String str37 = textNode29.nodeName();
        java.lang.String str38 = textNode29.baseUri();
        java.lang.String str39 = textNode29.getWholeText();
        org.jsoup.nodes.TextNode textNode41 = textNode29.text("text");
        org.jsoup.nodes.Node node42 = textNode41.clone();
        org.jsoup.nodes.Node node45 = textNode41.attr("#", "");
        int int46 = textNode41.siblingIndex();
        java.lang.String str47 = textNode41.baseUri();
        org.jsoup.nodes.TextNode textNode49 = textNode41.text("text");
        org.jsoup.nodes.TextNode textNode52 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str53 = textNode52.text;
        java.lang.String str54 = textNode52.outerHtml();
        java.lang.String str55 = textNode52.getTEXT_KEY();
        java.lang.String str56 = textNode52.nodeName();
        boolean boolean58 = textNode52.equals((java.lang.Object) (short) 1);
        textNode52.setBaseUri("#text");
        boolean boolean61 = textNode52.isBlank();
        textNode52.text = "#text";
        java.lang.String str64 = textNode52.outerHtml();
        java.lang.String str65 = textNode52.gettext();
        java.lang.StringBuilder stringBuilder66 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings68.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings71.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode74 = outputSettings73.escapeMode;
        java.nio.charset.Charset charset75 = outputSettings73.charset();
        outputSettings73.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings73.escapeMode;
        outputSettings70.setescapeMode(escapeMode78);
        boolean boolean80 = outputSettings70.getprettyPrint();
        outputSettings70.setprettyPrint(false);
        outputSettings70.setprettyPrint(true);
        outputSettings70.setindentAmount((int) '4');
        java.nio.charset.CharsetEncoder charsetEncoder87 = outputSettings70.charsetEncoder;
        textNode52.outerHtmlTail(stringBuilder66, (-1), outputSettings70);
        java.nio.charset.CharsetEncoder charsetEncoder89 = outputSettings70.charsetEncoder;
        boolean boolean90 = textNode49.equals((java.lang.Object) charsetEncoder89);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node91 = textNode2.after((org.jsoup.nodes.Node) textNode49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "text" + "'", str24, "text");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "text" + "'", str32, "text");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "#text" + "'", str33, "#text");
        org.junit.Assert.assertNotNull(nodeList36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "#text" + "'", str37, "#text");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "#text" + "'", str39, "#text");
        org.junit.Assert.assertNotNull(textNode41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(textNode49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "text" + "'", str55, "text");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "#text" + "'", str56, "#text");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "#text" + "'", str64, "#text");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "#text" + "'", str65, "#text");
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + escapeMode74 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode74.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(charsetEncoder87);
        org.junit.Assert.assertNotNull(charsetEncoder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.gettext();
        java.lang.String str10 = textNode2.getTEXT_KEY();
        boolean boolean12 = textNode2.hasAttr("text");
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode2.childNodes();
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.siblingNodes();
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str18 = textNode17.text;
        java.lang.String str19 = textNode17.outerHtml();
        java.lang.String str20 = textNode17.getTEXT_KEY();
        java.lang.String str21 = textNode17.nodeName();
        boolean boolean23 = textNode17.equals((java.lang.Object) (short) 1);
        java.lang.String str24 = textNode17.text();
        org.jsoup.nodes.Node node25 = textNode17.previousSibling();
        org.jsoup.nodes.Node node28 = textNode17.attr("text", "hi!");
        org.jsoup.nodes.TextNode textNode31 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str32 = textNode31.text;
        java.lang.String str33 = textNode31.outerHtml();
        java.lang.String str34 = textNode31.getTEXT_KEY();
        java.lang.String str35 = textNode31.nodeName();
        boolean boolean37 = textNode31.equals((java.lang.Object) (short) 1);
        textNode31.setBaseUri("#text");
        boolean boolean40 = textNode31.isBlank();
        textNode31.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList43 = textNode31.childNodes();
        textNode31.settext("text");
        org.jsoup.nodes.Document document46 = textNode31.ownerDocument();
        org.jsoup.nodes.Attributes attributes47 = textNode31.attributes();
        java.lang.String str48 = textNode31.getTEXT_KEY();
        int int49 = textNode31.siblingIndex();
        java.lang.String str51 = textNode31.attr("hi!");
        java.lang.StringBuilder stringBuilder52 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings54.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings54.clone();
        boolean boolean58 = outputSettings54.getforceAllElementAsBlock();
        outputSettings54.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings54.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder62 = outputSettings54.encoder();
        textNode31.outerHtmlTail(stringBuilder52, 97, outputSettings54);
        boolean boolean64 = textNode17.equals((java.lang.Object) outputSettings54);
        boolean boolean66 = textNode17.hasAttr("#");
        org.jsoup.nodes.Node node67 = textNode17.clone();
        textNode17.text = "h";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node70 = textNode2.before((org.jsoup.nodes.Node) textNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "text" + "'", str34, "text");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "#text" + "'", str35, "#text");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeList43);
        org.junit.Assert.assertNull(document46);
        org.junit.Assert.assertNotNull(attributes47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "text" + "'", str48, "text");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertNotNull(charsetEncoder62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings9.escapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings25.getprettyPrint();
        java.nio.charset.Charset charset33 = outputSettings25.getcharset();
        outputSettings9.charset = charset33;
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 1, outputSettings9);
        textNode2.setBaseUri("");
        boolean boolean39 = textNode2.hasAttr("hi!");
        java.lang.String str40 = textNode2.toString();
        java.lang.Class<?> wildcardClass41 = textNode2.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        boolean boolean10 = outputSettings2.forceAllElementAsBlock();
        outputSettings2.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings2.escapeMode();
        boolean boolean14 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings2.prettyPrint(false);
        boolean boolean17 = outputSettings16.getforceAllElementAsBlock();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        java.nio.charset.Charset charset10 = outputSettings2.getcharset();
        outputSettings2.indentAmount = (short) -1;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings2.forceAllElementAsBlock(true);
        outputSettings14.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.clone();
        outputSettings17.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings17.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings17.encoder();
        outputSettings14.setcharsetEncoder(charsetEncoder24);
        outputSettings14.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset28 = outputSettings14.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings14.prettyPrint(false);
        outputSettings14.prettyPrint = true;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings30);
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.setBaseUri("hi!");
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("text");
        java.lang.String str10 = textNode9.gettext();
        org.jsoup.nodes.Node node11 = textNode9.nextSibling();
        java.lang.String str12 = textNode9.text();
        java.lang.String str13 = textNode9.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            textNode9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        textNode2.ensureAttributes();
        org.jsoup.nodes.TextNode textNode6 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str7 = textNode6.text;
        java.lang.String str8 = textNode6.outerHtml();
        java.lang.String str9 = textNode6.getTEXT_KEY();
        java.lang.String str10 = textNode6.nodeName();
        boolean boolean12 = textNode6.equals((java.lang.Object) (short) 1);
        boolean boolean14 = textNode6.hasAttr("text");
        textNode6.settext("text");
        java.lang.String str17 = textNode6.nodeName();
        java.lang.String str19 = textNode6.attr("hi!");
        org.jsoup.nodes.Node node20 = textNode6.previousSibling();
        org.jsoup.nodes.Node node21 = textNode6.clone();
        boolean boolean22 = textNode2.equals((java.lang.Object) node21);
        textNode2.text = "";
        java.lang.String str25 = textNode2.baseUri();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode27 = textNode2.splitText((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#text" + "'", str17, "#text");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.setBaseUri("hi!");
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("text");
        boolean boolean11 = textNode9.hasAttr("text");
        java.lang.String str12 = textNode9.text();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode9.siblingNodes();
        int int14 = textNode9.siblingIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.nodeName();
        boolean boolean13 = textNode2.hasAttr("hi!");
        java.lang.String str14 = textNode2.outerHtml();
        boolean boolean16 = textNode2.hasAttr("text");
        java.lang.String str17 = textNode2.text;
        textNode2.settext("");
        org.jsoup.nodes.TextNode textNode22 = org.jsoup.nodes.TextNode.createFromEncoded("text", "");
        org.jsoup.nodes.Node node23 = textNode22.nextSibling();
        org.jsoup.nodes.Node node24 = textNode22.nextSibling();
        boolean boolean25 = textNode2.equals((java.lang.Object) textNode22);
        java.lang.String str26 = textNode22.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "text" + "'", str26, "text");
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        int int11 = textNode2.siblingIndex();
        textNode2.ensureAttributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings7.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings7.prettyPrint();
        boolean boolean10 = outputSettings7.prettyPrint;
        outputSettings7.indentAmount = (short) 100;
        int int13 = outputSettings7.indentAmount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings5.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings5.charsetEncoder;
        java.nio.charset.Charset charset9 = outputSettings5.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings12.escapeMode;
        java.nio.charset.Charset charset14 = outputSettings12.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings12.escapeMode;
        boolean boolean16 = outputSettings12.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings19.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings19.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings12.escapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings28.escapeMode;
        java.nio.charset.Charset charset30 = outputSettings28.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings28.escapeMode;
        boolean boolean32 = outputSettings28.prettyPrint;
        boolean boolean33 = outputSettings28.forceAllElementAsBlock;
        boolean boolean34 = outputSettings28.getforceAllElementAsBlock();
        boolean boolean35 = outputSettings28.getprettyPrint();
        java.nio.charset.Charset charset36 = outputSettings28.getcharset();
        outputSettings12.charset = charset36;
        outputSettings5.charset = charset36;
        int int39 = outputSettings5.indentAmount;
        outputSettings5.setindentAmount(100);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings5.indentAmount((int) (byte) 100);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings46.escapeMode;
        java.nio.charset.Charset charset48 = outputSettings46.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings46.clone();
        boolean boolean50 = outputSettings49.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings49.escapeMode;
        java.nio.charset.Charset charset52 = outputSettings49.getcharset();
        int int53 = outputSettings49.indentAmount;
        java.nio.charset.Charset charset54 = outputSettings49.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings5.charset(charset54);
        java.nio.charset.Charset charset56 = null;
        outputSettings55.setcharset(charset56);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(outputSettings55);
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings10.escapeMode;
        int int14 = outputSettings10.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings10.encoder();
        outputSettings5.charsetEncoder = charsetEncoder15;
        int int17 = outputSettings5.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings5.escapeMode();
        boolean boolean19 = outputSettings5.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings5.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset22 = outputSettings5.getcharset();
        outputSettings5.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings5.escapeMode;
        boolean boolean26 = outputSettings5.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        textNode2.settext("#text");
        java.lang.String str9 = textNode2.text();
        java.lang.StringBuilder stringBuilder10 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings12.charset(charset18);
        boolean boolean20 = outputSettings19.getforceAllElementAsBlock();
        outputSettings19.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings19.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings19.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings19.clone();
        textNode2.outerHtmlTail(stringBuilder10, (int) '4', outputSettings19);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node28 = textNode2.before("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertNotNull(outputSettings25);
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.outerHtml();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings16.clone();
        outputSettings19.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode;
        java.nio.charset.Charset charset26 = outputSettings24.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings24.escapeMode;
        int int28 = outputSettings24.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings24.encoder();
        outputSettings19.charsetEncoder = charsetEncoder29;
        outputSettings11.setcharsetEncoder(charsetEncoder29);
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) 100, outputSettings11);
        org.jsoup.nodes.Node node33 = textNode2.clone();
        java.lang.StringBuilder stringBuilder34 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.escapeMode;
        java.nio.charset.Charset charset40 = outputSettings38.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings38.clone();
        outputSettings38.forceAllElementAsBlock = true;
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings38.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings38.prettyPrint(false);
        textNode2.outerHtmlTail(stringBuilder34, (int) (short) 1, outputSettings38);
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings48.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings50.escapeMode;
        outputSettings50.setindentAmount((int) '4');
        outputSettings50.setindentAmount((-1));
        boolean boolean56 = outputSettings50.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean58 = outputSettings57.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings59.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode;
        java.nio.charset.Charset charset63 = outputSettings61.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings57.charset(charset63);
        boolean boolean65 = outputSettings57.getprettyPrint();
        boolean boolean66 = outputSettings57.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings67.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode70 = outputSettings69.escapeMode;
        outputSettings57.setescapeMode(escapeMode70);
        outputSettings50.escapeMode = escapeMode70;
        outputSettings38.setescapeMode(escapeMode70);
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings38.clone();
        outputSettings38.prettyPrint = true;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings74);
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        java.lang.String str9 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        org.jsoup.nodes.Node node12 = textNode2.previousSibling();
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node14 = textNode2.previousSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        boolean boolean12 = textNode2.isBlank();
        java.lang.String str13 = textNode2.baseUri();
        java.lang.String str15 = textNode2.absUrl("hi!");
        org.jsoup.nodes.Attributes attributes16 = textNode2.attributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode18 = textNode2.splitText((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(attributes16);
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        boolean boolean10 = textNode2.hasAttr("text");
        java.lang.String str11 = textNode2.getWholeText();
        textNode2.settext("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        boolean boolean10 = textNode2.hasAttr("text");
        org.jsoup.nodes.Document document11 = textNode2.ownerDocument();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(document11);
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("#text");
        boolean boolean10 = textNode2.hasAttr("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.siblingNodes();
        textNode2.ensureAttributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeList11);
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.Node node10 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        textNode2.ensureAttributes();
        java.lang.StringBuilder stringBuilder13 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings17.clone();
        outputSettings17.forceAllElementAsBlock = true;
        outputSettings17.forceAllElementAsBlock = false;
        textNode2.outerHtmlTail(stringBuilder13, (int) '4', outputSettings17);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings17.charsetEncoder;
        outputSettings17.setindentAmount((int) (short) -1);
        boolean boolean29 = outputSettings17.prettyPrint;
        java.nio.charset.Charset charset30 = outputSettings17.charset();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charset30);
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        outputSettings2.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings2.escapeMode(escapeMode9);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings13.clone();
        outputSettings13.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings13.escapeMode;
        int int20 = outputSettings13.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings13.prettyPrint(false);
        java.nio.charset.Charset charset23 = outputSettings13.charset();
        boolean boolean24 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings13.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings13.indentAmount((int) (short) 0);
        java.nio.charset.Charset charset28 = outputSettings13.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings10.charset(charset28);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings10.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings10.indentAmount(0);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings10.charset("text");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: text");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNull(escapeMode30);
        org.junit.Assert.assertNotNull(outputSettings32);
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        boolean boolean10 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings13.escapeMode;
        boolean boolean17 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        outputSettings20.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings20.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings13.escapeMode(escapeMode25);
        outputSettings2.setescapeMode(escapeMode25);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        java.nio.charset.Charset charset34 = outputSettings31.getcharset();
        outputSettings30.setcharset(charset34);
        outputSettings2.setcharset(charset34);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        outputSettings39.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings39.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings46.escapeMode;
        java.nio.charset.Charset charset48 = outputSettings46.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings46.clone();
        outputSettings46.forceAllElementAsBlock = true;
        outputSettings46.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings46.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings55.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings57.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings59.escapeMode;
        java.nio.charset.Charset charset61 = outputSettings59.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings59.clone();
        outputSettings62.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings65.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings67.escapeMode;
        java.nio.charset.Charset charset69 = outputSettings67.charset;
        outputSettings62.setcharset(charset69);
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings71.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode74 = outputSettings73.escapeMode;
        java.nio.charset.Charset charset75 = outputSettings73.charset();
        outputSettings73.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings73.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings79.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode82 = outputSettings81.escapeMode;
        java.nio.charset.Charset charset83 = outputSettings81.charset();
        outputSettings81.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode86 = outputSettings81.escapeMode;
        outputSettings81.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder89 = outputSettings81.charsetEncoder;
        outputSettings73.setcharsetEncoder(charsetEncoder89);
        outputSettings62.setcharsetEncoder(charsetEncoder89);
        org.jsoup.nodes.Entities.EscapeMode escapeMode92 = outputSettings62.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings55.escapeMode(escapeMode92);
        outputSettings39.setescapeMode(escapeMode92);
        outputSettings2.escapeMode = escapeMode92;
        outputSettings2.setforceAllElementAsBlock(false);
        java.nio.charset.Charset charset98 = outputSettings2.getcharset();
        java.nio.charset.Charset charset99 = outputSettings2.getcharset();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + escapeMode74 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode74.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings81);
        org.junit.Assert.assertTrue("'" + escapeMode82 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode82.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertTrue("'" + escapeMode86 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode86.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder89);
        org.junit.Assert.assertTrue("'" + escapeMode92 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode92.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings93);
        org.junit.Assert.assertNotNull(charset98);
        org.junit.Assert.assertNotNull(charset99);
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode16 = textNode14.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode16.siblingNodes();
        org.jsoup.nodes.TextNode textNode19 = textNode16.text("");
        java.lang.String str20 = textNode16.getTEXT_KEY();
        org.jsoup.nodes.Attributes attributes21 = textNode16.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertNotNull(textNode19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertNotNull(attributes21);
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        java.nio.charset.Charset charset9 = outputSettings7.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings7.clone();
        outputSettings7.forceAllElementAsBlock = true;
        outputSettings7.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings7.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        textNode2.outerHtmlTail(stringBuilder3, (int) '4', outputSettings16);
        int int19 = textNode2.siblingIndex();
        boolean boolean21 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode23 = textNode2.text("");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(textNode23);
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.gettext();
        org.jsoup.nodes.TextNode textNode10 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str11 = textNode10.text;
        java.lang.String str12 = textNode10.outerHtml();
        java.lang.String str13 = textNode10.getTEXT_KEY();
        java.lang.String str14 = textNode10.nodeName();
        boolean boolean16 = textNode10.equals((java.lang.Object) (short) 1);
        textNode10.setBaseUri("#text");
        boolean boolean19 = textNode10.isBlank();
        textNode10.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList22 = textNode10.childNodes();
        textNode10.settext("text");
        boolean boolean25 = textNode2.equals((java.lang.Object) "text");
        java.lang.String str26 = textNode2.gettext();
        java.lang.String str27 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode29 = textNode2.text("#");
        java.lang.String str30 = textNode29.getTEXT_KEY();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeList22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "#text" + "'", str27, "#text");
        org.junit.Assert.assertNotNull(textNode29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "text" + "'", str30, "text");
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        org.jsoup.nodes.Node node9 = textNode2.parent();
        java.lang.String str10 = textNode2.outerHtml();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        textNode2.ensureAttributes();
        java.lang.String str21 = textNode2.nodeName();
        boolean boolean22 = textNode2.isBlank();
        org.jsoup.nodes.TextNode textNode24 = textNode2.text("");
        java.lang.String str25 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node27 = textNode2.after("text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(textNode24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings2.forceAllElementAsBlock = true;
        outputSettings2.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings2.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings11.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.clone();
        outputSettings18.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings23.escapeMode;
        int int27 = outputSettings23.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings23.encoder();
        outputSettings18.charsetEncoder = charsetEncoder28;
        java.nio.charset.CharsetEncoder charsetEncoder30 = outputSettings18.getcharsetEncoder();
        outputSettings11.setcharsetEncoder(charsetEncoder30);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings36.escapeMode;
        java.nio.charset.Charset charset38 = outputSettings36.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings32.charset(charset38);
        boolean boolean40 = outputSettings39.getforceAllElementAsBlock();
        outputSettings39.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings39.charsetEncoder;
        org.jsoup.nodes.TextNode textNode46 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str47 = textNode46.text;
        java.lang.String str48 = textNode46.outerHtml();
        java.lang.String str49 = textNode46.getTEXT_KEY();
        java.lang.String str50 = textNode46.text;
        java.lang.Object obj51 = null;
        boolean boolean52 = textNode46.equals(obj51);
        org.jsoup.nodes.Node node54 = textNode46.removeAttr("hi!");
        org.jsoup.nodes.Node node55 = textNode46.previousSibling();
        textNode46.ensureAttributes();
        java.lang.StringBuilder stringBuilder57 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings59.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode;
        java.nio.charset.Charset charset63 = outputSettings61.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings61.clone();
        outputSettings61.forceAllElementAsBlock = true;
        outputSettings61.forceAllElementAsBlock = false;
        textNode46.outerHtmlTail(stringBuilder57, (int) '4', outputSettings61);
        java.nio.charset.CharsetEncoder charsetEncoder70 = outputSettings61.encoder();
        outputSettings39.charsetEncoder = charsetEncoder70;
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings72.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings75.indentAmount((int) 'a');
        java.nio.charset.Charset charset78 = outputSettings75.getcharset();
        outputSettings74.setcharset(charset78);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings80.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode83 = outputSettings82.escapeMode;
        java.nio.charset.Charset charset84 = outputSettings82.charset();
        outputSettings74.charset = charset84;
        outputSettings39.setcharset(charset84);
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings11.charset(charset84);
        boolean boolean88 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings11.indentAmount((int) '#');
        java.nio.charset.Charset charset91 = outputSettings90.charset();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "text" + "'", str49, "text");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(charsetEncoder70);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertTrue("'" + escapeMode83 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode83.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset84);
        org.junit.Assert.assertNotNull(outputSettings87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertNotNull(charset91);
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "i!");
        textNode2.ensureAttributes();
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings9.escapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings25.getprettyPrint();
        java.nio.charset.Charset charset33 = outputSettings25.getcharset();
        outputSettings9.charset = charset33;
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 1, outputSettings9);
        java.nio.charset.Charset charset36 = outputSettings9.charset();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(charset36);
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean12 = textNode2.hasAttr("");
        org.jsoup.nodes.Node node14 = textNode2.removeAttr("#text");
        org.jsoup.nodes.Node node15 = textNode2.nextSibling();
        java.lang.String str16 = textNode2.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode2.childNode((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset;
        outputSettings5.setcharset(charset12);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode;
        java.nio.charset.Charset charset26 = outputSettings24.charset();
        outputSettings24.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings24.escapeMode;
        outputSettings24.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings24.charsetEncoder;
        outputSettings16.setcharsetEncoder(charsetEncoder32);
        outputSettings5.setcharsetEncoder(charsetEncoder32);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings5.charset("#text");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: #text");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder32);
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        org.jsoup.nodes.Node node14 = textNode2.parent();
        java.lang.String str15 = textNode2.getWholeText();
        java.lang.StringBuilder stringBuilder16 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        outputSettings20.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings20.escapeMode;
        outputSettings20.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder28 = outputSettings20.charsetEncoder;
        outputSettings20.forceAllElementAsBlock = false;
        outputSettings20.prettyPrint = true;
        java.nio.charset.Charset charset33 = outputSettings20.charset();
        java.nio.charset.Charset charset34 = outputSettings20.charset;
        textNode2.outerHtmlTail(stringBuilder16, 1, outputSettings20);
        outputSettings20.forceAllElementAsBlock = false;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(charset34);
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("hi!");
        org.jsoup.nodes.Node node13 = textNode10.attr("hi!", "#text");
        textNode10.settext("text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node17 = textNode10.before("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        textNode2.settext("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.siblingNodes();
        java.lang.String str10 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.childNodes();
        java.lang.String str12 = textNode2.toString();
        org.jsoup.nodes.Node node13 = textNode2.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = textNode2.before("i!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("text");
        java.lang.String str14 = textNode2.baseUri();
        int int15 = textNode2.siblingIndex();
        java.lang.String str16 = textNode2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        boolean boolean10 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings2.getescapeMode();
        boolean boolean12 = outputSettings2.getprettyPrint();
        boolean boolean13 = outputSettings2.prettyPrint;
        boolean boolean14 = outputSettings2.getprettyPrint();
        int int15 = outputSettings2.indentAmount();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        outputSettings2.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset10 = outputSettings8.charset();
        outputSettings2.setcharset(charset10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings14.escapeMode;
        boolean boolean18 = outputSettings14.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings14.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings2.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.forceAllElementAsBlock(false);
        outputSettings26.forceAllElementAsBlock = true;
        outputSettings26.indentAmount = (short) 100;
        int int31 = outputSettings26.indentAmount;
        java.lang.Class<?> wildcardClass32 = outputSettings26.getClass();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.gettext();
        org.jsoup.nodes.TextNode textNode11 = textNode2.text("hi!");
        java.lang.String str12 = textNode2.outerHtml();
        java.lang.String str14 = textNode2.attr("text");
        org.jsoup.nodes.Node node15 = textNode2.parent();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node17 = textNode2.before("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(textNode11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.gettext();
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str14 = textNode12.attr("text");
        boolean boolean15 = textNode2.equals((java.lang.Object) textNode12);
        java.lang.String str17 = textNode12.absUrl("text");
        org.jsoup.nodes.Node node18 = textNode12.previousSibling();
        org.jsoup.nodes.TextNode textNode20 = textNode12.text("");
        org.jsoup.nodes.Document document21 = textNode12.ownerDocument();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(textNode20);
        org.junit.Assert.assertNull(document21);
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        textNode2.settext("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.siblingNodes();
        java.lang.String str10 = textNode2.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.childNodes();
        org.jsoup.nodes.Attributes attributes12 = textNode2.attributes();
        java.lang.String str13 = textNode2.outerHtml();
        org.jsoup.nodes.Document document14 = textNode2.ownerDocument();
        java.lang.StringBuilder stringBuilder15 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode;
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings22.charset(charset28);
        outputSettings19.setcharset(charset28);
        boolean boolean31 = outputSettings19.prettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings19.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings35.escapeMode;
        outputSettings35.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings41.escapeMode;
        java.nio.charset.Charset charset43 = outputSettings41.charset();
        outputSettings35.setcharset(charset43);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings45.clone();
        outputSettings45.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings45.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings35.escapeMode(escapeMode51);
        outputSettings19.setescapeMode(escapeMode51);
        boolean boolean54 = outputSettings19.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder15, (int) (short) 100, outputSettings19);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node57 = textNode2.before("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertNull(document14);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings5.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        outputSettings8.setprettyPrint(false);
        outputSettings8.forceAllElementAsBlock = true;
        outputSettings8.setprettyPrint(false);
        outputSettings8.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings8.encoder();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder18);
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        int int20 = textNode2.siblingIndex();
        java.lang.String str22 = textNode2.attr("hi!");
        org.jsoup.nodes.TextNode textNode24 = textNode2.text("text");
        java.lang.String str25 = textNode24.gettext();
        java.lang.String str26 = textNode24.baseUri();
        java.lang.Class<?> wildcardClass27 = textNode24.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(textNode24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "text" + "'", str25, "text");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#text" + "'", str26, "#text");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        int int8 = outputSettings7.indentAmount;
        outputSettings7.setforceAllElementAsBlock(true);
        boolean boolean11 = outputSettings7.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings2.forceAllElementAsBlock = true;
        java.nio.charset.Charset charset8 = outputSettings2.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings2.prettyPrint(true);
        java.nio.charset.Charset charset11 = outputSettings10.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings10.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings10.indentAmount(35);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings15);
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        java.lang.String str9 = textNode2.baseUri();
        java.lang.String str10 = textNode2.outerHtml();
        org.jsoup.nodes.Node node11 = textNode2.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = node11.childNodes();
        org.jsoup.nodes.Node node13 = node11.clone();
        java.lang.String str14 = node13.baseUri();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings7.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings7.prettyPrint();
        boolean boolean10 = outputSettings7.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings7.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings17.charset(charset23);
        outputSettings14.setcharset(charset23);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings7.charset(charset23);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean28 = outputSettings27.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode;
        java.nio.charset.Charset charset33 = outputSettings31.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings27.charset(charset33);
        boolean boolean35 = outputSettings34.getforceAllElementAsBlock();
        boolean boolean36 = outputSettings34.prettyPrint();
        boolean boolean37 = outputSettings34.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings34.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings43.escapeMode;
        java.nio.charset.Charset charset45 = outputSettings43.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings43.clone();
        outputSettings43.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings43.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings39.escapeMode(escapeMode49);
        int int51 = outputSettings50.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings52.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings54.escapeMode;
        java.nio.charset.Charset charset56 = outputSettings54.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings54.clone();
        outputSettings54.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings54.escapeMode;
        int int61 = outputSettings54.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings54.prettyPrint(false);
        java.nio.charset.Charset charset64 = outputSettings54.charset();
        boolean boolean65 = outputSettings54.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings54.escapeMode;
        outputSettings50.escapeMode = escapeMode66;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings34.escapeMode(escapeMode66);
        outputSettings7.setescapeMode(escapeMode66);
        outputSettings7.indentAmount = '#';
        java.nio.charset.Charset charset72 = outputSettings7.getcharset();
        outputSettings7.setprettyPrint(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 97 + "'", int61 == 97);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNotNull(charset72);
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        java.nio.charset.Charset charset9 = outputSettings7.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings7.clone();
        outputSettings7.forceAllElementAsBlock = true;
        outputSettings7.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings7.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        textNode2.outerHtmlTail(stringBuilder3, (int) '4', outputSettings16);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        outputSettings21.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings21.indentAmount((int) (byte) 10);
        boolean boolean29 = outputSettings21.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings32.escapeMode;
        boolean boolean36 = outputSettings32.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        outputSettings39.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings39.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings32.escapeMode(escapeMode44);
        outputSettings21.setescapeMode(escapeMode44);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        java.nio.charset.Charset charset54 = outputSettings52.charset();
        outputSettings52.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings52.escapeMode;
        outputSettings49.setescapeMode(escapeMode57);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings49.prettyPrint(false);
        java.nio.charset.Charset charset61 = outputSettings60.getcharset();
        outputSettings21.charset = charset61;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings16.charset(charset61);
        int int64 = outputSettings16.indentAmount;
        boolean boolean65 = outputSettings16.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings68.escapeMode;
        java.nio.charset.Charset charset70 = outputSettings68.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings68.clone();
        outputSettings71.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings74.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode77 = outputSettings76.escapeMode;
        java.nio.charset.Charset charset78 = outputSettings76.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings76.escapeMode;
        int int80 = outputSettings76.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder81 = outputSettings76.encoder();
        outputSettings71.charsetEncoder = charsetEncoder81;
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean84 = outputSettings83.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings85 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = outputSettings85.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode88 = outputSettings87.escapeMode;
        java.nio.charset.Charset charset89 = outputSettings87.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings83.charset(charset89);
        outputSettings71.charset = charset89;
        boolean boolean92 = outputSettings71.prettyPrint();
        outputSettings71.setforceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder95 = outputSettings71.encoder();
        outputSettings16.setcharsetEncoder(charsetEncoder95);
        outputSettings16.prettyPrint = false;
        java.nio.charset.CharsetEncoder charsetEncoder99 = outputSettings16.charsetEncoder;
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + escapeMode77 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode77.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(outputSettings87);
        org.junit.Assert.assertTrue("'" + escapeMode88 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode88.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset89);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(charsetEncoder95);
        org.junit.Assert.assertNotNull(charsetEncoder99);
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        java.nio.charset.Charset charset9 = outputSettings7.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings7.clone();
        outputSettings7.forceAllElementAsBlock = true;
        outputSettings7.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings7.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        textNode2.outerHtmlTail(stringBuilder3, (int) '4', outputSettings16);
        int int19 = textNode2.siblingIndex();
        org.jsoup.nodes.Document document20 = textNode2.ownerDocument();
        java.lang.StringBuilder stringBuilder21 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        java.nio.charset.Charset charset26 = outputSettings23.getcharset();
        boolean boolean27 = outputSettings23.prettyPrint();
        textNode2.outerHtmlTail(stringBuilder21, (int) (short) 100, outputSettings23);
        outputSettings23.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings23.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.indentAmount((int) 'a');
        outputSettings34.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        outputSettings39.prettyPrint = false;
        java.nio.charset.Charset charset42 = outputSettings39.getcharset();
        outputSettings34.charset = charset42;
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings34.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings34.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings51.escapeMode;
        java.nio.charset.Charset charset53 = outputSettings51.charset();
        outputSettings51.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings51.escapeMode;
        outputSettings48.setescapeMode(escapeMode56);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings48.prettyPrint(false);
        outputSettings48.setindentAmount((int) (short) -1);
        int int62 = outputSettings48.getindentAmount();
        boolean boolean63 = outputSettings48.prettyPrint;
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings48.getcharsetEncoder();
        outputSettings34.charsetEncoder = charsetEncoder64;
        outputSettings23.setcharsetEncoder(charsetEncoder64);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(document20);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(charsetEncoder64);
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.gettext();
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str14 = textNode12.attr("text");
        boolean boolean15 = textNode2.equals((java.lang.Object) textNode12);
        java.lang.String str16 = textNode2.nodeName();
        textNode2.setBaseUri("#");
        boolean boolean19 = textNode2.isBlank();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#text" + "'", str16, "#text");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        java.nio.charset.Charset charset10 = outputSettings2.getcharset();
        boolean boolean11 = outputSettings2.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings12.charset(charset18);
        boolean boolean20 = outputSettings19.getforceAllElementAsBlock();
        outputSettings19.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings19.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings19.getcharsetEncoder();
        outputSettings19.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings19.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.getescapeMode();
        outputSettings2.escapeMode = escapeMode28;
        outputSettings2.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset32 = outputSettings2.charset();
        outputSettings2.prettyPrint = false;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset32);
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.toString();
        org.jsoup.nodes.Node node10 = textNode2.clone();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("i!");
        boolean boolean13 = textNode12.isBlank();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#", "");
        boolean boolean4 = textNode2.hasAttr("hi!");
        java.lang.String str5 = textNode2.text;
        textNode2.settext("#text");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#" + "'", str5, "#");
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings7.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings9.clone();
        boolean boolean13 = outputSettings9.getforceAllElementAsBlock();
        outputSettings9.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings9.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings9.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        outputSettings20.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode;
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        outputSettings20.setcharset(charset28);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings32.escapeMode;
        boolean boolean36 = outputSettings32.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings32.escapeMode(escapeMode40);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings20.escapeMode(escapeMode40);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings9.escapeMode(escapeMode40);
        boolean boolean44 = outputSettings43.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings43.prettyPrint(true);
        outputSettings46.setprettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings46.getcharsetEncoder();
        java.nio.charset.Charset charset50 = outputSettings46.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings7.charset(charset50);
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings7.charsetEncoder;
        outputSettings7.setforceAllElementAsBlock(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(charsetEncoder49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(charsetEncoder52);
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.text = "text";
        java.lang.String str7 = textNode2.text;
        java.lang.String str8 = textNode2.nodeName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "text" + "'", str7, "text");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        org.jsoup.nodes.Node node5 = textNode2.parent();
        org.jsoup.nodes.Node node7 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Attributes attributes8 = textNode2.attributes();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("");
        java.lang.String str11 = textNode10.outerHtml();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(attributes8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings9.escapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings25.getprettyPrint();
        java.nio.charset.Charset charset33 = outputSettings25.getcharset();
        outputSettings9.charset = charset33;
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 1, outputSettings9);
        java.lang.String str37 = textNode2.absUrl("hi!");
        org.jsoup.nodes.Document document38 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node39 = textNode2.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(document38);
        org.junit.Assert.assertNull(node39);
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        int int6 = outputSettings2.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings9.clone();
        outputSettings12.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings17.escapeMode;
        int int21 = outputSettings17.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings17.encoder();
        outputSettings12.charsetEncoder = charsetEncoder22;
        java.nio.charset.CharsetEncoder charsetEncoder24 = outputSettings12.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings12.escapeMode();
        outputSettings2.setescapeMode(escapeMode25);
        java.nio.charset.Charset charset27 = outputSettings2.charset;
        outputSettings2.indentAmount = 10;
        outputSettings2.setforceAllElementAsBlock(false);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings2.forceAllElementAsBlock = true;
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings2.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings2.prettyPrint(false);
        java.nio.charset.Charset charset11 = outputSettings2.charset();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(charset11);
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        textNode2.ensureAttributes();
        java.lang.String str21 = textNode2.nodeName();
        boolean boolean22 = textNode2.isBlank();
        org.jsoup.nodes.TextNode textNode24 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode26 = textNode24.text("hi!");
        textNode26.text = "text";
        org.jsoup.nodes.TextNode textNode30 = textNode26.splitText((int) (byte) 1);
        java.util.List<org.jsoup.nodes.Node> nodeList31 = textNode26.siblingNodes();
        java.util.List<org.jsoup.nodes.Node> nodeList32 = textNode26.siblingNodes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(textNode24);
        org.junit.Assert.assertNotNull(textNode26);
        org.junit.Assert.assertNotNull(textNode30);
        org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertNotNull(nodeList32);
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        int int6 = outputSettings2.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings2.encoder();
        java.nio.charset.Charset charset8 = outputSettings2.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings2.indentAmount((int) (byte) 100);
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings0.escapeMode;
        java.lang.Class<?> wildcardClass7 = outputSettings0.getClass();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset;
        java.nio.charset.CharsetEncoder charsetEncoder5 = outputSettings2.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings2.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings10.escapeMode;
        int int14 = outputSettings10.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings10.encoder();
        outputSettings5.charsetEncoder = charsetEncoder15;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean18 = outputSettings17.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings17.charset(charset23);
        outputSettings5.charset = charset23;
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings5.forceAllElementAsBlock(false);
        int int29 = outputSettings5.getindentAmount();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings0.getprettyPrint();
        boolean boolean9 = outputSettings0.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder10 = outputSettings0.getcharsetEncoder();
        boolean boolean11 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings0.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        outputSettings13.indentAmount = 97;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str10 = textNode2.absUrl("text");
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        outputSettings15.prettyPrint = false;
        int int18 = outputSettings15.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings15.forceAllElementAsBlock(false);
        outputSettings15.forceAllElementAsBlock = true;
        textNode2.outerHtmlTail(stringBuilder11, (int) (short) 10, outputSettings15);
        org.jsoup.nodes.Node node24 = textNode2.clone();
        org.jsoup.nodes.Document document25 = node24.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node27 = node24.after("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(document25);
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        boolean boolean7 = outputSettings5.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings5.indentAmount((int) (short) 0);
        outputSettings9.setprettyPrint(false);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        boolean boolean10 = textNode2.hasAttr("text");
        textNode2.settext("");
        java.lang.String str13 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.TextNode textNode14 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.TextNode textNode16 = textNode14.text("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode16.childNodes();
        org.jsoup.nodes.Node node19 = textNode16.removeAttr("text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node20 = textNode2.before((org.jsoup.nodes.Node) textNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings10.escapeMode;
        int int14 = outputSettings10.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings10.encoder();
        outputSettings5.charsetEncoder = charsetEncoder15;
        int int17 = outputSettings5.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings5.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.TextNode textNode23 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str24 = textNode23.text;
        java.lang.String str25 = textNode23.outerHtml();
        java.lang.String str26 = textNode23.getTEXT_KEY();
        java.lang.String str27 = textNode23.nodeName();
        org.jsoup.nodes.Attributes attributes28 = textNode23.attributes();
        org.jsoup.nodes.Node node29 = textNode23.clone();
        java.lang.StringBuilder stringBuilder30 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode;
        outputSettings34.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings40.escapeMode;
        java.nio.charset.Charset charset42 = outputSettings40.charset();
        outputSettings34.setcharset(charset42);
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings46.escapeMode;
        java.nio.charset.Charset charset48 = outputSettings46.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings46.escapeMode;
        boolean boolean50 = outputSettings46.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings53.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings46.escapeMode(escapeMode54);
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings34.escapeMode(escapeMode54);
        boolean boolean57 = outputSettings56.getforceAllElementAsBlock();
        textNode23.outerHtmlTail(stringBuilder30, (int) (byte) 0, outputSettings56);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings59.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode;
        java.nio.charset.Charset charset63 = outputSettings61.charset();
        outputSettings61.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings61.escapeMode;
        outputSettings56.escapeMode = escapeMode66;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings68.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings70.escapeMode;
        java.nio.charset.Charset charset72 = outputSettings70.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings70.escapeMode;
        boolean boolean74 = outputSettings70.prettyPrint;
        boolean boolean75 = outputSettings70.forceAllElementAsBlock;
        boolean boolean76 = outputSettings70.getforceAllElementAsBlock();
        boolean boolean77 = outputSettings70.getprettyPrint();
        boolean boolean78 = outputSettings70.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings70.escapeMode();
        outputSettings56.escapeMode = escapeMode79;
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings81.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings83.escapeMode;
        outputSettings83.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings87 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings89 = outputSettings87.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode90 = outputSettings89.escapeMode;
        java.nio.charset.Charset charset91 = outputSettings89.charset();
        outputSettings83.setcharset(charset91);
        org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings56.charset(charset91);
        java.nio.charset.Charset charset94 = outputSettings56.charset();
        java.nio.charset.Charset charset95 = outputSettings56.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode96 = outputSettings56.escapeMode;
        outputSettings20.setescapeMode(escapeMode96);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "text" + "'", str26, "text");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "#text" + "'", str27, "#text");
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings83);
        org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings89);
        org.junit.Assert.assertTrue("'" + escapeMode90 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode90.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset91);
        org.junit.Assert.assertNotNull(outputSettings93);
        org.junit.Assert.assertNotNull(charset94);
        org.junit.Assert.assertNotNull(charset95);
        org.junit.Assert.assertTrue("'" + escapeMode96 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode96.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str3 = textNode2.getTEXT_KEY();
        java.lang.String str4 = textNode2.getTEXT_KEY();
        java.lang.String str5 = textNode2.outerHtml();
        java.lang.String str6 = textNode2.gettext();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("#");
        boolean boolean10 = textNode2.hasAttr("");
        java.lang.String str11 = textNode2.text();
        org.jsoup.nodes.Node node14 = textNode2.attr("#", "#text");
        java.lang.String str15 = textNode2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "text" + "'", str4, "text");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#" + "'", str11, "#");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#" + "'", str15, "#");
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "");
        org.jsoup.nodes.Node node5 = textNode2.attr("text", "hi!");
        textNode2.text = "hi!";
        boolean boolean8 = textNode2.isBlank();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode2.childNode(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.text = "text";
        textNode2.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.siblingNodes();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("#");
        java.lang.String str11 = textNode10.getWholeText();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings14.clone();
        outputSettings14.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings14.escapeMode;
        int int21 = outputSettings14.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings14.prettyPrint(false);
        java.nio.charset.Charset charset24 = outputSettings14.charset();
        boolean boolean25 = outputSettings14.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings14.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings14.indentAmount((int) (short) 0);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings28.clone();
        boolean boolean30 = textNode10.equals((java.lang.Object) outputSettings29);
        java.lang.String str31 = textNode10.text();
        org.jsoup.nodes.Node node34 = textNode10.attr("#text", "");
        org.jsoup.nodes.Node node35 = node34.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node37 = node34.after("#text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#" + "'", str11, "#");
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "#" + "'", str31, "#");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node1 = textNode0.clone();
        java.lang.String str2 = textNode0.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        java.nio.charset.Charset charset9 = outputSettings7.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings7.clone();
        outputSettings10.indentAmount = 0;
        outputSettings10.setprettyPrint(false);
        outputSettings10.indentAmount = (short) 10;
        textNode0.outerHtmlTail(stringBuilder3, (int) '#', outputSettings10);
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings10.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings10.forceAllElementAsBlock(false);
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings10.getcharsetEncoder();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "text" + "'", str2, "text");
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        java.nio.charset.Charset charset13 = outputSettings11.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings11.clone();
        java.nio.charset.Charset charset15 = outputSettings11.charset;
        outputSettings8.charset = charset15;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        outputSettings8.escapeMode = escapeMode20;
        java.nio.charset.Charset charset22 = outputSettings8.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings8.getescapeMode();
        outputSettings8.prettyPrint = false;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        boolean boolean10 = outputSettings2.getforceAllElementAsBlock();
        outputSettings2.setindentAmount((int) (short) 10);
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings2.escapeMode();
        int int14 = outputSettings2.indentAmount();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "#text");
        java.lang.String str3 = textNode2.toString();
        java.lang.StringBuilder stringBuilder4 = null;
        org.jsoup.nodes.TextNode textNode6 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node7 = textNode6.clone();
        java.lang.String str8 = textNode6.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings13.clone();
        outputSettings16.indentAmount = 0;
        outputSettings16.setprettyPrint(false);
        outputSettings16.indentAmount = (short) 10;
        textNode6.outerHtmlTail(stringBuilder9, (int) '#', outputSettings16);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings16.getescapeMode();
        boolean boolean25 = outputSettings16.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings28.escapeMode;
        java.nio.charset.Charset charset30 = outputSettings28.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings28.escapeMode;
        boolean boolean32 = outputSettings28.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings35.escapeMode;
        java.nio.charset.Charset charset37 = outputSettings35.charset();
        outputSettings35.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings35.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings28.escapeMode(escapeMode40);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.indentAmount((int) 'a');
        java.nio.charset.Charset charset48 = outputSettings45.getcharset();
        outputSettings44.setcharset(charset48);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        java.nio.charset.Charset charset54 = outputSettings52.charset();
        outputSettings44.charset = charset54;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings28.charset(charset54);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings57.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings59.escapeMode;
        java.nio.charset.Charset charset61 = outputSettings59.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings59.escapeMode;
        int int63 = outputSettings59.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings64.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings66.escapeMode;
        java.nio.charset.Charset charset68 = outputSettings66.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings66.clone();
        outputSettings69.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings72.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode75 = outputSettings74.escapeMode;
        java.nio.charset.Charset charset76 = outputSettings74.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode77 = outputSettings74.escapeMode;
        int int78 = outputSettings74.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings74.encoder();
        outputSettings69.charsetEncoder = charsetEncoder79;
        java.nio.charset.CharsetEncoder charsetEncoder81 = outputSettings69.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode82 = outputSettings69.escapeMode();
        outputSettings59.setescapeMode(escapeMode82);
        outputSettings56.setescapeMode(escapeMode82);
        org.jsoup.nodes.Document.OutputSettings outputSettings85 = outputSettings16.escapeMode(escapeMode82);
        outputSettings85.setprettyPrint(false);
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder4, (int) (short) 100, outputSettings85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertTrue("'" + escapeMode75 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode75.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset76);
        org.junit.Assert.assertTrue("'" + escapeMode77 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode77.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder79);
        org.junit.Assert.assertNotNull(charsetEncoder81);
        org.junit.Assert.assertTrue("'" + escapeMode82 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode82.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings85);
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        outputSettings11.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        outputSettings11.setcharset(charset19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings23.escapeMode;
        boolean boolean27 = outputSettings23.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings23.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings11.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings0.escapeMode(escapeMode31);
        boolean boolean35 = outputSettings34.getforceAllElementAsBlock();
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings34.escapeMode;
        outputSettings34.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings42.charsetEncoder;
        outputSettings34.setcharsetEncoder(charsetEncoder43);
        boolean boolean45 = outputSettings34.getprettyPrint();
        java.nio.charset.Charset charset46 = outputSettings34.charset;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charset46);
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        textNode2.ensureAttributes();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        boolean boolean10 = outputSettings2.getforceAllElementAsBlock();
        outputSettings2.setindentAmount((int) (short) 10);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings15.escapeMode;
        boolean boolean19 = outputSettings15.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings22.escapeMode;
        java.nio.charset.Charset charset24 = outputSettings22.charset();
        outputSettings22.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings22.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings15.escapeMode(escapeMode27);
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings28.escapeMode;
        outputSettings2.escapeMode = escapeMode29;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        java.nio.charset.Charset charset35 = outputSettings33.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings33.escapeMode;
        int int37 = outputSettings33.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings33.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings33.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings2.escapeMode(escapeMode39);
        outputSettings40.indentAmount = (byte) 0;
        outputSettings40.forceAllElementAsBlock = true;
        org.jsoup.nodes.TextNode textNode47 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str48 = textNode47.text;
        java.lang.String str49 = textNode47.outerHtml();
        java.lang.String str50 = textNode47.getTEXT_KEY();
        java.lang.String str51 = textNode47.nodeName();
        boolean boolean53 = textNode47.equals((java.lang.Object) (short) 1);
        textNode47.text = "#";
        java.util.List<org.jsoup.nodes.Node> nodeList56 = textNode47.childNodes();
        java.lang.String str57 = textNode47.text;
        java.lang.StringBuilder stringBuilder58 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings60.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings63.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.escapeMode;
        java.nio.charset.Charset charset67 = outputSettings65.charset();
        outputSettings65.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode70 = outputSettings65.escapeMode;
        outputSettings62.setescapeMode(escapeMode70);
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings62.prettyPrint(false);
        outputSettings62.setindentAmount((int) (short) -1);
        int int76 = outputSettings62.getindentAmount();
        boolean boolean77 = outputSettings62.getforceAllElementAsBlock();
        textNode47.outerHtmlTail(stringBuilder58, 0, outputSettings62);
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings62.getcharsetEncoder();
        java.nio.charset.Charset charset80 = outputSettings62.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = outputSettings40.charset(charset80);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "text" + "'", str50, "text");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "#text" + "'", str51, "#text");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeList56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "#" + "'", str57, "#");
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(charsetEncoder79);
        org.junit.Assert.assertNotNull(charset80);
        org.junit.Assert.assertNotNull(outputSettings81);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.lang.String str8 = textNode2.text();
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode2.childNodes();
        textNode2.text = "hi!";
        org.jsoup.nodes.Node node12 = textNode2.parent();
        textNode2.text = "";
        textNode2.setBaseUri("hi!");
        java.lang.StringBuilder stringBuilder17 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings21.clone();
        outputSettings21.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings28.charset(charset34);
        outputSettings21.charset = charset34;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings39.escapeMode;
        boolean boolean43 = outputSettings39.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings46.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings39.escapeMode(escapeMode47);
        outputSettings39.forceAllElementAsBlock = false;
        outputSettings39.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder53 = outputSettings39.encoder();
        outputSettings21.setcharsetEncoder(charsetEncoder53);
        boolean boolean55 = outputSettings21.forceAllElementAsBlock;
        int int56 = outputSettings21.indentAmount();
        outputSettings21.setindentAmount((int) (short) 10);
        java.nio.charset.CharsetEncoder charsetEncoder59 = outputSettings21.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings21.escapeMode;
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtmlHead(stringBuilder17, (int) (byte) 1, outputSettings21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(nodeList9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertNotNull(charsetEncoder53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder59);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings8.indentAmount(0);
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings11.charsetEncoder;
        outputSettings11.setprettyPrint(true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(charsetEncoder12);
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        java.nio.charset.Charset charset9 = outputSettings7.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings7.clone();
        outputSettings7.forceAllElementAsBlock = true;
        outputSettings7.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings7.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        textNode2.outerHtmlTail(stringBuilder3, (int) '4', outputSettings16);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        outputSettings21.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings21.indentAmount((int) (byte) 10);
        boolean boolean29 = outputSettings21.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings32.escapeMode;
        boolean boolean36 = outputSettings32.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        outputSettings39.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings39.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings32.escapeMode(escapeMode44);
        outputSettings21.setescapeMode(escapeMode44);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        java.nio.charset.Charset charset54 = outputSettings52.charset();
        outputSettings52.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings52.escapeMode;
        outputSettings49.setescapeMode(escapeMode57);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings49.prettyPrint(false);
        java.nio.charset.Charset charset61 = outputSettings60.getcharset();
        outputSettings21.charset = charset61;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings16.charset(charset61);
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings63.getcharsetEncoder();
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(charsetEncoder64);
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        java.nio.charset.Charset charset3 = outputSettings0.getcharset();
        boolean boolean4 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset10 = outputSettings8.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings8.clone();
        boolean boolean12 = outputSettings11.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings11.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings11.clone();
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings11.charsetEncoder;
        boolean boolean16 = outputSettings11.forceAllElementAsBlock;
        boolean boolean17 = outputSettings11.getprettyPrint();
        outputSettings11.forceAllElementAsBlock = false;
        int int20 = outputSettings11.getindentAmount();
        java.nio.charset.CharsetEncoder charsetEncoder21 = outputSettings11.encoder();
        outputSettings0.setcharsetEncoder(charsetEncoder21);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder21);
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        org.jsoup.nodes.Node node13 = textNode2.attr("text", "hi!");
        org.jsoup.nodes.TextNode textNode15 = textNode2.text("#text");
        textNode2.settext("#text");
        java.lang.String str18 = textNode2.getWholeText();
        java.lang.String str19 = textNode2.nodeName();
        java.lang.String str20 = textNode2.getTEXT_KEY();
        java.lang.String str21 = textNode2.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode23 = textNode2.splitText((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#text" + "'", str18, "#text");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#text" + "'", str19, "#text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        java.nio.charset.Charset charset3 = outputSettings0.getcharset();
        boolean boolean4 = outputSettings0.prettyPrint();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        boolean boolean6 = outputSettings0.forceAllElementAsBlock();
        int int7 = outputSettings0.indentAmount();
        outputSettings0.indentAmount = (short) 10;
        outputSettings0.prettyPrint = true;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        boolean boolean6 = textNode2.hasAttr("text");
        textNode2.settext("hi!");
        java.lang.String str9 = textNode2.getTEXT_KEY();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#", "hi!");
        org.jsoup.nodes.Node node4 = textNode2.removeAttr("text");
        org.jsoup.nodes.Node node5 = node4.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node7 = node5.before("i!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        org.jsoup.nodes.Node node19 = textNode2.previousSibling();
        java.lang.StringBuilder stringBuilder20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode;
        java.nio.charset.Charset charset26 = outputSettings24.charset();
        outputSettings24.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings24.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings24.indentAmount((int) (byte) 10);
        boolean boolean32 = outputSettings24.getforceAllElementAsBlock();
        outputSettings24.setindentAmount((int) (short) 10);
        textNode2.outerHtmlTail(stringBuilder20, (int) '#', outputSettings24);
        java.lang.String str36 = textNode2.baseUri();
        java.lang.StringBuilder stringBuilder37 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings41.escapeMode;
        java.nio.charset.Charset charset43 = outputSettings41.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings41.clone();
        outputSettings44.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings49.escapeMode;
        java.nio.charset.Charset charset51 = outputSettings49.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings49.escapeMode;
        int int53 = outputSettings49.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings49.encoder();
        outputSettings44.charsetEncoder = charsetEncoder54;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean57 = outputSettings56.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings58.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode61 = outputSettings60.escapeMode;
        java.nio.charset.Charset charset62 = outputSettings60.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings56.charset(charset62);
        outputSettings44.charset = charset62;
        boolean boolean65 = outputSettings44.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings44.indentAmount(100);
        textNode2.outerHtmlTail(stringBuilder37, (int) (short) -1, outputSettings67);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "#text" + "'", str36, "#text");
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + escapeMode61 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode61.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(outputSettings67);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("");
        int int15 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode17 = textNode2.text("hi!");
        textNode2.settext("");
        java.lang.String str21 = textNode2.absUrl("h");
        textNode2.settext("");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        textNode2.text = "#text";
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("hi!");
        org.jsoup.nodes.Node node10 = textNode2.nextSibling();
        java.lang.String str11 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Document document12 = textNode2.ownerDocument();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text" + "'", str11, "text");
        org.junit.Assert.assertNull(document12);
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.gettext();
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str14 = textNode12.attr("text");
        boolean boolean15 = textNode2.equals((java.lang.Object) textNode12);
        org.jsoup.nodes.Node node16 = textNode2.previousSibling();
        java.lang.String str17 = textNode2.gettext();
        boolean boolean18 = textNode2.isBlank();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings2.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings2.escapeMode;
        boolean boolean9 = outputSettings2.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings2.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = null;
        outputSettings10.setescapeMode(escapeMode11);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings5.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        outputSettings11.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        outputSettings11.setcharset(charset19);
        outputSettings5.charset = charset19;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode;
        java.nio.charset.Charset charset26 = outputSettings24.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings24.clone();
        outputSettings24.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings24.escapeMode;
        int int31 = outputSettings24.getindentAmount();
        org.jsoup.nodes.TextNode textNode34 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str35 = textNode34.text;
        java.lang.String str36 = textNode34.outerHtml();
        java.lang.String str37 = textNode34.getTEXT_KEY();
        java.lang.String str38 = textNode34.nodeName();
        boolean boolean39 = textNode34.isBlank();
        java.lang.String str40 = textNode34.outerHtml();
        java.lang.StringBuilder stringBuilder41 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings48.escapeMode;
        java.nio.charset.Charset charset50 = outputSettings48.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings48.clone();
        outputSettings51.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings54.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings56.escapeMode;
        java.nio.charset.Charset charset58 = outputSettings56.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings56.escapeMode;
        int int60 = outputSettings56.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder61 = outputSettings56.encoder();
        outputSettings51.charsetEncoder = charsetEncoder61;
        outputSettings43.setcharsetEncoder(charsetEncoder61);
        textNode34.outerHtmlTail(stringBuilder41, (int) (short) 100, outputSettings43);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings65.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings67.escapeMode;
        java.nio.charset.Charset charset69 = outputSettings67.charset();
        outputSettings67.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings67.escapeMode;
        outputSettings67.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder75 = outputSettings67.charsetEncoder;
        outputSettings43.charsetEncoder = charsetEncoder75;
        outputSettings24.setcharsetEncoder(charsetEncoder75);
        java.nio.charset.CharsetEncoder charsetEncoder78 = outputSettings24.charsetEncoder;
        boolean boolean79 = outputSettings24.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = outputSettings24.escapeMode();
        outputSettings5.setescapeMode(escapeMode80);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "text" + "'", str37, "text");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "#text" + "'", str38, "#text");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder61);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder75);
        org.junit.Assert.assertNotNull(charsetEncoder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + escapeMode80 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode80.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        int int5 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes6 = textNode2.attributes();
        org.jsoup.nodes.Node node7 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("#");
        int int10 = textNode9.siblingIndex();
        java.lang.String str11 = textNode9.getWholeText();
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        outputSettings16.prettyPrint = false;
        int int19 = outputSettings16.indentAmount;
        java.nio.charset.Charset charset20 = outputSettings16.charset;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings16.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings16.escapeMode(escapeMode23);
        outputSettings16.indentAmount = (byte) -1;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings16.indentAmount(0);
        textNode9.outerHtmlTail(stringBuilder12, (int) '4', outputSettings16);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode31 = textNode9.splitText(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#" + "'", str11, "#");
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(outputSettings28);
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.setBaseUri("hi!");
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        java.lang.String str8 = textNode2.text;
        java.lang.String str10 = textNode2.attr("#text");
        textNode2.settext("#text");
        org.jsoup.nodes.TextNode textNode15 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str16 = textNode15.text;
        java.lang.String str17 = textNode15.text;
        boolean boolean18 = textNode2.equals((java.lang.Object) str17);
        java.lang.String str19 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode21 = textNode2.text("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "#text" + "'", str19, "#text");
        org.junit.Assert.assertNotNull(textNode21);
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings2.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings2.escapeMode;
        boolean boolean9 = outputSettings2.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings13.clone();
        boolean boolean17 = outputSettings16.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings16.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings16.charsetEncoder;
        java.nio.charset.Charset charset20 = outputSettings16.charset;
        outputSettings2.setcharset(charset20);
        java.nio.charset.Charset charset22 = outputSettings2.charset();
        int int23 = outputSettings2.indentAmount();
        boolean boolean24 = outputSettings2.prettyPrint();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node1 = textNode0.clone();
        java.lang.String str2 = textNode0.getTEXT_KEY();
        boolean boolean3 = textNode0.isBlank();
        textNode0.settext("");
        java.lang.String str6 = textNode0.getTEXT_KEY();
        java.lang.String str7 = textNode0.outerHtml();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node9 = textNode0.before("text");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "text" + "'", str2, "text");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.gettext();
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str14 = textNode12.attr("text");
        boolean boolean15 = textNode2.equals((java.lang.Object) textNode12);
        java.lang.String str16 = textNode2.nodeName();
        textNode2.setBaseUri("#");
        org.jsoup.nodes.Node node20 = textNode2.removeAttr("hi!");
        java.lang.String str22 = textNode2.attr("hi!");
        boolean boolean23 = textNode2.isBlank();
        java.lang.String str25 = textNode2.attr("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#text" + "'", str16, "#text");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings4.clone();
        outputSettings4.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings4.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings0.escapeMode(escapeMode10);
        int int12 = outputSettings11.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.clone();
        outputSettings15.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings15.escapeMode;
        int int22 = outputSettings15.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings15.prettyPrint(false);
        java.nio.charset.Charset charset25 = outputSettings15.charset();
        boolean boolean26 = outputSettings15.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings15.escapeMode;
        outputSettings11.escapeMode = escapeMode27;
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings11.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings11.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings37.escapeMode;
        java.nio.charset.Charset charset39 = outputSettings37.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings37.clone();
        outputSettings40.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings45.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings45.escapeMode;
        int int49 = outputSettings45.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder50 = outputSettings45.encoder();
        outputSettings40.charsetEncoder = charsetEncoder50;
        outputSettings32.setcharsetEncoder(charsetEncoder50);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings55.escapeMode;
        java.nio.charset.Charset charset57 = outputSettings55.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings55.escapeMode;
        boolean boolean59 = outputSettings55.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings60.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings62.escapeMode;
        java.nio.charset.Charset charset64 = outputSettings62.charset();
        outputSettings62.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings62.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings55.escapeMode(escapeMode67);
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings68.escapeMode;
        outputSettings32.setescapeMode(escapeMode69);
        outputSettings31.escapeMode = escapeMode69;
        java.nio.charset.CharsetEncoder charsetEncoder72 = outputSettings31.charsetEncoder;
        java.lang.Class<?> wildcardClass73 = charsetEncoder72.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder50);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset;
        outputSettings5.setcharset(charset12);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings5.forceAllElementAsBlock(false);
        outputSettings5.prettyPrint = true;
        outputSettings5.setforceAllElementAsBlock(true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(outputSettings15);
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings5.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        java.nio.charset.Charset charset13 = outputSettings11.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings11.escapeMode;
        boolean boolean15 = outputSettings11.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings11.getescapeMode();
        outputSettings5.escapeMode = escapeMode16;
        int int18 = outputSettings5.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings5.escapeMode();
        outputSettings5.indentAmount = 100;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node1 = textNode0.clone();
        java.lang.String str2 = textNode0.baseUri();
        org.jsoup.nodes.Node node3 = textNode0.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = node3.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset();
        outputSettings10.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings10.escapeMode;
        outputSettings7.setescapeMode(escapeMode15);
        boolean boolean17 = outputSettings7.getprettyPrint();
        outputSettings7.setprettyPrint(false);
        int int20 = outputSettings7.indentAmount;
        outputSettings7.setprettyPrint(false);
        boolean boolean23 = node3.equals((java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            node3.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.nodeName();
        boolean boolean13 = textNode2.hasAttr("hi!");
        java.lang.String str14 = textNode2.outerHtml();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode2.siblingNodes();
        textNode2.text = "#text";
        int int18 = textNode2.siblingIndex();
        org.jsoup.select.NodeVisitor nodeVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node20 = textNode2.traverse(nodeVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("hi!");
        java.lang.String str9 = textNode2.getTEXT_KEY();
        boolean boolean11 = textNode2.hasAttr("");
        org.jsoup.nodes.Node node14 = textNode2.attr("hi!", "#text");
        org.jsoup.nodes.Node node15 = textNode2.parent();
        java.lang.String str16 = textNode2.nodeName();
        textNode2.settext("#text");
        textNode2.text = "text";
        org.jsoup.nodes.TextNode textNode23 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str24 = textNode23.text;
        java.lang.String str25 = textNode23.outerHtml();
        java.lang.String str26 = textNode23.getTEXT_KEY();
        java.lang.String str27 = textNode23.nodeName();
        org.jsoup.nodes.Attributes attributes28 = textNode23.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList29 = textNode23.childNodes();
        java.lang.String str30 = textNode23.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList31 = textNode23.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean33 = outputSettings32.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings36.escapeMode;
        java.nio.charset.Charset charset38 = outputSettings36.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings32.charset(charset38);
        boolean boolean40 = outputSettings32.getprettyPrint();
        boolean boolean41 = outputSettings32.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder42 = outputSettings32.getcharsetEncoder();
        boolean boolean43 = textNode23.equals((java.lang.Object) charsetEncoder42);
        java.lang.String str45 = textNode23.attr("hi!");
        textNode23.settext("hi!");
        boolean boolean49 = textNode23.hasAttr("");
        boolean boolean50 = textNode2.equals((java.lang.Object) "");
        textNode2.setBaseUri("text");
        boolean boolean54 = textNode2.hasAttr("i!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#text" + "'", str16, "#text");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "text" + "'", str26, "text");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "#text" + "'", str27, "#text");
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(nodeList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(charsetEncoder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings9.escapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings25.getprettyPrint();
        java.nio.charset.Charset charset33 = outputSettings25.getcharset();
        outputSettings9.charset = charset33;
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 1, outputSettings9);
        java.lang.String str36 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Attributes attributes37 = textNode2.attributes();
        textNode2.ensureAttributes();
        java.lang.String str40 = textNode2.attr("hi!");
        boolean boolean41 = textNode2.isBlank();
        java.lang.String str42 = textNode2.gettext();
        org.jsoup.nodes.Attributes attributes43 = textNode2.attributes();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "text" + "'", str36, "text");
        org.junit.Assert.assertNotNull(attributes37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(attributes43);
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        java.nio.charset.CharsetEncoder charsetEncoder9 = outputSettings5.charsetEncoder;
        boolean boolean10 = outputSettings5.forceAllElementAsBlock;
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode();
        org.jsoup.nodes.Node node12 = textNode11.clone();
        java.lang.String str13 = textNode11.baseUri();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings16.clone();
        outputSettings16.forceAllElementAsBlock = true;
        outputSettings16.forceAllElementAsBlock = false;
        boolean boolean24 = outputSettings16.prettyPrint;
        boolean boolean25 = textNode11.equals((java.lang.Object) outputSettings16);
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings16.encoder();
        outputSettings5.setcharsetEncoder(charsetEncoder26);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings5.prettyPrint(false);
        outputSettings29.setindentAmount(10);
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings29.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings29.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings36.escapeMode;
        java.nio.charset.Charset charset38 = outputSettings36.charset();
        outputSettings36.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings36.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings36.indentAmount((int) (byte) 10);
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings43.escapeMode();
        java.nio.charset.Charset charset45 = outputSettings43.getcharset();
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings43.getcharsetEncoder();
        outputSettings29.setcharsetEncoder(charsetEncoder46);
        boolean boolean48 = outputSettings29.prettyPrint;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(charsetEncoder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        int int5 = textNode2.siblingIndex();
        org.jsoup.nodes.Attributes attributes6 = textNode2.attributes();
        org.jsoup.nodes.Node node7 = textNode2.nextSibling();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("#");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(textNode9);
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        textNode2.ensureAttributes();
        boolean boolean12 = textNode2.hasAttr("i!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        outputSettings8.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings13.escapeMode;
        int int17 = outputSettings13.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings13.encoder();
        outputSettings8.charsetEncoder = charsetEncoder18;
        outputSettings0.setcharsetEncoder(charsetEncoder18);
        outputSettings0.setforceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings0.forceAllElementAsBlock(true);
        java.nio.charset.Charset charset25 = outputSettings24.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.indentAmount((int) 'a');
        java.nio.charset.Charset charset29 = outputSettings26.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean31 = outputSettings30.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode;
        java.nio.charset.Charset charset36 = outputSettings34.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings30.charset(charset36);
        boolean boolean38 = outputSettings37.getforceAllElementAsBlock();
        boolean boolean39 = outputSettings37.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings45.charset();
        outputSettings45.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings45.escapeMode;
        outputSettings42.setescapeMode(escapeMode50);
        outputSettings37.setescapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings26.escapeMode(escapeMode50);
        java.nio.charset.CharsetEncoder charsetEncoder54 = outputSettings26.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings26.indentAmount(10);
        java.nio.charset.CharsetEncoder charsetEncoder57 = outputSettings56.charsetEncoder;
        java.nio.charset.Charset charset58 = outputSettings56.getcharset();
        outputSettings24.charset = charset58;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings24.indentAmount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertNotNull(charsetEncoder54);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertNotNull(charsetEncoder57);
        org.junit.Assert.assertNotNull(charset58);
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "#text");
        java.lang.String str4 = textNode2.attr("");
        java.lang.String str5 = textNode2.text();
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode2.siblingNodes();
        org.jsoup.nodes.TextNode textNode9 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str10 = textNode9.text;
        java.lang.String str11 = textNode9.outerHtml();
        java.lang.String str12 = textNode9.getTEXT_KEY();
        java.lang.String str13 = textNode9.nodeName();
        boolean boolean14 = textNode9.isBlank();
        java.lang.String str15 = textNode9.toString();
        java.lang.String str16 = textNode9.gettext();
        org.jsoup.nodes.TextNode textNode18 = textNode9.text("hi!");
        java.lang.String str19 = textNode9.outerHtml();
        java.lang.String str21 = textNode9.attr("text");
        org.jsoup.nodes.Document document22 = textNode9.ownerDocument();
        java.lang.StringBuilder stringBuilder23 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.escapeMode;
        java.nio.charset.Charset charset29 = outputSettings27.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings27.escapeMode;
        boolean boolean31 = outputSettings27.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings32.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode;
        java.nio.charset.Charset charset36 = outputSettings34.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings34.clone();
        outputSettings34.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings34.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings27.escapeMode(escapeMode40);
        java.nio.charset.Charset charset42 = outputSettings27.charset();
        textNode9.outerHtmlTail(stringBuilder23, 1, outputSettings27);
        textNode9.text = "text";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node46 = textNode2.after((org.jsoup.nodes.Node) textNode9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#text" + "'", str5, "#text");
        org.junit.Assert.assertNotNull(nodeList6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "text" + "'", str12, "text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(textNode18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(document22);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(charset42);
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        boolean boolean6 = textNode2.hasAttr("text");
        textNode2.settext("hi!");
        java.lang.String str9 = textNode2.getTEXT_KEY();
        java.lang.String str10 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node12 = textNode2.removeAttr("#text");
        java.lang.String str13 = node12.outerHtml();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("#text");
        boolean boolean15 = textNode13.hasAttr("");
        boolean boolean16 = textNode13.isBlank();
        java.lang.String str17 = textNode13.text;
        org.jsoup.select.NodeVisitor nodeVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node19 = textNode13.traverse(nodeVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#text" + "'", str17, "#text");
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings2.escapeMode(escapeMode10);
        org.jsoup.nodes.TextNode textNode14 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str15 = textNode14.text;
        java.lang.String str16 = textNode14.outerHtml();
        java.lang.String str17 = textNode14.getTEXT_KEY();
        java.lang.String str18 = textNode14.nodeName();
        org.jsoup.nodes.Attributes attributes19 = textNode14.attributes();
        org.jsoup.nodes.Node node20 = textNode14.clone();
        java.lang.StringBuilder stringBuilder21 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        outputSettings25.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode;
        java.nio.charset.Charset charset33 = outputSettings31.charset();
        outputSettings25.setcharset(charset33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings37.escapeMode;
        java.nio.charset.Charset charset39 = outputSettings37.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings37.escapeMode;
        boolean boolean41 = outputSettings37.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings44.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings37.escapeMode(escapeMode45);
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings25.escapeMode(escapeMode45);
        boolean boolean48 = outputSettings47.getforceAllElementAsBlock();
        textNode14.outerHtmlTail(stringBuilder21, (int) (byte) 0, outputSettings47);
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        java.nio.charset.Charset charset54 = outputSettings52.charset();
        outputSettings52.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings52.escapeMode;
        outputSettings47.escapeMode = escapeMode57;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings2.escapeMode(escapeMode57);
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings59.getescapeMode();
        boolean boolean61 = outputSettings59.getprettyPrint();
        java.nio.charset.Charset charset62 = outputSettings59.charset;
        java.lang.Class<?> wildcardClass63 = charset62.getClass();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#text" + "'", str18, "#text");
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.setBaseUri("hi!");
        org.jsoup.nodes.Node node7 = textNode2.previousSibling();
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("text");
        java.lang.String str10 = textNode9.gettext();
        org.jsoup.nodes.Node node11 = textNode9.nextSibling();
        org.jsoup.nodes.TextNode textNode13 = textNode9.text("hi!");
        java.lang.String str14 = textNode9.text;
        org.jsoup.nodes.TextNode textNode17 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str18 = textNode17.text;
        java.lang.String str19 = textNode17.outerHtml();
        java.lang.String str20 = textNode17.getTEXT_KEY();
        java.lang.String str21 = textNode17.nodeName();
        boolean boolean23 = textNode17.equals((java.lang.Object) (short) 1);
        textNode17.setBaseUri("#text");
        java.lang.String str27 = textNode17.attr("text");
        // The following exception was thrown during execution in test generation
        try {
            textNode9.replaceWith((org.jsoup.nodes.Node) textNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "text" + "'", str20, "text");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.prettyPrint(true);
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings0.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.clone();
        outputSettings7.prettyPrint = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings7.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        outputSettings13.setescapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings13.prettyPrint(false);
        outputSettings13.setindentAmount((int) (short) -1);
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings13.encoder();
        java.nio.charset.Charset charset28 = outputSettings13.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings7.charset(charset28);
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings32.escapeMode;
        boolean boolean36 = outputSettings32.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings32.escapeMode(escapeMode40);
        outputSettings32.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings46.escapeMode;
        java.nio.charset.Charset charset48 = outputSettings46.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings46.clone();
        outputSettings46.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings46.escapeMode;
        int int53 = outputSettings46.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings46.prettyPrint(false);
        java.nio.charset.Charset charset56 = outputSettings46.charset();
        boolean boolean57 = outputSettings46.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings46.escapeMode;
        outputSettings46.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = outputSettings46.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings62.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings32.escapeMode(escapeMode63);
        outputSettings29.escapeMode = escapeMode63;
        java.nio.charset.Charset charset66 = outputSettings29.charset();
        boolean boolean67 = outputSettings29.getforceAllElementAsBlock();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings62);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        java.lang.String str9 = textNode2.baseUri();
        boolean boolean11 = textNode2.hasAttr("#text");
        java.lang.String str12 = textNode2.outerHtml();
        java.lang.String str13 = textNode2.baseUri();
        org.jsoup.nodes.TextNode textNode16 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str17 = textNode16.text;
        java.lang.String str18 = textNode16.outerHtml();
        java.lang.String str19 = textNode16.getTEXT_KEY();
        java.lang.String str20 = textNode16.nodeName();
        boolean boolean22 = textNode16.equals((java.lang.Object) (short) 1);
        textNode16.setBaseUri("#text");
        boolean boolean25 = textNode16.isBlank();
        textNode16.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList28 = textNode16.childNodes();
        textNode16.settext("text");
        org.jsoup.nodes.Document document31 = textNode16.ownerDocument();
        org.jsoup.nodes.Attributes attributes32 = textNode16.attributes();
        org.jsoup.nodes.Node node33 = textNode16.nextSibling();
        java.lang.String str34 = textNode16.baseUri();
        java.util.List<org.jsoup.nodes.Node> nodeList35 = textNode16.siblingNodes();
        java.lang.String str36 = textNode16.toString();
        org.jsoup.nodes.Node node37 = textNode16.clone();
        textNode16.settext("hi!");
        java.lang.String str40 = textNode16.getWholeText();
        org.jsoup.nodes.Attributes attributes41 = textNode16.attributes();
        textNode16.settext("#");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node44 = textNode2.before((org.jsoup.nodes.Node) textNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#text" + "'", str20, "#text");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(nodeList28);
        org.junit.Assert.assertNull(document31);
        org.junit.Assert.assertNotNull(attributes32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "#text" + "'", str34, "#text");
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "text" + "'", str36, "text");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "text" + "'", str40, "text");
        org.junit.Assert.assertNotNull(attributes41);
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.clone();
        outputSettings11.indentAmount = (short) -1;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings19.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings19.escapeMode;
        outputSettings16.setescapeMode(escapeMode24);
        boolean boolean26 = outputSettings16.getprettyPrint();
        outputSettings16.indentAmount = 97;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings16.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings16.escapeMode();
        outputSettings16.forceAllElementAsBlock = true;
        outputSettings16.indentAmount = 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean36 = outputSettings35.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings35.charset(charset41);
        boolean boolean43 = outputSettings35.getprettyPrint();
        boolean boolean44 = outputSettings35.getprettyPrint();
        boolean boolean45 = outputSettings35.prettyPrint;
        int int46 = outputSettings35.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings49.escapeMode;
        java.nio.charset.Charset charset51 = outputSettings49.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings49.escapeMode;
        boolean boolean53 = outputSettings49.prettyPrint;
        boolean boolean54 = outputSettings49.forceAllElementAsBlock;
        boolean boolean55 = outputSettings49.getforceAllElementAsBlock();
        boolean boolean56 = outputSettings49.getprettyPrint();
        boolean boolean57 = outputSettings49.forceAllElementAsBlock();
        outputSettings49.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings49.escapeMode();
        boolean boolean61 = outputSettings49.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings49.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean65 = outputSettings64.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings68.escapeMode;
        java.nio.charset.Charset charset70 = outputSettings68.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings64.charset(charset70);
        boolean boolean72 = outputSettings71.getforceAllElementAsBlock();
        outputSettings71.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder75 = outputSettings71.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder76 = outputSettings71.getcharsetEncoder();
        outputSettings49.charsetEncoder = charsetEncoder76;
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings78.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings81 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings83 = outputSettings81.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings83.escapeMode;
        java.nio.charset.Charset charset85 = outputSettings83.charset();
        outputSettings83.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode88 = outputSettings83.escapeMode;
        outputSettings80.setescapeMode(escapeMode88);
        boolean boolean90 = outputSettings80.getprettyPrint();
        outputSettings80.indentAmount = 97;
        org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings80.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode94 = outputSettings80.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings95 = outputSettings49.escapeMode(escapeMode94);
        org.jsoup.nodes.Entities.EscapeMode escapeMode96 = outputSettings95.escapeMode;
        outputSettings35.setescapeMode(escapeMode96);
        outputSettings16.setescapeMode(escapeMode96);
        org.jsoup.nodes.Document.OutputSettings outputSettings99 = outputSettings11.escapeMode(escapeMode96);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(charsetEncoder75);
        org.junit.Assert.assertNotNull(charsetEncoder76);
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertNotNull(outputSettings83);
        org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset85);
        org.junit.Assert.assertTrue("'" + escapeMode88 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode88.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(outputSettings93);
        org.junit.Assert.assertTrue("'" + escapeMode94 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode94.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings95);
        org.junit.Assert.assertTrue("'" + escapeMode96 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode96.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings99);
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode16 = textNode14.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode16.siblingNodes();
        java.lang.String str18 = textNode16.gettext();
        org.jsoup.nodes.Node node19 = textNode16.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node21 = textNode16.removeAttr("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertNotNull(textNode16);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        outputSettings5.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings5.escapeMode;
        outputSettings2.setescapeMode(escapeMode10);
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings2.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings2.escapeMode;
        boolean boolean15 = outputSettings2.getforceAllElementAsBlock();
        java.nio.charset.Charset charset16 = outputSettings2.getcharset();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset16);
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings5.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings5.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings8.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings11.prettyPrint(false);
        outputSettings14.indentAmount = (short) 0;
        java.nio.charset.CharsetEncoder charsetEncoder17 = outputSettings14.encoder();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(charsetEncoder17);
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings0.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings9.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings0.escapeMode(escapeMode14);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings15.clone();
        outputSettings15.indentAmount = (short) 1;
        boolean boolean19 = outputSettings15.prettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder20 = outputSettings15.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings15.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean23 = outputSettings22.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode;
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings26.clone();
        outputSettings26.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings26.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings22.escapeMode(escapeMode32);
        int int34 = outputSettings33.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings37.escapeMode;
        java.nio.charset.Charset charset39 = outputSettings37.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings37.clone();
        outputSettings37.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings37.escapeMode;
        int int44 = outputSettings37.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings37.prettyPrint(false);
        java.nio.charset.Charset charset47 = outputSettings37.charset();
        boolean boolean48 = outputSettings37.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings37.escapeMode;
        outputSettings33.escapeMode = escapeMode49;
        outputSettings33.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings53.clone();
        boolean boolean57 = outputSettings53.getforceAllElementAsBlock();
        outputSettings53.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder60 = outputSettings53.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings61.indentAmount((int) 'a');
        java.nio.charset.Charset charset64 = outputSettings61.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings53.charset(charset64);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings33.charset(charset64);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings15.charset(charset64);
        outputSettings15.prettyPrint = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode70 = outputSettings15.getescapeMode();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings15.charset("hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charsetEncoder20);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(outputSettings56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charsetEncoder60);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        textNode2.setBaseUri("text");
        java.lang.String str21 = textNode2.outerHtml();
        boolean boolean22 = textNode2.isBlank();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = textNode2.childNode((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.prettyPrint(true);
        boolean boolean4 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings7.escapeMode;
        java.nio.charset.Charset charset9 = outputSettings7.charset();
        outputSettings7.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings7.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings7.indentAmount((int) (byte) 10);
        boolean boolean15 = outputSettings7.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode;
        java.nio.charset.Charset charset20 = outputSettings18.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings18.escapeMode;
        boolean boolean22 = outputSettings18.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        outputSettings25.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings25.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings18.escapeMode(escapeMode30);
        outputSettings7.setescapeMode(escapeMode30);
        java.nio.charset.Charset charset33 = outputSettings7.charset;
        outputSettings0.charset = charset33;
        java.lang.Class<?> wildcardClass35 = outputSettings0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings0.indentAmount(0);
        java.nio.charset.Charset charset10 = outputSettings9.charset;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(charset10);
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str3 = textNode2.getTEXT_KEY();
        java.lang.String str4 = textNode2.getTEXT_KEY();
        java.lang.String str5 = textNode2.text;
        java.lang.String str7 = textNode2.absUrl("#text");
        java.lang.String str8 = textNode2.nodeName();
        org.jsoup.nodes.Node node9 = textNode2.previousSibling();
        java.lang.String str10 = textNode2.getWholeText();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("hi!");
        java.lang.String str13 = textNode12.getWholeText();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "text" + "'", str4, "text");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#text" + "'", str8, "#text");
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("#text");
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        outputSettings13.prettyPrint = false;
        int int16 = outputSettings13.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings19.clone();
        outputSettings19.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings19.escapeMode;
        int int26 = outputSettings19.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings19.prettyPrint(false);
        java.nio.charset.Charset charset29 = outputSettings19.charset();
        outputSettings13.charset = charset29;
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) 1, outputSettings13);
        outputSettings13.prettyPrint = true;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(charset29);
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "");
        textNode2.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = textNode2.childNodes();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.util.List<org.jsoup.nodes.Node> nodeList6 = textNode2.siblingNodes();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.getTEXT_KEY();
        java.lang.String str9 = textNode2.gettext();
        java.lang.String str10 = textNode2.getTEXT_KEY();
        org.junit.Assert.assertNotNull(nodeList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertNotNull(nodeList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("hi!");
        textNode2.setBaseUri("text");
        java.lang.String str13 = textNode2.text;
        java.lang.String str14 = textNode2.toString();
        org.jsoup.nodes.TextNode textNode16 = textNode2.text("hi!");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(textNode16);
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings9.escapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings25.getprettyPrint();
        java.nio.charset.Charset charset33 = outputSettings25.getcharset();
        outputSettings9.charset = charset33;
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 1, outputSettings9);
        java.lang.String str37 = textNode2.absUrl("hi!");
        org.jsoup.nodes.Document document38 = textNode2.ownerDocument();
        java.lang.String str39 = textNode2.nodeName();
        java.lang.String str40 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node41 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(document38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "#text" + "'", str39, "#text");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.Node node10 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        textNode2.settext("text");
        org.jsoup.nodes.TextNode textNode15 = textNode2.text("hi!");
        java.lang.String str17 = textNode15.attr("#");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        org.jsoup.nodes.Node node19 = textNode2.previousSibling();
        java.lang.StringBuilder stringBuilder20 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode;
        java.nio.charset.Charset charset26 = outputSettings24.charset();
        outputSettings24.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings24.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings24.indentAmount((int) (byte) 10);
        boolean boolean32 = outputSettings24.getforceAllElementAsBlock();
        outputSettings24.setindentAmount((int) (short) 10);
        textNode2.outerHtmlTail(stringBuilder20, (int) '#', outputSettings24);
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings24.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings39.escapeMode;
        int int43 = outputSettings39.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings39.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder45 = null;
        outputSettings39.charsetEncoder = charsetEncoder45;
        boolean boolean47 = outputSettings39.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings48.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings50.escapeMode;
        java.nio.charset.Charset charset52 = outputSettings50.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings50.escapeMode;
        boolean boolean54 = outputSettings50.prettyPrint;
        boolean boolean55 = outputSettings50.forceAllElementAsBlock;
        boolean boolean56 = outputSettings50.getforceAllElementAsBlock();
        boolean boolean57 = outputSettings50.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings58.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings61.indentAmount((int) 'a');
        java.nio.charset.Charset charset64 = outputSettings61.getcharset();
        outputSettings60.setcharset(charset64);
        outputSettings50.setcharset(charset64);
        outputSettings39.charset = charset64;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings68.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings70.escapeMode;
        java.nio.charset.Charset charset72 = outputSettings70.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings70.escapeMode;
        boolean boolean74 = outputSettings70.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings75.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings77.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings70.escapeMode(escapeMode78);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings82 = outputSettings80.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode83 = outputSettings82.escapeMode;
        java.nio.charset.Charset charset84 = outputSettings82.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode85 = outputSettings82.escapeMode;
        outputSettings79.escapeMode = escapeMode85;
        boolean boolean87 = outputSettings79.forceAllElementAsBlock;
        java.nio.charset.CharsetEncoder charsetEncoder88 = outputSettings79.charsetEncoder;
        outputSettings39.setcharsetEncoder(charsetEncoder88);
        outputSettings24.setcharsetEncoder(charsetEncoder88);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertNotNull(outputSettings82);
        org.junit.Assert.assertTrue("'" + escapeMode83 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode83.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset84);
        org.junit.Assert.assertTrue("'" + escapeMode85 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode85.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(charsetEncoder88);
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("text", "");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode2.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings6.escapeMode;
        java.nio.charset.Charset charset8 = outputSettings6.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings6.clone();
        outputSettings9.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset;
        outputSettings9.setcharset(charset16);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings9.forceAllElementAsBlock(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings9.escapeMode;
        boolean boolean21 = textNode2.equals((java.lang.Object) outputSettings9);
        org.jsoup.nodes.Attributes attributes22 = textNode2.attributes();
        textNode2.setBaseUri("h");
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(attributes22);
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#", "");
        boolean boolean4 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("#");
        java.lang.String str7 = textNode2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node9 = textNode2.after("h");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#" + "'", str7, "#");
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        textNode2.ensureAttributes();
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Document document8 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node10 = textNode2.removeAttr("text");
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("hi!");
        java.lang.String str13 = textNode12.text();
        boolean boolean15 = textNode12.hasAttr("#");
        java.lang.String str16 = textNode12.baseUri();
        org.jsoup.nodes.Node node19 = textNode12.attr("hi!", "#");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(document8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#text" + "'", str16, "#text");
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        textNode2.text = "#text";
        org.jsoup.nodes.Node node10 = textNode2.attr("hi!", "#");
        org.jsoup.nodes.Attributes attributes11 = textNode2.attributes();
        int int12 = textNode2.siblingIndex();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.indentAmount = (byte) 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings2.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.clone();
        outputSettings2.indentAmount = 1;
        boolean boolean12 = outputSettings2.getforceAllElementAsBlock();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("");
        java.lang.String str13 = textNode2.gettext();
        boolean boolean15 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode;
        java.nio.charset.Charset charset20 = outputSettings18.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.clone();
        outputSettings18.forceAllElementAsBlock = true;
        outputSettings18.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset26 = outputSettings18.getcharset();
        boolean boolean27 = textNode2.equals((java.lang.Object) outputSettings18);
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("#text");
        int int9 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        java.lang.String str12 = textNode2.absUrl("text");
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        org.jsoup.nodes.Node node14 = textNode2.nextSibling();
        textNode2.text = "text";
        org.jsoup.nodes.Attributes attributes17 = textNode2.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(attributes17);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        outputSettings5.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings5.escapeMode;
        outputSettings2.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings2.getprettyPrint();
        outputSettings2.indentAmount = 97;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        java.nio.charset.Charset charset18 = outputSettings15.getcharset();
        boolean boolean19 = outputSettings15.prettyPrint();
        boolean boolean20 = outputSettings15.forceAllElementAsBlock;
        outputSettings15.indentAmount = (byte) 100;
        int int23 = outputSettings15.indentAmount;
        java.nio.charset.Charset charset24 = outputSettings15.getcharset();
        outputSettings2.setcharset(charset24);
        int int26 = outputSettings2.getindentAmount();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        textNode2.ensureAttributes();
        java.lang.String str21 = textNode2.getWholeText();
        java.lang.String str22 = textNode2.nodeName();
        org.jsoup.nodes.TextNode textNode25 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str26 = textNode25.text;
        boolean boolean28 = textNode25.hasAttr("hi!");
        org.jsoup.nodes.Node node29 = textNode25.parent();
        textNode25.settext("#text");
        java.lang.StringBuilder stringBuilder32 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount((int) 'a');
        outputSettings36.prettyPrint = false;
        int int39 = outputSettings36.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings42.escapeMode;
        java.nio.charset.Charset charset44 = outputSettings42.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings42.clone();
        outputSettings42.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings42.escapeMode;
        int int49 = outputSettings42.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings42.prettyPrint(false);
        java.nio.charset.Charset charset52 = outputSettings42.charset();
        outputSettings36.charset = charset52;
        textNode25.outerHtmlTail(stringBuilder32, (int) (short) 1, outputSettings36);
        java.lang.String str55 = textNode25.outerHtml();
        org.jsoup.nodes.Node node56 = textNode25.clone();
        textNode25.setBaseUri("");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node59 = textNode2.before((org.jsoup.nodes.Node) textNode25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#text" + "'", str22, "#text");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.outerHtml();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings16.clone();
        outputSettings19.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode;
        java.nio.charset.Charset charset26 = outputSettings24.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings24.escapeMode;
        int int28 = outputSettings24.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings24.encoder();
        outputSettings19.charsetEncoder = charsetEncoder29;
        outputSettings11.setcharsetEncoder(charsetEncoder29);
        textNode2.outerHtmlTail(stringBuilder9, (int) (short) 100, outputSettings11);
        boolean boolean33 = textNode2.isBlank();
        org.jsoup.nodes.TextNode textNode36 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str37 = textNode36.text;
        java.lang.String str38 = textNode36.outerHtml();
        java.lang.String str39 = textNode36.getTEXT_KEY();
        java.lang.String str40 = textNode36.nodeName();
        org.jsoup.nodes.Attributes attributes41 = textNode36.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList42 = textNode36.childNodes();
        java.lang.String str43 = textNode36.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList44 = textNode36.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean46 = outputSettings45.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings49.escapeMode;
        java.nio.charset.Charset charset51 = outputSettings49.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings45.charset(charset51);
        boolean boolean53 = outputSettings45.getprettyPrint();
        boolean boolean54 = outputSettings45.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder55 = outputSettings45.getcharsetEncoder();
        boolean boolean56 = textNode36.equals((java.lang.Object) charsetEncoder55);
        java.lang.String str58 = textNode36.attr("hi!");
        java.lang.String str59 = textNode36.getWholeText();
        org.jsoup.nodes.Node node62 = textNode36.attr("#", "text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node63 = textNode2.before(node62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "text" + "'", str39, "text");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "#text" + "'", str40, "#text");
        org.junit.Assert.assertNotNull(attributes41);
        org.junit.Assert.assertNotNull(nodeList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(nodeList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(charsetEncoder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(node62);
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.nodeName();
        boolean boolean13 = textNode2.hasAttr("hi!");
        java.lang.String str14 = textNode2.outerHtml();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode2.siblingNodes();
        java.lang.String str16 = textNode2.text();
        java.lang.String str17 = textNode2.getTEXT_KEY();
        java.lang.String str18 = textNode2.text();
        java.lang.String str20 = textNode2.attr("hi!");
        java.lang.String str21 = textNode2.baseUri();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "");
        java.lang.String str3 = textNode2.text;
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("#text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node7 = textNode2.after("i!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(textNode5);
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings2.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode8 = outputSettings2.escapeMode;
        boolean boolean9 = outputSettings2.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings13.clone();
        boolean boolean17 = outputSettings16.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder18 = outputSettings16.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder19 = outputSettings16.charsetEncoder;
        java.nio.charset.Charset charset20 = outputSettings16.charset;
        outputSettings2.setcharset(charset20);
        java.nio.charset.Charset charset22 = outputSettings2.charset();
        int int23 = outputSettings2.indentAmount();
        java.nio.charset.Charset charset24 = outputSettings2.charset;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode8 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode8.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(charset24);
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("", "#text");
        java.lang.String str3 = textNode2.toString();
        org.jsoup.nodes.Attributes attributes4 = textNode2.attributes();
        java.lang.String str6 = textNode2.attr("");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode8 = textNode2.splitText((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must be not be negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(attributes4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings7.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings7.prettyPrint();
        boolean boolean10 = outputSettings7.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings7.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean13 = outputSettings12.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings16.clone();
        outputSettings16.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings12.escapeMode(escapeMode22);
        int int24 = outputSettings23.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.escapeMode;
        java.nio.charset.Charset charset29 = outputSettings27.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings27.clone();
        outputSettings27.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings27.escapeMode;
        int int34 = outputSettings27.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings27.prettyPrint(false);
        java.nio.charset.Charset charset37 = outputSettings27.charset();
        boolean boolean38 = outputSettings27.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings27.escapeMode;
        outputSettings23.escapeMode = escapeMode39;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings7.escapeMode(escapeMode39);
        boolean boolean42 = outputSettings7.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings7.indentAmount(52);
        boolean boolean45 = outputSettings7.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings48.escapeMode;
        java.nio.charset.Charset charset50 = outputSettings48.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings48.escapeMode;
        int int52 = outputSettings48.indentAmount;
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings48.getescapeMode();
        outputSettings48.setindentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode;
        java.nio.charset.Charset charset60 = outputSettings58.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings58.clone();
        boolean boolean62 = outputSettings61.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode63 = outputSettings61.escapeMode;
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings61.escapeMode();
        outputSettings48.escapeMode = escapeMode64;
        outputSettings7.setescapeMode(escapeMode64);
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = outputSettings67.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode70 = outputSettings69.escapeMode;
        java.nio.charset.Charset charset71 = outputSettings69.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings69.clone();
        outputSettings69.forceAllElementAsBlock = true;
        outputSettings69.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings69.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder79 = outputSettings69.getcharsetEncoder();
        outputSettings7.charsetEncoder = charsetEncoder79;
        java.nio.charset.CharsetEncoder charsetEncoder81 = outputSettings7.getcharsetEncoder();
        java.lang.Class<?> wildcardClass82 = charsetEncoder81.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 97 + "'", int52 == 97);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + escapeMode63 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode63.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings69);
        org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset71);
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertNotNull(charsetEncoder79);
        org.junit.Assert.assertNotNull(charsetEncoder81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean12 = textNode2.hasAttr("");
        org.jsoup.nodes.Node node14 = textNode2.removeAttr("#text");
        org.jsoup.nodes.Node node15 = textNode2.nextSibling();
        java.lang.String str16 = textNode2.gettext();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode2.siblingNodes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(nodeList17);
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings9.escapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings25.getprettyPrint();
        java.nio.charset.Charset charset33 = outputSettings25.getcharset();
        outputSettings9.charset = charset33;
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 1, outputSettings9);
        java.lang.String str36 = textNode2.getTEXT_KEY();
        java.util.List<org.jsoup.nodes.Node> nodeList37 = textNode2.siblingNodes();
        java.lang.String str38 = textNode2.baseUri();
        java.lang.String str39 = textNode2.getWholeText();
        org.jsoup.nodes.Node node41 = textNode2.removeAttr("h");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node43 = textNode2.before("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "text" + "'", str36, "text");
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        java.lang.String str9 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        java.nio.charset.Charset charset14 = outputSettings11.getcharset();
        boolean boolean15 = outputSettings11.prettyPrint();
        boolean boolean16 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        outputSettings19.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        outputSettings19.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode;
        java.nio.charset.Charset charset33 = outputSettings31.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings31.escapeMode;
        boolean boolean35 = outputSettings31.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings31.escapeMode(escapeMode39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings19.escapeMode(escapeMode39);
        outputSettings11.setescapeMode(escapeMode39);
        boolean boolean43 = textNode2.equals((java.lang.Object) escapeMode39);
        textNode2.settext("hi!");
        java.lang.String str47 = textNode2.attr("");
        java.lang.String str48 = textNode2.getTEXT_KEY();
        textNode2.setBaseUri("text");
        boolean boolean51 = textNode2.isBlank();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node53 = textNode2.wrap("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "text" + "'", str48, "text");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        org.jsoup.nodes.Node node13 = textNode2.attr("text", "hi!");
        org.jsoup.nodes.TextNode textNode15 = textNode2.text("#text");
        textNode2.settext("#text");
        org.jsoup.nodes.TextNode textNode20 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str21 = textNode20.text;
        java.lang.String str22 = textNode20.outerHtml();
        java.lang.String str23 = textNode20.getTEXT_KEY();
        java.lang.String str24 = textNode20.nodeName();
        org.jsoup.nodes.Attributes attributes25 = textNode20.attributes();
        java.lang.String str26 = textNode20.text();
        java.lang.String str27 = textNode20.toString();
        java.lang.String str28 = textNode20.getWholeText();
        textNode20.text = "";
        boolean boolean31 = textNode2.equals((java.lang.Object) textNode20);
        textNode20.settext("text");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "text" + "'", str23, "text");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#text" + "'", str24, "#text");
        org.junit.Assert.assertNotNull(attributes25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        java.nio.charset.Charset charset3 = outputSettings0.getcharset();
        boolean boolean4 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings0.escapeMode;
        outputSettings0.setforceAllElementAsBlock(false);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.text = "text";
        textNode2.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.siblingNodes();
        boolean boolean10 = textNode2.hasAttr("");
        org.jsoup.nodes.Node node11 = textNode2.parent();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = textNode2.siblingNodes();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode2.siblingNodes();
        org.jsoup.nodes.Node node15 = textNode2.removeAttr("#text");
        org.jsoup.nodes.TextNode textNode18 = new org.jsoup.nodes.TextNode("text", "#text");
        java.lang.String str19 = textNode18.text();
        org.jsoup.nodes.Node node21 = textNode18.removeAttr("#text");
        boolean boolean22 = textNode2.equals((java.lang.Object) textNode18);
        org.jsoup.nodes.Node node25 = textNode2.attr("hi!", "hi!");
        org.jsoup.nodes.Node node26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node27 = node25.before(node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(nodeList12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        int int10 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node11 = textNode2.nextSibling();
        boolean boolean13 = textNode2.hasAttr("");
        java.lang.String str14 = textNode2.getWholeText();
        org.jsoup.nodes.Node node15 = textNode2.previousSibling();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode2.siblingNodes();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode2.siblingNodes();
        java.lang.String str18 = textNode2.text();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings7.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings7.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        outputSettings15.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings15.escapeMode;
        outputSettings12.setescapeMode(escapeMode20);
        outputSettings7.setescapeMode(escapeMode20);
        java.nio.charset.CharsetEncoder charsetEncoder23 = outputSettings7.charsetEncoder;
        java.nio.charset.Charset charset24 = outputSettings7.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings27.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder29 = null;
        outputSettings27.charsetEncoder = charsetEncoder29;
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings27.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings27.charsetEncoder;
        java.nio.charset.Charset charset33 = outputSettings27.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings36.escapeMode;
        java.nio.charset.Charset charset38 = outputSettings36.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings36.clone();
        outputSettings36.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings36.escapeMode;
        boolean boolean43 = outputSettings36.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.clone();
        outputSettings44.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings44.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings53.escapeMode;
        java.nio.charset.Charset charset55 = outputSettings53.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings53.escapeMode;
        boolean boolean57 = outputSettings53.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings53.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings44.escapeMode(escapeMode58);
        outputSettings59.forceAllElementAsBlock = true;
        boolean boolean62 = outputSettings59.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings63.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode66 = outputSettings65.escapeMode;
        java.nio.charset.Charset charset67 = outputSettings65.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings65.clone();
        boolean boolean69 = outputSettings68.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder70 = outputSettings68.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings68.clone();
        java.nio.charset.CharsetEncoder charsetEncoder72 = outputSettings68.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings73.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings78 = outputSettings76.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode79 = outputSettings78.escapeMode;
        java.nio.charset.Charset charset80 = outputSettings78.charset();
        outputSettings78.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode83 = outputSettings78.escapeMode;
        outputSettings75.setescapeMode(escapeMode83);
        boolean boolean85 = outputSettings75.getprettyPrint();
        outputSettings75.indentAmount = 97;
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings75.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode89 = outputSettings75.escapeMode();
        outputSettings68.setescapeMode(escapeMode89);
        org.jsoup.nodes.Document.OutputSettings outputSettings91 = outputSettings59.escapeMode(escapeMode89);
        outputSettings36.setescapeMode(escapeMode89);
        outputSettings27.escapeMode = escapeMode89;
        outputSettings7.setescapeMode(escapeMode89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNull(charsetEncoder31);
        org.junit.Assert.assertNull(charsetEncoder32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertTrue("'" + escapeMode66 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode66.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(charsetEncoder70);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertNotNull(charsetEncoder72);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertNotNull(outputSettings78);
        org.junit.Assert.assertTrue("'" + escapeMode79 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode79.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset80);
        org.junit.Assert.assertTrue("'" + escapeMode83 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode83.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertTrue("'" + escapeMode89 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode89.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings91);
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList7 = textNode2.childNodes();
        org.jsoup.nodes.Node node10 = textNode2.attr("hi!", "#text");
        java.lang.StringBuilder stringBuilder11 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        outputSettings15.prettyPrint = false;
        int int18 = outputSettings15.indentAmount;
        java.nio.charset.Charset charset19 = outputSettings15.charset;
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings15.getescapeMode();
        int int21 = outputSettings15.getindentAmount();
        textNode2.outerHtmlTail(stringBuilder11, (int) (short) 1, outputSettings15);
        outputSettings15.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings15.indentAmount(0);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.charset("i!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: i!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(nodeList7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(outputSettings26);
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        boolean boolean10 = textNode2.hasAttr("text");
        textNode2.settext("text");
        textNode2.text = "#text";
        textNode2.settext("#");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.gettext();
        org.jsoup.nodes.Attributes attributes10 = textNode2.attributes();
        textNode2.settext("");
        java.lang.String str13 = textNode2.nodeName();
        org.jsoup.nodes.Document document14 = textNode2.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.nodes.Node> nodeList15 = document14.siblingNodes();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertNull(document14);
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        org.jsoup.nodes.TextNode textNode12 = textNode2.text("");
        org.jsoup.nodes.TextNode textNode14 = textNode2.text("");
        int int15 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode17 = textNode2.text("hi!");
        org.jsoup.nodes.Node node18 = textNode17.parent();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node19 = textNode17.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(textNode12);
        org.junit.Assert.assertNotNull(textNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings10.escapeMode;
        int int14 = outputSettings10.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings10.encoder();
        outputSettings5.charsetEncoder = charsetEncoder15;
        int int17 = outputSettings5.getindentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings5.escapeMode();
        boolean boolean19 = outputSettings5.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings5.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode;
        outputSettings24.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode;
        java.nio.charset.Charset charset32 = outputSettings30.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings30.clone();
        outputSettings30.forceAllElementAsBlock = true;
        outputSettings30.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset38 = outputSettings30.getcharset();
        outputSettings24.charset = charset38;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings42.escapeMode;
        java.nio.charset.Charset charset44 = outputSettings42.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings42.escapeMode;
        boolean boolean46 = outputSettings42.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings47.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings49.escapeMode;
        outputSettings42.setescapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings24.escapeMode(escapeMode50);
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings24.escapeMode();
        outputSettings21.setescapeMode(escapeMode53);
        boolean boolean55 = outputSettings21.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = outputSettings21.clone();
        outputSettings21.indentAmount = 32;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(outputSettings56);
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.nodeName();
        boolean boolean13 = textNode2.hasAttr("hi!");
        java.lang.String str14 = textNode2.outerHtml();
        java.util.List<org.jsoup.nodes.Node> nodeList15 = textNode2.siblingNodes();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode2.siblingNodes();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode2.childNodes();
        int int18 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node19 = textNode2.parent();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document document20 = node19.ownerDocument();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertNotNull(nodeList16);
        org.junit.Assert.assertNotNull(nodeList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("i!", "");
        org.junit.Assert.assertNotNull(textNode2);
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        org.jsoup.nodes.Node node8 = textNode2.clone();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("#text");
        int int11 = textNode2.siblingIndex();
        org.jsoup.nodes.TextNode textNode14 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str15 = textNode14.text;
        java.lang.String str16 = textNode14.outerHtml();
        java.lang.String str17 = textNode14.getTEXT_KEY();
        java.lang.String str18 = textNode14.nodeName();
        boolean boolean20 = textNode14.equals((java.lang.Object) (short) 1);
        textNode14.setBaseUri("#text");
        boolean boolean23 = textNode14.isBlank();
        java.lang.String str24 = textNode14.baseUri();
        java.lang.String str25 = textNode14.getTEXT_KEY();
        java.lang.String str27 = textNode14.absUrl("hi!");
        org.jsoup.nodes.Node node28 = textNode14.clone();
        textNode14.settext("text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node31 = textNode2.before((org.jsoup.nodes.Node) textNode14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "#text" + "'", str18, "#text");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#text" + "'", str24, "#text");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "text" + "'", str25, "text");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.outerHtml();
        textNode2.settext("hi!");
        java.util.List<org.jsoup.nodes.Node> nodeList11 = textNode2.siblingNodes();
        java.lang.String str12 = textNode2.baseUri();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node14 = textNode2.childNode((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        java.lang.String str9 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        java.nio.charset.Charset charset14 = outputSettings11.getcharset();
        boolean boolean15 = outputSettings11.prettyPrint();
        boolean boolean16 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        outputSettings19.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        outputSettings19.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode;
        java.nio.charset.Charset charset33 = outputSettings31.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings31.escapeMode;
        boolean boolean35 = outputSettings31.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings31.escapeMode(escapeMode39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings19.escapeMode(escapeMode39);
        outputSettings11.setescapeMode(escapeMode39);
        boolean boolean43 = textNode2.equals((java.lang.Object) escapeMode39);
        textNode2.settext("hi!");
        java.lang.String str46 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node47 = textNode2.nextSibling();
        java.lang.String str48 = textNode2.nodeName();
        textNode2.setBaseUri("text");
        org.jsoup.nodes.TextNode textNode52 = textNode2.splitText(0);
        java.lang.String str53 = textNode2.getTEXT_KEY();
        textNode2.settext("#text");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "text" + "'", str46, "text");
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "#text" + "'", str48, "#text");
        org.junit.Assert.assertNotNull(textNode52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "text" + "'", str53, "text");
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.getWholeText();
        java.lang.String str4 = textNode2.baseUri();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("");
        boolean boolean8 = textNode6.hasAttr("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode6.wrap("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.gettext();
        java.lang.String str9 = textNode2.attr("");
        textNode2.ensureAttributes();
        textNode2.text = "text";
        int int13 = textNode2.siblingIndex();
        org.jsoup.nodes.Node node14 = textNode2.clone();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.Node node10 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        java.lang.String str13 = textNode2.absUrl("#text");
        java.lang.String str15 = textNode2.attr("hi!");
        org.jsoup.nodes.TextNode textNode18 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str19 = textNode18.text;
        java.lang.String str20 = textNode18.outerHtml();
        java.lang.String str21 = textNode18.getTEXT_KEY();
        java.lang.String str22 = textNode18.nodeName();
        org.jsoup.nodes.Attributes attributes23 = textNode18.attributes();
        org.jsoup.nodes.Node node24 = textNode18.clone();
        java.lang.StringBuilder stringBuilder25 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings29.escapeMode;
        outputSettings29.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings35.escapeMode;
        java.nio.charset.Charset charset37 = outputSettings35.charset();
        outputSettings29.setcharset(charset37);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings41.escapeMode;
        java.nio.charset.Charset charset43 = outputSettings41.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings41.escapeMode;
        boolean boolean45 = outputSettings41.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings48.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings41.escapeMode(escapeMode49);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings29.escapeMode(escapeMode49);
        boolean boolean52 = outputSettings51.getforceAllElementAsBlock();
        textNode18.outerHtmlTail(stringBuilder25, (int) (byte) 0, outputSettings51);
        java.lang.String str54 = textNode18.nodeName();
        java.util.List<org.jsoup.nodes.Node> nodeList55 = textNode18.childNodes();
        java.lang.String str56 = textNode18.nodeName();
        textNode18.setBaseUri("h");
        boolean boolean59 = textNode18.isBlank();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.replaceWith((org.jsoup.nodes.Node) textNode18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "text" + "'", str21, "text");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#text" + "'", str22, "#text");
        org.junit.Assert.assertNotNull(attributes23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "#text" + "'", str54, "#text");
        org.junit.Assert.assertNotNull(nodeList55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "#text" + "'", str56, "#text");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.text = "text";
        textNode2.ensureAttributes();
        java.lang.String str8 = textNode2.getTEXT_KEY();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        outputSettings13.setescapeMode(escapeMode21);
        boolean boolean23 = outputSettings13.getprettyPrint();
        outputSettings13.indentAmount = 97;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings13.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings13.escapeMode();
        textNode2.outerHtmlTail(stringBuilder9, (int) (byte) 100, outputSettings13);
        org.jsoup.nodes.Node node30 = textNode2.removeAttr("#");
        org.jsoup.nodes.TextNode textNode33 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str34 = textNode33.text;
        java.lang.String str35 = textNode33.outerHtml();
        java.lang.String str36 = textNode33.getTEXT_KEY();
        java.lang.String str37 = textNode33.text;
        java.lang.Object obj38 = null;
        boolean boolean39 = textNode33.equals(obj38);
        org.jsoup.nodes.Node node41 = textNode33.removeAttr("hi!");
        org.jsoup.nodes.Node node42 = textNode33.previousSibling();
        textNode33.ensureAttributes();
        int int44 = textNode33.siblingIndex();
        java.lang.String str45 = textNode33.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node46 = textNode2.before((org.jsoup.nodes.Node) textNode33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "text" + "'", str8, "text");
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "text" + "'", str36, "text");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        int int20 = textNode2.siblingIndex();
        java.lang.String str22 = textNode2.attr("hi!");
        org.jsoup.nodes.TextNode textNode24 = textNode2.text("text");
        org.jsoup.nodes.Node node25 = textNode2.clone();
        org.jsoup.nodes.Node node28 = textNode2.attr("i!", "#text");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(textNode24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        org.jsoup.nodes.Node node16 = textNode2.attr("text", "");
        org.jsoup.nodes.Node node17 = textNode2.nextSibling();
        org.jsoup.nodes.Node node19 = textNode2.removeAttr("text");
        java.lang.String str21 = textNode2.absUrl("#");
        java.lang.String str22 = textNode2.baseUri();
        java.lang.String str23 = textNode2.text();
        java.lang.StringBuilder stringBuilder24 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.indentAmount((int) 'a');
        outputSettings28.prettyPrint = false;
        int int31 = outputSettings28.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings28.forceAllElementAsBlock(false);
        outputSettings28.setindentAmount((int) (short) 10);
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings28.prettyPrint(false);
        textNode2.outerHtmlTail(stringBuilder24, (int) (byte) 0, outputSettings28);
        java.nio.charset.CharsetEncoder charsetEncoder39 = outputSettings28.encoder();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#text" + "'", str22, "#text");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(charsetEncoder39);
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings2.escapeMode(escapeMode10);
        outputSettings2.forceAllElementAsBlock = false;
        outputSettings2.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder16 = outputSettings2.encoder();
        outputSettings2.setprettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.CharsetEncoder charsetEncoder23 = null;
        outputSettings21.charsetEncoder = charsetEncoder23;
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings21.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder26 = outputSettings21.charsetEncoder;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = null;
        outputSettings21.escapeMode = escapeMode27;
        int int29 = outputSettings21.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings32.escapeMode;
        boolean boolean36 = outputSettings32.prettyPrint;
        boolean boolean37 = outputSettings32.forceAllElementAsBlock;
        boolean boolean38 = outputSettings32.getforceAllElementAsBlock();
        boolean boolean39 = outputSettings32.getprettyPrint();
        java.nio.charset.Charset charset40 = outputSettings32.getcharset();
        boolean boolean41 = outputSettings32.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings32.prettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings43.getcharsetEncoder();
        outputSettings21.setcharsetEncoder(charsetEncoder44);
        outputSettings2.charsetEncoder = charsetEncoder44;
        java.nio.charset.Charset charset47 = outputSettings2.getcharset();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNull(charsetEncoder25);
        org.junit.Assert.assertNull(charsetEncoder26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertNotNull(charset47);
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        boolean boolean10 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings2.getescapeMode();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings2.escapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings2.encoder();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder13);
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str4 = textNode2.absUrl("#text");
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        outputSettings16.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings9.escapeMode(escapeMode21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        boolean boolean30 = outputSettings25.forceAllElementAsBlock;
        boolean boolean31 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean32 = outputSettings25.getprettyPrint();
        java.nio.charset.Charset charset33 = outputSettings25.getcharset();
        outputSettings9.charset = charset33;
        textNode2.outerHtmlTail(stringBuilder5, (int) (short) 1, outputSettings9);
        org.jsoup.nodes.TextNode textNode37 = textNode2.text("text");
        org.jsoup.nodes.TextNode textNode40 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str41 = textNode40.text;
        java.lang.String str42 = textNode40.outerHtml();
        java.lang.String str43 = textNode40.getTEXT_KEY();
        java.lang.String str44 = textNode40.text;
        java.lang.String str45 = textNode40.gettext();
        java.lang.String str47 = textNode40.attr("#text");
        java.lang.String str48 = textNode40.text;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings49.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings51.escapeMode;
        java.nio.charset.Charset charset53 = outputSettings51.charset();
        boolean boolean54 = outputSettings51.prettyPrint();
        boolean boolean55 = textNode40.equals((java.lang.Object) boolean54);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node56 = textNode37.before((org.jsoup.nodes.Node) textNode40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(textNode37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "text" + "'", str43, "text");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.Node node10 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        textNode2.settext("text");
        org.jsoup.nodes.TextNode textNode15 = textNode2.text("hi!");
        java.lang.String str16 = textNode2.outerHtml();
        org.jsoup.nodes.Node node18 = textNode2.removeAttr("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node19 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(textNode15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings2.forceAllElementAsBlock = true;
        outputSettings2.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings2.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.clone();
        outputSettings18.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset;
        outputSettings18.setcharset(charset25);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings29.escapeMode;
        java.nio.charset.Charset charset31 = outputSettings29.charset();
        outputSettings29.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings29.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings37.escapeMode;
        java.nio.charset.Charset charset39 = outputSettings37.charset();
        outputSettings37.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings37.escapeMode;
        outputSettings37.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder45 = outputSettings37.charsetEncoder;
        outputSettings29.setcharsetEncoder(charsetEncoder45);
        outputSettings18.setcharsetEncoder(charsetEncoder45);
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings18.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings11.escapeMode(escapeMode48);
        outputSettings11.indentAmount = (byte) 10;
        boolean boolean52 = outputSettings11.getprettyPrint();
        java.nio.charset.Charset charset53 = outputSettings11.getcharset();
        boolean boolean54 = outputSettings11.getprettyPrint();
        boolean boolean55 = outputSettings11.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode56 = outputSettings11.getescapeMode();
        java.nio.charset.CharsetEncoder charsetEncoder57 = outputSettings11.charsetEncoder;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + escapeMode56 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode56.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder57);
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        outputSettings11.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        outputSettings11.setcharset(charset19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings23.escapeMode;
        boolean boolean27 = outputSettings23.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings23.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings11.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings0.escapeMode(escapeMode31);
        boolean boolean35 = outputSettings34.getforceAllElementAsBlock();
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        boolean boolean37 = outputSettings34.prettyPrint;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset;
        outputSettings5.setcharset(charset12);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings5.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode;
        java.nio.charset.Charset charset20 = outputSettings18.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings15.charset(charset20);
        outputSettings21.prettyPrint = false;
        int int24 = outputSettings21.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings21.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings21.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        java.nio.charset.Charset charset31 = outputSettings28.getcharset();
        boolean boolean32 = outputSettings28.prettyPrint();
        boolean boolean33 = outputSettings28.forceAllElementAsBlock;
        outputSettings28.indentAmount = (short) 1;
        outputSettings28.prettyPrint = true;
        outputSettings28.forceAllElementAsBlock = false;
        outputSettings28.setindentAmount((int) '#');
        boolean boolean42 = outputSettings28.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings45.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings45.escapeMode;
        boolean boolean49 = outputSettings45.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings52.escapeMode;
        java.nio.charset.Charset charset54 = outputSettings52.charset();
        outputSettings52.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode57 = outputSettings52.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings45.escapeMode(escapeMode57);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings59.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings61.escapeMode;
        java.nio.charset.Charset charset63 = outputSettings61.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings61.clone();
        boolean boolean65 = outputSettings64.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder66 = outputSettings64.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings64.clone();
        java.nio.charset.CharsetEncoder charsetEncoder68 = outputSettings64.charsetEncoder;
        outputSettings58.setcharsetEncoder(charsetEncoder68);
        outputSettings28.setcharsetEncoder(charsetEncoder68);
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings28.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings27.escapeMode(escapeMode71);
        java.nio.charset.CharsetEncoder charsetEncoder73 = outputSettings27.charsetEncoder;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + escapeMode57 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode57.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(charsetEncoder66);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertNotNull(charsetEncoder68);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertNotNull(charsetEncoder73);
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("hi!");
        org.jsoup.nodes.Document document9 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node12 = textNode2.attr("hi!", "hi!");
        textNode2.settext("#text");
        textNode2.text = "";
        java.lang.String str17 = textNode2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(document9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        boolean boolean6 = outputSettings5.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings5.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings5.charsetEncoder;
        java.nio.charset.Charset charset9 = outputSettings5.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings12.escapeMode;
        java.nio.charset.Charset charset14 = outputSettings12.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings12.escapeMode;
        boolean boolean16 = outputSettings12.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings19.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings19.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings12.escapeMode(escapeMode24);
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings26.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings28.escapeMode;
        java.nio.charset.Charset charset30 = outputSettings28.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings28.escapeMode;
        boolean boolean32 = outputSettings28.prettyPrint;
        boolean boolean33 = outputSettings28.forceAllElementAsBlock;
        boolean boolean34 = outputSettings28.getforceAllElementAsBlock();
        boolean boolean35 = outputSettings28.getprettyPrint();
        java.nio.charset.Charset charset36 = outputSettings28.getcharset();
        outputSettings12.charset = charset36;
        outputSettings5.charset = charset36;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings5.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.forceAllElementAsBlock(false);
        outputSettings42.setprettyPrint(false);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(outputSettings42);
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("#text");
        java.lang.String str9 = textNode2.nodeName();
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.text();
        org.jsoup.nodes.Node node14 = textNode2.attr("h", "i!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = node14.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "#text");
        java.lang.String str3 = textNode2.text();
        org.jsoup.nodes.Node node5 = textNode2.removeAttr("#text");
        org.jsoup.nodes.Attributes attributes6 = textNode2.attributes();
        textNode2.settext("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(attributes6);
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        org.jsoup.nodes.Node node19 = textNode2.previousSibling();
        org.jsoup.nodes.TextNode textNode21 = textNode2.text("");
        java.lang.String str22 = textNode21.toString();
        org.jsoup.nodes.Node node23 = textNode21.parent();
        org.jsoup.nodes.Node node25 = textNode21.removeAttr("i!");
        textNode21.setBaseUri("text");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(textNode21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "#text");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode6 = textNode2.splitText((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(textNode4);
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        org.jsoup.nodes.Node node8 = textNode2.attr("hi!", "#text");
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        outputSettings14.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings14.escapeMode;
        outputSettings11.setescapeMode(escapeMode19);
        boolean boolean21 = node8.equals((java.lang.Object) escapeMode19);
        org.jsoup.nodes.Node node22 = node8.previousSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node24 = node22.childNode((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.getTEXT_KEY();
        java.lang.String str11 = textNode2.baseUri();
        java.lang.String str12 = textNode2.outerHtml();
        boolean boolean13 = textNode2.isBlank();
        textNode2.text = "#text";
        org.jsoup.nodes.Attributes attributes16 = textNode2.attributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "text" + "'", str10, "text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(attributes16);
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "#text");
        int int3 = textNode2.siblingIndex();
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Document document6 = textNode2.ownerDocument();
        org.jsoup.nodes.TextNode textNode8 = textNode2.text("h");
        org.jsoup.nodes.TextNode textNode11 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str12 = textNode11.text;
        java.lang.String str13 = textNode11.outerHtml();
        java.lang.String str14 = textNode11.getTEXT_KEY();
        java.lang.String str15 = textNode11.nodeName();
        java.lang.String str16 = textNode11.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode11.childNodes();
        // The following exception was thrown during execution in test generation
        try {
            textNode8.replaceWith((org.jsoup.nodes.Node) textNode11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(document6);
        org.junit.Assert.assertNotNull(textNode8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "text" + "'", str14, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(nodeList17);
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.nodeName();
        boolean boolean13 = textNode2.hasAttr("hi!");
        java.lang.String str14 = textNode2.outerHtml();
        boolean boolean16 = textNode2.hasAttr("text");
        org.jsoup.nodes.Node node17 = textNode2.previousSibling();
        textNode2.text = "";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node21 = textNode2.after("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("hi!");
        org.jsoup.nodes.Document document11 = textNode10.ownerDocument();
        java.lang.String str13 = textNode10.attr("hi!");
        org.jsoup.nodes.Node node14 = textNode10.parent();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertNull(document11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        boolean boolean5 = textNode2.hasAttr("hi!");
        org.jsoup.nodes.Node node6 = textNode2.parent();
        textNode2.settext("hi!");
        java.lang.String str9 = textNode2.getTEXT_KEY();
        boolean boolean11 = textNode2.hasAttr("");
        textNode2.text = "#text";
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node15 = textNode2.parent();
        java.lang.String str16 = textNode2.getTEXT_KEY();
        textNode2.setBaseUri("#");
        java.lang.String str19 = textNode2.getWholeText();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node21 = textNode2.after("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "text" + "'", str9, "text");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "text" + "'", str16, "text");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        boolean boolean10 = outputSettings2.forceAllElementAsBlock();
        outputSettings2.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.clone();
        outputSettings15.forceAllElementAsBlock = true;
        outputSettings15.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings15.prettyPrint(true);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings24.charsetEncoder;
        outputSettings2.charsetEncoder = charsetEncoder25;
        java.nio.charset.Charset charset27 = outputSettings2.getcharset();
        java.nio.charset.Charset charset28 = outputSettings2.getcharset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings32.clone();
        outputSettings32.forceAllElementAsBlock = true;
        outputSettings32.forceAllElementAsBlock = false;
        java.nio.charset.Charset charset40 = outputSettings32.getcharset();
        outputSettings2.charset = charset40;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings2.indentAmount((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must be true");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertNotNull(charset40);
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean10 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings2.forceAllElementAsBlock(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        outputSettings17.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings17.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings17.indentAmount((int) (byte) 10);
        boolean boolean25 = outputSettings17.forceAllElementAsBlock;
        java.nio.charset.Charset charset26 = outputSettings17.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings29.escapeMode;
        java.nio.charset.Charset charset31 = outputSettings29.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings29.escapeMode;
        boolean boolean33 = outputSettings29.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings36.escapeMode;
        java.nio.charset.Charset charset38 = outputSettings36.charset();
        outputSettings36.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings36.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings29.escapeMode(escapeMode41);
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.indentAmount((int) 'a');
        java.nio.charset.Charset charset49 = outputSettings46.getcharset();
        outputSettings45.setcharset(charset49);
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = outputSettings53.escapeMode;
        java.nio.charset.Charset charset55 = outputSettings53.charset();
        outputSettings45.charset = charset55;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings29.charset(charset55);
        outputSettings17.setcharset(charset55);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings14.charset(charset55);
        java.nio.charset.CharsetEncoder charsetEncoder60 = outputSettings59.encoder();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + escapeMode54 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode54.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charsetEncoder60);
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings0.escapeMode();
        int int10 = outputSettings0.getindentAmount();
        java.nio.charset.Charset charset11 = outputSettings0.charset();
        outputSettings0.forceAllElementAsBlock = false;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(charset11);
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        outputSettings9.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings2.escapeMode(escapeMode14);
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.prettyPrint(false);
        org.jsoup.nodes.TextNode textNode21 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str22 = textNode21.text;
        java.lang.String str23 = textNode21.outerHtml();
        java.lang.String str24 = textNode21.getTEXT_KEY();
        java.lang.String str25 = textNode21.toString();
        java.util.List<org.jsoup.nodes.Node> nodeList26 = textNode21.childNodes();
        java.lang.StringBuilder stringBuilder27 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode;
        java.nio.charset.Charset charset33 = outputSettings31.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings31.clone();
        outputSettings34.setindentAmount((int) (short) 10);
        outputSettings34.setindentAmount(97);
        org.jsoup.nodes.TextNode textNode41 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str42 = textNode41.text;
        java.lang.String str43 = textNode41.outerHtml();
        java.lang.String str44 = textNode41.getTEXT_KEY();
        java.lang.String str45 = textNode41.text;
        java.lang.Object obj46 = null;
        boolean boolean47 = textNode41.equals(obj46);
        java.lang.String str48 = textNode41.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList49 = textNode41.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings50.indentAmount((int) 'a');
        java.nio.charset.Charset charset53 = outputSettings50.getcharset();
        boolean boolean54 = outputSettings50.prettyPrint();
        boolean boolean55 = outputSettings50.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode;
        outputSettings58.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings62.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = outputSettings64.escapeMode;
        java.nio.charset.Charset charset66 = outputSettings64.charset();
        outputSettings58.setcharset(charset66);
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings70 = outputSettings68.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode71 = outputSettings70.escapeMode;
        java.nio.charset.Charset charset72 = outputSettings70.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings70.escapeMode;
        boolean boolean74 = outputSettings70.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = outputSettings75.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode78 = outputSettings77.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings70.escapeMode(escapeMode78);
        org.jsoup.nodes.Document.OutputSettings outputSettings80 = outputSettings58.escapeMode(escapeMode78);
        outputSettings50.setescapeMode(escapeMode78);
        boolean boolean82 = textNode41.equals((java.lang.Object) escapeMode78);
        outputSettings34.setescapeMode(escapeMode78);
        outputSettings34.forceAllElementAsBlock = false;
        textNode21.outerHtmlTail(stringBuilder27, 1, outputSettings34);
        java.nio.charset.Charset charset87 = outputSettings34.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings15.charset(charset87);
        java.nio.charset.CharsetEncoder charsetEncoder89 = outputSettings15.encoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode90 = outputSettings15.getescapeMode();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "text" + "'", str24, "text");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(nodeList26);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "text" + "'", str44, "text");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(nodeList49);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(outputSettings70);
        org.junit.Assert.assertTrue("'" + escapeMode71 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode71.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(outputSettings77);
        org.junit.Assert.assertTrue("'" + escapeMode78 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode78.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertNotNull(outputSettings80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(charset87);
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertNotNull(charsetEncoder89);
        org.junit.Assert.assertTrue("'" + escapeMode90 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode90.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        outputSettings2.indentAmount = (short) 100;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings2.prettyPrint(false);
        outputSettings2.indentAmount = 0;
        outputSettings2.forceAllElementAsBlock = false;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings7);
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        outputSettings2.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode7 = outputSettings2.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.indentAmount((int) (byte) 10);
        boolean boolean10 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        java.nio.charset.Charset charset15 = outputSettings13.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings13.escapeMode;
        boolean boolean17 = outputSettings13.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        outputSettings20.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings20.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings13.escapeMode(escapeMode25);
        outputSettings2.setescapeMode(escapeMode25);
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        java.nio.charset.Charset charset34 = outputSettings31.getcharset();
        outputSettings30.setcharset(charset34);
        outputSettings2.setcharset(charset34);
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings2.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings2.forceAllElementAsBlock(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode43 = outputSettings42.escapeMode;
        java.nio.charset.Charset charset44 = outputSettings42.charset();
        outputSettings42.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings42.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings42.indentAmount((int) (byte) 10);
        boolean boolean50 = outputSettings42.getprettyPrint();
        outputSettings42.setprettyPrint(false);
        java.nio.charset.Charset charset53 = outputSettings42.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode54 = null;
        outputSettings42.setescapeMode(escapeMode54);
        boolean boolean56 = outputSettings42.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings57.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode60 = outputSettings59.escapeMode;
        java.nio.charset.Charset charset61 = outputSettings59.charset();
        outputSettings59.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings59.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings59.indentAmount((int) (byte) 10);
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings66.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings66.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings69 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = outputSettings69.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings71.escapeMode;
        java.nio.charset.Charset charset73 = outputSettings71.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = outputSettings71.clone();
        outputSettings74.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings77.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = outputSettings79.escapeMode;
        java.nio.charset.Charset charset81 = outputSettings79.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode82 = outputSettings79.escapeMode;
        int int83 = outputSettings79.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder84 = outputSettings79.encoder();
        outputSettings74.charsetEncoder = charsetEncoder84;
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean87 = outputSettings86.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings88.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode91 = outputSettings90.escapeMode;
        java.nio.charset.Charset charset92 = outputSettings90.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings86.charset(charset92);
        outputSettings74.charset = charset92;
        outputSettings66.charset = charset92;
        org.jsoup.nodes.Document.OutputSettings outputSettings96 = outputSettings42.charset(charset92);
        java.nio.charset.CharsetEncoder charsetEncoder97 = outputSettings96.charsetEncoder;
        outputSettings2.setcharsetEncoder(charsetEncoder97);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode7 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode7.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + escapeMode43 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode43.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + escapeMode60 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode60.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNotNull(outputSettings71);
        org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(outputSettings74);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertTrue("'" + escapeMode80 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode80.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset81);
        org.junit.Assert.assertTrue("'" + escapeMode82 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode82.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertTrue("'" + escapeMode91 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode91.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset92);
        org.junit.Assert.assertNotNull(outputSettings93);
        org.junit.Assert.assertNotNull(outputSettings96);
        org.junit.Assert.assertNotNull(charsetEncoder97);
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("hi!", "text");
        java.lang.StringBuilder stringBuilder3 = null;
        org.jsoup.nodes.TextNode textNode7 = new org.jsoup.nodes.TextNode("", "");
        java.lang.StringBuilder stringBuilder8 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings10.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings12.escapeMode;
        java.nio.charset.Charset charset14 = outputSettings12.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings12.clone();
        outputSettings12.forceAllElementAsBlock = true;
        outputSettings12.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings12.prettyPrint(true);
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        textNode7.outerHtmlTail(stringBuilder8, (int) '4', outputSettings21);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings24.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings26.escapeMode;
        java.nio.charset.Charset charset28 = outputSettings26.charset();
        outputSettings26.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings26.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings26.indentAmount((int) (byte) 10);
        boolean boolean34 = outputSettings26.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings35.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings37.escapeMode;
        java.nio.charset.Charset charset39 = outputSettings37.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings37.escapeMode;
        boolean boolean41 = outputSettings37.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings44.escapeMode;
        java.nio.charset.Charset charset46 = outputSettings44.charset();
        outputSettings44.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings44.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings37.escapeMode(escapeMode49);
        outputSettings26.setescapeMode(escapeMode49);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings52.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode;
        java.nio.charset.Charset charset59 = outputSettings57.charset();
        outputSettings57.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings57.escapeMode;
        outputSettings54.setescapeMode(escapeMode62);
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = outputSettings54.prettyPrint(false);
        java.nio.charset.Charset charset66 = outputSettings65.getcharset();
        outputSettings26.charset = charset66;
        org.jsoup.nodes.Document.OutputSettings outputSettings68 = outputSettings21.charset(charset66);
        java.nio.charset.Charset charset69 = outputSettings21.getcharset();
        textNode2.outerHtmlTail(stringBuilder3, (-1), outputSettings21);
        boolean boolean71 = outputSettings21.prettyPrint;
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings65);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(outputSettings68);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        java.lang.String str3 = textNode2.getWholeText();
        org.jsoup.nodes.Node node4 = textNode2.clone();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        textNode2.setBaseUri("#text");
        textNode2.ensureAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode2.before("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.Node node10 = textNode2.removeAttr("hi!");
        int int11 = node10.siblingIndex();
        org.jsoup.nodes.Node node12 = node10.parent();
        org.jsoup.nodes.Node node13 = node10.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node15 = node13.before("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings2.escapeMode(escapeMode10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings14.escapeMode;
        outputSettings11.escapeMode = escapeMode17;
        boolean boolean19 = outputSettings11.forceAllElementAsBlock;
        outputSettings11.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder22 = outputSettings11.getcharsetEncoder();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charsetEncoder22);
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean7 = textNode2.isBlank();
        java.lang.String str8 = textNode2.toString();
        java.lang.String str9 = textNode2.gettext();
        org.jsoup.nodes.TextNode textNode12 = new org.jsoup.nodes.TextNode("", "text");
        java.lang.String str14 = textNode12.attr("text");
        boolean boolean15 = textNode2.equals((java.lang.Object) textNode12);
        org.jsoup.nodes.Node node16 = textNode2.previousSibling();
        textNode2.ensureAttributes();
        org.jsoup.nodes.Node node18 = textNode2.parent();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        java.lang.String str3 = textNode2.text();
        java.lang.String str4 = textNode2.outerHtml();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("#text");
        java.lang.String str8 = textNode2.attr("#text");
        java.lang.String str9 = textNode2.outerHtml();
        java.lang.String str10 = textNode2.baseUri();
        java.lang.String str11 = textNode2.outerHtml();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#text" + "'", str9, "#text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "#text" + "'", str10, "#text");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        org.jsoup.nodes.Node node10 = textNode2.removeAttr("hi!");
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        textNode2.ensureAttributes();
        int int13 = textNode2.siblingIndex();
        java.lang.String str14 = textNode2.gettext();
        textNode2.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList16 = textNode2.childNodes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.TextNode textNode18 = textNode2.splitText(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Split offset must not be greater than current text length");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(nodeList16);
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        outputSettings0.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings0.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings0.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings0.clone();
        java.nio.charset.Charset charset9 = null;
        outputSettings0.charset = charset9;
        boolean boolean11 = outputSettings0.getprettyPrint();
        boolean boolean12 = outputSettings0.prettyPrint;
        java.nio.charset.CharsetEncoder charsetEncoder13 = null;
        outputSettings0.charsetEncoder = charsetEncoder13;
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        outputSettings17.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        outputSettings17.setcharset(charset25);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings29.escapeMode;
        java.nio.charset.Charset charset31 = outputSettings29.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings29.escapeMode;
        boolean boolean33 = outputSettings29.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings36.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings29.escapeMode(escapeMode37);
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings17.escapeMode(escapeMode37);
        outputSettings0.escapeMode = escapeMode37;
        int int41 = outputSettings0.indentAmount;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        outputSettings5.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings5.escapeMode;
        outputSettings2.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings2.getprettyPrint();
        outputSettings2.setprettyPrint(false);
        boolean boolean15 = outputSettings2.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean17 = outputSettings16.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode21 = outputSettings20.escapeMode;
        java.nio.charset.Charset charset22 = outputSettings20.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings16.charset(charset22);
        boolean boolean24 = outputSettings23.getforceAllElementAsBlock();
        boolean boolean25 = outputSettings23.prettyPrint();
        boolean boolean26 = outputSettings23.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode27 = outputSettings23.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean29 = outputSettings28.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings32.clone();
        outputSettings32.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings28.escapeMode(escapeMode38);
        int int40 = outputSettings39.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings43.escapeMode;
        java.nio.charset.Charset charset45 = outputSettings43.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings43.clone();
        outputSettings43.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings43.escapeMode;
        int int50 = outputSettings43.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings43.prettyPrint(false);
        java.nio.charset.Charset charset53 = outputSettings43.charset();
        boolean boolean54 = outputSettings43.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings43.escapeMode;
        outputSettings39.escapeMode = escapeMode55;
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings23.escapeMode(escapeMode55);
        boolean boolean58 = outputSettings23.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings23.indentAmount(52);
        boolean boolean61 = outputSettings23.prettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings23.forceAllElementAsBlock(false);
        java.nio.charset.Charset charset64 = outputSettings23.getcharset();
        outputSettings2.charset = charset64;
        boolean boolean66 = outputSettings2.prettyPrint;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertTrue("'" + escapeMode21 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode21.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + escapeMode27 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode27.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        java.lang.String str12 = textNode2.attr("text");
        java.lang.String str14 = textNode2.absUrl("#");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        boolean boolean10 = outputSettings2.forceAllElementAsBlock();
        outputSettings2.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings2.escapeMode();
        boolean boolean14 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings2.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings19.clone();
        boolean boolean23 = outputSettings22.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings22.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings22.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        outputSettings25.setprettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings25.getescapeMode();
        outputSettings16.escapeMode = escapeMode29;
        outputSettings16.setindentAmount((int) (short) -1);
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings16.encoder();
        int int34 = outputSettings16.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings16.prettyPrint(true);
        outputSettings36.setforceAllElementAsBlock(false);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(outputSettings36);
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Node node11 = textNode2.parent();
        java.lang.String str12 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode2.siblingNodes();
        textNode2.setBaseUri("#");
        org.jsoup.nodes.Attributes attributes16 = textNode2.attributes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode2.childNode((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(attributes16);
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        boolean boolean20 = textNode2.isBlank();
        java.lang.String str21 = textNode2.baseUri();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = textNode2.absUrl("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: String must not be empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#text" + "'", str21, "#text");
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("text");
        org.jsoup.nodes.Node node16 = textNode13.attr("text", "text");
        java.lang.String str17 = textNode13.text();
        java.lang.StringBuilder stringBuilder18 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings22.escapeMode;
        java.nio.charset.Charset charset24 = outputSettings22.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings22.clone();
        boolean boolean26 = outputSettings25.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings25.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings25.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings28.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings28.indentAmount(0);
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings31.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings35.escapeMode;
        java.nio.charset.Charset charset37 = outputSettings35.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings35.clone();
        outputSettings35.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings35.escapeMode;
        int int42 = outputSettings35.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings35.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings45.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode48 = outputSettings47.escapeMode;
        java.nio.charset.Charset charset49 = outputSettings47.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings47.escapeMode;
        boolean boolean51 = outputSettings47.prettyPrint;
        boolean boolean52 = outputSettings47.forceAllElementAsBlock;
        boolean boolean53 = outputSettings47.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean55 = outputSettings54.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode;
        java.nio.charset.Charset charset60 = outputSettings58.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings54.charset(charset60);
        boolean boolean62 = outputSettings54.getprettyPrint();
        boolean boolean63 = outputSettings54.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings64.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode67 = outputSettings66.escapeMode;
        outputSettings54.setescapeMode(escapeMode67);
        outputSettings47.setescapeMode(escapeMode67);
        org.jsoup.nodes.Entities.EscapeMode escapeMode70 = outputSettings47.escapeMode;
        outputSettings35.escapeMode = escapeMode70;
        outputSettings31.setescapeMode(escapeMode70);
        // The following exception was thrown during execution in test generation
        try {
            textNode13.outerHtmlHead(stringBuilder18, (int) (byte) 10, outputSettings31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "text" + "'", str17, "text");
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertNotNull(charsetEncoder32);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode48 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode48.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + escapeMode67 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode67.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.childNodes();
        java.lang.String str9 = textNode2.toString();
        java.lang.String str10 = textNode2.text();
        java.lang.String str11 = textNode2.nodeName();
        boolean boolean13 = textNode2.hasAttr("hi!");
        java.lang.String str14 = textNode2.outerHtml();
        java.lang.String str15 = textNode2.toString();
        org.jsoup.nodes.Node node18 = textNode2.attr("text", "hi!");
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings21.clone();
        outputSettings24.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings29.escapeMode;
        java.nio.charset.Charset charset31 = outputSettings29.charset;
        outputSettings24.setcharset(charset31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings24.forceAllElementAsBlock(false);
        outputSettings24.prettyPrint = true;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean38 = outputSettings37.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings41.escapeMode;
        java.nio.charset.Charset charset43 = outputSettings41.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings37.charset(charset43);
        outputSettings24.charset = charset43;
        java.nio.charset.CharsetEncoder charsetEncoder46 = outputSettings24.encoder();
        boolean boolean47 = textNode2.equals((java.lang.Object) charsetEncoder46);
        org.jsoup.nodes.TextNode textNode50 = new org.jsoup.nodes.TextNode("#", "#text");
        textNode50.text = "#";
        java.lang.String str53 = textNode50.getWholeText();
        boolean boolean55 = textNode50.hasAttr("hi!");
        java.lang.String str56 = textNode50.text;
        java.lang.String str57 = textNode50.getTEXT_KEY();
        java.util.List<org.jsoup.nodes.Node> nodeList58 = textNode50.siblingNodes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node59 = textNode2.after((org.jsoup.nodes.Node) textNode50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#text" + "'", str11, "#text");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertNotNull(charsetEncoder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "#" + "'", str53, "#");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "#" + "'", str56, "#");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "text" + "'", str57, "text");
        org.junit.Assert.assertNotNull(nodeList58);
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "#text");
        java.lang.String str3 = textNode2.text();
        org.jsoup.nodes.Document document4 = textNode2.ownerDocument();
        java.lang.StringBuilder stringBuilder5 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings9.escapeMode;
        boolean boolean13 = outputSettings9.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        outputSettings9.setescapeMode(escapeMode17);
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        java.nio.charset.Charset charset23 = outputSettings21.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings21.escapeMode;
        boolean boolean25 = outputSettings21.prettyPrint;
        boolean boolean26 = outputSettings21.forceAllElementAsBlock;
        boolean boolean27 = outputSettings21.getforceAllElementAsBlock();
        boolean boolean28 = outputSettings21.getprettyPrint();
        boolean boolean29 = outputSettings21.forceAllElementAsBlock();
        outputSettings21.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings21.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings33.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings35.escapeMode;
        java.nio.charset.Charset charset37 = outputSettings35.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings35.clone();
        outputSettings35.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings35.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean43 = outputSettings42.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings44.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings46.escapeMode;
        java.nio.charset.Charset charset48 = outputSettings46.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings42.charset(charset48);
        outputSettings35.charset = charset48;
        outputSettings21.setcharset(charset48);
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = outputSettings9.charset(charset48);
        outputSettings52.forceAllElementAsBlock = true;
        boolean boolean55 = outputSettings52.forceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder5, 10, outputSettings52);
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings52.clone();
        boolean boolean58 = outputSettings52.prettyPrint;
        boolean boolean59 = outputSettings52.forceAllElementAsBlock;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNull(document4);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(outputSettings52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.toString();
        java.lang.String str7 = textNode2.text;
        java.util.List<org.jsoup.nodes.Node> nodeList8 = textNode2.siblingNodes();
        org.jsoup.nodes.TextNode textNode10 = textNode2.text("");
        textNode2.text = "#text";
        java.lang.String str13 = textNode2.text();
        boolean boolean14 = textNode2.isBlank();
        boolean boolean15 = textNode2.isBlank();
        java.lang.String str16 = textNode2.text;
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(textNode10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "#text" + "'", str13, "#text");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#text" + "'", str16, "#text");
        org.junit.Assert.assertNull(document17);
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings2.escapeMode(escapeMode10);
        outputSettings2.forceAllElementAsBlock = false;
        boolean boolean14 = outputSettings2.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings2.charsetEncoder;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings16.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings18.escapeMode;
        java.nio.charset.Charset charset20 = outputSettings18.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings18.clone();
        boolean boolean22 = outputSettings21.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings21.clone();
        java.nio.charset.Charset charset25 = outputSettings21.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings26 = outputSettings2.charset(charset25);
        java.nio.charset.CharsetEncoder charsetEncoder27 = outputSettings26.encoder();
        int int28 = outputSettings26.getindentAmount();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(outputSettings26);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text();
        textNode2.ensureAttributes();
        java.util.List<org.jsoup.nodes.Node> nodeList5 = textNode2.siblingNodes();
        org.jsoup.nodes.TextNode textNode7 = textNode2.text("#");
        org.jsoup.nodes.TextNode textNode9 = textNode2.text("");
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.siblingNodes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(nodeList5);
        org.junit.Assert.assertNotNull(textNode7);
        org.junit.Assert.assertNotNull(textNode9);
        org.junit.Assert.assertNotNull(nodeList10);
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        java.lang.String str12 = textNode2.baseUri();
        java.lang.String str13 = textNode2.getTEXT_KEY();
        java.lang.String str15 = textNode2.absUrl("hi!");
        org.jsoup.nodes.Node node16 = textNode2.previousSibling();
        java.lang.String str17 = textNode2.getWholeText();
        java.lang.String str18 = textNode2.text();
        java.lang.String str19 = textNode2.gettext();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#text" + "'", str12, "#text");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "text" + "'", str13, "text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        outputSettings11.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        outputSettings11.setcharset(charset19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings23.escapeMode;
        boolean boolean27 = outputSettings23.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings23.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings11.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings0.escapeMode(escapeMode31);
        org.jsoup.nodes.Entities.EscapeMode escapeMode35 = outputSettings34.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings39.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode42 = outputSettings41.escapeMode;
        java.nio.charset.Charset charset43 = outputSettings41.charset();
        outputSettings41.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings41.escapeMode;
        outputSettings38.setescapeMode(escapeMode46);
        boolean boolean48 = outputSettings38.getprettyPrint();
        outputSettings38.indentAmount = 97;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings38.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings38.escapeMode();
        outputSettings38.forceAllElementAsBlock = true;
        outputSettings38.indentAmount = 1;
        int int57 = outputSettings38.indentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings38.indentAmount(1);
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean61 = outputSettings60.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings62.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = outputSettings64.escapeMode;
        java.nio.charset.Charset charset66 = outputSettings64.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings60.charset(charset66);
        boolean boolean68 = outputSettings60.getprettyPrint();
        boolean boolean69 = outputSettings60.getprettyPrint();
        outputSettings60.setforceAllElementAsBlock(true);
        java.nio.charset.Charset charset72 = outputSettings60.charset;
        outputSettings59.setcharset(charset72);
        outputSettings34.setcharset(charset72);
        outputSettings34.setforceAllElementAsBlock(false);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + escapeMode35 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode35.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + escapeMode42 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode42.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(outputSettings51);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(charset72);
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = outputSettings4.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        java.nio.charset.Charset charset11 = outputSettings9.charset();
        outputSettings9.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings9.escapeMode;
        outputSettings6.setescapeMode(escapeMode14);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings6.prettyPrint(false);
        outputSettings6.setindentAmount((int) (short) -1);
        int int20 = outputSettings6.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings6.indentAmount(0);
        outputSettings6.prettyPrint = true;
        int int25 = outputSettings6.indentAmount();
        int int26 = outputSettings6.indentAmount;
        java.nio.charset.Charset charset27 = outputSettings6.charset;
        outputSettings0.charset = charset27;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertNotNull(outputSettings6);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(charset27);
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Attributes attributes7 = textNode2.attributes();
        org.jsoup.nodes.Node node8 = textNode2.clone();
        java.lang.StringBuilder stringBuilder9 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings13.escapeMode;
        outputSettings13.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        outputSettings13.setcharset(charset21);
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings25.escapeMode;
        boolean boolean29 = outputSettings25.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings25.escapeMode(escapeMode33);
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings13.escapeMode(escapeMode33);
        boolean boolean36 = outputSettings35.getforceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder9, (int) (byte) 0, outputSettings35);
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings38.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode41 = outputSettings40.escapeMode;
        java.nio.charset.Charset charset42 = outputSettings40.charset();
        outputSettings40.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings40.escapeMode;
        outputSettings35.escapeMode = escapeMode45;
        outputSettings35.setindentAmount((int) '4');
        boolean boolean49 = outputSettings35.forceAllElementAsBlock;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings51 = outputSettings35.charset("text");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: text");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertTrue("'" + escapeMode41 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode41.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        outputSettings2.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset10 = outputSettings8.charset();
        outputSettings2.setcharset(charset10);
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings14.escapeMode;
        boolean boolean18 = outputSettings14.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = outputSettings19.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings21.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings14.escapeMode(escapeMode22);
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings2.escapeMode(escapeMode22);
        boolean boolean25 = outputSettings2.forceAllElementAsBlock();
        outputSettings2.setprettyPrint(false);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings2.charset("text");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: text");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(outputSettings21);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.lang.String str14 = textNode2.outerHtml();
        java.lang.String str15 = textNode2.gettext();
        org.jsoup.nodes.Node node16 = textNode2.clone();
        java.util.List<org.jsoup.nodes.Node> nodeList17 = textNode2.siblingNodes();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeList17);
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.Object obj7 = null;
        boolean boolean8 = textNode2.equals(obj7);
        java.lang.String str9 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList10 = textNode2.childNodes();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings11.indentAmount((int) 'a');
        java.nio.charset.Charset charset14 = outputSettings11.getcharset();
        boolean boolean15 = outputSettings11.prettyPrint();
        boolean boolean16 = outputSettings11.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        outputSettings19.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings23.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        java.nio.charset.Charset charset27 = outputSettings25.charset();
        outputSettings19.setcharset(charset27);
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = outputSettings29.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings31.escapeMode;
        java.nio.charset.Charset charset33 = outputSettings31.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings31.escapeMode;
        boolean boolean35 = outputSettings31.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings38 = outputSettings36.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode39 = outputSettings38.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = outputSettings31.escapeMode(escapeMode39);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings19.escapeMode(escapeMode39);
        outputSettings11.setescapeMode(escapeMode39);
        boolean boolean43 = textNode2.equals((java.lang.Object) escapeMode39);
        org.jsoup.nodes.Node node46 = textNode2.attr("#text", "#text");
        boolean boolean48 = textNode2.hasAttr("#");
        java.lang.String str49 = textNode2.gettext();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(nodeList10);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(outputSettings31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(outputSettings38);
        org.junit.Assert.assertTrue("'" + escapeMode39 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode39.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings40);
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        java.lang.String str3 = textNode2.text();
        java.lang.String str4 = textNode2.outerHtml();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("#text");
        java.lang.String str8 = textNode6.absUrl("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList9 = textNode6.siblingNodes();
        textNode6.settext("#text");
        textNode6.ensureAttributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(nodeList9);
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        java.nio.charset.Charset charset10 = outputSettings2.getcharset();
        boolean boolean11 = outputSettings2.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = outputSettings2.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        java.nio.charset.Charset charset17 = outputSettings14.getcharset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean19 = outputSettings18.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings20.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode23 = outputSettings22.escapeMode;
        java.nio.charset.Charset charset24 = outputSettings22.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings18.charset(charset24);
        boolean boolean26 = outputSettings25.getforceAllElementAsBlock();
        boolean boolean27 = outputSettings25.forceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        java.nio.charset.Charset charset35 = outputSettings33.charset();
        outputSettings33.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings33.escapeMode;
        outputSettings30.setescapeMode(escapeMode38);
        outputSettings25.setescapeMode(escapeMode38);
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = outputSettings14.escapeMode(escapeMode38);
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings44.escapeMode;
        java.nio.charset.Charset charset46 = outputSettings44.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings47 = outputSettings44.clone();
        outputSettings44.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings44.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings51 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings51.indentAmount((int) 'a');
        boolean boolean54 = outputSettings53.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings53.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings53.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings58.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings58.clone();
        outputSettings58.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings58.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings65.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings67.escapeMode;
        java.nio.charset.Charset charset69 = outputSettings67.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode70 = outputSettings67.escapeMode;
        boolean boolean71 = outputSettings67.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode72 = outputSettings67.getescapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings58.escapeMode(escapeMode72);
        outputSettings57.escapeMode = escapeMode72;
        org.jsoup.nodes.Document.OutputSettings outputSettings75 = outputSettings44.escapeMode(escapeMode72);
        outputSettings41.escapeMode = escapeMode72;
        outputSettings13.setescapeMode(escapeMode72);
        int int78 = outputSettings13.indentAmount;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(outputSettings13);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + escapeMode23 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode23.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings41);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(outputSettings47);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + escapeMode70 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode70.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + escapeMode72 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode72.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertNotNull(outputSettings75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        org.jsoup.nodes.Document document7 = textNode2.ownerDocument();
        java.lang.String str8 = textNode2.outerHtml();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        outputSettings11.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        outputSettings11.setcharset(charset19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings23.escapeMode;
        boolean boolean27 = outputSettings23.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings23.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings11.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings0.escapeMode(escapeMode31);
        boolean boolean35 = outputSettings34.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings34.prettyPrint(true);
        outputSettings34.prettyPrint = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings45 = outputSettings43.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode46 = outputSettings45.escapeMode;
        java.nio.charset.Charset charset47 = outputSettings45.charset();
        outputSettings45.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode50 = outputSettings45.escapeMode;
        outputSettings42.setescapeMode(escapeMode50);
        org.jsoup.nodes.Document.OutputSettings outputSettings53 = outputSettings42.prettyPrint(false);
        java.nio.charset.Charset charset54 = outputSettings53.getcharset();
        int int55 = outputSettings53.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings56.clone();
        boolean boolean60 = outputSettings56.getforceAllElementAsBlock();
        outputSettings56.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder63 = outputSettings56.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings56.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings65 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings67 = outputSettings65.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode68 = outputSettings67.escapeMode;
        outputSettings67.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings71 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings73 = outputSettings71.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode74 = outputSettings73.escapeMode;
        java.nio.charset.Charset charset75 = outputSettings73.charset();
        outputSettings67.setcharset(charset75);
        org.jsoup.nodes.Document.OutputSettings outputSettings77 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings77.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode80 = outputSettings79.escapeMode;
        java.nio.charset.Charset charset81 = outputSettings79.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode82 = outputSettings79.escapeMode;
        boolean boolean83 = outputSettings79.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings84 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings86 = outputSettings84.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode87 = outputSettings86.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings88 = outputSettings79.escapeMode(escapeMode87);
        org.jsoup.nodes.Document.OutputSettings outputSettings89 = outputSettings67.escapeMode(escapeMode87);
        org.jsoup.nodes.Document.OutputSettings outputSettings90 = outputSettings56.escapeMode(escapeMode87);
        outputSettings53.escapeMode = escapeMode87;
        outputSettings34.setescapeMode(escapeMode87);
        org.jsoup.nodes.Document.OutputSettings outputSettings93 = outputSettings34.clone();
        java.nio.charset.CharsetEncoder charsetEncoder94 = outputSettings93.encoder();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(outputSettings45);
        org.junit.Assert.assertTrue("'" + escapeMode46 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode46.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + escapeMode50 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode50.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings53);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(charsetEncoder63);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertNotNull(outputSettings67);
        org.junit.Assert.assertTrue("'" + escapeMode68 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode68.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings73);
        org.junit.Assert.assertTrue("'" + escapeMode74 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode74.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertTrue("'" + escapeMode80 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode80.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset81);
        org.junit.Assert.assertTrue("'" + escapeMode82 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode82.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(outputSettings86);
        org.junit.Assert.assertTrue("'" + escapeMode87 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode87.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings88);
        org.junit.Assert.assertNotNull(outputSettings89);
        org.junit.Assert.assertNotNull(outputSettings90);
        org.junit.Assert.assertNotNull(outputSettings93);
        org.junit.Assert.assertNotNull(charsetEncoder94);
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.util.List<org.jsoup.nodes.Node> nodeList14 = textNode2.childNodes();
        textNode2.settext("text");
        org.jsoup.nodes.Document document17 = textNode2.ownerDocument();
        org.jsoup.nodes.Attributes attributes18 = textNode2.attributes();
        java.lang.String str19 = textNode2.getTEXT_KEY();
        int int20 = textNode2.siblingIndex();
        java.lang.String str22 = textNode2.attr("hi!");
        java.lang.StringBuilder stringBuilder23 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = outputSettings25.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings25.clone();
        boolean boolean29 = outputSettings25.getforceAllElementAsBlock();
        outputSettings25.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder32 = outputSettings25.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder33 = outputSettings25.encoder();
        textNode2.outerHtmlTail(stringBuilder23, 97, outputSettings25);
        java.lang.String str35 = textNode2.text;
        org.jsoup.nodes.TextNode textNode37 = textNode2.text("text");
        java.lang.String str38 = textNode37.gettext();
        org.jsoup.nodes.Node node41 = textNode37.attr("hi!", "text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node42 = node41.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeList14);
        org.junit.Assert.assertNull(document17);
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "text" + "'", str19, "text");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(outputSettings27);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charsetEncoder32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "text" + "'", str35, "text");
        org.junit.Assert.assertNotNull(textNode37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "text" + "'", str38, "text");
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("#text", "#text");
        java.lang.String str3 = textNode2.text();
        java.lang.String str4 = textNode2.outerHtml();
        org.jsoup.nodes.TextNode textNode6 = textNode2.text("#text");
        java.lang.String str8 = textNode6.absUrl("#text");
        // The following exception was thrown during execution in test generation
        try {
            textNode6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#text" + "'", str3, "#text");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#text" + "'", str4, "#text");
        org.junit.Assert.assertNotNull(textNode6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings3.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode6 = outputSettings5.escapeMode;
        java.nio.charset.Charset charset7 = outputSettings5.charset();
        outputSettings5.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings5.escapeMode;
        outputSettings2.setescapeMode(escapeMode10);
        boolean boolean12 = outputSettings2.getprettyPrint();
        outputSettings2.indentAmount = 97;
        boolean boolean15 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings2.prettyPrint(true);
        boolean boolean18 = outputSettings17.prettyPrint();
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        boolean boolean20 = outputSettings17.getforceAllElementAsBlock();
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + escapeMode6 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode6.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("text", "text");
        java.lang.String str3 = textNode2.getWholeText();
        org.jsoup.nodes.Node node4 = textNode2.clone();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        textNode2.setBaseUri("#text");
        textNode2.ensureAttributes();
        java.lang.String str10 = textNode2.attr("i!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "text" + "'", str3, "text");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean1 = outputSettings0.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings4 = outputSettings2.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings4.escapeMode;
        java.nio.charset.Charset charset6 = outputSettings4.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.charset(charset6);
        boolean boolean8 = outputSettings7.getforceAllElementAsBlock();
        outputSettings7.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder11 = outputSettings7.charsetEncoder;
        java.nio.charset.CharsetEncoder charsetEncoder12 = outputSettings7.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        outputSettings15.prettyPrint = false;
        java.nio.charset.Charset charset18 = outputSettings15.getcharset();
        outputSettings7.setcharset(charset18);
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings7.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings7.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings24 = outputSettings22.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode25 = outputSettings24.escapeMode;
        java.nio.charset.Charset charset26 = outputSettings24.charset();
        outputSettings24.indentAmount = (byte) 1;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings24.prettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings31 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings31.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode34 = outputSettings33.escapeMode;
        java.nio.charset.Charset charset35 = outputSettings33.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode36 = outputSettings33.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = outputSettings24.escapeMode(escapeMode36);
        outputSettings7.escapeMode = escapeMode36;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings7.clone();
        outputSettings39.indentAmount = 35;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(outputSettings4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings24);
        org.junit.Assert.assertTrue("'" + escapeMode25 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode25.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertTrue("'" + escapeMode34 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode34.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + escapeMode36 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode36.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings37);
        org.junit.Assert.assertNotNull(outputSettings39);
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.setindentAmount((int) (short) 10);
        java.nio.charset.CharsetEncoder charsetEncoder8 = null;
        outputSettings5.charsetEncoder = charsetEncoder8;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        boolean boolean9 = outputSettings2.getprettyPrint();
        boolean boolean10 = outputSettings2.forceAllElementAsBlock();
        outputSettings2.forceAllElementAsBlock = false;
        org.jsoup.nodes.Entities.EscapeMode escapeMode13 = outputSettings2.escapeMode();
        boolean boolean14 = outputSettings2.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings2.prettyPrint(false);
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings17.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode20 = outputSettings19.escapeMode;
        java.nio.charset.Charset charset21 = outputSettings19.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings19.clone();
        boolean boolean23 = outputSettings22.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings22.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings22.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings25.escapeMode;
        outputSettings25.setprettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode29 = outputSettings25.getescapeMode();
        outputSettings16.escapeMode = escapeMode29;
        java.nio.charset.CharsetEncoder charsetEncoder31 = outputSettings16.charsetEncoder;
        boolean boolean32 = outputSettings16.forceAllElementAsBlock();
        outputSettings16.forceAllElementAsBlock = true;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + escapeMode13 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode13.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode20 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode20.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + escapeMode29 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode29.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        outputSettings11.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        outputSettings11.setcharset(charset19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings23.escapeMode;
        boolean boolean27 = outputSettings23.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings23.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings11.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings0.escapeMode(escapeMode31);
        boolean boolean35 = outputSettings34.getforceAllElementAsBlock();
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings34.escapeMode;
        outputSettings34.indentAmount = (short) 10;
        org.jsoup.nodes.Document.OutputSettings outputSettings40 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings40.indentAmount((int) 'a');
        java.nio.charset.CharsetEncoder charsetEncoder43 = outputSettings42.charsetEncoder;
        outputSettings34.setcharsetEncoder(charsetEncoder43);
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings34.escapeMode();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings49 = outputSettings46.clone();
        outputSettings46.forceAllElementAsBlock = false;
        java.nio.charset.CharsetEncoder charsetEncoder52 = outputSettings46.charsetEncoder;
        outputSettings46.setprettyPrint(true);
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode;
        java.nio.charset.Charset charset59 = outputSettings57.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings60 = outputSettings57.clone();
        boolean boolean61 = outputSettings60.getprettyPrint();
        org.jsoup.nodes.Entities.EscapeMode escapeMode62 = outputSettings60.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings63 = outputSettings60.clone();
        org.jsoup.nodes.Entities.EscapeMode escapeMode64 = outputSettings63.escapeMode;
        outputSettings46.setescapeMode(escapeMode64);
        org.jsoup.nodes.Document.OutputSettings outputSettings66 = outputSettings34.escapeMode(escapeMode64);
        int int67 = outputSettings66.getindentAmount();
        outputSettings66.forceAllElementAsBlock = true;
        boolean boolean70 = outputSettings66.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertNotNull(outputSettings49);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(outputSettings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + escapeMode62 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode62.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings63);
        org.junit.Assert.assertTrue("'" + escapeMode64 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode64.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        org.jsoup.nodes.TextNode textNode13 = textNode2.text("#text");
        boolean boolean15 = textNode13.hasAttr("");
        boolean boolean16 = textNode13.isBlank();
        java.lang.String str17 = textNode13.gettext();
        textNode13.text = "#text";
        boolean boolean20 = textNode13.isBlank();
        java.lang.String str22 = textNode13.attr("text");
        org.jsoup.nodes.Node node25 = textNode13.attr("#", "text");
        // The following exception was thrown during execution in test generation
        try {
            textNode13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(textNode13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "#text" + "'", str17, "#text");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#text" + "'", str22, "#text");
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        java.nio.charset.Charset charset3 = outputSettings0.getcharset();
        boolean boolean4 = outputSettings0.prettyPrint();
        boolean boolean5 = outputSettings0.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = outputSettings0.prettyPrint(false);
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings7.getcharsetEncoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings9.clone();
        java.nio.charset.CharsetEncoder charsetEncoder13 = outputSettings9.getcharsetEncoder();
        outputSettings7.charsetEncoder = charsetEncoder13;
        outputSettings7.setprettyPrint(false);
        outputSettings7.indentAmount = (short) 100;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(outputSettings7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(charsetEncoder13);
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings3 = outputSettings0.clone();
        boolean boolean4 = outputSettings0.getforceAllElementAsBlock();
        outputSettings0.prettyPrint = true;
        java.nio.charset.CharsetEncoder charsetEncoder7 = outputSettings0.getcharsetEncoder();
        java.nio.charset.CharsetEncoder charsetEncoder8 = outputSettings0.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode12 = outputSettings11.escapeMode;
        outputSettings11.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings17 = outputSettings15.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode18 = outputSettings17.escapeMode;
        java.nio.charset.Charset charset19 = outputSettings17.charset();
        outputSettings11.setcharset(charset19);
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode26 = outputSettings23.escapeMode;
        boolean boolean27 = outputSettings23.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings28.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings23.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings33 = outputSettings11.escapeMode(escapeMode31);
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = outputSettings0.escapeMode(escapeMode31);
        boolean boolean35 = outputSettings34.getforceAllElementAsBlock();
        boolean boolean36 = outputSettings34.forceAllElementAsBlock;
        org.jsoup.nodes.Document.OutputSettings outputSettings37 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings37.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode40 = outputSettings39.escapeMode;
        java.nio.charset.Charset charset41 = outputSettings39.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = outputSettings39.clone();
        boolean boolean43 = outputSettings42.getprettyPrint();
        java.nio.charset.CharsetEncoder charsetEncoder44 = outputSettings42.getcharsetEncoder();
        outputSettings34.setcharsetEncoder(charsetEncoder44);
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = outputSettings46.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode49 = outputSettings48.escapeMode;
        outputSettings48.setindentAmount((int) '4');
        org.jsoup.nodes.Document.OutputSettings outputSettings52 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings54 = outputSettings52.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode55 = outputSettings54.escapeMode;
        java.nio.charset.Charset charset56 = outputSettings54.charset();
        outputSettings48.setcharset(charset56);
        outputSettings34.setcharset(charset56);
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings59.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings62 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings64 = outputSettings62.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode65 = outputSettings64.escapeMode;
        java.nio.charset.Charset charset66 = outputSettings64.charset();
        outputSettings64.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode69 = outputSettings64.escapeMode;
        outputSettings61.setescapeMode(escapeMode69);
        org.jsoup.nodes.Document.OutputSettings outputSettings72 = outputSettings61.prettyPrint(false);
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings61.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings74 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings76 = outputSettings74.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode77 = outputSettings76.escapeMode;
        java.nio.charset.Charset charset78 = outputSettings76.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings79 = outputSettings76.clone();
        outputSettings76.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode82 = outputSettings76.escapeMode;
        boolean boolean83 = outputSettings76.forceAllElementAsBlock();
        org.jsoup.nodes.Entities.EscapeMode escapeMode84 = outputSettings76.escapeMode();
        outputSettings61.escapeMode = escapeMode84;
        outputSettings34.escapeMode = escapeMode84;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertNotNull(outputSettings3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode12 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode12.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings17);
        org.junit.Assert.assertTrue("'" + escapeMode18 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode18.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode26 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode26.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertNotNull(outputSettings33);
        org.junit.Assert.assertNotNull(outputSettings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertTrue("'" + escapeMode40 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode40.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(outputSettings42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(charsetEncoder44);
        org.junit.Assert.assertNotNull(outputSettings48);
        org.junit.Assert.assertTrue("'" + escapeMode49 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode49.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings54);
        org.junit.Assert.assertTrue("'" + escapeMode55 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode55.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertNotNull(outputSettings64);
        org.junit.Assert.assertTrue("'" + escapeMode65 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode65.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + escapeMode69 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode69.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings72);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings76);
        org.junit.Assert.assertTrue("'" + escapeMode77 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode77.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(outputSettings79);
        org.junit.Assert.assertTrue("'" + escapeMode82 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode82.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + escapeMode84 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode84.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        textNode2.text = "#text";
        java.lang.String str14 = textNode2.outerHtml();
        java.lang.String str15 = textNode2.gettext();
        java.lang.StringBuilder stringBuilder16 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings18.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings21 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings23 = outputSettings21.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode24 = outputSettings23.escapeMode;
        java.nio.charset.Charset charset25 = outputSettings23.charset();
        outputSettings23.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings23.escapeMode;
        outputSettings20.setescapeMode(escapeMode28);
        boolean boolean30 = outputSettings20.getprettyPrint();
        outputSettings20.setprettyPrint(false);
        outputSettings20.setprettyPrint(true);
        outputSettings20.setindentAmount((int) '4');
        java.nio.charset.CharsetEncoder charsetEncoder37 = outputSettings20.charsetEncoder;
        textNode2.outerHtmlTail(stringBuilder16, (-1), outputSettings20);
        org.jsoup.nodes.Document document39 = textNode2.ownerDocument();
        org.jsoup.nodes.Node node41 = textNode2.removeAttr("text");
        org.jsoup.nodes.TextNode textNode44 = org.jsoup.nodes.TextNode.createFromEncoded("hi!", "hi!");
        org.jsoup.nodes.Node node45 = textNode44.clone();
        // The following exception was thrown during execution in test generation
        try {
            node41.replaceWith((org.jsoup.nodes.Node) textNode44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "#text" + "'", str14, "#text");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#text" + "'", str15, "#text");
        org.junit.Assert.assertNotNull(outputSettings20);
        org.junit.Assert.assertNotNull(outputSettings23);
        org.junit.Assert.assertTrue("'" + escapeMode24 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode24.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertNull(document39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(textNode44);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        java.lang.String str9 = textNode2.text();
        org.jsoup.nodes.Node node10 = textNode2.previousSibling();
        int int11 = textNode2.siblingIndex();
        java.lang.StringBuilder stringBuilder12 = null;
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings16 = outputSettings14.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode17 = outputSettings16.escapeMode;
        java.nio.charset.Charset charset18 = outputSettings16.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings19 = outputSettings16.clone();
        outputSettings16.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode22 = outputSettings16.escapeMode;
        int int23 = outputSettings16.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings25 = outputSettings16.prettyPrint(false);
        java.nio.charset.Charset charset26 = outputSettings16.charset();
        boolean boolean27 = outputSettings16.prettyPrint;
        org.jsoup.nodes.Entities.EscapeMode escapeMode28 = outputSettings16.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = outputSettings16.indentAmount((int) (short) 0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode31 = outputSettings30.escapeMode();
        boolean boolean32 = outputSettings30.forceAllElementAsBlock();
        textNode2.outerHtmlTail(stringBuilder12, 52, outputSettings30);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node34 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(outputSettings16);
        org.junit.Assert.assertTrue("'" + escapeMode17 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode17.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings19);
        org.junit.Assert.assertTrue("'" + escapeMode22 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode22.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(outputSettings25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + escapeMode28 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode28.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings30);
        org.junit.Assert.assertTrue("'" + escapeMode31 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode31.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        boolean boolean7 = outputSettings2.forceAllElementAsBlock;
        boolean boolean8 = outputSettings2.getforceAllElementAsBlock();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings9.indentAmount((int) 'a');
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings14 = outputSettings12.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode15 = outputSettings14.escapeMode;
        java.nio.charset.Charset charset16 = outputSettings14.charset();
        outputSettings14.setindentAmount(0);
        org.jsoup.nodes.Entities.EscapeMode escapeMode19 = outputSettings14.escapeMode;
        outputSettings11.setescapeMode(escapeMode19);
        org.jsoup.nodes.Document.OutputSettings outputSettings22 = outputSettings11.prettyPrint(false);
        outputSettings11.setindentAmount((int) (short) -1);
        java.nio.charset.CharsetEncoder charsetEncoder25 = outputSettings11.encoder();
        outputSettings2.setcharsetEncoder(charsetEncoder25);
        org.jsoup.nodes.Document.OutputSettings outputSettings27 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings29 = outputSettings27.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode30 = outputSettings29.escapeMode;
        java.nio.charset.Charset charset31 = outputSettings29.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode32 = outputSettings29.escapeMode;
        int int33 = outputSettings29.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings34 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings36 = outputSettings34.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode37 = outputSettings36.escapeMode;
        java.nio.charset.Charset charset38 = outputSettings36.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = outputSettings36.clone();
        outputSettings39.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings42 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings44 = outputSettings42.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode45 = outputSettings44.escapeMode;
        java.nio.charset.Charset charset46 = outputSettings44.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode47 = outputSettings44.escapeMode;
        int int48 = outputSettings44.indentAmount;
        java.nio.charset.CharsetEncoder charsetEncoder49 = outputSettings44.encoder();
        outputSettings39.charsetEncoder = charsetEncoder49;
        java.nio.charset.CharsetEncoder charsetEncoder51 = outputSettings39.getcharsetEncoder();
        org.jsoup.nodes.Entities.EscapeMode escapeMode52 = outputSettings39.escapeMode();
        outputSettings29.setescapeMode(escapeMode52);
        java.nio.charset.Charset charset54 = outputSettings29.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = outputSettings29.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings56 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings58 = outputSettings56.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode59 = outputSettings58.escapeMode;
        java.nio.charset.Charset charset60 = outputSettings58.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings61 = outputSettings58.clone();
        boolean boolean62 = outputSettings61.getprettyPrint();
        boolean boolean63 = outputSettings61.prettyPrint;
        boolean boolean64 = outputSettings61.prettyPrint;
        java.nio.charset.Charset charset65 = outputSettings61.getcharset();
        outputSettings55.charset = charset65;
        outputSettings2.setcharset(charset65);
        outputSettings2.indentAmount = (byte) 100;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertNotNull(outputSettings14);
        org.junit.Assert.assertTrue("'" + escapeMode15 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode15.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + escapeMode19 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode19.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings22);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(outputSettings29);
        org.junit.Assert.assertTrue("'" + escapeMode30 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode30.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + escapeMode32 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode32.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertNotNull(outputSettings36);
        org.junit.Assert.assertTrue("'" + escapeMode37 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode37.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(outputSettings39);
        org.junit.Assert.assertNotNull(outputSettings44);
        org.junit.Assert.assertTrue("'" + escapeMode45 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode45.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + escapeMode47 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode47.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder49);
        org.junit.Assert.assertNotNull(charsetEncoder51);
        org.junit.Assert.assertTrue("'" + escapeMode52 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode52.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(outputSettings55);
        org.junit.Assert.assertNotNull(outputSettings58);
        org.junit.Assert.assertTrue("'" + escapeMode59 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode59.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(outputSettings61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(charset65);
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        boolean boolean11 = textNode2.isBlank();
        boolean boolean12 = textNode2.isBlank();
        org.jsoup.nodes.Node node15 = textNode2.attr("h", "h");
        org.jsoup.nodes.Node node16 = textNode2.parent();
        // The following exception was thrown during execution in test generation
        try {
            textNode2.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings7 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings7.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode10 = outputSettings9.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings2.escapeMode(escapeMode10);
        outputSettings2.forceAllElementAsBlock = false;
        boolean boolean14 = outputSettings2.forceAllElementAsBlock();
        java.nio.charset.CharsetEncoder charsetEncoder15 = outputSettings2.charsetEncoder;
        int int16 = outputSettings2.indentAmount();
        outputSettings2.setforceAllElementAsBlock(true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertTrue("'" + escapeMode10 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode10.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        textNode2.ensureAttributes();
        textNode2.text = "#text";
        org.jsoup.nodes.Node node10 = textNode2.attr("hi!", "#");
        org.jsoup.nodes.Document document11 = textNode2.ownerDocument();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(document11);
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.gettext();
        java.lang.String str9 = textNode2.attr("");
        textNode2.settext("");
        java.lang.String str12 = textNode2.getWholeText();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode2.siblingNodes();
        org.jsoup.nodes.Node node14 = textNode2.nextSibling();
        java.lang.String str16 = textNode2.attr("");
        org.jsoup.nodes.TextNode textNode18 = textNode2.text("#text");
        org.jsoup.nodes.Node node19 = textNode2.previousSibling();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(textNode18);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings5.indentAmount = 0;
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings10 = outputSettings8.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode11 = outputSettings10.escapeMode;
        java.nio.charset.Charset charset12 = outputSettings10.charset;
        outputSettings5.setcharset(charset12);
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings5.forceAllElementAsBlock(false);
        outputSettings5.prettyPrint = false;
        java.nio.charset.Charset charset18 = outputSettings5.charset;
        org.jsoup.nodes.Document.OutputSettings outputSettings20 = outputSettings5.prettyPrint(true);
        outputSettings20.setforceAllElementAsBlock(true);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertNotNull(outputSettings10);
        org.junit.Assert.assertTrue("'" + escapeMode11 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode11.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(outputSettings20);
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        org.jsoup.nodes.TextNode textNode0 = new org.jsoup.nodes.TextNode();
        textNode0.setBaseUri("#text");
        java.util.List<org.jsoup.nodes.Node> nodeList3 = textNode0.childNodes();
        java.lang.String str4 = textNode0.text;
        java.lang.String str5 = textNode0.nodeName();
        java.lang.String str6 = textNode0.getTEXT_KEY();
        org.junit.Assert.assertNotNull(nodeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#text" + "'", str5, "#text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "text" + "'", str6, "text");
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings5 = outputSettings2.clone();
        outputSettings2.forceAllElementAsBlock = true;
        int int8 = outputSettings2.indentAmount();
        outputSettings2.prettyPrint = true;
        boolean boolean11 = outputSettings2.getprettyPrint();
        org.jsoup.nodes.Document.OutputSettings outputSettings12 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings13 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings15 = outputSettings13.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode16 = outputSettings15.escapeMode;
        java.nio.charset.Charset charset17 = outputSettings15.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings15.clone();
        outputSettings18.setindentAmount((int) (short) 10);
        outputSettings18.setindentAmount(97);
        outputSettings18.setprettyPrint(true);
        boolean boolean25 = outputSettings18.prettyPrint();
        int int26 = outputSettings18.getindentAmount();
        org.jsoup.nodes.Document.OutputSettings outputSettings28 = outputSettings18.forceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder29 = outputSettings28.encoder();
        org.jsoup.nodes.Document.OutputSettings outputSettings30 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings32 = outputSettings30.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode33 = outputSettings32.escapeMode;
        java.nio.charset.Charset charset34 = outputSettings32.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings35 = outputSettings32.clone();
        outputSettings32.forceAllElementAsBlock = true;
        org.jsoup.nodes.Entities.EscapeMode escapeMode38 = outputSettings32.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings39 = new org.jsoup.nodes.Document.OutputSettings();
        boolean boolean40 = outputSettings39.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings41 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings43 = outputSettings41.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode44 = outputSettings43.escapeMode;
        java.nio.charset.Charset charset45 = outputSettings43.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings46 = outputSettings39.charset(charset45);
        outputSettings32.charset = charset45;
        org.jsoup.nodes.Document.OutputSettings outputSettings48 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings50 = outputSettings48.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode51 = outputSettings50.escapeMode;
        java.nio.charset.Charset charset52 = outputSettings50.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode53 = outputSettings50.escapeMode;
        boolean boolean54 = outputSettings50.prettyPrint;
        org.jsoup.nodes.Document.OutputSettings outputSettings55 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings57 = outputSettings55.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode58 = outputSettings57.escapeMode;
        org.jsoup.nodes.Document.OutputSettings outputSettings59 = outputSettings50.escapeMode(escapeMode58);
        outputSettings50.forceAllElementAsBlock = false;
        outputSettings50.setforceAllElementAsBlock(true);
        java.nio.charset.CharsetEncoder charsetEncoder64 = outputSettings50.encoder();
        outputSettings32.setcharsetEncoder(charsetEncoder64);
        boolean boolean66 = outputSettings32.forceAllElementAsBlock;
        int int67 = outputSettings32.indentAmount();
        outputSettings32.setindentAmount((int) (short) 10);
        java.nio.charset.CharsetEncoder charsetEncoder70 = outputSettings32.charsetEncoder;
        outputSettings28.charsetEncoder = charsetEncoder70;
        int int72 = outputSettings28.indentAmount();
        org.jsoup.nodes.Entities.EscapeMode escapeMode73 = outputSettings28.escapeMode;
        outputSettings12.escapeMode = escapeMode73;
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputSettings5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(outputSettings12);
        org.junit.Assert.assertNotNull(outputSettings15);
        org.junit.Assert.assertTrue("'" + escapeMode16 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode16.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertNotNull(outputSettings28);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNotNull(outputSettings32);
        org.junit.Assert.assertTrue("'" + escapeMode33 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode33.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(outputSettings35);
        org.junit.Assert.assertTrue("'" + escapeMode38 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode38.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(outputSettings43);
        org.junit.Assert.assertTrue("'" + escapeMode44 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode44.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(outputSettings46);
        org.junit.Assert.assertNotNull(outputSettings50);
        org.junit.Assert.assertTrue("'" + escapeMode51 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode51.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertTrue("'" + escapeMode53 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode53.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(outputSettings57);
        org.junit.Assert.assertTrue("'" + escapeMode58 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode58.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(outputSettings59);
        org.junit.Assert.assertNotNull(charsetEncoder64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(charsetEncoder70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 97 + "'", int72 == 97);
        org.junit.Assert.assertTrue("'" + escapeMode73 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode73.equals(org.jsoup.nodes.Entities.EscapeMode.base));
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.nodeName();
        boolean boolean8 = textNode2.equals((java.lang.Object) (short) 1);
        textNode2.setBaseUri("#text");
        org.jsoup.nodes.Node node11 = textNode2.previousSibling();
        int int12 = textNode2.siblingIndex();
        java.util.List<org.jsoup.nodes.Node> nodeList13 = textNode2.siblingNodes();
        textNode2.ensureAttributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#text" + "'", str6, "#text");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeList13);
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("", "hi!");
        java.lang.String str3 = textNode2.text;
        java.lang.String str4 = textNode2.outerHtml();
        java.lang.String str5 = textNode2.getTEXT_KEY();
        java.lang.String str6 = textNode2.text;
        java.lang.String str7 = textNode2.gettext();
        java.lang.String str9 = textNode2.attr("#text");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node10 = textNode2.unwrap();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Object must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "text" + "'", str5, "text");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("#text", "text");
        org.jsoup.nodes.Node node4 = textNode2.removeAttr("text");
        org.jsoup.nodes.Node node5 = node4.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings6 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings8 = outputSettings6.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode9 = outputSettings8.escapeMode;
        java.nio.charset.Charset charset10 = outputSettings8.charset();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings8.clone();
        outputSettings11.indentAmount = 0;
        org.jsoup.nodes.Entities.EscapeMode escapeMode14 = outputSettings11.getescapeMode();
        boolean boolean15 = node4.equals((java.lang.Object) outputSettings11);
        int int16 = outputSettings11.indentAmount;
        org.jsoup.nodes.Document.OutputSettings outputSettings18 = outputSettings11.forceAllElementAsBlock(true);
        boolean boolean19 = outputSettings11.forceAllElementAsBlock;
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(outputSettings8);
        org.junit.Assert.assertTrue("'" + escapeMode9 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode9.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(outputSettings11);
        org.junit.Assert.assertTrue("'" + escapeMode14 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode14.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(outputSettings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        org.jsoup.nodes.Document.OutputSettings outputSettings0 = new org.jsoup.nodes.Document.OutputSettings();
        org.jsoup.nodes.Document.OutputSettings outputSettings2 = outputSettings0.indentAmount((int) 'a');
        org.jsoup.nodes.Entities.EscapeMode escapeMode3 = outputSettings2.escapeMode;
        java.nio.charset.Charset charset4 = outputSettings2.charset();
        org.jsoup.nodes.Entities.EscapeMode escapeMode5 = outputSettings2.escapeMode;
        boolean boolean6 = outputSettings2.prettyPrint;
        outputSettings2.forceAllElementAsBlock = false;
        org.jsoup.nodes.Document.OutputSettings outputSettings9 = outputSettings2.clone();
        org.jsoup.nodes.Document.OutputSettings outputSettings11 = outputSettings2.forceAllElementAsBlock(false);
        org.junit.Assert.assertNotNull(outputSettings2);
        org.junit.Assert.assertTrue("'" + escapeMode3 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode3.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + escapeMode5 + "' != '" + org.jsoup.nodes.Entities.EscapeMode.base + "'", escapeMode5.equals(org.jsoup.nodes.Entities.EscapeMode.base));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputSettings9);
        org.junit.Assert.assertNotNull(outputSettings11);
    }
}

